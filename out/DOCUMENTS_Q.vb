Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Service Calls")>  _
    Public Class QUERY_DOCUMENTS_Q
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_Q)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_Q)
            _Parent = nothing
            _Name = "DOCUMENTS_Q"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Details of Malfunction")
            .add(1, "Service Report-Parts")
            .add(2, "Service Report-Labor")
            .add(3, "Description of Repair")
            .add(4, "Tasks for Document")
            .add(5, "Customer Contacts")
            .add(6, "Attachments")
            .add(7, "Library")
            .add(8, "Projects/Accounts")
            .add(9, "Attachments for Project Activs.")
            .add(10, "FAQ")
            .add(11, "Calendar (All Users)")
            .add(12, "Customer Credit")
            .add(13, "Follow-up Calls")
            .add(14, "To Do Item")
            .add(15, "History of Statuses")
            .add(16, "Shipping Address")
            .add(17, "Serv. Call-Electronic Signature")
            .add(18, "Customer Details")
            .add(19, "Purchase Orders for the Call")
            .add(20, "PRs for Service Call")
            .add(21, "Reports by Field Technician")
            .add(22, "Load From Mobile Device")
            .add(23, "Last Load From Mobile Device")
            .add(24, "Internal Dialogue")
            .add(25, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_Q)
            _Parent = Parent
            _name = "DOCUMENTS_Q_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Details of Malfunction")
            .add(1, "Service Report-Parts")
            .add(2, "Service Report-Labor")
            .add(3, "Description of Repair")
            .add(4, "Tasks for Document")
            .add(5, "Customer Contacts")
            .add(6, "Attachments")
            .add(7, "Library")
            .add(8, "Projects/Accounts")
            .add(9, "Attachments for Project Activs.")
            .add(10, "FAQ")
            .add(11, "Calendar (All Users)")
            .add(12, "Customer Credit")
            .add(13, "Follow-up Calls")
            .add(14, "To Do Item")
            .add(15, "History of Statuses")
            .add(16, "Shipping Address")
            .add(17, "Serv. Call-Electronic Signature")
            .add(18, "Customer Details")
            .add(19, "Purchase Orders for the Call")
            .add(20, "PRs for Service Call")
            .add(21, "Reports by Field Technician")
            .add(22, "Load From Mobile Device")
            .add(23, "Last Load From Mobile Device")
            .add(24, "Internal Dialogue")
            .add(25, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_Q)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_Q)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_Q As DOCUMENTS_Q In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_Q)(stream.ReadToEnd).Value
              With _DOCUMENTS_Q
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_Q)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q = JsonConvert.DeserializeObject(Of DOCUMENTS_Q)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_Q)
                  .CUSTNAME = obj.CUSTNAME
                  .CDES = obj.CDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .STARTDATE = obj.STARTDATE
                  .DOCNO = obj.DOCNO
                  .BOOKNUM = obj.BOOKNUM
                  .PDOCNO = obj.PDOCNO
                  .AIRWAYBILL = obj.AIRWAYBILL
                  .SERNUM = obj.SERNUM
                  .WARDATEFINAL = obj.WARDATEFINAL
                  .CONTNUM = obj.CONTNUM
                  .CONTSTATDES = obj.CONTSTATDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .PROJDOCNO = obj.PROJDOCNO
                  .PROJDES = obj.PROJDES
                  .CALLSTATUSCODE = obj.CALLSTATUSCODE
                  .STATUSDATE = obj.STATUSDATE
                  .ACTIVEFLAG = obj.ACTIVEFLAG
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .RMADOCNO = obj.RMADOCNO
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .SERVTCODE = obj.SERVTCODE
                  .SERVTDES = obj.SERVTDES
                  .MAINTDES = obj.MAINTDES
                  .CALLTYPECODE = obj.CALLTYPECODE
                  .SYMCODE = obj.SYMCODE
                  .SYMDES = obj.SYMDES
                  .MALFCODE = obj.MALFCODE
                  .MALFDES = obj.MALFDES
                  .SOLUTIONCODE = obj.SOLUTIONCODE
                  .SOLUTIONDES = obj.SOLUTIONDES
                  .REPEATCALL = obj.REPEATCALL
                  .SUSERLOGIN = obj.SUSERLOGIN
                  .METERREADING = obj.METERREADING
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CUSTSTARTDATE = obj.CUSTSTARTDATE
                  .AUTHORIZERNAME = obj.AUTHORIZERNAME
                  .ASTARTDATE = obj.ASTARTDATE
                  .AENDDATE = obj.AENDDATE
                  .RESPONSETIME = obj.RESPONSETIME
                  .ARESPONSETIME = obj.ARESPONSETIME
                  .BREAKTIME = obj.BREAKTIME
                  .CUSTBREAKTIME = obj.CUSTBREAKTIME
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .PROFPRICE = obj.PROFPRICE
                  .CODE2 = obj.CODE2
                  .MAXREPAIRPRICE = obj.MAXREPAIRPRICE
                  .REPAIRCODE = obj.REPAIRCODE
                  .TAXCODE = obj.TAXCODE
                  .PLNAME = obj.PLNAME
                  .PDATE = obj.PDATE
                  .DAY = obj.DAY
                  .PTIME = obj.PTIME
                  .EDATE = obj.EDATE
                  .EDAY = obj.EDAY
                  .ETIME = obj.ETIME
                  .PRIORITY = obj.PRIORITY
                  .TECHNICIANLOGIN = obj.TECHNICIANLOGIN
                  .TECHNICIANLOGIN2 = obj.TECHNICIANLOGIN2
                  .TECHNICIANLOGIN3 = obj.TECHNICIANLOGIN3
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .ZONECODE = obj.ZONECODE
                  .ZONEDES = obj.ZONEDES
                  .TRACK = obj.TRACK
                  .LOCATION = obj.LOCATION
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .DETAILS = obj.DETAILS
                  .KM = obj.KM
                  .FLAG = obj.FLAG
                  .IVALL = obj.IVALL
                  .EXTFILEFLAGB = obj.EXTFILEFLAGB
                  .BREAKSTART = obj.BREAKSTART
                  .BREAKEND = obj.BREAKEND
                  .PARTSCOST = obj.PARTSCOST
                  .WORKCOST = obj.WORKCOST
                  .INCUSENUM = obj.INCUSENUM
                  .SYSTEMCODE = obj.SYSTEMCODE
                  .SYSTEMDES = obj.SYSTEMDES
                  .FACILITYNAME = obj.FACILITYNAME
                  .FACILITYDES = obj.FACILITYDES
                  .SITENAME = obj.SITENAME
                  .SITEDES = obj.SITEDES
                  .GPSX = obj.GPSX
                  .GPSY = obj.GPSY
                  .FOLLOWUPIV = obj.FOLLOWUPIV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_Q(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_Q as DOCUMENTS_Q in value
              If _DOCUMENTS_Q.Equals(trycast(obj,DOCUMENTS_Q)) Then
                  value.remove(_DOCUMENTS_Q)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_Q
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetSTARTDATE As Boolean = Boolean.FalseString
        
        Private _STARTDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _IsSetPDOCNO As Boolean = Boolean.FalseString
        
        Private _PDOCNO As String
        
        Private _AIRWAYBILL As String
        
        Private _IsSetSERNUM As Boolean = Boolean.FalseString
        
        Private _SERNUM As String
        
        Private _WARDATEFINAL As System.DateTimeOffset
        
        Private _IsSetCONTNUM As Boolean = Boolean.FalseString
        
        Private _CONTNUM As String
        
        Private _CONTSTATDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _IsSetPROJDOCNO As Boolean = Boolean.FalseString
        
        Private _PROJDOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetCALLSTATUSCODE As Boolean = Boolean.FalseString
        
        Private _CALLSTATUSCODE As String
        
        Private _STATUSDATE As System.DateTimeOffset
        
        Private _ACTIVEFLAG As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _IsSetRMADOCNO As Boolean = Boolean.FalseString
        
        Private _RMADOCNO As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetSERVTCODE As Boolean = Boolean.FalseString
        
        Private _SERVTCODE As String
        
        Private _SERVTDES As String
        
        Private _IsSetMAINTDES As Boolean = Boolean.FalseString
        
        Private _MAINTDES As String
        
        Private _IsSetCALLTYPECODE As Boolean = Boolean.FalseString
        
        Private _CALLTYPECODE As String
        
        Private _IsSetSYMCODE As Boolean = Boolean.FalseString
        
        Private _SYMCODE As String
        
        Private _SYMDES As String
        
        Private _IsSetMALFCODE As Boolean = Boolean.FalseString
        
        Private _MALFCODE As String
        
        Private _MALFDES As String
        
        Private _IsSetSOLUTIONCODE As Boolean = Boolean.FalseString
        
        Private _SOLUTIONCODE As String
        
        Private _SOLUTIONDES As String
        
        Private _IsSetREPEATCALL As Boolean = Boolean.FalseString
        
        Private _REPEATCALL As String
        
        Private _SUSERLOGIN As String
        
        Private _IsSetMETERREADING As Boolean = Boolean.FalseString
        
        Private _METERREADING As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _IsSetCUSTSTARTDATE As Boolean = Boolean.FalseString
        
        Private _CUSTSTARTDATE As System.DateTimeOffset
        
        Private _IsSetAUTHORIZERNAME As Boolean = Boolean.FalseString
        
        Private _AUTHORIZERNAME As String
        
        Private _IsSetASTARTDATE As Boolean = Boolean.FalseString
        
        Private _ASTARTDATE As System.DateTimeOffset
        
        Private _IsSetAENDDATE As Boolean = Boolean.FalseString
        
        Private _AENDDATE As System.DateTimeOffset
        
        Private _IsSetRESPONSETIME As Boolean = Boolean.FalseString
        
        Private _RESPONSETIME As String
        
        Private _ARESPONSETIME As String
        
        Private _IsSetBREAKTIME As Boolean = Boolean.FalseString
        
        Private _BREAKTIME As Decimal
        
        Private _IsSetCUSTBREAKTIME As Boolean = Boolean.FalseString
        
        Private _CUSTBREAKTIME As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _PROFPRICE As Decimal
        
        Private _CODE2 As String
        
        Private _IsSetMAXREPAIRPRICE As Boolean = Boolean.FalseString
        
        Private _MAXREPAIRPRICE As Decimal
        
        Private _IsSetREPAIRCODE As Boolean = Boolean.FalseString
        
        Private _REPAIRCODE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetPLNAME As Boolean = Boolean.FalseString
        
        Private _PLNAME As String
        
        Private _IsSetPDATE As Boolean = Boolean.FalseString
        
        Private _PDATE As System.DateTimeOffset
        
        Private _DAY As String
        
        Private _IsSetPTIME As Boolean = Boolean.FalseString
        
        Private _PTIME As String
        
        Private _IsSetEDATE As Boolean = Boolean.FalseString
        
        Private _EDATE As System.DateTimeOffset
        
        Private _EDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPRIORITY As Boolean = Boolean.FalseString
        
        Private _PRIORITY As Long
        
        Private _IsSetTECHNICIANLOGIN As Boolean = Boolean.FalseString
        
        Private _TECHNICIANLOGIN As String
        
        Private _IsSetTECHNICIANLOGIN2 As Boolean = Boolean.FalseString
        
        Private _TECHNICIANLOGIN2 As String
        
        Private _IsSetTECHNICIANLOGIN3 As Boolean = Boolean.FalseString
        
        Private _TECHNICIANLOGIN3 As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _ZONECODE As String
        
        Private _ZONEDES As String
        
        Private _TRACK As String
        
        Private _LOCATION As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _KM As Long
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IVALL As String
        
        Private _EXTFILEFLAGB As String
        
        Private _IsSetBREAKSTART As Boolean = Boolean.FalseString
        
        Private _BREAKSTART As System.DateTimeOffset
        
        Private _IsSetBREAKEND As Boolean = Boolean.FalseString
        
        Private _BREAKEND As System.DateTimeOffset
        
        Private _PARTSCOST As Decimal
        
        Private _WORKCOST As Decimal
        
        Private _INCUSENUM As String
        
        Private _SYSTEMCODE As String
        
        Private _SYSTEMDES As String
        
        Private _FACILITYNAME As String
        
        Private _FACILITYDES As String
        
        Private _SITENAME As String
        
        Private _SITEDES As String
        
        Private _IsSetGPSX As Boolean = Boolean.FalseString
        
        Private _GPSX As String
        
        Private _IsSetGPSY As Boolean = Boolean.FalseString
        
        Private _GPSY As String
        
        Private _IsSetFOLLOWUPIV As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPIV As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _DOCTEXT_Q_2_SUBFORM As QUERY_DOCTEXT_Q_2
        
        Private _TRANSORDER_Q_SUBFORM As QUERY_TRANSORDER_Q
        
        Private _TRANSORDER_QW_SUBFORM As QUERY_TRANSORDER_QW
        
        Private _DOCTEXT_Q_SUBFORM As QUERY_DOCTEXT_Q
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _CUSTPERSONNEL_SUBFORM As QUERY_CUSTPERSONNEL
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _LIBRARY_SUBFORM As QUERY_LIBRARY
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _PROJACTEXTFILES_SUBFORM As QUERY_PROJACTEXTFILES
        
        Private _FAQ2_SUBFORM As QUERY_FAQ2
        
        Private _FUTUREGENDIARY_SUBFORM As QUERY_FUTUREGENDIARY
        
        Private _CUSTOBLIGO_SUBFORM As QUERY_CUSTOBLIGO
        
        Private _DOCUMENTS_Q_B_SUBFORM As QUERY_DOCUMENTS_Q_B
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _SHIPTO2_SUBFORM As QUERY_SHIPTO2
        
        Private _DOCUMENTS_Q_A_SUBFORM As QUERY_DOCUMENTS_Q_A
        
        Private _DOCUMENTS_DCONT_SUBFORM As QUERY_DOCUMENTS_DCONT
        
        Private _DOCQPORDERS_SUBFORM As QUERY_DOCQPORDERS
        
        Private _DOCQPURDEMANDS_SUBFORM As QUERY_DOCQPURDEMANDS
        
        Private _FSMTECHDETAILS_SUBFORM As QUERY_FSMTECHDETAILS
        
        Private _ADCFSMITEMS_SUBFORM As QUERY_ADCFSMITEMS
        
        Private _LASTADCFSMITEMS_SUBFORM As QUERY_LASTADCFSMITEMS
        
        Private _INTERNALDIALOGTEXT_SUBFORM As QUERY_INTERNALDIALOGTEXT
        
        Private _DOCQ_CHANGES_LOG_SUBFORM As QUERY_DOCQ_CHANGES_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Details of Malfunction"))
            ChildQuery.add(1, new oNavigation("Service Report-Parts"))
            ChildQuery.add(2, new oNavigation("Service Report-Labor"))
            ChildQuery.add(3, new oNavigation("Description of Repair"))
            ChildQuery.add(4, new oNavigation("Tasks for Document"))
            ChildQuery.add(5, new oNavigation("Customer Contacts"))
            ChildQuery.add(6, new oNavigation("Attachments"))
            ChildQuery.add(7, new oNavigation("Library"))
            ChildQuery.add(8, new oNavigation("Projects/Accounts"))
            ChildQuery.add(9, new oNavigation("Attachments for Project Activs."))
            ChildQuery.add(10, new oNavigation("FAQ"))
            ChildQuery.add(11, new oNavigation("Calendar (All Users)"))
            ChildQuery.add(12, new oNavigation("Customer Credit"))
            ChildQuery.add(13, new oNavigation("Follow-up Calls"))
            ChildQuery.add(14, new oNavigation("To Do Item"))
            ChildQuery.add(15, new oNavigation("History of Statuses"))
            ChildQuery.add(16, new oNavigation("Shipping Address"))
            ChildQuery.add(17, new oNavigation("Serv. Call-Electronic Signature"))
            ChildQuery.add(18, new oNavigation("Customer Details"))
            ChildQuery.add(19, new oNavigation("Purchase Orders for the Call"))
            ChildQuery.add(20, new oNavigation("PRs for Service Call"))
            ChildQuery.add(21, new oNavigation("Reports by Field Technician"))
            ChildQuery.add(22, new oNavigation("Load From Mobile Device"))
            ChildQuery.add(23, new oNavigation("Last Load From Mobile Device"))
            ChildQuery.add(24, new oNavigation("Internal Dialogue"))
            ChildQuery.add(25, new oNavigation("History of Changes"))
            _DOCTEXT_Q_2_SUBFORM = new QUERY_DOCTEXT_Q_2(me)
            _TRANSORDER_Q_SUBFORM = new QUERY_TRANSORDER_Q(me)
            _TRANSORDER_QW_SUBFORM = new QUERY_TRANSORDER_QW(me)
            _DOCTEXT_Q_SUBFORM = new QUERY_DOCTEXT_Q(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _CUSTPERSONNEL_SUBFORM = new QUERY_CUSTPERSONNEL(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _LIBRARY_SUBFORM = new QUERY_LIBRARY(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PROJACTEXTFILES_SUBFORM = new QUERY_PROJACTEXTFILES(me)
            _FAQ2_SUBFORM = new QUERY_FAQ2(me)
            _FUTUREGENDIARY_SUBFORM = new QUERY_FUTUREGENDIARY(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _DOCUMENTS_Q_B_SUBFORM = new QUERY_DOCUMENTS_Q_B(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _DOCUMENTS_Q_A_SUBFORM = new QUERY_DOCUMENTS_Q_A(me)
            _DOCUMENTS_DCONT_SUBFORM = new QUERY_DOCUMENTS_DCONT(me)
            _DOCQPORDERS_SUBFORM = new QUERY_DOCQPORDERS(me)
            _DOCQPURDEMANDS_SUBFORM = new QUERY_DOCQPURDEMANDS(me)
            _FSMTECHDETAILS_SUBFORM = new QUERY_FSMTECHDETAILS(me)
            _ADCFSMITEMS_SUBFORM = new QUERY_ADCFSMITEMS(me)
            _LASTADCFSMITEMS_SUBFORM = new QUERY_LASTADCFSMITEMS(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            _DOCQ_CHANGES_LOG_SUBFORM = new QUERY_DOCQ_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTEXT_Q_2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSORDER_Q_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSORDER_QW_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_DOCTEXT_Q_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_CUSTPERSONNEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_LIBRARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PROJACTEXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_FAQ2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_FUTUREGENDIARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCUMENTS_Q_B_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_DOCUMENTS_Q_A_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_DOCUMENTS_DCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_DOCQPORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_DOCQPURDEMANDS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_FSMTECHDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_ADCFSMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_LASTADCFSMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_DOCQ_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Details of Malfunction"))
            ChildQuery.add(1, new oNavigation("Service Report-Parts"))
            ChildQuery.add(2, new oNavigation("Service Report-Labor"))
            ChildQuery.add(3, new oNavigation("Description of Repair"))
            ChildQuery.add(4, new oNavigation("Tasks for Document"))
            ChildQuery.add(5, new oNavigation("Customer Contacts"))
            ChildQuery.add(6, new oNavigation("Attachments"))
            ChildQuery.add(7, new oNavigation("Library"))
            ChildQuery.add(8, new oNavigation("Projects/Accounts"))
            ChildQuery.add(9, new oNavigation("Attachments for Project Activs."))
            ChildQuery.add(10, new oNavigation("FAQ"))
            ChildQuery.add(11, new oNavigation("Calendar (All Users)"))
            ChildQuery.add(12, new oNavigation("Customer Credit"))
            ChildQuery.add(13, new oNavigation("Follow-up Calls"))
            ChildQuery.add(14, new oNavigation("To Do Item"))
            ChildQuery.add(15, new oNavigation("History of Statuses"))
            ChildQuery.add(16, new oNavigation("Shipping Address"))
            ChildQuery.add(17, new oNavigation("Serv. Call-Electronic Signature"))
            ChildQuery.add(18, new oNavigation("Customer Details"))
            ChildQuery.add(19, new oNavigation("Purchase Orders for the Call"))
            ChildQuery.add(20, new oNavigation("PRs for Service Call"))
            ChildQuery.add(21, new oNavigation("Reports by Field Technician"))
            ChildQuery.add(22, new oNavigation("Load From Mobile Device"))
            ChildQuery.add(23, new oNavigation("Last Load From Mobile Device"))
            ChildQuery.add(24, new oNavigation("Internal Dialogue"))
            ChildQuery.add(25, new oNavigation("History of Changes"))
            _DOCTEXT_Q_2_SUBFORM = new QUERY_DOCTEXT_Q_2(me)
            _TRANSORDER_Q_SUBFORM = new QUERY_TRANSORDER_Q(me)
            _TRANSORDER_QW_SUBFORM = new QUERY_TRANSORDER_QW(me)
            _DOCTEXT_Q_SUBFORM = new QUERY_DOCTEXT_Q(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _CUSTPERSONNEL_SUBFORM = new QUERY_CUSTPERSONNEL(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _LIBRARY_SUBFORM = new QUERY_LIBRARY(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PROJACTEXTFILES_SUBFORM = new QUERY_PROJACTEXTFILES(me)
            _FAQ2_SUBFORM = new QUERY_FAQ2(me)
            _FUTUREGENDIARY_SUBFORM = new QUERY_FUTUREGENDIARY(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _DOCUMENTS_Q_B_SUBFORM = new QUERY_DOCUMENTS_Q_B(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _DOCUMENTS_Q_A_SUBFORM = new QUERY_DOCUMENTS_Q_A(me)
            _DOCUMENTS_DCONT_SUBFORM = new QUERY_DOCUMENTS_DCONT(me)
            _DOCQPORDERS_SUBFORM = new QUERY_DOCQPORDERS(me)
            _DOCQPURDEMANDS_SUBFORM = new QUERY_DOCQPURDEMANDS(me)
            _FSMTECHDETAILS_SUBFORM = new QUERY_FSMTECHDETAILS(me)
            _ADCFSMITEMS_SUBFORM = new QUERY_ADCFSMITEMS(me)
            _LASTADCFSMITEMS_SUBFORM = new QUERY_LASTADCFSMITEMS(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            _DOCQ_CHANGES_LOG_SUBFORM = new QUERY_DOCQ_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTEXT_Q_2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSORDER_Q_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSORDER_QW_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_DOCTEXT_Q_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_CUSTPERSONNEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_LIBRARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PROJACTEXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_FAQ2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_FUTUREGENDIARY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCUMENTS_Q_B_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_DOCUMENTS_Q_A_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_DOCUMENTS_DCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_DOCQPORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_DOCQPURDEMANDS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_FSMTECHDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(22)
               .setoDataQuery(_ADCFSMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(23)
               .setoDataQuery(_LASTADCFSMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(24)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(25)
               .setoDataQuery(_DOCQ_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _DOCTEXT_Q_2_SUBFORM))
                   .add(1, new oNavigation("Service Report-Parts", _TRANSORDER_Q_SUBFORM))
                   .add(2, new oNavigation("Service Report-Labor", _TRANSORDER_QW_SUBFORM))
                   .add(3, new oNavigation("Description of Repair", _DOCTEXT_Q_SUBFORM))
                   .add(4, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(5, new oNavigation("Customer Contacts", _CUSTPERSONNEL_SUBFORM))
                   .add(6, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(7, new oNavigation("Library", _LIBRARY_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Attachments for Project Activs.", _PROJACTEXTFILES_SUBFORM))
                   .add(10, new oNavigation("FAQ", _FAQ2_SUBFORM))
                   .add(11, new oNavigation("Calendar (All Users)", _FUTUREGENDIARY_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Follow-up Calls", _DOCUMENTS_Q_B_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(17, new oNavigation("Serv. Call-Electronic Signature", _DOCUMENTS_Q_A_SUBFORM))
                   .add(18, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(19, new oNavigation("Purchase Orders for the Call", _DOCQPORDERS_SUBFORM))
                   .add(20, new oNavigation("PRs for Service Call", _DOCQPURDEMANDS_SUBFORM))
                   .add(21, new oNavigation("Reports by Field Technician", _FSMTECHDETAILS_SUBFORM))
                   .add(22, new oNavigation("Load From Mobile Device", _ADCFSMITEMS_SUBFORM))
                   .add(23, new oNavigation("Last Load From Mobile Device", _LASTADCFSMITEMS_SUBFORM))
                   .add(24, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(25, new oNavigation("History of Changes", _DOCQ_CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_Q"
                else
                    return "DOCUMENTS_Q_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(2),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(4),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Opened"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("STARTDATE")>  _
        Public Property STARTDATE() As nullable (of DateTimeOffset)
            Get
                return _STARTDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Opened", value, "^.*$") then Exit Property
                _IsSetSTARTDATE = True
                If loading Then
                  _STARTDATE = Value
                Else
                    if not _STARTDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STARTDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STARTDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("External Call Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(13),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("External Call Number", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Follow-up of Call"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(14),  _
         twodBarcode("PDOCNO")>  _
        Public Property PDOCNO() As String
            Get
                return _PDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Follow-up of Call", value, "^.{0,16}$") then Exit Property
                _IsSetPDOCNO = True
                If loading Then
                  _PDOCNO = Value
                Else
                    if not _PDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Number Suffix"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("AIRWAYBILL")>  _
        Public Property AIRWAYBILL() As String
            Get
                return _AIRWAYBILL
            End Get
            Set
                if not(value is nothing) then
                  _AIRWAYBILL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(20),  _
         twodBarcode("SERNUM")>  _
        Public Property SERNUM() As String
            Get
                return _SERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number", value, "^.{0,20}$") then Exit Property
                _IsSetSERNUM = True
                If loading Then
                  _SERNUM = Value
                Else
                    if not _SERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End of Warranty"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Call Number Suffix"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("WARDATEFINAL")>  _
        Public Property WARDATEFINAL() As nullable (of DateTimeOffset)
            Get
                return _WARDATEFINAL
            End Get
            Set
                if not(value is nothing) then
                  _WARDATEFINAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contract Number"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(24),  _
         twodBarcode("CONTNUM")>  _
        Public Property CONTNUM() As String
            Get
                return _CONTNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contract Number", value, "^.{0,16}$") then Exit Property
                _IsSetCONTNUM = True
                If loading Then
                  _CONTNUM = Value
                Else
                    if not _CONTNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CONTNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CONTNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contract's Status"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CONTSTATDES")>  _
        Public Property CONTSTATDES() As String
            Get
                return _CONTSTATDES
            End Get
            Set
                if not(value is nothing) then
                  _CONTSTATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Paid Until"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Call Number Suffix"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(27),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetPROJDOCNO = True
                If loading Then
                  _PROJDOCNO = Value
                Else
                    if not _PROJDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Call Number Suffix"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Call Status"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(29),  _
         Mandatory(true),  _
         twodBarcode("CALLSTATUSCODE")>  _
        Public Property CALLSTATUSCODE() As String
            Get
                return _CALLSTATUSCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Status", value, "^.{0,12}$") then Exit Property
                _IsSetCALLSTATUSCODE = True
                If loading Then
                  _CALLSTATUSCODE = Value
                Else
                    if not _CALLSTATUSCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CALLSTATUSCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CALLSTATUSCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status Update Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Call Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("STATUSDATE")>  _
        Public Property STATUSDATE() As nullable (of DateTimeOffset)
            Get
                return _STATUSDATE
            End Get
            Set
                if not(value is nothing) then
                  _STATUSDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Active?"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(31),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVEFLAG")>  _
        Public Property ACTIVEFLAG() As String
            Get
                return _ACTIVEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(32),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(35),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Call Number"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(36),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust's Call Number", value, "^.{0,12}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("RMA Number"),  _
         nType("Edm.String"),  _
         tab("Call Status"),  _
         Pos(37),  _
         twodBarcode("RMADOCNO")>  _
        Public Property RMADOCNO() As String
            Get
                return _RMADOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("RMA Number", value, "^.{0,16}$") then Exit Property
                _IsSetRMADOCNO = True
                If loading Then
                  _RMADOCNO = Value
                Else
                    if not _RMADOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RMADOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RMADOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(38),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms (Code)"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("SERVTCODE")>  _
        Public Property SERVTCODE() As String
            Get
                return _SERVTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Service Terms (Code)", value, "^.{0,3}$") then Exit Property
                _IsSetSERVTCODE = True
                If loading Then
                  _SERVTCODE = Value
                Else
                    if not _SERVTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERVTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERVTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SERVTDES")>  _
        Public Property SERVTDES() As String
            Get
                return _SERVTDES
            End Get
            Set
                if not(value is nothing) then
                  _SERVTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Servicing Package"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(43),  _
         twodBarcode("MAINTDES")>  _
        Public Property MAINTDES() As String
            Get
                return _MAINTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Servicing Package", value, "^.{0,10}$") then Exit Property
                _IsSetMAINTDES = True
                If loading Then
                  _MAINTDES = Value
                Else
                    if not _MAINTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAINTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAINTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Type"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(44),  _
         twodBarcode("CALLTYPECODE")>  _
        Public Property CALLTYPECODE() As String
            Get
                return _CALLTYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Type", value, "^.{0,12}$") then Exit Property
                _IsSetCALLTYPECODE = True
                If loading Then
                  _CALLTYPECODE = Value
                Else
                    if not _CALLTYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CALLTYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CALLTYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Problem Code"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(46),  _
         twodBarcode("SYMCODE")>  _
        Public Property SYMCODE() As String
            Get
                return _SYMCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Problem Code", value, "^.{0,3}$") then Exit Property
                _IsSetSYMCODE = True
                If loading Then
                  _SYMCODE = Value
                Else
                    if not _SYMCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SYMCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SYMCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Problem Description"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(48),  _
         [ReadOnly](true),  _
         twodBarcode("SYMDES")>  _
        Public Property SYMDES() As String
            Get
                return _SYMDES
            End Get
            Set
                if not(value is nothing) then
                  _SYMDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Malfunction Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(50),  _
         twodBarcode("MALFCODE")>  _
        Public Property MALFCODE() As String
            Get
                return _MALFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Malfunction Code", value, "^.{0,3}$") then Exit Property
                _IsSetMALFCODE = True
                If loading Then
                  _MALFCODE = Value
                Else
                    if not _MALFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MALFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MALFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Malf. Description"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(51),  _
         [ReadOnly](true),  _
         twodBarcode("MALFDES")>  _
        Public Property MALFDES() As String
            Get
                return _MALFDES
            End Get
            Set
                if not(value is nothing) then
                  _MALFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Resolution Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(52),  _
         twodBarcode("SOLUTIONCODE")>  _
        Public Property SOLUTIONCODE() As String
            Get
                return _SOLUTIONCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resolution Code", value, "^.{0,3}$") then Exit Property
                _IsSetSOLUTIONCODE = True
                If loading Then
                  _SOLUTIONCODE = Value
                Else
                    if not _SOLUTIONCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SOLUTIONCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SOLUTIONCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resolution"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(53),  _
         [ReadOnly](true),  _
         twodBarcode("SOLUTIONDES")>  _
        Public Property SOLUTIONDES() As String
            Get
                return _SOLUTIONDES
            End Get
            Set
                if not(value is nothing) then
                  _SOLUTIONDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Repeat Call"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(54),  _
         twodBarcode("REPEATCALL")>  _
        Public Property REPEATCALL() As String
            Get
                return _REPEATCALL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Repeat Call", value, "^.{0,1}$") then Exit Property
                _IsSetREPEATCALL = True
                If loading Then
                  _REPEATCALL = Value
                Else
                    if not _REPEATCALL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REPEATCALL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REPEATCALL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Taker"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("SUSERLOGIN")>  _
        Public Property SUSERLOGIN() As String
            Get
                return _SUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _SUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Meter Reading"),  _
         nType("Edm.Int64"),  _
         tab("Malfunction Code"),  _
         Pos(56),  _
         twodBarcode("METERREADING")>  _
        Public Property METERREADING() As nullable (of int64)
            Get
                return _METERREADING
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Meter Reading", value, "^[0-9\-]+$") then Exit Property
                _IsSetMETERREADING = True
                If loading Then
                  _METERREADING = Value
                Else
                    if not _METERREADING = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("METERREADING", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _METERREADING = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(57),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(58),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Agreed Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Phone Number"),  _
         Pos(60),  _
         twodBarcode("CUSTSTARTDATE")>  _
        Public Property CUSTSTARTDATE() As nullable (of DateTimeOffset)
            Get
                return _CUSTSTARTDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Agreed Start Date", value, "^.*$") then Exit Property
                _IsSetCUSTSTARTDATE = True
                If loading Then
                  _CUSTSTARTDATE = Value
                Else
                    if not _CUSTSTARTDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTSTARTDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTSTARTDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Chng Authrzd by"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(61),  _
         twodBarcode("AUTHORIZERNAME")>  _
        Public Property AUTHORIZERNAME() As String
            Get
                return _AUTHORIZERNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Chng Authrzd by", value, "^.{0,37}$") then Exit Property
                _IsSetAUTHORIZERNAME = True
                If loading Then
                  _AUTHORIZERNAME = Value
                Else
                    if not _AUTHORIZERNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AUTHORIZERNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AUTHORIZERNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Phone Number"),  _
         Pos(62),  _
         twodBarcode("ASTARTDATE")>  _
        Public Property ASTARTDATE() As nullable (of DateTimeOffset)
            Get
                return _ASTARTDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Actual Start Date", value, "^.*$") then Exit Property
                _IsSetASTARTDATE = True
                If loading Then
                  _ASTARTDATE = Value
                Else
                    if not _ASTARTDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ASTARTDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ASTARTDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Completed"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Phone Number"),  _
         Pos(63),  _
         twodBarcode("AENDDATE")>  _
        Public Property AENDDATE() As nullable (of DateTimeOffset)
            Get
                return _AENDDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Completed", value, "^.*$") then Exit Property
                _IsSetAENDDATE = True
                If loading Then
                  _AENDDATE = Value
                Else
                    if not _AENDDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AENDDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AENDDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Resp. Time"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(64),  _
         twodBarcode("RESPONSETIME")>  _
        Public Property RESPONSETIME() As String
            Get
                return _RESPONSETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Mandatory Resp. Time", value, "^.{0,6}$") then Exit Property
                _IsSetRESPONSETIME = True
                If loading Then
                  _RESPONSETIME = Value
                Else
                    if not _RESPONSETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESPONSETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESPONSETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Response Time"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("ARESPONSETIME")>  _
        Public Property ARESPONSETIME() As String
            Get
                return _ARESPONSETIME
            End Get
            Set
                if not(value is nothing) then
                  _ARESPONSETIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Part Idle"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Phone Number"),  _
         Pos(66),  _
         twodBarcode("BREAKTIME")>  _
        Public Property BREAKTIME() As nullable(of decimal)
            Get
                return _BREAKTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Time Part Idle", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetBREAKTIME = True
                If loading Then
                  _BREAKTIME = Value
                Else
                    if not _BREAKTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BREAKTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BREAKTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Time Site Idle"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Time Site Idle"),  _
         Pos(67),  _
         twodBarcode("CUSTBREAKTIME")>  _
        Public Property CUSTBREAKTIME() As nullable(of decimal)
            Get
                return _CUSTBREAKTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Time Site Idle", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCUSTBREAKTIME = True
                If loading Then
                  _CUSTBREAKTIME = Value
                Else
                    if not _CUSTBREAKTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTBREAKTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTBREAKTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Time Site Idle"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Time Site Idle"),  _
         Pos(81),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Time Site Idle"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Time Site Idle"),  _
         Pos(83),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Time Site Idle"),  _
         Pos(84),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Time Site Idle"),  _
         Pos(85),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quoted Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Time Site Idle"),  _
         Pos(86),  _
         [ReadOnly](true),  _
         twodBarcode("PROFPRICE")>  _
        Public Property PROFPRICE() As nullable(of decimal)
            Get
                return _PROFPRICE
            End Get
            Set
                if not(value is nothing) then
                  _PROFPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(87),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Max Price w/o Auth"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Curr"),  _
         Pos(90),  _
         twodBarcode("MAXREPAIRPRICE")>  _
        Public Property MAXREPAIRPRICE() As nullable(of decimal)
            Get
                return _MAXREPAIRPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Max Price w/o Auth", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetMAXREPAIRPRICE = True
                If loading Then
                  _MAXREPAIRPRICE = Value
                Else
                    if not _MAXREPAIRPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAXREPAIRPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAXREPAIRPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(92),  _
         twodBarcode("REPAIRCODE")>  _
        Public Property REPAIRCODE() As String
            Get
                return _REPAIRCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetREPAIRCODE = True
                If loading Then
                  _REPAIRCODE = Value
                Else
                    if not _REPAIRCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REPAIRCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REPAIRCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(100),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price List Code"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(105),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price List Code", value, "^.{0,6}$") then Exit Property
                _IsSetPLNAME = True
                If loading Then
                  _PLNAME = Value
                Else
                    if not _PLNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Repair Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(110),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Repair Date", value, "^.*$") then Exit Property
                _IsSetPDATE = True
                If loading Then
                  _PDATE = Value
                Else
                    if not _PDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(111),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(112),  _
         twodBarcode("PTIME")>  _
        Public Property PTIME() As String
            Get
                return _PTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetPTIME = True
                If loading Then
                  _PTIME = Value
                Else
                    if not _PTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("End Date"),  _
         Pos(120),  _
         twodBarcode("EDATE")>  _
        Public Property EDATE() As nullable (of DateTimeOffset)
            Get
                return _EDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetEDATE = True
                If loading Then
                  _EDATE = Value
                Else
                    if not _EDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(121),  _
         [ReadOnly](true),  _
         twodBarcode("EDAY")>  _
        Public Property EDAY() As String
            Get
                return _EDAY
            End Get
            Set
                if not(value is nothing) then
                  _EDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(122),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("End Date"),  _
         Pos(123),  _
         twodBarcode("PRIORITY")>  _
        Public Property PRIORITY() As nullable (of int64)
            Get
                return _PRIORITY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIORITY = True
                If loading Then
                  _PRIORITY = Value
                Else
                    if not _PRIORITY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIORITY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIORITY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(124),  _
         Mandatory(true),  _
         twodBarcode("TECHNICIANLOGIN")>  _
        Public Property TECHNICIANLOGIN() As String
            Get
                return _TECHNICIANLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetTECHNICIANLOGIN = True
                If loading Then
                  _TECHNICIANLOGIN = Value
                Else
                    if not _TECHNICIANLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHNICIANLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHNICIANLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Technician"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(125),  _
         twodBarcode("TECHNICIANLOGIN2")>  _
        Public Property TECHNICIANLOGIN2() As String
            Get
                return _TECHNICIANLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Technician", value, "^.{0,20}$") then Exit Property
                _IsSetTECHNICIANLOGIN2 = True
                If loading Then
                  _TECHNICIANLOGIN2 = Value
                Else
                    if not _TECHNICIANLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHNICIANLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHNICIANLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Technician"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(126),  _
         twodBarcode("TECHNICIANLOGIN3")>  _
        Public Property TECHNICIANLOGIN3() As String
            Get
                return _TECHNICIANLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Technician", value, "^.{0,20}$") then Exit Property
                _IsSetTECHNICIANLOGIN3 = True
                If loading Then
                  _TECHNICIANLOGIN3 = Value
                Else
                    if not _TECHNICIANLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHNICIANLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHNICIANLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Spare Pts Warehouse"),  _
         nType("Edm.String"),  _
         tab("End Date"),  _
         Pos(127),  _
         Mandatory(true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Spare Pts Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(128),  _
         Mandatory(true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zone Code"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("ZONECODE")>  _
        Public Property ZONECODE() As String
            Get
                return _ZONECODE
            End Get
            Set
                if not(value is nothing) then
                  _ZONECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Zone Description"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(131),  _
         [ReadOnly](true),  _
         twodBarcode("ZONEDES")>  _
        Public Property ZONEDES() As String
            Get
                return _ZONEDES
            End Get
            Set
                if not(value is nothing) then
                  _ZONEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Route"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(132),  _
         [ReadOnly](true),  _
         twodBarcode("TRACK")>  _
        Public Property TRACK() As String
            Get
                return _TRACK
            End Get
            Set
                if not(value is nothing) then
                  _TRACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Location of Item"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(134),  _
         [ReadOnly](true),  _
         twodBarcode("LOCATION")>  _
        Public Property LOCATION() As String
            Get
                return _LOCATION
            End Get
            Set
                if not(value is nothing) then
                  _LOCATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(136),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(138),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(140),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Shipping Method"),  _
         Pos(141),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Shipping Method"),  _
         Pos(150),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Miles to Charge"),  _
         nType("Edm.Int64"),  _
         tab("Shipping Method"),  _
         Pos(152),  _
         [ReadOnly](true),  _
         twodBarcode("KM")>  _
        Public Property KM() As nullable (of int64)
            Get
                return _KM
            End Get
            Set
                if not(value is nothing) then
                  _KM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Shipping Method"),  _
         Pos(160),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billed"),  _
         nType("Edm.String"),  _
         tab("Shipping Method"),  _
         Pos(162),  _
         [ReadOnly](true),  _
         twodBarcode("IVALL")>  _
        Public Property IVALL() As String
            Get
                return _IVALL
            End Get
            Set
                if not(value is nothing) then
                  _IVALL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("Shipping Method"),  _
         Pos(165),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAGB")>  _
        Public Property EXTFILEFLAGB() As String
            Get
                return _EXTFILEFLAGB
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAGB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Idle Start"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Shipping Method"),  _
         Pos(180),  _
         twodBarcode("BREAKSTART")>  _
        Public Property BREAKSTART() As nullable (of DateTimeOffset)
            Get
                return _BREAKSTART
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Idle Start", value, "^.*$") then Exit Property
                _IsSetBREAKSTART = True
                If loading Then
                  _BREAKSTART = Value
                Else
                    if not _BREAKSTART = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BREAKSTART", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BREAKSTART = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Idle End"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Shipping Method"),  _
         Pos(185),  _
         twodBarcode("BREAKEND")>  _
        Public Property BREAKEND() As nullable (of DateTimeOffset)
            Get
                return _BREAKEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Idle End", value, "^.*$") then Exit Property
                _IsSetBREAKEND = True
                If loading Then
                  _BREAKEND = Value
                Else
                    if not _BREAKEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BREAKEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BREAKEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Parts Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Parts Cost"),  _
         Pos(185),  _
         [ReadOnly](true),  _
         twodBarcode("PARTSCOST")>  _
        Public Property PARTSCOST() As nullable(of decimal)
            Get
                return _PARTSCOST
            End Get
            Set
                if not(value is nothing) then
                  _PARTSCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Labor Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Parts Cost"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WORKCOST")>  _
        Public Property WORKCOST() As nullable(of decimal)
            Get
                return _WORKCOST
            End Get
            Set
                if not(value is nothing) then
                  _WORKCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Stamp"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("INCUSENUM")>  _
        Public Property INCUSENUM() As String
            Get
                return _INCUSENUM
            End Get
            Set
                if not(value is nothing) then
                  _INCUSENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("System Number"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("SYSTEMCODE")>  _
        Public Property SYSTEMCODE() As String
            Get
                return _SYSTEMCODE
            End Get
            Set
                if not(value is nothing) then
                  _SYSTEMCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("System Description"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(212),  _
         [ReadOnly](true),  _
         twodBarcode("SYSTEMDES")>  _
        Public Property SYSTEMDES() As String
            Get
                return _SYSTEMDES
            End Get
            Set
                if not(value is nothing) then
                  _SYSTEMDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Facility"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("FACILITYNAME")>  _
        Public Property FACILITYNAME() As String
            Get
                return _FACILITYNAME
            End Get
            Set
                if not(value is nothing) then
                  _FACILITYNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Facility Description"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(222),  _
         [ReadOnly](true),  _
         twodBarcode("FACILITYDES")>  _
        Public Property FACILITYDES() As String
            Get
                return _FACILITYDES
            End Get
            Set
                if not(value is nothing) then
                  _FACILITYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Parts Cost"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("SITENAME")>  _
        Public Property SITENAME() As String
            Get
                return _SITENAME
            End Get
            Set
                if not(value is nothing) then
                  _SITENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SITEDES")>  _
        Public Property SITEDES() As String
            Get
                return _SITEDES
            End Get
            Set
                if not(value is nothing) then
                  _SITEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Latitude"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(320),  _
         twodBarcode("GPSX")>  _
        Public Property GPSX() As String
            Get
                return _GPSX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSX = True
                If loading Then
                  _GPSX = Value
                Else
                    if not _GPSX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Longitude"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(325),  _
         twodBarcode("GPSY")>  _
        Public Property GPSY() As String
            Get
                return _GPSY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Longitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSY = True
                If loading Then
                  _GPSY = Value
                Else
                    if not _GPSY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Site Description"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FOLLOWUPIV")>  _
        Public Property FOLLOWUPIV() As nullable (of int64)
            Get
                return _FOLLOWUPIV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPIV = True
                If loading Then
                  _FOLLOWUPIV = Value
                Else
                    if not _FOLLOWUPIV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPIV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPIV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Site Description"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTEXT_Q_2_SUBFORM() As QUERY_DOCTEXT_Q_2
            Get
                return _DOCTEXT_Q_2_SUBFORM
            End Get
            Set
                _DOCTEXT_Q_2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDER_Q_SUBFORM() As QUERY_TRANSORDER_Q
            Get
                return _TRANSORDER_Q_SUBFORM
            End Get
            Set
                _TRANSORDER_Q_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDER_QW_SUBFORM() As QUERY_TRANSORDER_QW
            Get
                return _TRANSORDER_QW_SUBFORM
            End Get
            Set
                _TRANSORDER_QW_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTEXT_Q_SUBFORM() As QUERY_DOCTEXT_Q
            Get
                return _DOCTEXT_Q_SUBFORM
            End Get
            Set
                _DOCTEXT_Q_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTPERSONNEL_SUBFORM() As QUERY_CUSTPERSONNEL
            Get
                return _CUSTPERSONNEL_SUBFORM
            End Get
            Set
                _CUSTPERSONNEL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LIBRARY_SUBFORM() As QUERY_LIBRARY
            Get
                return _LIBRARY_SUBFORM
            End Get
            Set
                _LIBRARY_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJACTEXTFILES_SUBFORM() As QUERY_PROJACTEXTFILES
            Get
                return _PROJACTEXTFILES_SUBFORM
            End Get
            Set
                _PROJACTEXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FAQ2_SUBFORM() As QUERY_FAQ2
            Get
                return _FAQ2_SUBFORM
            End Get
            Set
                _FAQ2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FUTUREGENDIARY_SUBFORM() As QUERY_FUTUREGENDIARY
            Get
                return _FUTUREGENDIARY_SUBFORM
            End Get
            Set
                _FUTUREGENDIARY_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGO_SUBFORM() As QUERY_CUSTOBLIGO
            Get
                return _CUSTOBLIGO_SUBFORM
            End Get
            Set
                _CUSTOBLIGO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTS_Q_B_SUBFORM() As QUERY_DOCUMENTS_Q_B
            Get
                return _DOCUMENTS_Q_B_SUBFORM
            End Get
            Set
                _DOCUMENTS_Q_B_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO2_SUBFORM() As QUERY_SHIPTO2
            Get
                return _SHIPTO2_SUBFORM
            End Get
            Set
                _SHIPTO2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTS_Q_A_SUBFORM() As QUERY_DOCUMENTS_Q_A
            Get
                return _DOCUMENTS_Q_A_SUBFORM
            End Get
            Set
                _DOCUMENTS_Q_A_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTS_DCONT_SUBFORM() As QUERY_DOCUMENTS_DCONT
            Get
                return _DOCUMENTS_DCONT_SUBFORM
            End Get
            Set
                _DOCUMENTS_DCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCQPORDERS_SUBFORM() As QUERY_DOCQPORDERS
            Get
                return _DOCQPORDERS_SUBFORM
            End Get
            Set
                _DOCQPORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCQPURDEMANDS_SUBFORM() As QUERY_DOCQPURDEMANDS
            Get
                return _DOCQPURDEMANDS_SUBFORM
            End Get
            Set
                _DOCQPURDEMANDS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FSMTECHDETAILS_SUBFORM() As QUERY_FSMTECHDETAILS
            Get
                return _FSMTECHDETAILS_SUBFORM
            End Get
            Set
                _FSMTECHDETAILS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ADCFSMITEMS_SUBFORM() As QUERY_ADCFSMITEMS
            Get
                return _ADCFSMITEMS_SUBFORM
            End Get
            Set
                _ADCFSMITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTADCFSMITEMS_SUBFORM() As QUERY_LASTADCFSMITEMS
            Get
                return _LASTADCFSMITEMS_SUBFORM
            End Get
            Set
                _LASTADCFSMITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INTERNALDIALOGTEXT_SUBFORM() As QUERY_INTERNALDIALOGTEXT
            Get
                return _INTERNALDIALOGTEXT_SUBFORM
            End Get
            Set
                _INTERNALDIALOGTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCQ_CHANGES_LOG_SUBFORM() As QUERY_DOCQ_CHANGES_LOG
            Get
                return _DOCQ_CHANGES_LOG_SUBFORM
            End Get
            Set
                _DOCQ_CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetSTARTDATE then
              if f then
                  jw.WriteRaw(", ""STARTDATE"": ")
              else
                  jw.WriteRaw("""STARTDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STARTDATE)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetPDOCNO then
              if f then
                  jw.WriteRaw(", ""PDOCNO"": ")
              else
                  jw.WriteRaw("""PDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PDOCNO)
            end if
            if _IsSetSERNUM then
              if f then
                  jw.WriteRaw(", ""SERNUM"": ")
              else
                  jw.WriteRaw("""SERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.SERNUM)
            end if
            if _IsSetCONTNUM then
              if f then
                  jw.WriteRaw(", ""CONTNUM"": ")
              else
                  jw.WriteRaw("""CONTNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CONTNUM)
            end if
            if _IsSetPROJDOCNO then
              if f then
                  jw.WriteRaw(", ""PROJDOCNO"": ")
              else
                  jw.WriteRaw("""PROJDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJDOCNO)
            end if
            if _IsSetCALLSTATUSCODE then
              if f then
                  jw.WriteRaw(", ""CALLSTATUSCODE"": ")
              else
                  jw.WriteRaw("""CALLSTATUSCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CALLSTATUSCODE)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetRMADOCNO then
              if f then
                  jw.WriteRaw(", ""RMADOCNO"": ")
              else
                  jw.WriteRaw("""RMADOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.RMADOCNO)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetSERVTCODE then
              if f then
                  jw.WriteRaw(", ""SERVTCODE"": ")
              else
                  jw.WriteRaw("""SERVTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SERVTCODE)
            end if
            if _IsSetMAINTDES then
              if f then
                  jw.WriteRaw(", ""MAINTDES"": ")
              else
                  jw.WriteRaw("""MAINTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.MAINTDES)
            end if
            if _IsSetCALLTYPECODE then
              if f then
                  jw.WriteRaw(", ""CALLTYPECODE"": ")
              else
                  jw.WriteRaw("""CALLTYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CALLTYPECODE)
            end if
            if _IsSetSYMCODE then
              if f then
                  jw.WriteRaw(", ""SYMCODE"": ")
              else
                  jw.WriteRaw("""SYMCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SYMCODE)
            end if
            if _IsSetMALFCODE then
              if f then
                  jw.WriteRaw(", ""MALFCODE"": ")
              else
                  jw.WriteRaw("""MALFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.MALFCODE)
            end if
            if _IsSetSOLUTIONCODE then
              if f then
                  jw.WriteRaw(", ""SOLUTIONCODE"": ")
              else
                  jw.WriteRaw("""SOLUTIONCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SOLUTIONCODE)
            end if
            if _IsSetREPEATCALL then
              if f then
                  jw.WriteRaw(", ""REPEATCALL"": ")
              else
                  jw.WriteRaw("""REPEATCALL"": ")
                  f = true
              end if
              jw.WriteValue(me.REPEATCALL)
            end if
            if _IsSetMETERREADING then
              if f then
                  jw.WriteRaw(", ""METERREADING"": ")
              else
                  jw.WriteRaw("""METERREADING"": ")
                  f = true
              end if
              jw.WriteValue(me.METERREADING)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetCUSTSTARTDATE then
              if f then
                  jw.WriteRaw(", ""CUSTSTARTDATE"": ")
              else
                  jw.WriteRaw("""CUSTSTARTDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTSTARTDATE)
            end if
            if _IsSetAUTHORIZERNAME then
              if f then
                  jw.WriteRaw(", ""AUTHORIZERNAME"": ")
              else
                  jw.WriteRaw("""AUTHORIZERNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.AUTHORIZERNAME)
            end if
            if _IsSetASTARTDATE then
              if f then
                  jw.WriteRaw(", ""ASTARTDATE"": ")
              else
                  jw.WriteRaw("""ASTARTDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.ASTARTDATE)
            end if
            if _IsSetAENDDATE then
              if f then
                  jw.WriteRaw(", ""AENDDATE"": ")
              else
                  jw.WriteRaw("""AENDDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.AENDDATE)
            end if
            if _IsSetRESPONSETIME then
              if f then
                  jw.WriteRaw(", ""RESPONSETIME"": ")
              else
                  jw.WriteRaw("""RESPONSETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESPONSETIME)
            end if
            if _IsSetBREAKTIME then
              if f then
                  jw.WriteRaw(", ""BREAKTIME"": ")
              else
                  jw.WriteRaw("""BREAKTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.BREAKTIME)
            end if
            if _IsSetCUSTBREAKTIME then
              if f then
                  jw.WriteRaw(", ""CUSTBREAKTIME"": ")
              else
                  jw.WriteRaw("""CUSTBREAKTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTBREAKTIME)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetMAXREPAIRPRICE then
              if f then
                  jw.WriteRaw(", ""MAXREPAIRPRICE"": ")
              else
                  jw.WriteRaw("""MAXREPAIRPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.MAXREPAIRPRICE)
            end if
            if _IsSetREPAIRCODE then
              if f then
                  jw.WriteRaw(", ""REPAIRCODE"": ")
              else
                  jw.WriteRaw("""REPAIRCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.REPAIRCODE)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetPLNAME then
              if f then
                  jw.WriteRaw(", ""PLNAME"": ")
              else
                  jw.WriteRaw("""PLNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLNAME)
            end if
            if _IsSetPDATE then
              if f then
                  jw.WriteRaw(", ""PDATE"": ")
              else
                  jw.WriteRaw("""PDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PDATE)
            end if
            if _IsSetPTIME then
              if f then
                  jw.WriteRaw(", ""PTIME"": ")
              else
                  jw.WriteRaw("""PTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PTIME)
            end if
            if _IsSetEDATE then
              if f then
                  jw.WriteRaw(", ""EDATE"": ")
              else
                  jw.WriteRaw("""EDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.EDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPRIORITY then
              if f then
                  jw.WriteRaw(", ""PRIORITY"": ")
              else
                  jw.WriteRaw("""PRIORITY"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIORITY)
            end if
            if _IsSetTECHNICIANLOGIN then
              if f then
                  jw.WriteRaw(", ""TECHNICIANLOGIN"": ")
              else
                  jw.WriteRaw("""TECHNICIANLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHNICIANLOGIN)
            end if
            if _IsSetTECHNICIANLOGIN2 then
              if f then
                  jw.WriteRaw(", ""TECHNICIANLOGIN2"": ")
              else
                  jw.WriteRaw("""TECHNICIANLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHNICIANLOGIN2)
            end if
            if _IsSetTECHNICIANLOGIN3 then
              if f then
                  jw.WriteRaw(", ""TECHNICIANLOGIN3"": ")
              else
                  jw.WriteRaw("""TECHNICIANLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHNICIANLOGIN3)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetBREAKSTART then
              if f then
                  jw.WriteRaw(", ""BREAKSTART"": ")
              else
                  jw.WriteRaw("""BREAKSTART"": ")
                  f = true
              end if
              jw.WriteValue(me.BREAKSTART)
            end if
            if _IsSetBREAKEND then
              if f then
                  jw.WriteRaw(", ""BREAKEND"": ")
              else
                  jw.WriteRaw("""BREAKEND"": ")
                  f = true
              end if
              jw.WriteValue(me.BREAKEND)
            end if
            if _IsSetGPSX then
              if f then
                  jw.WriteRaw(", ""GPSX"": ")
              else
                  jw.WriteRaw("""GPSX"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSX)
            end if
            if _IsSetGPSY then
              if f then
                  jw.WriteRaw(", ""GPSY"": ")
              else
                  jw.WriteRaw("""GPSY"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSY)
            end if
            if _IsSetFOLLOWUPIV then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPIV"": ")
              else
                  jw.WriteRaw("""FOLLOWUPIV"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPIV)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _DOCTEXT_Q_2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTEXT_Q_2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTEXT_Q_2 in _DOCTEXT_Q_2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTEXT_Q_2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDER_Q_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDER_Q_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDER_Q in _TRANSORDER_Q_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDER_Q_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDER_QW_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDER_QW_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDER_QW in _TRANSORDER_QW_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDER_QW_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTEXT_Q_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTEXT_Q_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTEXT_Q in _DOCTEXT_Q_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTEXT_Q_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTPERSONNEL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTPERSONNEL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTPERSONNEL in _CUSTPERSONNEL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTPERSONNEL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LIBRARY_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LIBRARY_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LIBRARY in _LIBRARY_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LIBRARY_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJACTEXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJACTEXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJACTEXTFILES in _PROJACTEXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJACTEXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FAQ2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FAQ2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FAQ2 in _FAQ2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FAQ2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FUTUREGENDIARY_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FUTUREGENDIARY_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FUTUREGENDIARY in _FUTUREGENDIARY_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FUTUREGENDIARY_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTS_Q_B_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTS_Q_B_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTS_Q_B in _DOCUMENTS_Q_B_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTS_Q_B_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTS_Q_A_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTS_Q_A_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTS_Q_A in _DOCUMENTS_Q_A_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTS_Q_A_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTS_DCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTS_DCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTS_DCONT in _DOCUMENTS_DCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTS_DCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCQPORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCQPORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCQPORDERS in _DOCQPORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCQPORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCQPURDEMANDS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCQPURDEMANDS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCQPURDEMANDS in _DOCQPURDEMANDS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCQPURDEMANDS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FSMTECHDETAILS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FSMTECHDETAILS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FSMTECHDETAILS in _FSMTECHDETAILS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FSMTECHDETAILS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ADCFSMITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ADCFSMITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ADCFSMITEMS in _ADCFSMITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ADCFSMITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTADCFSMITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTADCFSMITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTADCFSMITEMS in _LASTADCFSMITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTADCFSMITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INTERNALDIALOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INTERNALDIALOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCQ_CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCQ_CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCQ_CHANGES_LOG in _DOCQ_CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCQ_CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_Q")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetSTARTDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STARTDATE")
              .WriteAttributeString("value", me.STARTDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDOCNO")
              .WriteAttributeString("value", me.PDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERNUM")
              .WriteAttributeString("value", me.SERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCONTNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CONTNUM")
              .WriteAttributeString("value", me.CONTNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPROJDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJDOCNO")
              .WriteAttributeString("value", me.PROJDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCALLSTATUSCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CALLSTATUSCODE")
              .WriteAttributeString("value", me.CALLSTATUSCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetRMADOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RMADOCNO")
              .WriteAttributeString("value", me.RMADOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERVTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERVTCODE")
              .WriteAttributeString("value", me.SERVTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetMAINTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAINTDES")
              .WriteAttributeString("value", me.MAINTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCALLTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CALLTYPECODE")
              .WriteAttributeString("value", me.CALLTYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetSYMCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SYMCODE")
              .WriteAttributeString("value", me.SYMCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetMALFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MALFCODE")
              .WriteAttributeString("value", me.MALFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSOLUTIONCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SOLUTIONCODE")
              .WriteAttributeString("value", me.SOLUTIONCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetREPEATCALL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REPEATCALL")
              .WriteAttributeString("value", me.REPEATCALL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetMETERREADING then
              .WriteStartElement("field")
              .WriteAttributeString("name", "METERREADING")
              .WriteAttributeString("value", me.METERREADING)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetCUSTSTARTDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTSTARTDATE")
              .WriteAttributeString("value", me.CUSTSTARTDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetAUTHORIZERNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AUTHORIZERNAME")
              .WriteAttributeString("value", me.AUTHORIZERNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetASTARTDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ASTARTDATE")
              .WriteAttributeString("value", me.ASTARTDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetAENDDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AENDDATE")
              .WriteAttributeString("value", me.AENDDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetRESPONSETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESPONSETIME")
              .WriteAttributeString("value", me.RESPONSETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetBREAKTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BREAKTIME")
              .WriteAttributeString("value", me.BREAKTIME)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "10")
              .WriteEndElement
            end if
            if _IsSetCUSTBREAKTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTBREAKTIME")
              .WriteAttributeString("value", me.CUSTBREAKTIME)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "10")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetMAXREPAIRPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAXREPAIRPRICE")
              .WriteAttributeString("value", me.MAXREPAIRPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "10")
              .WriteEndElement
            end if
            if _IsSetREPAIRCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REPAIRCODE")
              .WriteAttributeString("value", me.REPAIRCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetPLNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLNAME")
              .WriteAttributeString("value", me.PLNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetPDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDATE")
              .WriteAttributeString("value", me.PDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PTIME")
              .WriteAttributeString("value", me.PTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EDATE")
              .WriteAttributeString("value", me.EDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPRIORITY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIORITY")
              .WriteAttributeString("value", me.PRIORITY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTECHNICIANLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHNICIANLOGIN")
              .WriteAttributeString("value", me.TECHNICIANLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetTECHNICIANLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHNICIANLOGIN2")
              .WriteAttributeString("value", me.TECHNICIANLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetTECHNICIANLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHNICIANLOGIN3")
              .WriteAttributeString("value", me.TECHNICIANLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetBREAKSTART then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BREAKSTART")
              .WriteAttributeString("value", me.BREAKSTART)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetBREAKEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BREAKEND")
              .WriteAttributeString("value", me.BREAKEND)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetGPSX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSX")
              .WriteAttributeString("value", me.GPSX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGPSY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSY")
              .WriteAttributeString("value", me.GPSY)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPIV")
              .WriteAttributeString("value", me.FOLLOWUPIV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _DOCTEXT_Q_2_SUBFORM.value.count > 0 then
              for each itm as DOCTEXT_Q_2 in _DOCTEXT_Q_2_SUBFORM.Value
                itm.toXML(xw,"DOCTEXT_Q_2_SUBFORM")
              next
            end if
            if _TRANSORDER_Q_SUBFORM.value.count > 0 then
              for each itm as TRANSORDER_Q in _TRANSORDER_Q_SUBFORM.Value
                itm.toXML(xw,"TRANSORDER_Q_SUBFORM")
              next
            end if
            if _TRANSORDER_QW_SUBFORM.value.count > 0 then
              for each itm as TRANSORDER_QW in _TRANSORDER_QW_SUBFORM.Value
                itm.toXML(xw,"TRANSORDER_QW_SUBFORM")
              next
            end if
            if _DOCTEXT_Q_SUBFORM.value.count > 0 then
              for each itm as DOCTEXT_Q in _DOCTEXT_Q_SUBFORM.Value
                itm.toXML(xw,"DOCTEXT_Q_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _CUSTPERSONNEL_SUBFORM.value.count > 0 then
              for each itm as CUSTPERSONNEL in _CUSTPERSONNEL_SUBFORM.Value
                itm.toXML(xw,"CUSTPERSONNEL_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _LIBRARY_SUBFORM.value.count > 0 then
              for each itm as LIBRARY in _LIBRARY_SUBFORM.Value
                itm.toXML(xw,"LIBRARY_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _PROJACTEXTFILES_SUBFORM.value.count > 0 then
              for each itm as PROJACTEXTFILES in _PROJACTEXTFILES_SUBFORM.Value
                itm.toXML(xw,"PROJACTEXTFILES_SUBFORM")
              next
            end if
            if _FAQ2_SUBFORM.value.count > 0 then
              for each itm as FAQ2 in _FAQ2_SUBFORM.Value
                itm.toXML(xw,"FAQ2_SUBFORM")
              next
            end if
            if _FUTUREGENDIARY_SUBFORM.value.count > 0 then
              for each itm as FUTUREGENDIARY in _FUTUREGENDIARY_SUBFORM.Value
                itm.toXML(xw,"FUTUREGENDIARY_SUBFORM")
              next
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGO_SUBFORM")
              next
            end if
            if _DOCUMENTS_Q_B_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTS_Q_B in _DOCUMENTS_Q_B_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTS_Q_B_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.Value
                itm.toXML(xw,"SHIPTO2_SUBFORM")
              next
            end if
            if _DOCUMENTS_Q_A_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTS_Q_A in _DOCUMENTS_Q_A_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTS_Q_A_SUBFORM")
              next
            end if
            if _DOCUMENTS_DCONT_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTS_DCONT in _DOCUMENTS_DCONT_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTS_DCONT_SUBFORM")
              next
            end if
            if _DOCQPORDERS_SUBFORM.value.count > 0 then
              for each itm as DOCQPORDERS in _DOCQPORDERS_SUBFORM.Value
                itm.toXML(xw,"DOCQPORDERS_SUBFORM")
              next
            end if
            if _DOCQPURDEMANDS_SUBFORM.value.count > 0 then
              for each itm as DOCQPURDEMANDS in _DOCQPURDEMANDS_SUBFORM.Value
                itm.toXML(xw,"DOCQPURDEMANDS_SUBFORM")
              next
            end if
            if _FSMTECHDETAILS_SUBFORM.value.count > 0 then
              for each itm as FSMTECHDETAILS in _FSMTECHDETAILS_SUBFORM.Value
                itm.toXML(xw,"FSMTECHDETAILS_SUBFORM")
              next
            end if
            if _ADCFSMITEMS_SUBFORM.value.count > 0 then
              for each itm as ADCFSMITEMS in _ADCFSMITEMS_SUBFORM.Value
                itm.toXML(xw,"ADCFSMITEMS_SUBFORM")
              next
            end if
            if _LASTADCFSMITEMS_SUBFORM.value.count > 0 then
              for each itm as LASTADCFSMITEMS in _LASTADCFSMITEMS_SUBFORM.Value
                itm.toXML(xw,"LASTADCFSMITEMS_SUBFORM")
              next
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.Value
                itm.toXML(xw,"INTERNALDIALOGTEXT_SUBFORM")
              next
            end if
            if _DOCQ_CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as DOCQ_CHANGES_LOG in _DOCQ_CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"DOCQ_CHANGES_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q = JsonConvert.DeserializeObject(Of DOCUMENTS_Q)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CDES = .CDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _STARTDATE = .STARTDATE
                  _DOCNO = .DOCNO
                  _BOOKNUM = .BOOKNUM
                  _PDOCNO = .PDOCNO
                  _AIRWAYBILL = .AIRWAYBILL
                  _SERNUM = .SERNUM
                  _WARDATEFINAL = .WARDATEFINAL
                  _CONTNUM = .CONTNUM
                  _CONTSTATDES = .CONTSTATDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _PROJDOCNO = .PROJDOCNO
                  _PROJDES = .PROJDES
                  _CALLSTATUSCODE = .CALLSTATUSCODE
                  _STATUSDATE = .STATUSDATE
                  _ACTIVEFLAG = .ACTIVEFLAG
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _RMADOCNO = .RMADOCNO
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _SERVTCODE = .SERVTCODE
                  _SERVTDES = .SERVTDES
                  _MAINTDES = .MAINTDES
                  _CALLTYPECODE = .CALLTYPECODE
                  _SYMCODE = .SYMCODE
                  _SYMDES = .SYMDES
                  _MALFCODE = .MALFCODE
                  _MALFDES = .MALFDES
                  _SOLUTIONCODE = .SOLUTIONCODE
                  _SOLUTIONDES = .SOLUTIONDES
                  _REPEATCALL = .REPEATCALL
                  _SUSERLOGIN = .SUSERLOGIN
                  _METERREADING = .METERREADING
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CUSTSTARTDATE = .CUSTSTARTDATE
                  _AUTHORIZERNAME = .AUTHORIZERNAME
                  _ASTARTDATE = .ASTARTDATE
                  _AENDDATE = .AENDDATE
                  _RESPONSETIME = .RESPONSETIME
                  _ARESPONSETIME = .ARESPONSETIME
                  _BREAKTIME = .BREAKTIME
                  _CUSTBREAKTIME = .CUSTBREAKTIME
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _PROFPRICE = .PROFPRICE
                  _CODE2 = .CODE2
                  _MAXREPAIRPRICE = .MAXREPAIRPRICE
                  _REPAIRCODE = .REPAIRCODE
                  _TAXCODE = .TAXCODE
                  _PLNAME = .PLNAME
                  _PDATE = .PDATE
                  _DAY = .DAY
                  _PTIME = .PTIME
                  _EDATE = .EDATE
                  _EDAY = .EDAY
                  _ETIME = .ETIME
                  _PRIORITY = .PRIORITY
                  _TECHNICIANLOGIN = .TECHNICIANLOGIN
                  _TECHNICIANLOGIN2 = .TECHNICIANLOGIN2
                  _TECHNICIANLOGIN3 = .TECHNICIANLOGIN3
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _ZONECODE = .ZONECODE
                  _ZONEDES = .ZONEDES
                  _TRACK = .TRACK
                  _LOCATION = .LOCATION
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _DETAILS = .DETAILS
                  _KM = .KM
                  _FLAG = .FLAG
                  _IVALL = .IVALL
                  _EXTFILEFLAGB = .EXTFILEFLAGB
                  _BREAKSTART = .BREAKSTART
                  _BREAKEND = .BREAKEND
                  _PARTSCOST = .PARTSCOST
                  _WORKCOST = .WORKCOST
                  _INCUSENUM = .INCUSENUM
                  _SYSTEMCODE = .SYSTEMCODE
                  _SYSTEMDES = .SYSTEMDES
                  _FACILITYNAME = .FACILITYNAME
                  _FACILITYDES = .FACILITYDES
                  _SITENAME = .SITENAME
                  _SITEDES = .SITEDES
                  _GPSX = .GPSX
                  _GPSY = .GPSY
                  _FOLLOWUPIV = .FOLLOWUPIV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCUMENTS_Q
        
        DOCTEXT_Q_2 = 0
        
        TRANSORDER_Q = 1
        
        TRANSORDER_QW = 2
        
        DOCTEXT_Q = 3
        
        GENCUSTNOTES = 4
        
        CUSTPERSONNEL = 5
        
        EXTFILES = 6
        
        LIBRARY = 7
        
        PROJLINK = 8
        
        PROJACTEXTFILES = 9
        
        FAQ2 = 10
        
        FUTUREGENDIARY = 11
        
        CUSTOBLIGO = 12
        
        DOCUMENTS_Q_B = 13
        
        DOCTODOLIST = 14
        
        DOCTODOLISTLOG = 15
        
        SHIPTO2 = 16
        
        DOCUMENTS_Q_A = 17
        
        DOCUMENTS_DCONT = 18
        
        DOCQPORDERS = 19
        
        DOCQPURDEMANDS = 20
        
        FSMTECHDETAILS = 21
        
        ADCFSMITEMS = 22
        
        LASTADCFSMITEMS = 23
        
        INTERNALDIALOGTEXT = 24
        
        DOCQ_CHANGES_LOG = 25
    End Enum
    
    <QueryTitle("Details of Malfunction")>  _
    Public Class QUERY_DOCTEXT_Q_2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTEXT_Q_2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTEXT_Q_2)
            _Parent = nothing
            _Name = "DOCTEXT_Q_2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTEXT_Q_2)
            _Parent = Parent
            _name = "DOCTEXT_Q_2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTEXT_Q_2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTEXT_Q_2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTEXT_Q_2 As DOCTEXT_Q_2 In JsonConvert.DeserializeObject(Of QUERY_DOCTEXT_Q_2)(stream.ReadToEnd).Value
              With _DOCTEXT_Q_2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTEXT_Q_2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTEXT_Q_2 = JsonConvert.DeserializeObject(Of DOCTEXT_Q_2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTEXT_Q_2)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTEXT_Q_2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTEXT_Q_2 as DOCTEXT_Q_2 in value
              If _DOCTEXT_Q_2.Equals(trycast(obj,DOCTEXT_Q_2)) Then
                  value.remove(_DOCTEXT_Q_2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTEXT_Q_2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTEXT_Q_2"
                else
                    return "DOCTEXT_Q_2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Remark"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remark"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTEXT_Q_2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTEXT_Q_2 = JsonConvert.DeserializeObject(Of DOCTEXT_Q_2)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Service Report-Parts")>  _
    Public Class QUERY_TRANSORDER_Q
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDER_Q)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDER_Q)
            _Parent = nothing
            _Name = "TRANSORDER_Q"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Projects/Accounts")
            .add(1, "Invoices/Credit Memos for Item")
            .add(2, "Line Items - Remarks")
            .add(3, "Electronic Signature")
            .add(4, "Intrastat Definitions")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDER_Q)
            _Parent = Parent
            _name = "TRANSORDER_Q_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Projects/Accounts")
            .add(1, "Invoices/Credit Memos for Item")
            .add(2, "Line Items - Remarks")
            .add(3, "Electronic Signature")
            .add(4, "Intrastat Definitions")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDER_Q)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDER_Q)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDER_Q As TRANSORDER_Q In JsonConvert.DeserializeObject(Of QUERY_TRANSORDER_Q)(stream.ReadToEnd).Value
              With _TRANSORDER_Q
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDER_Q)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_Q = JsonConvert.DeserializeObject(Of TRANSORDER_Q)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDER_Q)
                  .CURDATE = obj.CURDATE
                  .TECHNICIANNAME = obj.TECHNICIANNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .FAMILYNAME = obj.FAMILYNAME
                  .FAMILYNAMEDES = obj.FAMILYNAMEDES
                  .SERNUM = obj.SERNUM
                  .CQUANT = obj.CQUANT
                  .PQUANT = obj.PQUANT
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .EXCH = obj.EXCH
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .FLAG = obj.FLAG
                  .NOCHARGENAME = obj.NOCHARGENAME
                  .CHECKING = obj.CHECKING
                  .REVNAME = obj.REVNAME
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTNAME = obj.CUSTNAME
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .PALLETNAME = obj.PALLETNAME
                  .COSTCNAME = obj.COSTCNAME
                  .BUDCODE = obj.BUDCODE
                  .PBUDCODE = obj.PBUDCODE
                  .PACCNAME = obj.PACCNAME
                  .PACCDES = obj.PACCDES
                  .IVNUM = obj.IVNUM
                  .ORDNAME = obj.ORDNAME
                  .OLINE = obj.OLINE
                  .DUEDATEOI = obj.DUEDATEOI
                  .SNTKLINE = obj.SNTKLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDER_Q(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDER_Q as TRANSORDER_Q in value
              If _TRANSORDER_Q.Equals(trycast(obj,TRANSORDER_Q)) Then
                  value.remove(_TRANSORDER_Q)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDER_Q
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetTECHNICIANNAME As Boolean = Boolean.FalseString
        
        Private _TECHNICIANNAME As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _FAMILYNAME As String
        
        Private _FAMILYNAMEDES As String
        
        Private _IsSetSERNUM As Boolean = Boolean.FalseString
        
        Private _SERNUM As String
        
        Private _IsSetCQUANT As Boolean = Boolean.FalseString
        
        Private _CQUANT As Decimal
        
        Private _PQUANT As Decimal
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetNOCHARGENAME As Boolean = Boolean.FalseString
        
        Private _NOCHARGENAME As String
        
        Private _IsSetCHECKING As Boolean = Boolean.FalseString
        
        Private _CHECKING As String
        
        Private _IsSetREVNAME As Boolean = Boolean.FalseString
        
        Private _REVNAME As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _IsSetPALLETNAME As Boolean = Boolean.FalseString
        
        Private _PALLETNAME As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IsSetPBUDCODE As Boolean = Boolean.FalseString
        
        Private _PBUDCODE As String
        
        Private _IsSetPACCNAME As Boolean = Boolean.FalseString
        
        Private _PACCNAME As String
        
        Private _PACCDES As String
        
        Private _IVNUM As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetOLINE As Boolean = Boolean.FalseString
        
        Private _OLINE As Long
        
        Private _DUEDATEOI As System.DateTimeOffset
        
        Private _IsSetSNTKLINE As Boolean = Boolean.FalseString
        
        Private _SNTKLINE As Long
        
        Private _IsSetTRANS As Boolean = Boolean.FalseString
        
        Private _TRANS As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _TRANSIV_D_SUBFORM As QUERY_TRANSIV_D
        
        Private _TRANSORDERTEXT_SUBFORM As QUERY_TRANSORDERTEXT
        
        Private _TRANSDSIGN_SUBFORM As QUERY_TRANSDSIGN
        
        Private _TRANSORDERINTRASTAT_SUBFORM As QUERY_TRANSORDERINTRASTAT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Projects/Accounts"))
            ChildQuery.add(1, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(2, new oNavigation("Line Items - Remarks"))
            ChildQuery.add(3, new oNavigation("Electronic Signature"))
            ChildQuery.add(4, new oNavigation("Intrastat Definitions"))
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _TRANSORDERTEXT_SUBFORM = new QUERY_TRANSORDERTEXT(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            _TRANSORDERINTRASTAT_SUBFORM = new QUERY_TRANSORDERINTRASTAT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSORDERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_TRANSORDERINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Projects/Accounts"))
            ChildQuery.add(1, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(2, new oNavigation("Line Items - Remarks"))
            ChildQuery.add(3, new oNavigation("Electronic Signature"))
            ChildQuery.add(4, new oNavigation("Intrastat Definitions"))
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _TRANSORDERTEXT_SUBFORM = new QUERY_TRANSORDERTEXT(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            _TRANSORDERINTRASTAT_SUBFORM = new QUERY_TRANSORDERINTRASTAT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSORDERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_TRANSORDERINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
                   .add(3, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(4, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDER_Q"
                else
                    return "TRANSORDER_Q_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SNTKLINE={0},TYPE={1}", _
                  string.format("{0}",SNTKLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Technician"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(15),  _
         twodBarcode("TECHNICIANNAME")>  _
        Public Property TECHNICIANNAME() As String
            Get
                return _TECHNICIANNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Technician", value, "^.{0,20}$") then Exit Property
                _IsSetTECHNICIANNAME = True
                If loading Then
                  _TECHNICIANNAME = Value
                Else
                    if not _TECHNICIANNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHNICIANNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHNICIANNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Family"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(31),  _
         [ReadOnly](true),  _
         twodBarcode("FAMILYNAME")>  _
        Public Property FAMILYNAME() As String
            Get
                return _FAMILYNAME
            End Get
            Set
                if not(value is nothing) then
                  _FAMILYNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Family Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("FAMILYNAMEDES")>  _
        Public Property FAMILYNAMEDES() As String
            Get
                return _FAMILYNAMEDES
            End Get
            Set
                if not(value is nothing) then
                  _FAMILYNAMEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(35),  _
         twodBarcode("SERNUM")>  _
        Public Property SERNUM() As String
            Get
                return _SERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number", value, "^.{0,20}$") then Exit Property
                _IsSetSERNUM = True
                If loading Then
                  _SERNUM = Value
                Else
                    if not _SERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCQUANT = True
                If loading Then
                  _CQUANT = Value
                Else
                    if not _CQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Warehouse Balance"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("PQUANT")>  _
        Public Property PQUANT() As nullable(of decimal)
            Get
                return _PQUANT
            End Get
            Set
                if not(value is nothing) then
                  _PQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Warehouse Balance"),  _
         Pos(44),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Actual Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse Balance"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Warehouse Balance"),  _
         Pos(82),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Warehouse Balance"),  _
         Pos(84),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Warehouse Balance"),  _
         Pos(85),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Warehouse Balance"),  _
         Pos(86),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Warehouse Balance"),  _
         Pos(88),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Currency"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(89),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(91),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Exempt Type"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(92),  _
         twodBarcode("NOCHARGENAME")>  _
        Public Property NOCHARGENAME() As String
            Get
                return _NOCHARGENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Exempt Type", value, "^.{0,20}$") then Exit Property
                _IsSetNOCHARGENAME = True
                If loading Then
                  _NOCHARGENAME = Value
                Else
                    if not _NOCHARGENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOCHARGENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOCHARGENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Checking"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(95),  _
         twodBarcode("CHECKING")>  _
        Public Property CHECKING() As String
            Get
                return _CHECKING
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Checking", value, "^.{0,1}$") then Exit Property
                _IsSetCHECKING = True
                If loading Then
                  _CHECKING = Value
                Else
                    if not _CHECKING = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CHECKING", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CHECKING = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(97),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Revision No.", value, "^.{0,10}$") then Exit Property
                _IsSetREVNAME = True
                If loading Then
                  _REVNAME = Value
                Else
                    if not _REVNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REVNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REVNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(100),  _
         Mandatory(true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order/Lot No.", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(102),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Document Currency"),  _
         Pos(104),  _
         Mandatory(true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(106),  _
         Mandatory(true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Pallet"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(108),  _
         twodBarcode("PALLETNAME")>  _
        Public Property PALLETNAME() As String
            Get
                return _PALLETNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Pallet", value, "^.{0,16}$") then Exit Property
                _IsSetPALLETNAME = True
                If loading Then
                  _PALLETNAME = Value
                Else
                    if not _PALLETNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PALLETNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PALLETNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(110),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(112),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Purchasing Budget"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(116),  _
         twodBarcode("PBUDCODE")>  _
        Public Property PBUDCODE() As String
            Get
                return _PBUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Purchasing Budget", value, "^.{0,24}$") then Exit Property
                _IsSetPBUDCODE = True
                If loading Then
                  _PBUDCODE = Value
                Else
                    if not _PBUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PBUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PBUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Expense Account"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(118),  _
         twodBarcode("PACCNAME")>  _
        Public Property PACCNAME() As String
            Get
                return _PACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Expense Account", value, "^.{0,16}$") then Exit Property
                _IsSetPACCNAME = True
                If loading Then
                  _PACCNAME = Value
                Else
                    if not _PACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(119),  _
         [ReadOnly](true),  _
         twodBarcode("PACCDES")>  _
        Public Property PACCDES() As String
            Get
                return _PACCDES
            End Get
            Set
                if not(value is nothing) then
                  _PACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(130),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(132),  _
         twodBarcode("OLINE")>  _
        Public Property OLINE() As nullable (of int64)
            Get
                return _OLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetOLINE = True
                If loading Then
                  _OLINE = Value
                Else
                    if not _OLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(134),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATEOI")>  _
        Public Property DUEDATEOI() As nullable (of DateTimeOffset)
            Get
                return _DUEDATEOI
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATEOI = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("SNTKLINE")>  _
        Public Property SNTKLINE() As nullable (of int64)
            Get
                return _SNTKLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetSNTKLINE = True
                If loading Then
                  _SNTKLINE = Value
                Else
                    if not _SNTKLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNTKLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNTKLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Transaction (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetTRANS = True
                If loading Then
                  _TRANS = Value
                Else
                    if not _TRANS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSIV_D_SUBFORM() As QUERY_TRANSIV_D
            Get
                return _TRANSIV_D_SUBFORM
            End Get
            Set
                _TRANSIV_D_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDERTEXT_SUBFORM() As QUERY_TRANSORDERTEXT
            Get
                return _TRANSORDERTEXT_SUBFORM
            End Get
            Set
                _TRANSORDERTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSDSIGN_SUBFORM() As QUERY_TRANSDSIGN
            Get
                return _TRANSDSIGN_SUBFORM
            End Get
            Set
                _TRANSDSIGN_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDERINTRASTAT_SUBFORM() As QUERY_TRANSORDERINTRASTAT
            Get
                return _TRANSORDERINTRASTAT_SUBFORM
            End Get
            Set
                _TRANSORDERINTRASTAT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetTECHNICIANNAME then
              if f then
                  jw.WriteRaw(", ""TECHNICIANNAME"": ")
              else
                  jw.WriteRaw("""TECHNICIANNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHNICIANNAME)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetSERNUM then
              if f then
                  jw.WriteRaw(", ""SERNUM"": ")
              else
                  jw.WriteRaw("""SERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.SERNUM)
            end if
            if _IsSetCQUANT then
              if f then
                  jw.WriteRaw(", ""CQUANT"": ")
              else
                  jw.WriteRaw("""CQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.CQUANT)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetNOCHARGENAME then
              if f then
                  jw.WriteRaw(", ""NOCHARGENAME"": ")
              else
                  jw.WriteRaw("""NOCHARGENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NOCHARGENAME)
            end if
            if _IsSetCHECKING then
              if f then
                  jw.WriteRaw(", ""CHECKING"": ")
              else
                  jw.WriteRaw("""CHECKING"": ")
                  f = true
              end if
              jw.WriteValue(me.CHECKING)
            end if
            if _IsSetREVNAME then
              if f then
                  jw.WriteRaw(", ""REVNAME"": ")
              else
                  jw.WriteRaw("""REVNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.REVNAME)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetPALLETNAME then
              if f then
                  jw.WriteRaw(", ""PALLETNAME"": ")
              else
                  jw.WriteRaw("""PALLETNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PALLETNAME)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetPBUDCODE then
              if f then
                  jw.WriteRaw(", ""PBUDCODE"": ")
              else
                  jw.WriteRaw("""PBUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PBUDCODE)
            end if
            if _IsSetPACCNAME then
              if f then
                  jw.WriteRaw(", ""PACCNAME"": ")
              else
                  jw.WriteRaw("""PACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PACCNAME)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetOLINE then
              if f then
                  jw.WriteRaw(", ""OLINE"": ")
              else
                  jw.WriteRaw("""OLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.OLINE)
            end if
            if _IsSetSNTKLINE then
              if f then
                  jw.WriteRaw(", ""SNTKLINE"": ")
              else
                  jw.WriteRaw("""SNTKLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.SNTKLINE)
            end if
            if _IsSetTRANS then
              if f then
                  jw.WriteRaw(", ""TRANS"": ")
              else
                  jw.WriteRaw("""TRANS"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANS)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSIV_D_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSIV_D_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDERTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDERTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDERTEXT in _TRANSORDERTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDERTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSDSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSDSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDERINTRASTAT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDERINTRASTAT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDERINTRASTAT in _TRANSORDERINTRASTAT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDERINTRASTAT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDER_Q")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SNTKLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTECHNICIANNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHNICIANNAME")
              .WriteAttributeString("value", me.TECHNICIANNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERNUM")
              .WriteAttributeString("value", me.SERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CQUANT")
              .WriteAttributeString("value", me.CQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOCHARGENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOCHARGENAME")
              .WriteAttributeString("value", me.NOCHARGENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCHECKING then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CHECKING")
              .WriteAttributeString("value", me.CHECKING)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREVNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REVNAME")
              .WriteAttributeString("value", me.REVNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetPALLETNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PALLETNAME")
              .WriteAttributeString("value", me.PALLETNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PBUDCODE")
              .WriteAttributeString("value", me.PBUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACCNAME")
              .WriteAttributeString("value", me.PACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OLINE")
              .WriteAttributeString("value", me.OLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSNTKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNTKLINE")
              .WriteAttributeString("value", me.SNTKLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTRANS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANS")
              .WriteAttributeString("value", me.TRANS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.Value
                itm.toXML(xw,"TRANSIV_D_SUBFORM")
              next
            end if
            if _TRANSORDERTEXT_SUBFORM.value.count > 0 then
              for each itm as TRANSORDERTEXT in _TRANSORDERTEXT_SUBFORM.Value
                itm.toXML(xw,"TRANSORDERTEXT_SUBFORM")
              next
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.Value
                itm.toXML(xw,"TRANSDSIGN_SUBFORM")
              next
            end if
            if _TRANSORDERINTRASTAT_SUBFORM.value.count > 0 then
              for each itm as TRANSORDERINTRASTAT in _TRANSORDERINTRASTAT_SUBFORM.Value
                itm.toXML(xw,"TRANSORDERINTRASTAT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_Q = JsonConvert.DeserializeObject(Of TRANSORDER_Q)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _TECHNICIANNAME = .TECHNICIANNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _FAMILYNAME = .FAMILYNAME
                  _FAMILYNAMEDES = .FAMILYNAMEDES
                  _SERNUM = .SERNUM
                  _CQUANT = .CQUANT
                  _PQUANT = .PQUANT
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _EXCH = .EXCH
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _FLAG = .FLAG
                  _NOCHARGENAME = .NOCHARGENAME
                  _CHECKING = .CHECKING
                  _REVNAME = .REVNAME
                  _SERIALNAME = .SERIALNAME
                  _CUSTNAME = .CUSTNAME
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _PALLETNAME = .PALLETNAME
                  _COSTCNAME = .COSTCNAME
                  _BUDCODE = .BUDCODE
                  _PBUDCODE = .PBUDCODE
                  _PACCNAME = .PACCNAME
                  _PACCDES = .PACCDES
                  _IVNUM = .IVNUM
                  _ORDNAME = .ORDNAME
                  _OLINE = .OLINE
                  _DUEDATEOI = .DUEDATEOI
                  _SNTKLINE = .SNTKLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSORDER_Q
        
        PROJLINK = 0
        
        TRANSIV_D = 1
        
        TRANSORDERTEXT = 2
        
        TRANSDSIGN = 3
        
        TRANSORDERINTRASTAT = 4
    End Enum
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices/Credit Memos for Item")>  _
    Public Class QUERY_TRANSIV_D
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSIV_D)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = nothing
            _Name = "TRANSIV_D"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = Parent
            _name = "TRANSIV_D_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSIV_D)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSIV_D)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSIV_D As TRANSIV_D In JsonConvert.DeserializeObject(Of QUERY_TRANSIV_D)(stream.ReadToEnd).Value
              With _TRANSIV_D
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSIV_D)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSIV_D)
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .IVDATE = obj.IVDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSIV_D(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSIV_D as TRANSIV_D in value
              If _TRANSIV_D.Equals(trycast(obj,TRANSIV_D)) Then
                  value.remove(_TRANSIV_D)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSIV_D
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSIV_D"
                else
                    return "TRANSIV_D_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Invoice/Memo Number"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Invoice/Memo Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Invoice/Memo Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice/Memo Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Invoice/Memo Number"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice/Memo Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(63),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSIV_D")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With obj
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _IVDATE = .IVDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Line Items - Remarks")>  _
    Public Class QUERY_TRANSORDERTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDERTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDERTEXT)
            _Parent = nothing
            _Name = "TRANSORDERTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDERTEXT)
            _Parent = Parent
            _name = "TRANSORDERTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDERTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDERTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDERTEXT As TRANSORDERTEXT In JsonConvert.DeserializeObject(Of QUERY_TRANSORDERTEXT)(stream.ReadToEnd).Value
              With _TRANSORDERTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDERTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERTEXT = JsonConvert.DeserializeObject(Of TRANSORDERTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDERTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDERTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDERTEXT as TRANSORDERTEXT in value
              If _TRANSORDERTEXT.Equals(trycast(obj,TRANSORDERTEXT)) Then
                  value.remove(_TRANSORDERTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDERTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDERTEXT"
                else
                    return "TRANSORDERTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDERTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERTEXT = JsonConvert.DeserializeObject(Of TRANSORDERTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_TRANSDSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSDSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = nothing
            _Name = "TRANSDSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = Parent
            _name = "TRANSDSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSDSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSDSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSDSIGN As TRANSDSIGN In JsonConvert.DeserializeObject(Of QUERY_TRANSDSIGN)(stream.ReadToEnd).Value
              With _TRANSDSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSDSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSDSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSDSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSDSIGN as TRANSDSIGN in value
              If _TRANSDSIGN.Equals(trycast(obj,TRANSDSIGN)) Then
                  value.remove(_TRANSDSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSDSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSDSIGN"
                else
                    return "TRANSDSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(1),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSDSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Intrastat Definitions")>  _
    Public Class QUERY_TRANSORDERINTRASTAT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDERINTRASTAT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDERINTRASTAT)
            _Parent = nothing
            _Name = "TRANSORDERINTRASTAT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDERINTRASTAT)
            _Parent = Parent
            _name = "TRANSORDERINTRASTAT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDERINTRASTAT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDERINTRASTAT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDERINTRASTAT As TRANSORDERINTRASTAT In JsonConvert.DeserializeObject(Of QUERY_TRANSORDERINTRASTAT)(stream.ReadToEnd).Value
              With _TRANSORDERINTRASTAT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDERINTRASTAT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERINTRASTAT = JsonConvert.DeserializeObject(Of TRANSORDERINTRASTAT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDERINTRASTAT)
                  .TRANSTYPE1 = obj.TRANSTYPE1
                  .TRANSTYPE2 = obj.TRANSTYPE2
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDERINTRASTAT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDERINTRASTAT as TRANSORDERINTRASTAT in value
              If _TRANSORDERINTRASTAT.Equals(trycast(obj,TRANSORDERINTRASTAT)) Then
                  value.remove(_TRANSORDERINTRASTAT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDERINTRASTAT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTRANSTYPE1 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE1 As String
        
        Private _IsSetTRANSTYPE2 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE2 As String
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDERINTRASTAT"
                else
                    return "TRANSORDERINTRASTAT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Nature of Trans-1st"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(30),  _
         twodBarcode("TRANSTYPE1")>  _
        Public Property TRANSTYPE1() As String
            Get
                return _TRANSTYPE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-1st", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE1 = True
                If loading Then
                  _TRANSTYPE1 = Value
                Else
                    if not _TRANSTYPE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-2nd"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(40),  _
         twodBarcode("TRANSTYPE2")>  _
        Public Property TRANSTYPE2() As String
            Get
                return _TRANSTYPE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-2nd", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE2 = True
                If loading Then
                  _TRANSTYPE2 = Value
                Else
                    if not _TRANSTYPE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Terms of Delivery"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(50),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Terms of Delivery", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(60),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Nature of Trans-1st"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTRANSTYPE1 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE1"": ")
              else
                  jw.WriteRaw("""TRANSTYPE1"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE1)
            end if
            if _IsSetTRANSTYPE2 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE2"": ")
              else
                  jw.WriteRaw("""TRANSTYPE2"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE2)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDERINTRASTAT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTRANSTYPE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE1")
              .WriteAttributeString("value", me.TRANSTYPE1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE2")
              .WriteAttributeString("value", me.TRANSTYPE2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERINTRASTAT = JsonConvert.DeserializeObject(Of TRANSORDERINTRASTAT)(e.StreamReader.ReadToEnd)
                With obj
                  _TRANSTYPE1 = .TRANSTYPE1
                  _TRANSTYPE2 = .TRANSTYPE2
                  _IMPTERMNAME = .IMPTERMNAME
                  _COUNTRYNAME = .COUNTRYNAME
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Service Report-Labor")>  _
    Public Class QUERY_TRANSORDER_QW
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDER_QW)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDER_QW)
            _Parent = nothing
            _Name = "TRANSORDER_QW"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Projects/Accounts")
            .add(1, "Invoices/Credit Memos for Item")
            .add(2, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDER_QW)
            _Parent = Parent
            _name = "TRANSORDER_QW_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Projects/Accounts")
            .add(1, "Invoices/Credit Memos for Item")
            .add(2, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDER_QW)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDER_QW)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDER_QW As TRANSORDER_QW In JsonConvert.DeserializeObject(Of QUERY_TRANSORDER_QW)(stream.ReadToEnd).Value
              With _TRANSORDER_QW
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDER_QW)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_QW = JsonConvert.DeserializeObject(Of TRANSORDER_QW)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDER_QW)
                  .CURDATE = obj.CURDATE
                  .TECHNICIANNAME = obj.TECHNICIANNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .STIME = obj.STIME
                  .ETIME = obj.ETIME
                  .ROADFLAG = obj.ROADFLAG
                  .INPROADTIME = obj.INPROADTIME
                  .TUNITNAME = obj.TUNITNAME
                  .TQUANT = obj.TQUANT
                  .CQUANT = obj.CQUANT
                  .ONROADFLAG = obj.ONROADFLAG
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .EXCH = obj.EXCH
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .FLAG = obj.FLAG
                  .NOCHARGENAME = obj.NOCHARGENAME
                  .CHECKING = obj.CHECKING
                  .COSTCNAME = obj.COSTCNAME
                  .BUDCODE = obj.BUDCODE
                  .IVNUM = obj.IVNUM
                  .ORDNAME = obj.ORDNAME
                  .OLINE = obj.OLINE
                  .DUEDATEOI = obj.DUEDATEOI
                  .TUCOST = obj.TUCOST
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDER_QW(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDER_QW as TRANSORDER_QW in value
              If _TRANSORDER_QW.Equals(trycast(obj,TRANSORDER_QW)) Then
                  value.remove(_TRANSORDER_QW)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDER_QW
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetTECHNICIANNAME As Boolean = Boolean.FalseString
        
        Private _TECHNICIANNAME As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetROADFLAG As Boolean = Boolean.FalseString
        
        Private _ROADFLAG As String
        
        Private _IsSetINPROADTIME As Boolean = Boolean.FalseString
        
        Private _INPROADTIME As String
        
        Private _TUNITNAME As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _IsSetCQUANT As Boolean = Boolean.FalseString
        
        Private _CQUANT As Decimal
        
        Private _IsSetONROADFLAG As Boolean = Boolean.FalseString
        
        Private _ONROADFLAG As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetNOCHARGENAME As Boolean = Boolean.FalseString
        
        Private _NOCHARGENAME As String
        
        Private _IsSetCHECKING As Boolean = Boolean.FalseString
        
        Private _CHECKING As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IVNUM As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetOLINE As Boolean = Boolean.FalseString
        
        Private _OLINE As Long
        
        Private _DUEDATEOI As System.DateTimeOffset
        
        Private _IsSetTUCOST As Boolean = Boolean.FalseString
        
        Private _TUCOST As Decimal
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetTRANS As Boolean = Boolean.FalseString
        
        Private _TRANS As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _TRANSIV_D_SUBFORM As QUERY_TRANSIV_D
        
        Private _TRANSDSIGN_SUBFORM As QUERY_TRANSDSIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Projects/Accounts"))
            ChildQuery.add(1, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(2, new oNavigation("Electronic Signature"))
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Projects/Accounts"))
            ChildQuery.add(1, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(2, new oNavigation("Electronic Signature"))
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(1, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(2, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDER_QW"
                else
                    return "TRANSORDER_QW_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},TYPE={1}", _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Technician"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(16),  _
         twodBarcode("TECHNICIANNAME")>  _
        Public Property TECHNICIANNAME() As String
            Get
                return _TECHNICIANNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Technician", value, "^.{0,20}$") then Exit Property
                _IsSetTECHNICIANNAME = True
                If loading Then
                  _TECHNICIANNAME = Value
                Else
                    if not _TECHNICIANNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHNICIANNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHNICIANNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Work Hr Part No."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Hr Part No.", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(60),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(62),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Add Travel Time?"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(64),  _
         twodBarcode("ROADFLAG")>  _
        Public Property ROADFLAG() As String
            Get
                return _ROADFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Add Travel Time?", value, "^.{0,1}$") then Exit Property
                _IsSetROADFLAG = True
                If loading Then
                  _ROADFLAG = Value
                Else
                    if not _ROADFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ROADFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ROADFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Travel Tm to Charge"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(66),  _
         twodBarcode("INPROADTIME")>  _
        Public Property INPROADTIME() As String
            Get
                return _INPROADTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Travel Tm to Charge", value, "^.{0,5}$") then Exit Property
                _IsSetINPROADTIME = True
                If loading Then
                  _INPROADTIME = Value
                Else
                    if not _INPROADTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INPROADTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INPROADTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(68),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Hours"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Unit"),  _
         Pos(70),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Actual Hours", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Unit"),  _
         Pos(74),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCQUANT = True
                If loading Then
                  _CQUANT = Value
                Else
                    if not _CQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Travel Time?"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(75),  _
         twodBarcode("ONROADFLAG")>  _
        Public Property ONROADFLAG() As String
            Get
                return _ONROADFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Travel Time?", value, "^.{0,1}$") then Exit Property
                _IsSetONROADFLAG = True
                If loading Then
                  _ONROADFLAG = Value
                Else
                    if not _ONROADFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ONROADFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ONROADFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Unit"),  _
         Pos(82),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(84),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Unit"),  _
         Pos(85),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Unit"),  _
         Pos(86),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Extended Price"),  _
         Pos(88),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Currency"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(89),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(91),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Exempt Type"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(92),  _
         twodBarcode("NOCHARGENAME")>  _
        Public Property NOCHARGENAME() As String
            Get
                return _NOCHARGENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Exempt Type", value, "^.{0,20}$") then Exit Property
                _IsSetNOCHARGENAME = True
                If loading Then
                  _NOCHARGENAME = Value
                Else
                    if not _NOCHARGENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOCHARGENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOCHARGENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Checking"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(95),  _
         twodBarcode("CHECKING")>  _
        Public Property CHECKING() As String
            Get
                return _CHECKING
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Checking", value, "^.{0,1}$") then Exit Property
                _IsSetCHECKING = True
                If loading Then
                  _CHECKING = Value
                Else
                    if not _CHECKING = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CHECKING", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CHECKING = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(110),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(112),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(130),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(132),  _
         twodBarcode("OLINE")>  _
        Public Property OLINE() As nullable (of int64)
            Get
                return _OLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetOLINE = True
                If loading Then
                  _OLINE = Value
                Else
                    if not _OLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(134),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATEOI")>  _
        Public Property DUEDATEOI() As nullable (of DateTimeOffset)
            Get
                return _DUEDATEOI
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATEOI = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost per Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Order"),  _
         Pos(140),  _
         twodBarcode("TUCOST")>  _
        Public Property TUCOST() As nullable(of decimal)
            Get
                return _TUCOST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost per Unit", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTUCOST = True
                If loading Then
                  _TUCOST = Value
                Else
                    if not _TUCOST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TUCOST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TUCOST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Transaction (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetTRANS = True
                If loading Then
                  _TRANS = Value
                Else
                    if not _TRANS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(199),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSIV_D_SUBFORM() As QUERY_TRANSIV_D
            Get
                return _TRANSIV_D_SUBFORM
            End Get
            Set
                _TRANSIV_D_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSDSIGN_SUBFORM() As QUERY_TRANSDSIGN
            Get
                return _TRANSDSIGN_SUBFORM
            End Get
            Set
                _TRANSDSIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetTECHNICIANNAME then
              if f then
                  jw.WriteRaw(", ""TECHNICIANNAME"": ")
              else
                  jw.WriteRaw("""TECHNICIANNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHNICIANNAME)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetROADFLAG then
              if f then
                  jw.WriteRaw(", ""ROADFLAG"": ")
              else
                  jw.WriteRaw("""ROADFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ROADFLAG)
            end if
            if _IsSetINPROADTIME then
              if f then
                  jw.WriteRaw(", ""INPROADTIME"": ")
              else
                  jw.WriteRaw("""INPROADTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.INPROADTIME)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetCQUANT then
              if f then
                  jw.WriteRaw(", ""CQUANT"": ")
              else
                  jw.WriteRaw("""CQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.CQUANT)
            end if
            if _IsSetONROADFLAG then
              if f then
                  jw.WriteRaw(", ""ONROADFLAG"": ")
              else
                  jw.WriteRaw("""ONROADFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ONROADFLAG)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetNOCHARGENAME then
              if f then
                  jw.WriteRaw(", ""NOCHARGENAME"": ")
              else
                  jw.WriteRaw("""NOCHARGENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NOCHARGENAME)
            end if
            if _IsSetCHECKING then
              if f then
                  jw.WriteRaw(", ""CHECKING"": ")
              else
                  jw.WriteRaw("""CHECKING"": ")
                  f = true
              end if
              jw.WriteValue(me.CHECKING)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetOLINE then
              if f then
                  jw.WriteRaw(", ""OLINE"": ")
              else
                  jw.WriteRaw("""OLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.OLINE)
            end if
            if _IsSetTUCOST then
              if f then
                  jw.WriteRaw(", ""TUCOST"": ")
              else
                  jw.WriteRaw("""TUCOST"": ")
                  f = true
              end if
              jw.WriteValue(me.TUCOST)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetTRANS then
              if f then
                  jw.WriteRaw(", ""TRANS"": ")
              else
                  jw.WriteRaw("""TRANS"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANS)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSIV_D_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSIV_D_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSDSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSDSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDER_QW")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTECHNICIANNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHNICIANNAME")
              .WriteAttributeString("value", me.TECHNICIANNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetROADFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ROADFLAG")
              .WriteAttributeString("value", me.ROADFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetINPROADTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INPROADTIME")
              .WriteAttributeString("value", me.INPROADTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetCQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CQUANT")
              .WriteAttributeString("value", me.CQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetONROADFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ONROADFLAG")
              .WriteAttributeString("value", me.ONROADFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOCHARGENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOCHARGENAME")
              .WriteAttributeString("value", me.NOCHARGENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCHECKING then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CHECKING")
              .WriteAttributeString("value", me.CHECKING)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OLINE")
              .WriteAttributeString("value", me.OLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTUCOST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TUCOST")
              .WriteAttributeString("value", me.TUCOST)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTRANS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANS")
              .WriteAttributeString("value", me.TRANS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.Value
                itm.toXML(xw,"TRANSIV_D_SUBFORM")
              next
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.Value
                itm.toXML(xw,"TRANSDSIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_QW = JsonConvert.DeserializeObject(Of TRANSORDER_QW)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _TECHNICIANNAME = .TECHNICIANNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _STIME = .STIME
                  _ETIME = .ETIME
                  _ROADFLAG = .ROADFLAG
                  _INPROADTIME = .INPROADTIME
                  _TUNITNAME = .TUNITNAME
                  _TQUANT = .TQUANT
                  _CQUANT = .CQUANT
                  _ONROADFLAG = .ONROADFLAG
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _EXCH = .EXCH
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _FLAG = .FLAG
                  _NOCHARGENAME = .NOCHARGENAME
                  _CHECKING = .CHECKING
                  _COSTCNAME = .COSTCNAME
                  _BUDCODE = .BUDCODE
                  _IVNUM = .IVNUM
                  _ORDNAME = .ORDNAME
                  _OLINE = .OLINE
                  _DUEDATEOI = .DUEDATEOI
                  _TUCOST = .TUCOST
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSORDER_QW
        
        PROJLINK = 0
        
        TRANSIV_D = 1
        
        TRANSDSIGN = 2
    End Enum
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices/Credit Memos for Item")>  _
    Public Class QUERY_TRANSIV_D
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSIV_D)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = nothing
            _Name = "TRANSIV_D"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = Parent
            _name = "TRANSIV_D_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSIV_D)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSIV_D)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSIV_D As TRANSIV_D In JsonConvert.DeserializeObject(Of QUERY_TRANSIV_D)(stream.ReadToEnd).Value
              With _TRANSIV_D
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSIV_D)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSIV_D)
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .IVDATE = obj.IVDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSIV_D(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSIV_D as TRANSIV_D in value
              If _TRANSIV_D.Equals(trycast(obj,TRANSIV_D)) Then
                  value.remove(_TRANSIV_D)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSIV_D
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSIV_D"
                else
                    return "TRANSIV_D_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Invoice/Memo Number"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Invoice/Memo Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Invoice/Memo Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice/Memo Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Invoice/Memo Number"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice/Memo Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(63),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSIV_D")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With obj
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _IVDATE = .IVDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_TRANSDSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSDSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = nothing
            _Name = "TRANSDSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = Parent
            _name = "TRANSDSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSDSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSDSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSDSIGN As TRANSDSIGN In JsonConvert.DeserializeObject(Of QUERY_TRANSDSIGN)(stream.ReadToEnd).Value
              With _TRANSDSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSDSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSDSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSDSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSDSIGN as TRANSDSIGN in value
              If _TRANSDSIGN.Equals(trycast(obj,TRANSDSIGN)) Then
                  value.remove(_TRANSDSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSDSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSDSIGN"
                else
                    return "TRANSDSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(1),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSDSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Description of Repair")>  _
    Public Class QUERY_DOCTEXT_Q
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTEXT_Q)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTEXT_Q)
            _Parent = nothing
            _Name = "DOCTEXT_Q"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTEXT_Q)
            _Parent = Parent
            _name = "DOCTEXT_Q_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTEXT_Q)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTEXT_Q)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTEXT_Q As DOCTEXT_Q In JsonConvert.DeserializeObject(Of QUERY_DOCTEXT_Q)(stream.ReadToEnd).Value
              With _DOCTEXT_Q
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTEXT_Q)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTEXT_Q = JsonConvert.DeserializeObject(Of DOCTEXT_Q)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTEXT_Q)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTEXT_Q(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTEXT_Q as DOCTEXT_Q in value
              If _DOCTEXT_Q.Equals(trycast(obj,DOCTEXT_Q)) Then
                  value.remove(_DOCTEXT_Q)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTEXT_Q
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTEXT_Q"
                else
                    return "DOCTEXT_Q_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Remark"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remark"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTEXT_Q")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTEXT_Q = JsonConvert.DeserializeObject(Of DOCTEXT_Q)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Contacts")>  _
    Public Class QUERY_CUSTPERSONNEL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTPERSONNEL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTPERSONNEL)
            _Parent = nothing
            _Name = "CUSTPERSONNEL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Address")
            .add(1, "Who Networked With")
            .add(2, "Addit. Phone Nos.- Contacts")
            .add(3, "Business Classifications")
            .add(4, "Courses of Study")
            .add(5, "Contacts-Additional Data")
            .add(6, "Internet Privileges")
            .add(7, "Contacts - Text")
            .add(8, "Set Up Skype")
            .add(9, "To Do Item")
            .add(10, "History of Statuses")
            .add(11, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTPERSONNEL)
            _Parent = Parent
            _name = "CUSTPERSONNEL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Address")
            .add(1, "Who Networked With")
            .add(2, "Addit. Phone Nos.- Contacts")
            .add(3, "Business Classifications")
            .add(4, "Courses of Study")
            .add(5, "Contacts-Additional Data")
            .add(6, "Internet Privileges")
            .add(7, "Contacts - Text")
            .add(8, "Set Up Skype")
            .add(9, "To Do Item")
            .add(10, "History of Statuses")
            .add(11, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTPERSONNEL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTPERSONNEL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTPERSONNEL As CUSTPERSONNEL In JsonConvert.DeserializeObject(Of QUERY_CUSTPERSONNEL)(stream.ReadToEnd).Value
              With _CUSTPERSONNEL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTPERSONNEL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTPERSONNEL = JsonConvert.DeserializeObject(Of CUSTPERSONNEL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTPERSONNEL)
                  .NAME = obj.NAME
                  .ENAME = obj.ENAME
                  .FIRSTNAME = obj.FIRSTNAME
                  .LASTNAME = obj.LASTNAME
                  .STATDES = obj.STATDES
                  .INACTIVE = obj.INACTIVE
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .GENDER = obj.GENDER
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .POSITIONDES = obj.POSITIONDES
                  .TITLEDES = obj.TITLEDES
                  .OFFICEPHONE = obj.OFFICEPHONE
                  .HOMEPHONE = obj.HOMEPHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .MAILAPP = obj.MAILAPP
                  .POSITIONCODE = obj.POSITIONCODE
                  .POSITIONDES2 = obj.POSITIONDES2
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .MAINPHONE = obj.MAINPHONE
                  .DEALFLAG = obj.DEALFLAG
                  .CPROFFLAG = obj.CPROFFLAG
                  .ORDFLAG = obj.ORDFLAG
                  .DOCFLAG = obj.DOCFLAG
                  .CIVFLAG = obj.CIVFLAG
                  .TIVFLAG = obj.TIVFLAG
                  .FNCFLAG = obj.FNCFLAG
                  .SERVCALLFLAG = obj.SERVCALLFLAG
                  .CONSINGEEFLAG = obj.CONSINGEEFLAG
                  .NOTIFYFLAG = obj.NOTIFYFLAG
                  .DEPARTMENT = obj.DEPARTMENT
                  .PROFESSION = obj.PROFESSION
                  .MANAGERNAME = obj.MANAGERNAME
                  .ASSISTANTNAME = obj.ASSISTANTNAME
                  .ASSISTANTPHONE = obj.ASSISTANTPHONE
                  .BIRTHDATE10 = obj.BIRTHDATE10
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .EXTFILENAME = obj.EXTFILENAME
                  .PHONE = obj.PHONE
                  .FIRM = obj.FIRM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTPERSONNEL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTPERSONNEL as CUSTPERSONNEL in value
              If _CUSTPERSONNEL.Equals(trycast(obj,CUSTPERSONNEL)) Then
                  value.remove(_CUSTPERSONNEL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTPERSONNEL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetENAME As Boolean = Boolean.FalseString
        
        Private _ENAME As String
        
        Private _IsSetFIRSTNAME As Boolean = Boolean.FalseString
        
        Private _FIRSTNAME As String
        
        Private _IsSetLASTNAME As Boolean = Boolean.FalseString
        
        Private _LASTNAME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _INACTIVE As String
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _IsSetGENDER As Boolean = Boolean.FalseString
        
        Private _GENDER As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetCELLPHONE As Boolean = Boolean.FalseString
        
        Private _CELLPHONE As String
        
        Private _IsSetPOSITIONDES As Boolean = Boolean.FalseString
        
        Private _POSITIONDES As String
        
        Private _IsSetTITLEDES As Boolean = Boolean.FalseString
        
        Private _TITLEDES As String
        
        Private _IsSetOFFICEPHONE As Boolean = Boolean.FalseString
        
        Private _OFFICEPHONE As String
        
        Private _IsSetHOMEPHONE As Boolean = Boolean.FalseString
        
        Private _HOMEPHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _IsSetMAILAPP As Boolean = Boolean.FalseString
        
        Private _MAILAPP As String
        
        Private _IsSetPOSITIONCODE As Boolean = Boolean.FalseString
        
        Private _POSITIONCODE As String
        
        Private _POSITIONDES2 As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetMAINPHONE As Boolean = Boolean.FalseString
        
        Private _MAINPHONE As String
        
        Private _IsSetDEALFLAG As Boolean = Boolean.FalseString
        
        Private _DEALFLAG As String
        
        Private _IsSetCPROFFLAG As Boolean = Boolean.FalseString
        
        Private _CPROFFLAG As String
        
        Private _IsSetORDFLAG As Boolean = Boolean.FalseString
        
        Private _ORDFLAG As String
        
        Private _IsSetDOCFLAG As Boolean = Boolean.FalseString
        
        Private _DOCFLAG As String
        
        Private _IsSetCIVFLAG As Boolean = Boolean.FalseString
        
        Private _CIVFLAG As String
        
        Private _IsSetTIVFLAG As Boolean = Boolean.FalseString
        
        Private _TIVFLAG As String
        
        Private _IsSetFNCFLAG As Boolean = Boolean.FalseString
        
        Private _FNCFLAG As String
        
        Private _IsSetSERVCALLFLAG As Boolean = Boolean.FalseString
        
        Private _SERVCALLFLAG As String
        
        Private _IsSetCONSINGEEFLAG As Boolean = Boolean.FalseString
        
        Private _CONSINGEEFLAG As String
        
        Private _IsSetNOTIFYFLAG As Boolean = Boolean.FalseString
        
        Private _NOTIFYFLAG As String
        
        Private _IsSetDEPARTMENT As Boolean = Boolean.FalseString
        
        Private _DEPARTMENT As String
        
        Private _IsSetPROFESSION As Boolean = Boolean.FalseString
        
        Private _PROFESSION As String
        
        Private _IsSetMANAGERNAME As Boolean = Boolean.FalseString
        
        Private _MANAGERNAME As String
        
        Private _IsSetASSISTANTNAME As Boolean = Boolean.FalseString
        
        Private _ASSISTANTNAME As String
        
        Private _IsSetASSISTANTPHONE As Boolean = Boolean.FalseString
        
        Private _ASSISTANTPHONE As String
        
        Private _IsSetBIRTHDATE10 As Boolean = Boolean.FalseString
        
        Private _BIRTHDATE10 As System.DateTimeOffset
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As Long
        
        Private _IsSetFIRM As Boolean = Boolean.FalseString
        
        Private _FIRM As String
        
        Private _BILLTO_SUBFORM As QUERY_BILLTO
        
        Private _PHONEBRELCUST_SUBFORM As QUERY_PHONEBRELCUST
        
        Private _CUSTPERSONNELLIST_SUBFORM As QUERY_CUSTPERSONNELLIST
        
        Private _PHONEBDOMAINS_SUBFORM As QUERY_PHONEBDOMAINS
        
        Private _CONTACTCOURSES_SUBFORM As QUERY_CONTACTCOURSES
        
        Private _PHONEBOOKA_SUBFORM As QUERY_PHONEBOOKA
        
        Private _PHONEBOOKMODULES_SUBFORM As QUERY_PHONEBOOKMODULES
        
        Private _PHONEBOOKTEXT_SUBFORM As QUERY_PHONEBOOKTEXT
        
        Private _INSTANTMESSAGING_SUBFORM As QUERY_INSTANTMESSAGING
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CHANGE_LOG_SUBFORM As QUERY_CHANGE_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Address"))
            ChildQuery.add(1, new oNavigation("Who Networked With"))
            ChildQuery.add(2, new oNavigation("Addit. Phone Nos.- Contacts"))
            ChildQuery.add(3, new oNavigation("Business Classifications"))
            ChildQuery.add(4, new oNavigation("Courses of Study"))
            ChildQuery.add(5, new oNavigation("Contacts-Additional Data"))
            ChildQuery.add(6, new oNavigation("Internet Privileges"))
            ChildQuery.add(7, new oNavigation("Contacts - Text"))
            ChildQuery.add(8, new oNavigation("Set Up Skype"))
            ChildQuery.add(9, new oNavigation("To Do Item"))
            ChildQuery.add(10, new oNavigation("History of Statuses"))
            ChildQuery.add(11, new oNavigation("History of Changes"))
            _BILLTO_SUBFORM = new QUERY_BILLTO(me)
            _PHONEBRELCUST_SUBFORM = new QUERY_PHONEBRELCUST(me)
            _CUSTPERSONNELLIST_SUBFORM = new QUERY_CUSTPERSONNELLIST(me)
            _PHONEBDOMAINS_SUBFORM = new QUERY_PHONEBDOMAINS(me)
            _CONTACTCOURSES_SUBFORM = new QUERY_CONTACTCOURSES(me)
            _PHONEBOOKA_SUBFORM = new QUERY_PHONEBOOKA(me)
            _PHONEBOOKMODULES_SUBFORM = new QUERY_PHONEBOOKMODULES(me)
            _PHONEBOOKTEXT_SUBFORM = new QUERY_PHONEBOOKTEXT(me)
            _INSTANTMESSAGING_SUBFORM = new QUERY_INSTANTMESSAGING(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CHANGE_LOG_SUBFORM = new QUERY_CHANGE_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_BILLTO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PHONEBRELCUST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTPERSONNELLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PHONEBDOMAINS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_CONTACTCOURSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PHONEBOOKA_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PHONEBOOKMODULES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PHONEBOOKTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_INSTANTMESSAGING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Address"))
            ChildQuery.add(1, new oNavigation("Who Networked With"))
            ChildQuery.add(2, new oNavigation("Addit. Phone Nos.- Contacts"))
            ChildQuery.add(3, new oNavigation("Business Classifications"))
            ChildQuery.add(4, new oNavigation("Courses of Study"))
            ChildQuery.add(5, new oNavigation("Contacts-Additional Data"))
            ChildQuery.add(6, new oNavigation("Internet Privileges"))
            ChildQuery.add(7, new oNavigation("Contacts - Text"))
            ChildQuery.add(8, new oNavigation("Set Up Skype"))
            ChildQuery.add(9, new oNavigation("To Do Item"))
            ChildQuery.add(10, new oNavigation("History of Statuses"))
            ChildQuery.add(11, new oNavigation("History of Changes"))
            _BILLTO_SUBFORM = new QUERY_BILLTO(me)
            _PHONEBRELCUST_SUBFORM = new QUERY_PHONEBRELCUST(me)
            _CUSTPERSONNELLIST_SUBFORM = new QUERY_CUSTPERSONNELLIST(me)
            _PHONEBDOMAINS_SUBFORM = new QUERY_PHONEBDOMAINS(me)
            _CONTACTCOURSES_SUBFORM = new QUERY_CONTACTCOURSES(me)
            _PHONEBOOKA_SUBFORM = new QUERY_PHONEBOOKA(me)
            _PHONEBOOKMODULES_SUBFORM = new QUERY_PHONEBOOKMODULES(me)
            _PHONEBOOKTEXT_SUBFORM = new QUERY_PHONEBOOKTEXT(me)
            _INSTANTMESSAGING_SUBFORM = new QUERY_INSTANTMESSAGING(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CHANGE_LOG_SUBFORM = new QUERY_CHANGE_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_BILLTO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PHONEBRELCUST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTPERSONNELLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PHONEBDOMAINS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_CONTACTCOURSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PHONEBOOKA_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PHONEBOOKMODULES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PHONEBOOKTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_INSTANTMESSAGING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Address", _BILLTO_SUBFORM))
                   .add(1, new oNavigation("Who Networked With", _PHONEBRELCUST_SUBFORM))
                   .add(2, new oNavigation("Addit. Phone Nos.- Contacts", _CUSTPERSONNELLIST_SUBFORM))
                   .add(3, new oNavigation("Business Classifications", _PHONEBDOMAINS_SUBFORM))
                   .add(4, new oNavigation("Courses of Study", _CONTACTCOURSES_SUBFORM))
                   .add(5, new oNavigation("Contacts-Additional Data", _PHONEBOOKA_SUBFORM))
                   .add(6, new oNavigation("Internet Privileges", _PHONEBOOKMODULES_SUBFORM))
                   .add(7, new oNavigation("Contacts - Text", _PHONEBOOKTEXT_SUBFORM))
                   .add(8, new oNavigation("Set Up Skype", _INSTANTMESSAGING_SUBFORM))
                   .add(9, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(10, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(11, new oNavigation("History of Changes", _CHANGE_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTPERSONNEL"
                else
                    return "CUSTPERSONNEL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "NAME={0},FIRM={1}", _
                  string.format("'{0}'",NAME), _
                  string.format("'{0}'",FIRM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(5),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(6),  _
         twodBarcode("ENAME")>  _
        Public Property ENAME() As String
            Get
                return _ENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,32}$") then Exit Property
                _IsSetENAME = True
                If loading Then
                  _ENAME = Value
                Else
                    if not _ENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("First Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(8),  _
         twodBarcode("FIRSTNAME")>  _
        Public Property FIRSTNAME() As String
            Get
                return _FIRSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("First Name", value, "^.{0,16}$") then Exit Property
                _IsSetFIRSTNAME = True
                If loading Then
                  _FIRSTNAME = Value
                Else
                    if not _FIRSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FIRSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FIRSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Last Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(9),  _
         twodBarcode("LASTNAME")>  _
        Public Property LASTNAME() As String
            Get
                return _LASTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Last Name", value, "^.{0,20}$") then Exit Property
                _IsSetLASTNAME = True
                If loading Then
                  _LASTNAME = Value
                Else
                    if not _LASTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LASTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LASTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,20}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Inactive"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("INACTIVE")>  _
        Public Property INACTIVE() As String
            Get
                return _INACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _INACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(12),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Gender"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(13),  _
         twodBarcode("GENDER")>  _
        Public Property GENDER() As String
            Get
                return _GENDER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Gender", value, "^.{0,1}$") then Exit Property
                _IsSetGENDER = True
                If loading Then
                  _GENDER = Value
                Else
                    if not _GENDER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GENDER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GENDER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(14),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(15),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cell Phone", value, "^.{0,20}$") then Exit Property
                _IsSetCELLPHONE = True
                If loading Then
                  _CELLPHONE = Value
                Else
                    if not _CELLPHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CELLPHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CELLPHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Job Title"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(16),  _
         twodBarcode("POSITIONDES")>  _
        Public Property POSITIONDES() As String
            Get
                return _POSITIONDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Job Title", value, "^.{0,32}$") then Exit Property
                _IsSetPOSITIONDES = True
                If loading Then
                  _POSITIONDES = Value
                Else
                    if not _POSITIONDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("POSITIONDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _POSITIONDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Title"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(17),  _
         twodBarcode("TITLEDES")>  _
        Public Property TITLEDES() As String
            Get
                return _TITLEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Title", value, "^.{0,5}$") then Exit Property
                _IsSetTITLEDES = True
                If loading Then
                  _TITLEDES = Value
                Else
                    if not _TITLEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TITLEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TITLEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Office Phone"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(18),  _
         twodBarcode("OFFICEPHONE")>  _
        Public Property OFFICEPHONE() As String
            Get
                return _OFFICEPHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Office Phone", value, "^.{0,20}$") then Exit Property
                _IsSetOFFICEPHONE = True
                If loading Then
                  _OFFICEPHONE = Value
                Else
                    if not _OFFICEPHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OFFICEPHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OFFICEPHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Home Phone"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(22),  _
         twodBarcode("HOMEPHONE")>  _
        Public Property HOMEPHONE() As String
            Get
                return _HOMEPHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Home Phone", value, "^.{0,20}$") then Exit Property
                _IsSetHOMEPHONE = True
                If loading Then
                  _HOMEPHONE = Value
                Else
                    if not _HOMEPHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("HOMEPHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _HOMEPHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(24),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(26),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Consents to Rcv Mail"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(30),  _
         twodBarcode("MAILAPP")>  _
        Public Property MAILAPP() As String
            Get
                return _MAILAPP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Consents to Rcv Mail", value, "^.{0,1}$") then Exit Property
                _IsSetMAILAPP = True
                If loading Then
                  _MAILAPP = Value
                Else
                    if not _MAILAPP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAILAPP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAILAPP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Code (Position)"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(40),  _
         twodBarcode("POSITIONCODE")>  _
        Public Property POSITIONCODE() As String
            Get
                return _POSITIONCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Code (Position)", value, "^.{0,4}$") then Exit Property
                _IsSetPOSITIONCODE = True
                If loading Then
                  _POSITIONCODE = Value
                Else
                    if not _POSITIONCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("POSITIONCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _POSITIONCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Position"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("POSITIONDES2")>  _
        Public Property POSITIONDES2() As String
            Get
                return _POSITIONDES2
            End Get
            Set
                if not(value is nothing) then
                  _POSITIONDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(52),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(53),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Main Contact"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(55),  _
         twodBarcode("MAINPHONE")>  _
        Public Property MAINPHONE() As String
            Get
                return _MAINPHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Main Contact", value, "^.{0,1}$") then Exit Property
                _IsSetMAINPHONE = True
                If loading Then
                  _MAINPHONE = Value
                Else
                    if not _MAINPHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAINPHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAINPHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Marketing Contact"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(59),  _
         twodBarcode("DEALFLAG")>  _
        Public Property DEALFLAG() As String
            Get
                return _DEALFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Marketing Contact", value, "^.{0,1}$") then Exit Property
                _IsSetDEALFLAG = True
                If loading Then
                  _DEALFLAG = Value
                Else
                    if not _DEALFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEALFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEALFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Quote Contact"),  _
         nType("Edm.String"),  _
         tab("Consents to Rcv Mail"),  _
         Pos(60),  _
         twodBarcode("CPROFFLAG")>  _
        Public Property CPROFFLAG() As String
            Get
                return _CPROFFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quote Contact", value, "^.{0,1}$") then Exit Property
                _IsSetCPROFFLAG = True
                If loading Then
                  _CPROFFLAG = Value
                Else
                    if not _CPROFFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPROFFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPROFFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Order Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(65),  _
         twodBarcode("ORDFLAG")>  _
        Public Property ORDFLAG() As String
            Get
                return _ORDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Order Contact", value, "^.{0,1}$") then Exit Property
                _IsSetORDFLAG = True
                If loading Then
                  _ORDFLAG = Value
                Else
                    if not _ORDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(70),  _
         twodBarcode("DOCFLAG")>  _
        Public Property DOCFLAG() As String
            Get
                return _DOCFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Contact", value, "^.{0,1}$") then Exit Property
                _IsSetDOCFLAG = True
                If loading Then
                  _DOCFLAG = Value
                Else
                    if not _DOCFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(72),  _
         twodBarcode("CIVFLAG")>  _
        Public Property CIVFLAG() As String
            Get
                return _CIVFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Invoice Contact", value, "^.{0,1}$") then Exit Property
                _IsSetCIVFLAG = True
                If loading Then
                  _CIVFLAG = Value
                Else
                    if not _CIVFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CIVFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CIVFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Aging Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(74),  _
         twodBarcode("TIVFLAG")>  _
        Public Property TIVFLAG() As String
            Get
                return _TIVFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Aging Contact", value, "^.{0,1}$") then Exit Property
                _IsSetTIVFLAG = True
                If loading Then
                  _TIVFLAG = Value
                Else
                    if not _TIVFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TIVFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TIVFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust Statemt Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(76),  _
         twodBarcode("FNCFLAG")>  _
        Public Property FNCFLAG() As String
            Get
                return _FNCFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust Statemt Contact", value, "^.{0,1}$") then Exit Property
                _IsSetFNCFLAG = True
                If loading Then
                  _FNCFLAG = Value
                Else
                    if not _FNCFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FNCFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FNCFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Service Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(79),  _
         twodBarcode("SERVCALLFLAG")>  _
        Public Property SERVCALLFLAG() As String
            Get
                return _SERVCALLFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Service Contact", value, "^.{0,1}$") then Exit Property
                _IsSetSERVCALLFLAG = True
                If loading Then
                  _SERVCALLFLAG = Value
                Else
                    if not _SERVCALLFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERVCALLFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERVCALLFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Outgo Vouch Contact"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(80),  _
         twodBarcode("CONSINGEEFLAG")>  _
        Public Property CONSINGEEFLAG() As String
            Get
                return _CONSINGEEFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Outgo Vouch Contact", value, "^.{0,1}$") then Exit Property
                _IsSetCONSINGEEFLAG = True
                If loading Then
                  _CONSINGEEFLAG = Value
                Else
                    if not _CONSINGEEFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CONSINGEEFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CONSINGEEFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Outgo Vouch Contact2"),  _
         nType("Edm.String"),  _
         tab("Sales Order Contact"),  _
         Pos(82),  _
         twodBarcode("NOTIFYFLAG")>  _
        Public Property NOTIFYFLAG() As String
            Get
                return _NOTIFYFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Outgo Vouch Contact2", value, "^.{0,1}$") then Exit Property
                _IsSetNOTIFYFLAG = True
                If loading Then
                  _NOTIFYFLAG = Value
                Else
                    if not _NOTIFYFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOTIFYFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOTIFYFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Department"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(100),  _
         twodBarcode("DEPARTMENT")>  _
        Public Property DEPARTMENT() As String
            Get
                return _DEPARTMENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Department", value, "^.{0,16}$") then Exit Property
                _IsSetDEPARTMENT = True
                If loading Then
                  _DEPARTMENT = Value
                Else
                    if not _DEPARTMENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEPARTMENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEPARTMENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profession"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(102),  _
         twodBarcode("PROFESSION")>  _
        Public Property PROFESSION() As String
            Get
                return _PROFESSION
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profession", value, "^.{0,16}$") then Exit Property
                _IsSetPROFESSION = True
                If loading Then
                  _PROFESSION = Value
                Else
                    if not _PROFESSION = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROFESSION", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROFESSION = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Manager's Name"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(104),  _
         twodBarcode("MANAGERNAME")>  _
        Public Property MANAGERNAME() As String
            Get
                return _MANAGERNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Manager's Name", value, "^.{0,24}$") then Exit Property
                _IsSetMANAGERNAME = True
                If loading Then
                  _MANAGERNAME = Value
                Else
                    if not _MANAGERNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MANAGERNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MANAGERNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assistant's Name"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(106),  _
         twodBarcode("ASSISTANTNAME")>  _
        Public Property ASSISTANTNAME() As String
            Get
                return _ASSISTANTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assistant's Name", value, "^.{0,24}$") then Exit Property
                _IsSetASSISTANTNAME = True
                If loading Then
                  _ASSISTANTNAME = Value
                Else
                    if not _ASSISTANTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ASSISTANTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ASSISTANTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assistant's Phone"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(107),  _
         twodBarcode("ASSISTANTPHONE")>  _
        Public Property ASSISTANTPHONE() As String
            Get
                return _ASSISTANTPHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assistant's Phone", value, "^.{0,20}$") then Exit Property
                _IsSetASSISTANTPHONE = True
                If loading Then
                  _ASSISTANTPHONE = Value
                Else
                    if not _ASSISTANTPHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ASSISTANTPHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ASSISTANTPHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date of Birth"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Department"),  _
         Pos(108),  _
         twodBarcode("BIRTHDATE10")>  _
        Public Property BIRTHDATE10() As nullable (of DateTimeOffset)
            Get
                return _BIRTHDATE10
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date of Birth", value, "^.*$") then Exit Property
                _IsSetBIRTHDATE10 = True
                If loading Then
                  _BIRTHDATE10 = Value
                Else
                    if not _BIRTHDATE10 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BIRTHDATE10", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BIRTHDATE10 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(110),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Department"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Photograph"),  _
         nType("Edm.String"),  _
         tab("Photograph"),  _
         Pos(120),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Photograph", value, "^.{0,66}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Photograph"),  _
         Pos(0),  _
         Browsable(false),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As nullable (of int64)
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Photograph"),  _
         Pos(30),  _
         Browsable(false),  _
         twodBarcode("FIRM")>  _
        Public Property FIRM() As String
            Get
                return _FIRM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Company", value, "^.{0,48}$") then Exit Property
                _IsSetFIRM = True
                If loading Then
                  _FIRM = Value
                Else
                    if not _FIRM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FIRM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FIRM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property BILLTO_SUBFORM() As QUERY_BILLTO
            Get
                return _BILLTO_SUBFORM
            End Get
            Set
                _BILLTO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PHONEBRELCUST_SUBFORM() As QUERY_PHONEBRELCUST
            Get
                return _PHONEBRELCUST_SUBFORM
            End Get
            Set
                _PHONEBRELCUST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTPERSONNELLIST_SUBFORM() As QUERY_CUSTPERSONNELLIST
            Get
                return _CUSTPERSONNELLIST_SUBFORM
            End Get
            Set
                _CUSTPERSONNELLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PHONEBDOMAINS_SUBFORM() As QUERY_PHONEBDOMAINS
            Get
                return _PHONEBDOMAINS_SUBFORM
            End Get
            Set
                _PHONEBDOMAINS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CONTACTCOURSES_SUBFORM() As QUERY_CONTACTCOURSES
            Get
                return _CONTACTCOURSES_SUBFORM
            End Get
            Set
                _CONTACTCOURSES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PHONEBOOKA_SUBFORM() As QUERY_PHONEBOOKA
            Get
                return _PHONEBOOKA_SUBFORM
            End Get
            Set
                _PHONEBOOKA_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PHONEBOOKMODULES_SUBFORM() As QUERY_PHONEBOOKMODULES
            Get
                return _PHONEBOOKMODULES_SUBFORM
            End Get
            Set
                _PHONEBOOKMODULES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PHONEBOOKTEXT_SUBFORM() As QUERY_PHONEBOOKTEXT
            Get
                return _PHONEBOOKTEXT_SUBFORM
            End Get
            Set
                _PHONEBOOKTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INSTANTMESSAGING_SUBFORM() As QUERY_INSTANTMESSAGING
            Get
                return _INSTANTMESSAGING_SUBFORM
            End Get
            Set
                _INSTANTMESSAGING_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGE_LOG_SUBFORM() As QUERY_CHANGE_LOG
            Get
                return _CHANGE_LOG_SUBFORM
            End Get
            Set
                _CHANGE_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetENAME then
              if f then
                  jw.WriteRaw(", ""ENAME"": ")
              else
                  jw.WriteRaw("""ENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ENAME)
            end if
            if _IsSetFIRSTNAME then
              if f then
                  jw.WriteRaw(", ""FIRSTNAME"": ")
              else
                  jw.WriteRaw("""FIRSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.FIRSTNAME)
            end if
            if _IsSetLASTNAME then
              if f then
                  jw.WriteRaw(", ""LASTNAME"": ")
              else
                  jw.WriteRaw("""LASTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LASTNAME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetGENDER then
              if f then
                  jw.WriteRaw(", ""GENDER"": ")
              else
                  jw.WriteRaw("""GENDER"": ")
                  f = true
              end if
              jw.WriteValue(me.GENDER)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetCELLPHONE then
              if f then
                  jw.WriteRaw(", ""CELLPHONE"": ")
              else
                  jw.WriteRaw("""CELLPHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.CELLPHONE)
            end if
            if _IsSetPOSITIONDES then
              if f then
                  jw.WriteRaw(", ""POSITIONDES"": ")
              else
                  jw.WriteRaw("""POSITIONDES"": ")
                  f = true
              end if
              jw.WriteValue(me.POSITIONDES)
            end if
            if _IsSetTITLEDES then
              if f then
                  jw.WriteRaw(", ""TITLEDES"": ")
              else
                  jw.WriteRaw("""TITLEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.TITLEDES)
            end if
            if _IsSetOFFICEPHONE then
              if f then
                  jw.WriteRaw(", ""OFFICEPHONE"": ")
              else
                  jw.WriteRaw("""OFFICEPHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.OFFICEPHONE)
            end if
            if _IsSetHOMEPHONE then
              if f then
                  jw.WriteRaw(", ""HOMEPHONE"": ")
              else
                  jw.WriteRaw("""HOMEPHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.HOMEPHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetMAILAPP then
              if f then
                  jw.WriteRaw(", ""MAILAPP"": ")
              else
                  jw.WriteRaw("""MAILAPP"": ")
                  f = true
              end if
              jw.WriteValue(me.MAILAPP)
            end if
            if _IsSetPOSITIONCODE then
              if f then
                  jw.WriteRaw(", ""POSITIONCODE"": ")
              else
                  jw.WriteRaw("""POSITIONCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.POSITIONCODE)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetMAINPHONE then
              if f then
                  jw.WriteRaw(", ""MAINPHONE"": ")
              else
                  jw.WriteRaw("""MAINPHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.MAINPHONE)
            end if
            if _IsSetDEALFLAG then
              if f then
                  jw.WriteRaw(", ""DEALFLAG"": ")
              else
                  jw.WriteRaw("""DEALFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.DEALFLAG)
            end if
            if _IsSetCPROFFLAG then
              if f then
                  jw.WriteRaw(", ""CPROFFLAG"": ")
              else
                  jw.WriteRaw("""CPROFFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.CPROFFLAG)
            end if
            if _IsSetORDFLAG then
              if f then
                  jw.WriteRaw(", ""ORDFLAG"": ")
              else
                  jw.WriteRaw("""ORDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDFLAG)
            end if
            if _IsSetDOCFLAG then
              if f then
                  jw.WriteRaw(", ""DOCFLAG"": ")
              else
                  jw.WriteRaw("""DOCFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCFLAG)
            end if
            if _IsSetCIVFLAG then
              if f then
                  jw.WriteRaw(", ""CIVFLAG"": ")
              else
                  jw.WriteRaw("""CIVFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.CIVFLAG)
            end if
            if _IsSetTIVFLAG then
              if f then
                  jw.WriteRaw(", ""TIVFLAG"": ")
              else
                  jw.WriteRaw("""TIVFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.TIVFLAG)
            end if
            if _IsSetFNCFLAG then
              if f then
                  jw.WriteRaw(", ""FNCFLAG"": ")
              else
                  jw.WriteRaw("""FNCFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FNCFLAG)
            end if
            if _IsSetSERVCALLFLAG then
              if f then
                  jw.WriteRaw(", ""SERVCALLFLAG"": ")
              else
                  jw.WriteRaw("""SERVCALLFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.SERVCALLFLAG)
            end if
            if _IsSetCONSINGEEFLAG then
              if f then
                  jw.WriteRaw(", ""CONSINGEEFLAG"": ")
              else
                  jw.WriteRaw("""CONSINGEEFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.CONSINGEEFLAG)
            end if
            if _IsSetNOTIFYFLAG then
              if f then
                  jw.WriteRaw(", ""NOTIFYFLAG"": ")
              else
                  jw.WriteRaw("""NOTIFYFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.NOTIFYFLAG)
            end if
            if _IsSetDEPARTMENT then
              if f then
                  jw.WriteRaw(", ""DEPARTMENT"": ")
              else
                  jw.WriteRaw("""DEPARTMENT"": ")
                  f = true
              end if
              jw.WriteValue(me.DEPARTMENT)
            end if
            if _IsSetPROFESSION then
              if f then
                  jw.WriteRaw(", ""PROFESSION"": ")
              else
                  jw.WriteRaw("""PROFESSION"": ")
                  f = true
              end if
              jw.WriteValue(me.PROFESSION)
            end if
            if _IsSetMANAGERNAME then
              if f then
                  jw.WriteRaw(", ""MANAGERNAME"": ")
              else
                  jw.WriteRaw("""MANAGERNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MANAGERNAME)
            end if
            if _IsSetASSISTANTNAME then
              if f then
                  jw.WriteRaw(", ""ASSISTANTNAME"": ")
              else
                  jw.WriteRaw("""ASSISTANTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ASSISTANTNAME)
            end if
            if _IsSetASSISTANTPHONE then
              if f then
                  jw.WriteRaw(", ""ASSISTANTPHONE"": ")
              else
                  jw.WriteRaw("""ASSISTANTPHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.ASSISTANTPHONE)
            end if
            if _IsSetBIRTHDATE10 then
              if f then
                  jw.WriteRaw(", ""BIRTHDATE10"": ")
              else
                  jw.WriteRaw("""BIRTHDATE10"": ")
                  f = true
              end if
              jw.WriteValue(me.BIRTHDATE10)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFIRM then
              if f then
                  jw.WriteRaw(", ""FIRM"": ")
              else
                  jw.WriteRaw("""FIRM"": ")
                  f = true
              end if
              jw.WriteValue(me.FIRM)
            end if
            if _BILLTO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", BILLTO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as BILLTO in _BILLTO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _BILLTO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PHONEBRELCUST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PHONEBRELCUST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PHONEBRELCUST in _PHONEBRELCUST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PHONEBRELCUST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTPERSONNELLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTPERSONNELLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTPERSONNELLIST in _CUSTPERSONNELLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTPERSONNELLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PHONEBDOMAINS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PHONEBDOMAINS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PHONEBDOMAINS in _PHONEBDOMAINS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PHONEBDOMAINS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CONTACTCOURSES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CONTACTCOURSES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CONTACTCOURSES in _CONTACTCOURSES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CONTACTCOURSES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PHONEBOOKA_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PHONEBOOKA_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PHONEBOOKA in _PHONEBOOKA_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PHONEBOOKA_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PHONEBOOKMODULES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PHONEBOOKMODULES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PHONEBOOKMODULES in _PHONEBOOKMODULES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PHONEBOOKMODULES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PHONEBOOKTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PHONEBOOKTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PHONEBOOKTEXT in _PHONEBOOKTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PHONEBOOKTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INSTANTMESSAGING_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INSTANTMESSAGING_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INSTANTMESSAGING in _INSTANTMESSAGING_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INSTANTMESSAGING_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CHANGE_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGE_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGE_LOG in _CHANGE_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGE_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTPERSONNEL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "FIRM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ENAME")
              .WriteAttributeString("value", me.ENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetFIRSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FIRSTNAME")
              .WriteAttributeString("value", me.FIRSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetLASTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LASTNAME")
              .WriteAttributeString("value", me.LASTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGENDER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GENDER")
              .WriteAttributeString("value", me.GENDER)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCELLPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CELLPHONE")
              .WriteAttributeString("value", me.CELLPHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPOSITIONDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "POSITIONDES")
              .WriteAttributeString("value", me.POSITIONDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetTITLEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TITLEDES")
              .WriteAttributeString("value", me.TITLEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetOFFICEPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OFFICEPHONE")
              .WriteAttributeString("value", me.OFFICEPHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetHOMEPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "HOMEPHONE")
              .WriteAttributeString("value", me.HOMEPHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetMAILAPP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAILAPP")
              .WriteAttributeString("value", me.MAILAPP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPOSITIONCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "POSITIONCODE")
              .WriteAttributeString("value", me.POSITIONCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetMAINPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAINPHONE")
              .WriteAttributeString("value", me.MAINPHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetDEALFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEALFLAG")
              .WriteAttributeString("value", me.DEALFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCPROFFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPROFFLAG")
              .WriteAttributeString("value", me.CPROFFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetORDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDFLAG")
              .WriteAttributeString("value", me.ORDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetDOCFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCFLAG")
              .WriteAttributeString("value", me.DOCFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCIVFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CIVFLAG")
              .WriteAttributeString("value", me.CIVFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTIVFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TIVFLAG")
              .WriteAttributeString("value", me.TIVFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetFNCFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FNCFLAG")
              .WriteAttributeString("value", me.FNCFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSERVCALLFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERVCALLFLAG")
              .WriteAttributeString("value", me.SERVCALLFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCONSINGEEFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CONSINGEEFLAG")
              .WriteAttributeString("value", me.CONSINGEEFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOTIFYFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOTIFYFLAG")
              .WriteAttributeString("value", me.NOTIFYFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetDEPARTMENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEPARTMENT")
              .WriteAttributeString("value", me.DEPARTMENT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPROFESSION then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROFESSION")
              .WriteAttributeString("value", me.PROFESSION)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetMANAGERNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MANAGERNAME")
              .WriteAttributeString("value", me.MANAGERNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetASSISTANTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ASSISTANTNAME")
              .WriteAttributeString("value", me.ASSISTANTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetASSISTANTPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ASSISTANTPHONE")
              .WriteAttributeString("value", me.ASSISTANTPHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetBIRTHDATE10 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BIRTHDATE10")
              .WriteAttributeString("value", me.BIRTHDATE10)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "66")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFIRM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FIRM")
              .WriteAttributeString("value", me.FIRM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _BILLTO_SUBFORM.value.count > 0 then
              for each itm as BILLTO in _BILLTO_SUBFORM.Value
                itm.toXML(xw,"BILLTO_SUBFORM")
              next
            end if
            if _PHONEBRELCUST_SUBFORM.value.count > 0 then
              for each itm as PHONEBRELCUST in _PHONEBRELCUST_SUBFORM.Value
                itm.toXML(xw,"PHONEBRELCUST_SUBFORM")
              next
            end if
            if _CUSTPERSONNELLIST_SUBFORM.value.count > 0 then
              for each itm as CUSTPERSONNELLIST in _CUSTPERSONNELLIST_SUBFORM.Value
                itm.toXML(xw,"CUSTPERSONNELLIST_SUBFORM")
              next
            end if
            if _PHONEBDOMAINS_SUBFORM.value.count > 0 then
              for each itm as PHONEBDOMAINS in _PHONEBDOMAINS_SUBFORM.Value
                itm.toXML(xw,"PHONEBDOMAINS_SUBFORM")
              next
            end if
            if _CONTACTCOURSES_SUBFORM.value.count > 0 then
              for each itm as CONTACTCOURSES in _CONTACTCOURSES_SUBFORM.Value
                itm.toXML(xw,"CONTACTCOURSES_SUBFORM")
              next
            end if
            if _PHONEBOOKA_SUBFORM.value.count > 0 then
              for each itm as PHONEBOOKA in _PHONEBOOKA_SUBFORM.Value
                itm.toXML(xw,"PHONEBOOKA_SUBFORM")
              next
            end if
            if _PHONEBOOKMODULES_SUBFORM.value.count > 0 then
              for each itm as PHONEBOOKMODULES in _PHONEBOOKMODULES_SUBFORM.Value
                itm.toXML(xw,"PHONEBOOKMODULES_SUBFORM")
              next
            end if
            if _PHONEBOOKTEXT_SUBFORM.value.count > 0 then
              for each itm as PHONEBOOKTEXT in _PHONEBOOKTEXT_SUBFORM.Value
                itm.toXML(xw,"PHONEBOOKTEXT_SUBFORM")
              next
            end if
            if _INSTANTMESSAGING_SUBFORM.value.count > 0 then
              for each itm as INSTANTMESSAGING in _INSTANTMESSAGING_SUBFORM.Value
                itm.toXML(xw,"INSTANTMESSAGING_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CHANGE_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGE_LOG in _CHANGE_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGE_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTPERSONNEL = JsonConvert.DeserializeObject(Of CUSTPERSONNEL)(e.StreamReader.ReadToEnd)
                With obj
                  _NAME = .NAME
                  _ENAME = .ENAME
                  _FIRSTNAME = .FIRSTNAME
                  _LASTNAME = .LASTNAME
                  _STATDES = .STATDES
                  _INACTIVE = .INACTIVE
                  _OWNERLOGIN = .OWNERLOGIN
                  _GENDER = .GENDER
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _POSITIONDES = .POSITIONDES
                  _TITLEDES = .TITLEDES
                  _OFFICEPHONE = .OFFICEPHONE
                  _HOMEPHONE = .HOMEPHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _MAILAPP = .MAILAPP
                  _POSITIONCODE = .POSITIONCODE
                  _POSITIONDES2 = .POSITIONDES2
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _MAINPHONE = .MAINPHONE
                  _DEALFLAG = .DEALFLAG
                  _CPROFFLAG = .CPROFFLAG
                  _ORDFLAG = .ORDFLAG
                  _DOCFLAG = .DOCFLAG
                  _CIVFLAG = .CIVFLAG
                  _TIVFLAG = .TIVFLAG
                  _FNCFLAG = .FNCFLAG
                  _SERVCALLFLAG = .SERVCALLFLAG
                  _CONSINGEEFLAG = .CONSINGEEFLAG
                  _NOTIFYFLAG = .NOTIFYFLAG
                  _DEPARTMENT = .DEPARTMENT
                  _PROFESSION = .PROFESSION
                  _MANAGERNAME = .MANAGERNAME
                  _ASSISTANTNAME = .ASSISTANTNAME
                  _ASSISTANTPHONE = .ASSISTANTPHONE
                  _BIRTHDATE10 = .BIRTHDATE10
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _EXTFILENAME = .EXTFILENAME
                  _PHONE = .PHONE
                  _FIRM = .FIRM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTPERSONNEL
        
        BILLTO = 0
        
        PHONEBRELCUST = 1
        
        CUSTPERSONNELLIST = 2
        
        PHONEBDOMAINS = 3
        
        CONTACTCOURSES = 4
        
        PHONEBOOKA = 5
        
        PHONEBOOKMODULES = 6
        
        PHONEBOOKTEXT = 7
        
        INSTANTMESSAGING = 8
        
        DOCTODOLIST = 9
        
        DOCTODOLISTLOG = 10
        
        CHANGE_LOG = 11
    End Enum
    
    <QueryTitle("Address")>  _
    Public Class QUERY_BILLTO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of BILLTO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of BILLTO)
            _Parent = nothing
            _Name = "BILLTO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of BILLTO)
            _Parent = Parent
            _name = "BILLTO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of BILLTO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(BILLTO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _BILLTO As BILLTO In JsonConvert.DeserializeObject(Of QUERY_BILLTO)(stream.ReadToEnd).Value
              With _BILLTO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_BILLTO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BILLTO = JsonConvert.DeserializeObject(Of BILLTO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, BILLTO)
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new BILLTO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _BILLTO as BILLTO in value
              If _BILLTO.Equals(trycast(obj,BILLTO)) Then
                  value.remove(_BILLTO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class BILLTO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "BILLTO"
                else
                    return "BILLTO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("City (Lang 2)"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "BILLTO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BILLTO = JsonConvert.DeserializeObject(Of BILLTO)(e.StreamReader.ReadToEnd)
                With obj
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Who Networked With")>  _
    Public Class QUERY_PHONEBRELCUST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PHONEBRELCUST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PHONEBRELCUST)
            _Parent = nothing
            _Name = "PHONEBRELCUST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PHONEBRELCUST)
            _Parent = Parent
            _name = "PHONEBRELCUST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PHONEBRELCUST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PHONEBRELCUST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PHONEBRELCUST As PHONEBRELCUST In JsonConvert.DeserializeObject(Of QUERY_PHONEBRELCUST)(stream.ReadToEnd).Value
              With _PHONEBRELCUST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PHONEBRELCUST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBRELCUST = JsonConvert.DeserializeObject(Of PHONEBRELCUST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PHONEBRELCUST)
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .MNAME = obj.MNAME
                  .CUSTRELTYPEDES = obj.CUSTRELTYPEDES
                  .CUSTRELSUBJECTDES = obj.CUSTRELSUBJECTDES
                  .DETAILS = obj.DETAILS
                  .RDATE = obj.RDATE
                  .MCUST = obj.MCUST
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PHONEBRELCUST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PHONEBRELCUST as PHONEBRELCUST in value
              If _PHONEBRELCUST.Equals(trycast(obj,PHONEBRELCUST)) Then
                  value.remove(_PHONEBRELCUST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PHONEBRELCUST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetMNAME As Boolean = Boolean.FalseString
        
        Private _MNAME As String
        
        Private _IsSetCUSTRELTYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTRELTYPEDES As String
        
        Private _IsSetCUSTRELSUBJECTDES As Boolean = Boolean.FalseString
        
        Private _CUSTRELSUBJECTDES As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetRDATE As Boolean = Boolean.FalseString
        
        Private _RDATE As System.DateTimeOffset
        
        Private _IsSetMCUST As Boolean = Boolean.FalseString
        
        Private _MCUST As Long
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PHONEBRELCUST"
                else
                    return "PHONEBRELCUST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "MCUST={0},KLINE={1}", _
                  string.format("{0}",MCUST), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(5),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(15),  _
         twodBarcode("MNAME")>  _
        Public Property MNAME() As String
            Get
                return _MNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetMNAME = True
                If loading Then
                  _MNAME = Value
                Else
                    if not _MNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type of Relation"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         twodBarcode("CUSTRELTYPEDES")>  _
        Public Property CUSTRELTYPEDES() As String
            Get
                return _CUSTRELTYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type of Relation", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTRELTYPEDES = True
                If loading Then
                  _CUSTRELTYPEDES = Value
                Else
                    if not _CUSTRELTYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTRELTYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTRELTYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Area of Relation"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(25),  _
         twodBarcode("CUSTRELSUBJECTDES")>  _
        Public Property CUSTRELSUBJECTDES() As String
            Get
                return _CUSTRELSUBJECTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Area of Relation", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTRELSUBJECTDES = True
                If loading Then
                  _CUSTRELSUBJECTDES = Value
                Else
                    if not _CUSTRELSUBJECTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTRELSUBJECTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTRELSUBJECTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(30),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,30}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(60),  _
         twodBarcode("RDATE")>  _
        Public Property RDATE() As nullable (of DateTimeOffset)
            Get
                return _RDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetRDATE = True
                If loading Then
                  _RDATE = Value
                Else
                    if not _RDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("MCUST")>  _
        Public Property MCUST() As nullable (of int64)
            Get
                return _MCUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetMCUST = True
                If loading Then
                  _MCUST = Value
                Else
                    if not _MCUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MCUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MCUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(60),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetMNAME then
              if f then
                  jw.WriteRaw(", ""MNAME"": ")
              else
                  jw.WriteRaw("""MNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MNAME)
            end if
            if _IsSetCUSTRELTYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTRELTYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTRELTYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTRELTYPEDES)
            end if
            if _IsSetCUSTRELSUBJECTDES then
              if f then
                  jw.WriteRaw(", ""CUSTRELSUBJECTDES"": ")
              else
                  jw.WriteRaw("""CUSTRELSUBJECTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTRELSUBJECTDES)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetRDATE then
              if f then
                  jw.WriteRaw(", ""RDATE"": ")
              else
                  jw.WriteRaw("""RDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.RDATE)
            end if
            if _IsSetMCUST then
              if f then
                  jw.WriteRaw(", ""MCUST"": ")
              else
                  jw.WriteRaw("""MCUST"": ")
                  f = true
              end if
              jw.WriteValue(me.MCUST)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PHONEBRELCUST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "MCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MNAME")
              .WriteAttributeString("value", me.MNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetCUSTRELTYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTRELTYPEDES")
              .WriteAttributeString("value", me.CUSTRELTYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCUSTRELSUBJECTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTRELSUBJECTDES")
              .WriteAttributeString("value", me.CUSTRELSUBJECTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "30")
              .WriteEndElement
            end if
            if _IsSetRDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RDATE")
              .WriteAttributeString("value", me.RDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetMCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MCUST")
              .WriteAttributeString("value", me.MCUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBRELCUST = JsonConvert.DeserializeObject(Of PHONEBRELCUST)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _MNAME = .MNAME
                  _CUSTRELTYPEDES = .CUSTRELTYPEDES
                  _CUSTRELSUBJECTDES = .CUSTRELSUBJECTDES
                  _DETAILS = .DETAILS
                  _RDATE = .RDATE
                  _MCUST = .MCUST
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Addit. Phone Nos.- Contacts")>  _
    Public Class QUERY_CUSTPERSONNELLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTPERSONNELLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTPERSONNELLIST)
            _Parent = nothing
            _Name = "CUSTPERSONNELLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTPERSONNELLIST)
            _Parent = Parent
            _name = "CUSTPERSONNELLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTPERSONNELLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTPERSONNELLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTPERSONNELLIST As CUSTPERSONNELLIST In JsonConvert.DeserializeObject(Of QUERY_CUSTPERSONNELLIST)(stream.ReadToEnd).Value
              With _CUSTPERSONNELLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTPERSONNELLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTPERSONNELLIST = JsonConvert.DeserializeObject(Of CUSTPERSONNELLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTPERSONNELLIST)
                  .PHONENUM = obj.PHONENUM
                  .DESCR = obj.DESCR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTPERSONNELLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTPERSONNELLIST as CUSTPERSONNELLIST in value
              If _CUSTPERSONNELLIST.Equals(trycast(obj,CUSTPERSONNELLIST)) Then
                  value.remove(_CUSTPERSONNELLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTPERSONNELLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetDESCR As Boolean = Boolean.FalseString
        
        Private _DESCR As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTPERSONNELLIST"
                else
                    return "CUSTPERSONNELLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PHONENUM={0}", _
                  string.format("'{0}'",PHONENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(20),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Description"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(30),  _
         twodBarcode("DESCR")>  _
        Public Property DESCR() As String
            Get
                return _DESCR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Description", value, "^.{0,32}$") then Exit Property
                _IsSetDESCR = True
                If loading Then
                  _DESCR = Value
                Else
                    if not _DESCR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DESCR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DESCR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetDESCR then
              if f then
                  jw.WriteRaw(", ""DESCR"": ")
              else
                  jw.WriteRaw("""DESCR"": ")
                  f = true
              end if
              jw.WriteValue(me.DESCR)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTPERSONNELLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDESCR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DESCR")
              .WriteAttributeString("value", me.DESCR)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTPERSONNELLIST = JsonConvert.DeserializeObject(Of CUSTPERSONNELLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _PHONENUM = .PHONENUM
                  _DESCR = .DESCR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Business Classifications")>  _
    Public Class QUERY_PHONEBDOMAINS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PHONEBDOMAINS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PHONEBDOMAINS)
            _Parent = nothing
            _Name = "PHONEBDOMAINS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PHONEBDOMAINS)
            _Parent = Parent
            _name = "PHONEBDOMAINS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PHONEBDOMAINS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PHONEBDOMAINS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PHONEBDOMAINS As PHONEBDOMAINS In JsonConvert.DeserializeObject(Of QUERY_PHONEBDOMAINS)(stream.ReadToEnd).Value
              With _PHONEBDOMAINS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PHONEBDOMAINS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBDOMAINS = JsonConvert.DeserializeObject(Of PHONEBDOMAINS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PHONEBDOMAINS)
                  .BDOMAINCODE = obj.BDOMAINCODE
                  .BDOMAINDES = obj.BDOMAINDES
                  .BDOMAIN = obj.BDOMAIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PHONEBDOMAINS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PHONEBDOMAINS as PHONEBDOMAINS in value
              If _PHONEBDOMAINS.Equals(trycast(obj,PHONEBDOMAINS)) Then
                  value.remove(_PHONEBDOMAINS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PHONEBDOMAINS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetBDOMAINCODE As Boolean = Boolean.FalseString
        
        Private _BDOMAINCODE As String
        
        Private _IsSetBDOMAINDES As Boolean = Boolean.FalseString
        
        Private _BDOMAINDES As String
        
        Private _IsSetBDOMAIN As Boolean = Boolean.FalseString
        
        Private _BDOMAIN As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PHONEBDOMAINS"
                else
                    return "PHONEBDOMAINS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "BDOMAIN={0}", _
                  string.format("{0}",BDOMAIN) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Classification Code"),  _
         nType("Edm.String"),  _
         tab("Classification Code"),  _
         Pos(30),  _
         twodBarcode("BDOMAINCODE")>  _
        Public Property BDOMAINCODE() As String
            Get
                return _BDOMAINCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Classification Code", value, "^.{0,6}$") then Exit Property
                _IsSetBDOMAINCODE = True
                If loading Then
                  _BDOMAINCODE = Value
                Else
                    if not _BDOMAINCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BDOMAINCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BDOMAINCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Classification Desc"),  _
         nType("Edm.String"),  _
         tab("Classification Code"),  _
         Pos(40),  _
         twodBarcode("BDOMAINDES")>  _
        Public Property BDOMAINDES() As String
            Get
                return _BDOMAINDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Classification Desc", value, "^.{0,32}$") then Exit Property
                _IsSetBDOMAINDES = True
                If loading Then
                  _BDOMAINDES = Value
                Else
                    if not _BDOMAINDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BDOMAINDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BDOMAINDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Business Classif(ID)"),  _
         nType("Edm.Int64"),  _
         tab("Classification Code"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("BDOMAIN")>  _
        Public Property BDOMAIN() As nullable (of int64)
            Get
                return _BDOMAIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Business Classif(ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetBDOMAIN = True
                If loading Then
                  _BDOMAIN = Value
                Else
                    if not _BDOMAIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BDOMAIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BDOMAIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetBDOMAINCODE then
              if f then
                  jw.WriteRaw(", ""BDOMAINCODE"": ")
              else
                  jw.WriteRaw("""BDOMAINCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BDOMAINCODE)
            end if
            if _IsSetBDOMAINDES then
              if f then
                  jw.WriteRaw(", ""BDOMAINDES"": ")
              else
                  jw.WriteRaw("""BDOMAINDES"": ")
                  f = true
              end if
              jw.WriteValue(me.BDOMAINDES)
            end if
            if _IsSetBDOMAIN then
              if f then
                  jw.WriteRaw(", ""BDOMAIN"": ")
              else
                  jw.WriteRaw("""BDOMAIN"": ")
                  f = true
              end if
              jw.WriteValue(me.BDOMAIN)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PHONEBDOMAINS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "BDOMAIN")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetBDOMAINCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BDOMAINCODE")
              .WriteAttributeString("value", me.BDOMAINCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetBDOMAINDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BDOMAINDES")
              .WriteAttributeString("value", me.BDOMAINDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetBDOMAIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BDOMAIN")
              .WriteAttributeString("value", me.BDOMAIN)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBDOMAINS = JsonConvert.DeserializeObject(Of PHONEBDOMAINS)(e.StreamReader.ReadToEnd)
                With obj
                  _BDOMAINCODE = .BDOMAINCODE
                  _BDOMAINDES = .BDOMAINDES
                  _BDOMAIN = .BDOMAIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Courses of Study")>  _
    Public Class QUERY_CONTACTCOURSES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CONTACTCOURSES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CONTACTCOURSES)
            _Parent = nothing
            _Name = "CONTACTCOURSES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CONTACTCOURSES)
            _Parent = Parent
            _name = "CONTACTCOURSES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CONTACTCOURSES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CONTACTCOURSES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CONTACTCOURSES As CONTACTCOURSES In JsonConvert.DeserializeObject(Of QUERY_CONTACTCOURSES)(stream.ReadToEnd).Value
              With _CONTACTCOURSES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CONTACTCOURSES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CONTACTCOURSES = JsonConvert.DeserializeObject(Of CONTACTCOURSES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CONTACTCOURSES)
                  .COURSENAME = obj.COURSENAME
                  .COURSEDES = obj.COURSEDES
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .DEGREECODE = obj.DEGREECODE
                  .DEGREEDES = obj.DEGREEDES
                  .QUALIFIED = obj.QUALIFIED
                  .FEEDBACK = obj.FEEDBACK
                  .CREDITPOINTCODE = obj.CREDITPOINTCODE
                  .CREDITPOINTDES = obj.CREDITPOINTDES
                  .DETAILS = obj.DETAILS
                  .STUDCOURSE = obj.STUDCOURSE
                  .NAME = obj.NAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CONTACTCOURSES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CONTACTCOURSES as CONTACTCOURSES in value
              If _CONTACTCOURSES.Equals(trycast(obj,CONTACTCOURSES)) Then
                  value.remove(_CONTACTCOURSES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CONTACTCOURSES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _COURSENAME As String
        
        Private _COURSEDES As String
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _DEGREECODE As String
        
        Private _DEGREEDES As String
        
        Private _QUALIFIED As String
        
        Private _FEEDBACK As String
        
        Private _CREDITPOINTCODE As String
        
        Private _CREDITPOINTDES As String
        
        Private _DETAILS As String
        
        Private _STUDCOURSE As Long
        
        Private _NAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CONTACTCOURSES"
                else
                    return "CONTACTCOURSES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "STUDCOURSE={0},NAME={1}", _
                  string.format("{0}",STUDCOURSE), _
                  string.format("'{0}'",NAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Course Number"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("COURSENAME")>  _
        Public Property COURSENAME() As String
            Get
                return _COURSENAME
            End Get
            Set
                if not(value is nothing) then
                  _COURSENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Course"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COURSEDES")>  _
        Public Property COURSEDES() As String
            Get
                return _COURSEDES
            End Get
            Set
                if not(value is nothing) then
                  _COURSEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("From Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Course Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Course Number"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Degree/Certif. Code"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DEGREECODE")>  _
        Public Property DEGREECODE() As String
            Get
                return _DEGREECODE
            End Get
            Set
                if not(value is nothing) then
                  _DEGREECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Degree/Certificate"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("DEGREEDES")>  _
        Public Property DEGREEDES() As String
            Get
                return _DEGREEDES
            End Get
            Set
                if not(value is nothing) then
                  _DEGREEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Passed?"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QUALIFIED")>  _
        Public Property QUALIFIED() As String
            Get
                return _QUALIFIED
            End Get
            Set
                if not(value is nothing) then
                  _QUALIFIED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Feedback Received?"),  _
         nType("Edm.String"),  _
         tab("Course Number"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("FEEDBACK")>  _
        Public Property FEEDBACK() As String
            Get
                return _FEEDBACK
            End Get
            Set
                if not(value is nothing) then
                  _FEEDBACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credits (Code)"),  _
         nType("Edm.String"),  _
         tab("Credits (Code)"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITPOINTCODE")>  _
        Public Property CREDITPOINTCODE() As String
            Get
                return _CREDITPOINTCODE
            End Get
            Set
                if not(value is nothing) then
                  _CREDITPOINTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Description(Credits)"),  _
         nType("Edm.String"),  _
         tab("Credits (Code)"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITPOINTDES")>  _
        Public Property CREDITPOINTDES() As String
            Get
                return _CREDITPOINTDES
            End Get
            Set
                if not(value is nothing) then
                  _CREDITPOINTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Credits (Code)"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Course Number"),  _
         nType("Edm.Int64"),  _
         tab("Credits (Code)"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("STUDCOURSE")>  _
        Public Property STUDCOURSE() As nullable (of int64)
            Get
                return _STUDCOURSE
            End Get
            Set
                if not(value is nothing) then
                  _STUDCOURSE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Participant"),  _
         nType("Edm.String"),  _
         tab("Credits (Code)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if not(value is nothing) then
                  _NAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CONTACTCOURSES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "STUDCOURSE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "30")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CONTACTCOURSES = JsonConvert.DeserializeObject(Of CONTACTCOURSES)(e.StreamReader.ReadToEnd)
                With obj
                  _COURSENAME = .COURSENAME
                  _COURSEDES = .COURSEDES
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _DEGREECODE = .DEGREECODE
                  _DEGREEDES = .DEGREEDES
                  _QUALIFIED = .QUALIFIED
                  _FEEDBACK = .FEEDBACK
                  _CREDITPOINTCODE = .CREDITPOINTCODE
                  _CREDITPOINTDES = .CREDITPOINTDES
                  _DETAILS = .DETAILS
                  _STUDCOURSE = .STUDCOURSE
                  _NAME = .NAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Contacts-Additional Data")>  _
    Public Class QUERY_PHONEBOOKA
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PHONEBOOKA)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PHONEBOOKA)
            _Parent = nothing
            _Name = "PHONEBOOKA"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PHONEBOOKA)
            _Parent = Parent
            _name = "PHONEBOOKA_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PHONEBOOKA)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PHONEBOOKA)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PHONEBOOKA As PHONEBOOKA In JsonConvert.DeserializeObject(Of QUERY_PHONEBOOKA)(stream.ReadToEnd).Value
              With _PHONEBOOKA
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PHONEBOOKA)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKA = JsonConvert.DeserializeObject(Of PHONEBOOKA)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PHONEBOOKA)
                  .USERLOGIN = obj.USERLOGIN
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .PASSWORD = obj.PASSWORD
                  .SIGUSERLOGIN = obj.SIGUSERLOGIN
                  .UDATE = obj.UDATE
                  .PHONE = obj.PHONE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PHONEBOOKA(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PHONEBOOKA as PHONEBOOKA in value
              If _PHONEBOOKA.Equals(trycast(obj,PHONEBOOKA)) Then
                  value.remove(_PHONEBOOKA)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PHONEBOOKA
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetPASSWORD As Boolean = Boolean.FalseString
        
        Private _PASSWORD As String
        
        Private _SIGUSERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PHONEBOOKA"
                else
                    return "PHONEBOOKA_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PHONE={0}", _
                  string.format("{0}",PHONE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("User Name"),  _
         nType("Edm.String"),  _
         tab("User Name"),  _
         Pos(10),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User Name", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("User Name"),  _
         Pos(20),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("User Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Password"),  _
         nType("Edm.String"),  _
         tab("User Name"),  _
         Pos(40),  _
         twodBarcode("PASSWORD")>  _
        Public Property PASSWORD() As String
            Get
                return _PASSWORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Password", value, "^.{0,16}$") then Exit Property
                _IsSetPASSWORD = True
                If loading Then
                  _PASSWORD = Value
                Else
                    if not _PASSWORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PASSWORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PASSWORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("User Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("SIGUSERLOGIN")>  _
        Public Property SIGUSERLOGIN() As String
            Get
                return _SIGUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _SIGUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("User Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact (ID)"),  _
         nType("Edm.Int64"),  _
         tab("User Name"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As nullable (of int64)
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetPASSWORD then
              if f then
                  jw.WriteRaw(", ""PASSWORD"": ")
              else
                  jw.WriteRaw("""PASSWORD"": ")
                  f = true
              end if
              jw.WriteValue(me.PASSWORD)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PHONEBOOKA")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPASSWORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PASSWORD")
              .WriteAttributeString("value", me.PASSWORD)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKA = JsonConvert.DeserializeObject(Of PHONEBOOKA)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _PASSWORD = .PASSWORD
                  _SIGUSERLOGIN = .SIGUSERLOGIN
                  _UDATE = .UDATE
                  _PHONE = .PHONE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internet Privileges")>  _
    Public Class QUERY_PHONEBOOKMODULES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PHONEBOOKMODULES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PHONEBOOKMODULES)
            _Parent = nothing
            _Name = "PHONEBOOKMODULES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PHONEBOOKMODULES)
            _Parent = Parent
            _name = "PHONEBOOKMODULES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PHONEBOOKMODULES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PHONEBOOKMODULES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PHONEBOOKMODULES As PHONEBOOKMODULES In JsonConvert.DeserializeObject(Of QUERY_PHONEBOOKMODULES)(stream.ReadToEnd).Value
              With _PHONEBOOKMODULES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PHONEBOOKMODULES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKMODULES = JsonConvert.DeserializeObject(Of PHONEBOOKMODULES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PHONEBOOKMODULES)
                  .MODULENAME = obj.MODULENAME
                  .MODULE = obj.MODULE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PHONEBOOKMODULES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PHONEBOOKMODULES as PHONEBOOKMODULES in value
              If _PHONEBOOKMODULES.Equals(trycast(obj,PHONEBOOKMODULES)) Then
                  value.remove(_PHONEBOOKMODULES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PHONEBOOKMODULES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetMODULENAME As Boolean = Boolean.FalseString
        
        Private _MODULENAME As String
        
        Private _IsSetMODULE As Boolean = Boolean.FalseString
        
        Private _MODULE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PHONEBOOKMODULES"
                else
                    return "PHONEBOOKMODULES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "MODULE={0}", _
                  string.format("{0}",MODULE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Module Name"),  _
         nType("Edm.String"),  _
         tab("Module Name"),  _
         Pos(10),  _
         twodBarcode("MODULENAME")>  _
        Public Property MODULENAME() As String
            Get
                return _MODULENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Module Name", value, "^.{0,20}$") then Exit Property
                _IsSetMODULENAME = True
                If loading Then
                  _MODULENAME = Value
                Else
                    if not _MODULENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODULENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODULENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Module (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Module Name"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("MODULE")>  _
        Public Property [MODULE]() As nullable (of int64)
            Get
                return _MODULE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Module (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetMODULE = True
                If loading Then
                  _MODULE = Value
                Else
                    if not _MODULE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODULE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODULE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetMODULENAME then
              if f then
                  jw.WriteRaw(", ""MODULENAME"": ")
              else
                  jw.WriteRaw("""MODULENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MODULENAME)
            end if
            if _IsSetMODULE then
              if f then
                  jw.WriteRaw(", ""MODULE"": ")
              else
                  jw.WriteRaw("""MODULE"": ")
                  f = true
              end if
              jw.WriteValue(me.MODULE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PHONEBOOKMODULES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "MODULE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetMODULENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODULENAME")
              .WriteAttributeString("value", me.MODULENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetMODULE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODULE")
              .WriteAttributeString("value", me.MODULE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKMODULES = JsonConvert.DeserializeObject(Of PHONEBOOKMODULES)(e.StreamReader.ReadToEnd)
                With obj
                  _MODULENAME = .MODULENAME
                  _MODULE = .MODULE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Contacts - Text")>  _
    Public Class QUERY_PHONEBOOKTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PHONEBOOKTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PHONEBOOKTEXT)
            _Parent = nothing
            _Name = "PHONEBOOKTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PHONEBOOKTEXT)
            _Parent = Parent
            _name = "PHONEBOOKTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PHONEBOOKTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PHONEBOOKTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PHONEBOOKTEXT As PHONEBOOKTEXT In JsonConvert.DeserializeObject(Of QUERY_PHONEBOOKTEXT)(stream.ReadToEnd).Value
              With _PHONEBOOKTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PHONEBOOKTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKTEXT = JsonConvert.DeserializeObject(Of PHONEBOOKTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PHONEBOOKTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PHONEBOOKTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PHONEBOOKTEXT as PHONEBOOKTEXT in value
              If _PHONEBOOKTEXT.Equals(trycast(obj,PHONEBOOKTEXT)) Then
                  value.remove(_PHONEBOOKTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PHONEBOOKTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PHONEBOOKTEXT"
                else
                    return "PHONEBOOKTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PHONEBOOKTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PHONEBOOKTEXT = JsonConvert.DeserializeObject(Of PHONEBOOKTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Set Up Skype")>  _
    Public Class QUERY_INSTANTMESSAGING
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INSTANTMESSAGING)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INSTANTMESSAGING)
            _Parent = nothing
            _Name = "INSTANTMESSAGING"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INSTANTMESSAGING)
            _Parent = Parent
            _name = "INSTANTMESSAGING_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INSTANTMESSAGING)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INSTANTMESSAGING)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INSTANTMESSAGING As INSTANTMESSAGING In JsonConvert.DeserializeObject(Of QUERY_INSTANTMESSAGING)(stream.ReadToEnd).Value
              With _INSTANTMESSAGING
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INSTANTMESSAGING)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INSTANTMESSAGING = JsonConvert.DeserializeObject(Of INSTANTMESSAGING)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INSTANTMESSAGING)
                  .IMTYPE = obj.IMTYPE
                  .ID = obj.ID
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INSTANTMESSAGING(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INSTANTMESSAGING as INSTANTMESSAGING in value
              If _INSTANTMESSAGING.Equals(trycast(obj,INSTANTMESSAGING)) Then
                  value.remove(_INSTANTMESSAGING)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INSTANTMESSAGING
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetIMTYPE As Boolean = Boolean.FalseString
        
        Private _IMTYPE As String
        
        Private _IsSetID As Boolean = Boolean.FalseString
        
        Private _ID As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INSTANTMESSAGING"
                else
                    return "INSTANTMESSAGING_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IMTYPE={0}", _
                  string.format("'{0}'",IMTYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("IM Service"),  _
         nType("Edm.String"),  _
         tab("IM Service"),  _
         Pos(10),  _
         twodBarcode("IMTYPE")>  _
        Public Property IMTYPE() As String
            Get
                return _IMTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("IM Service", value, "^.{0,1}$") then Exit Property
                _IsSetIMTYPE = True
                If loading Then
                  _IMTYPE = Value
                Else
                    if not _IMTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact ID"),  _
         nType("Edm.String"),  _
         tab("IM Service"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("ID")>  _
        Public Property ID() As String
            Get
                return _ID
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact ID", value, "^.{0,50}$") then Exit Property
                _IsSetID = True
                If loading Then
                  _ID = Value
                Else
                    if not _ID = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ID", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ID = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetIMTYPE then
              if f then
                  jw.WriteRaw(", ""IMTYPE"": ")
              else
                  jw.WriteRaw("""IMTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.IMTYPE)
            end if
            if _IsSetID then
              if f then
                  jw.WriteRaw(", ""ID"": ")
              else
                  jw.WriteRaw("""ID"": ")
                  f = true
              end if
              jw.WriteValue(me.ID)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INSTANTMESSAGING")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IMTYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetIMTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMTYPE")
              .WriteAttributeString("value", me.IMTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetID then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ID")
              .WriteAttributeString("value", me.ID)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "50")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INSTANTMESSAGING = JsonConvert.DeserializeObject(Of INSTANTMESSAGING)(e.StreamReader.ReadToEnd)
                With obj
                  _IMTYPE = .IMTYPE
                  _ID = .ID
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGE_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGE_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGE_LOG)
            _Parent = nothing
            _Name = "CHANGE_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGE_LOG)
            _Parent = Parent
            _name = "CHANGE_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGE_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGE_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGE_LOG As CHANGE_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGE_LOG)(stream.ReadToEnd).Value
              With _CHANGE_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGE_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGE_LOG = JsonConvert.DeserializeObject(Of CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGE_LOG)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .LINE = obj.LINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGE_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGE_LOG as CHANGE_LOG in value
              If _CHANGE_LOG.Equals(trycast(obj,CHANGE_LOG)) Then
                  value.remove(_CHANGE_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGE_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGE_LOG"
                else
                    return "CHANGE_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LINE={0}", _
                  string.format("{0}",LINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User Name"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Old Value"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("New Value"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGE_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGE_LOG = JsonConvert.DeserializeObject(Of CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _LINE = .LINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Library")>  _
    Public Class QUERY_LIBRARY
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LIBRARY)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LIBRARY)
            _Parent = nothing
            _Name = "LIBRARY"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LIBRARY)
            _Parent = Parent
            _name = "LIBRARY_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LIBRARY)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LIBRARY)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LIBRARY As LIBRARY In JsonConvert.DeserializeObject(Of QUERY_LIBRARY)(stream.ReadToEnd).Value
              With _LIBRARY
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LIBRARY)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LIBRARY = JsonConvert.DeserializeObject(Of LIBRARY)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LIBRARY)
                  .BOOKNUM = obj.BOOKNUM
                  .TITLE = obj.TITLE
                  .SUBTITLE = obj.SUBTITLE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATDES = obj.STATDES
                  .INTERNETFLAG = obj.INTERNETFLAG
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .BOOK = obj.BOOK
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LIBRARY(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LIBRARY as LIBRARY in value
              If _LIBRARY.Equals(trycast(obj,LIBRARY)) Then
                  value.remove(_LIBRARY)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LIBRARY
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _TITLE As String
        
        Private _SUBTITLE As String
        
        Private _EXTFILENAME As String
        
        Private _STATDES As String
        
        Private _INTERNETFLAG As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetBOOK As Boolean = Boolean.FalseString
        
        Private _BOOK As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LIBRARY"
                else
                    return "LIBRARY_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "BOOK={0}", _
                  string.format("{0}",BOOK) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Internal Number"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Internal Number", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Title"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Subtitle"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SUBTITLE")>  _
        Public Property SUBTITLE() As String
            Get
                return _SUBTITLE
            End Get
            Set
                if not(value is nothing) then
                  _SUBTITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Display on Web Site?"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("INTERNETFLAG")>  _
        Public Property INTERNETFLAG() As String
            Get
                return _INTERNETFLAG
            End Get
            Set
                if not(value is nothing) then
                  _INTERNETFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Internal Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Internal Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Publication (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Publication (ID)"),  _
         Pos(30),  _
         Browsable(false),  _
         twodBarcode("BOOK")>  _
        Public Property BOOK() As nullable (of int64)
            Get
                return _BOOK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Publication (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetBOOK = True
                If loading Then
                  _BOOK = Value
                Else
                    if not _BOOK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetBOOK then
              if f then
                  jw.WriteRaw(", ""BOOK"": ")
              else
                  jw.WriteRaw("""BOOK"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOK)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LIBRARY")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "BOOK")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBOOK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOK")
              .WriteAttributeString("value", me.BOOK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LIBRARY = JsonConvert.DeserializeObject(Of LIBRARY)(e.StreamReader.ReadToEnd)
                With obj
                  _BOOKNUM = .BOOKNUM
                  _TITLE = .TITLE
                  _SUBTITLE = .SUBTITLE
                  _EXTFILENAME = .EXTFILENAME
                  _STATDES = .STATDES
                  _INTERNETFLAG = .INTERNETFLAG
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _BOOK = .BOOK
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments for Project Activs.")>  _
    Public Class QUERY_PROJACTEXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJACTEXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJACTEXTFILES)
            _Parent = nothing
            _Name = "PROJACTEXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJACTEXTFILES)
            _Parent = Parent
            _name = "PROJACTEXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJACTEXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJACTEXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJACTEXTFILES As PROJACTEXTFILES In JsonConvert.DeserializeObject(Of QUERY_PROJACTEXTFILES)(stream.ReadToEnd).Value
              With _PROJACTEXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJACTEXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJACTEXTFILES = JsonConvert.DeserializeObject(Of PROJACTEXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJACTEXTFILES)
                  .WBS = obj.WBS
                  .ACTDES = obj.ACTDES
                  .PROJACT = obj.PROJACT
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .CURDATE = obj.CURDATE
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJACTEXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJACTEXTFILES as PROJACTEXTFILES in value
              If _PROJACTEXTFILES.Equals(trycast(obj,PROJACTEXTFILES)) Then
                  value.remove(_PROJACTEXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJACTEXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _ACTDES As String
        
        Private _PROJACT As Long
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetIV As Boolean = Boolean.FalseString
        
        Private _IV As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJACTEXTFILES"
                else
                    return "PROJACTEXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0},IV={1},TYPE={2}", _
                  string.format("{0}",EXTFILENUM), _
                  string.format("{0}",IV), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(5),  _
         Mandatory(true),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("WBS Code"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Product No."),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Product Description"),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(15),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("WBS Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("WBS Code"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name Extension"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name Extension"),  _
         Pos(37),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name Extension"),  _
         Pos(40),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name Extension"),  _
         Pos(43),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name Extension"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name Extension"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name Extension"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("File Name Extension"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attachment (ID)"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attachment (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetIV = True
                If loading Then
                  _IV = Value
                Else
                    if not _IV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Attachment (ID)"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetIV then
              if f then
                  jw.WriteRaw(", ""IV"": ")
              else
                  jw.WriteRaw("""IV"": ")
                  f = true
              end if
              jw.WriteValue(me.IV)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJACTEXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", me.IV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJACTEXTFILES = JsonConvert.DeserializeObject(Of PROJACTEXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _WBS = .WBS
                  _ACTDES = .ACTDES
                  _PROJACT = .PROJACT
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _CURDATE = .CURDATE
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PROJACTEXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("FAQ")>  _
    Public Class QUERY_FAQ2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FAQ2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FAQ2)
            _Parent = nothing
            _Name = "FAQ2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Answer")
            .add(1, "Menu Link")
            .add(2, "Answer - Language 2")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FAQ2)
            _Parent = Parent
            _name = "FAQ2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Answer")
            .add(1, "Menu Link")
            .add(2, "Answer - Language 2")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FAQ2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FAQ2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FAQ2 As FAQ2 In JsonConvert.DeserializeObject(Of QUERY_FAQ2)(stream.ReadToEnd).Value
              With _FAQ2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FAQ2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQ2 = JsonConvert.DeserializeObject(Of FAQ2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FAQ2)
                  .CURDATE = obj.CURDATE
                  .FAQNUM = obj.FAQNUM
                  .TITLE = obj.TITLE
                  .ETITLE = obj.ETITLE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .FAQ = obj.FAQ
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FAQ2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FAQ2 as FAQ2 in value
              If _FAQ2.Equals(trycast(obj,FAQ2)) Then
                  value.remove(_FAQ2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FAQ2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetFAQNUM As Boolean = Boolean.FalseString
        
        Private _FAQNUM As String
        
        Private _IsSetTITLE As Boolean = Boolean.FalseString
        
        Private _TITLE As String
        
        Private _IsSetETITLE As Boolean = Boolean.FalseString
        
        Private _ETITLE As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _IsSetFAQ As Boolean = Boolean.FalseString
        
        Private _FAQ As Long
        
        Private _FAQTEXT_SUBFORM As QUERY_FAQTEXT
        
        Private _FATFAQ_SUBFORM As QUERY_FATFAQ
        
        Private _FAQTEXT2_SUBFORM As QUERY_FAQTEXT2
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Answer"))
            ChildQuery.add(1, new oNavigation("Menu Link"))
            ChildQuery.add(2, new oNavigation("Answer - Language 2"))
            _FAQTEXT_SUBFORM = new QUERY_FAQTEXT(me)
            _FATFAQ_SUBFORM = new QUERY_FATFAQ(me)
            _FAQTEXT2_SUBFORM = new QUERY_FAQTEXT2(me)
            WITH ChildQuery(0)
               .setoDataQuery(_FAQTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_FATFAQ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_FAQTEXT2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Answer"))
            ChildQuery.add(1, new oNavigation("Menu Link"))
            ChildQuery.add(2, new oNavigation("Answer - Language 2"))
            _FAQTEXT_SUBFORM = new QUERY_FAQTEXT(me)
            _FATFAQ_SUBFORM = new QUERY_FATFAQ(me)
            _FAQTEXT2_SUBFORM = new QUERY_FAQTEXT2(me)
            WITH ChildQuery(0)
               .setoDataQuery(_FAQTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_FATFAQ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_FAQTEXT2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Answer", _FAQTEXT_SUBFORM))
                   .add(1, new oNavigation("Menu Link", _FATFAQ_SUBFORM))
                   .add(2, new oNavigation("Answer - Language 2", _FAQTEXT2_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FAQ2"
                else
                    return "FAQ2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FAQNUM={0}", _
                  string.format("'{0}'",FAQNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("FAQ Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("FAQNUM")>  _
        Public Property FAQNUM() As String
            Get
                return _FAQNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("FAQ Number", value, "^.{0,16}$") then Exit Property
                _IsSetFAQNUM = True
                If loading Then
                  _FAQNUM = Value
                Else
                    if not _FAQNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAQNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAQNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Question", value, "^.{0,80}$") then Exit Property
                _IsSetTITLE = True
                If loading Then
                  _TITLE = Value
                Else
                    if not _TITLE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TITLE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TITLE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Question (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         twodBarcode("ETITLE")>  _
        Public Property ETITLE() As String
            Get
                return _ETITLE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Question (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetETITLE = True
                If loading Then
                  _ETITLE = Value
                Else
                    if not _ETITLE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETITLE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETITLE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(35),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,24}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("FAQ (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FAQ")>  _
        Public Property FAQ() As nullable (of int64)
            Get
                return _FAQ
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("FAQ (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFAQ = True
                If loading Then
                  _FAQ = Value
                Else
                    if not _FAQ = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAQ", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAQ = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FAQTEXT_SUBFORM() As QUERY_FAQTEXT
            Get
                return _FAQTEXT_SUBFORM
            End Get
            Set
                _FAQTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FATFAQ_SUBFORM() As QUERY_FATFAQ
            Get
                return _FATFAQ_SUBFORM
            End Get
            Set
                _FATFAQ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property FAQTEXT2_SUBFORM() As QUERY_FAQTEXT2
            Get
                return _FAQTEXT2_SUBFORM
            End Get
            Set
                _FAQTEXT2_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetFAQNUM then
              if f then
                  jw.WriteRaw(", ""FAQNUM"": ")
              else
                  jw.WriteRaw("""FAQNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.FAQNUM)
            end if
            if _IsSetTITLE then
              if f then
                  jw.WriteRaw(", ""TITLE"": ")
              else
                  jw.WriteRaw("""TITLE"": ")
                  f = true
              end if
              jw.WriteValue(me.TITLE)
            end if
            if _IsSetETITLE then
              if f then
                  jw.WriteRaw(", ""ETITLE"": ")
              else
                  jw.WriteRaw("""ETITLE"": ")
                  f = true
              end if
              jw.WriteValue(me.ETITLE)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetFAQ then
              if f then
                  jw.WriteRaw(", ""FAQ"": ")
              else
                  jw.WriteRaw("""FAQ"": ")
                  f = true
              end if
              jw.WriteValue(me.FAQ)
            end if
            if _FAQTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FAQTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FAQTEXT in _FAQTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FAQTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FATFAQ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FATFAQ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FATFAQ in _FATFAQ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FATFAQ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _FAQTEXT2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", FAQTEXT2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as FAQTEXT2 in _FAQTEXT2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _FAQTEXT2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FAQ2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FAQNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFAQNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAQNUM")
              .WriteAttributeString("value", me.FAQNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTITLE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TITLE")
              .WriteAttributeString("value", me.TITLE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetETITLE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETITLE")
              .WriteAttributeString("value", me.ETITLE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAQ then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAQ")
              .WriteAttributeString("value", me.FAQ)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _FAQTEXT_SUBFORM.value.count > 0 then
              for each itm as FAQTEXT in _FAQTEXT_SUBFORM.Value
                itm.toXML(xw,"FAQTEXT_SUBFORM")
              next
            end if
            if _FATFAQ_SUBFORM.value.count > 0 then
              for each itm as FATFAQ in _FATFAQ_SUBFORM.Value
                itm.toXML(xw,"FATFAQ_SUBFORM")
              next
            end if
            if _FAQTEXT2_SUBFORM.value.count > 0 then
              for each itm as FAQTEXT2 in _FAQTEXT2_SUBFORM.Value
                itm.toXML(xw,"FAQTEXT2_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQ2 = JsonConvert.DeserializeObject(Of FAQ2)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _FAQNUM = .FAQNUM
                  _TITLE = .TITLE
                  _ETITLE = .ETITLE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _FAQ = .FAQ
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_FAQ2
        
        FAQTEXT = 0
        
        FATFAQ = 1
        
        FAQTEXT2 = 2
    End Enum
    
    <QueryTitle("Answer")>  _
    Public Class QUERY_FAQTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FAQTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FAQTEXT)
            _Parent = nothing
            _Name = "FAQTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FAQTEXT)
            _Parent = Parent
            _name = "FAQTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FAQTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FAQTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FAQTEXT As FAQTEXT In JsonConvert.DeserializeObject(Of QUERY_FAQTEXT)(stream.ReadToEnd).Value
              With _FAQTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FAQTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQTEXT = JsonConvert.DeserializeObject(Of FAQTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FAQTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FAQTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FAQTEXT as FAQTEXT in value
              If _FAQTEXT.Equals(trycast(obj,FAQTEXT)) Then
                  value.remove(_FAQTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FAQTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FAQTEXT"
                else
                    return "FAQTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FAQTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQTEXT = JsonConvert.DeserializeObject(Of FAQTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Menu Link")>  _
    Public Class QUERY_FATFAQ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FATFAQ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FATFAQ)
            _Parent = nothing
            _Name = "FATFAQ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FATFAQ)
            _Parent = Parent
            _name = "FATFAQ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FATFAQ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FATFAQ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FATFAQ As FATFAQ In JsonConvert.DeserializeObject(Of QUERY_FATFAQ)(stream.ReadToEnd).Value
              With _FATFAQ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FATFAQ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FATFAQ = JsonConvert.DeserializeObject(Of FATFAQ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FATFAQ)
                  .FAQNUM = obj.FAQNUM
                  .TITLE = obj.TITLE
                  .POS = obj.POS
                  .FAQ = obj.FAQ
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FATFAQ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FATFAQ as FATFAQ in value
              If _FATFAQ.Equals(trycast(obj,FATFAQ)) Then
                  value.remove(_FATFAQ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FATFAQ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetFAQNUM As Boolean = Boolean.FalseString
        
        Private _FAQNUM As String
        
        Private _TITLE As String
        
        Private _IsSetPOS As Boolean = Boolean.FalseString
        
        Private _POS As Long
        
        Private _IsSetFAQ As Boolean = Boolean.FalseString
        
        Private _FAQ As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FATFAQ"
                else
                    return "FATFAQ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FAQ={0}", _
                  string.format("{0}",FAQ) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Menu Number"),  _
         nType("Edm.String"),  _
         tab("Menu Number"),  _
         Pos(5),  _
         twodBarcode("FAQNUM")>  _
        Public Property FAQNUM() As String
            Get
                return _FAQNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Menu Number", value, "^.{0,16}$") then Exit Property
                _IsSetFAQNUM = True
                If loading Then
                  _FAQNUM = Value
                Else
                    if not _FAQNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAQNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAQNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Menu Title"),  _
         nType("Edm.String"),  _
         tab("Menu Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Position"),  _
         nType("Edm.Int64"),  _
         tab("Menu Number"),  _
         Pos(20),  _
         twodBarcode("POS")>  _
        Public Property POS() As nullable (of int64)
            Get
                return _POS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Position", value, "^[0-9\-]+$") then Exit Property
                _IsSetPOS = True
                If loading Then
                  _POS = Value
                Else
                    if not _POS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("POS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _POS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("FAQ (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Menu Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FAQ")>  _
        Public Property FAQ() As nullable (of int64)
            Get
                return _FAQ
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("FAQ (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFAQ = True
                If loading Then
                  _FAQ = Value
                Else
                    if not _FAQ = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAQ", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAQ = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetFAQNUM then
              if f then
                  jw.WriteRaw(", ""FAQNUM"": ")
              else
                  jw.WriteRaw("""FAQNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.FAQNUM)
            end if
            if _IsSetPOS then
              if f then
                  jw.WriteRaw(", ""POS"": ")
              else
                  jw.WriteRaw("""POS"": ")
                  f = true
              end if
              jw.WriteValue(me.POS)
            end if
            if _IsSetFAQ then
              if f then
                  jw.WriteRaw(", ""FAQ"": ")
              else
                  jw.WriteRaw("""FAQ"": ")
                  f = true
              end if
              jw.WriteValue(me.FAQ)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FATFAQ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FAQ")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetFAQNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAQNUM")
              .WriteAttributeString("value", me.FAQNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPOS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "POS")
              .WriteAttributeString("value", me.POS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFAQ then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAQ")
              .WriteAttributeString("value", me.FAQ)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FATFAQ = JsonConvert.DeserializeObject(Of FATFAQ)(e.StreamReader.ReadToEnd)
                With obj
                  _FAQNUM = .FAQNUM
                  _TITLE = .TITLE
                  _POS = .POS
                  _FAQ = .FAQ
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Answer - Language 2")>  _
    Public Class QUERY_FAQTEXT2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FAQTEXT2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FAQTEXT2)
            _Parent = nothing
            _Name = "FAQTEXT2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FAQTEXT2)
            _Parent = Parent
            _name = "FAQTEXT2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FAQTEXT2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FAQTEXT2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FAQTEXT2 As FAQTEXT2 In JsonConvert.DeserializeObject(Of QUERY_FAQTEXT2)(stream.ReadToEnd).Value
              With _FAQTEXT2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FAQTEXT2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQTEXT2 = JsonConvert.DeserializeObject(Of FAQTEXT2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FAQTEXT2)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FAQTEXT2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FAQTEXT2 as FAQTEXT2 in value
              If _FAQTEXT2.Equals(trycast(obj,FAQTEXT2)) Then
                  value.remove(_FAQTEXT2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FAQTEXT2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FAQTEXT2"
                else
                    return "FAQTEXT2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FAQTEXT2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FAQTEXT2 = JsonConvert.DeserializeObject(Of FAQTEXT2)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Calendar (All Users)")>  _
    Public Class QUERY_FUTUREGENDIARY
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FUTUREGENDIARY)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FUTUREGENDIARY)
            _Parent = nothing
            _Name = "FUTUREGENDIARY"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Reminder of Appointment")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FUTUREGENDIARY)
            _Parent = Parent
            _name = "FUTUREGENDIARY_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Reminder of Appointment")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FUTUREGENDIARY)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FUTUREGENDIARY)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FUTUREGENDIARY As FUTUREGENDIARY In JsonConvert.DeserializeObject(Of QUERY_FUTUREGENDIARY)(stream.ReadToEnd).Value
              With _FUTUREGENDIARY
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FUTUREGENDIARY)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FUTUREGENDIARY = JsonConvert.DeserializeObject(Of FUTUREGENDIARY)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FUTUREGENDIARY)
                  .CURDATE = obj.CURDATE
                  .DAY = obj.DAY
                  .USERLOGIN = obj.USERLOGIN
                  .STIME = obj.STIME
                  .ETIME = obj.ETIME
                  .TEXT = obj.TEXT
                  .CUSTNOTE = obj.CUSTNOTE
                  .USER = obj.USER
                  .DIARY = obj.DIARY
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FUTUREGENDIARY(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FUTUREGENDIARY as FUTUREGENDIARY in value
              If _FUTUREGENDIARY.Equals(trycast(obj,FUTUREGENDIARY)) Then
                  value.remove(_FUTUREGENDIARY)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FUTUREGENDIARY
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DAY As String
        
        Private _USERLOGIN As String
        
        Private _STIME As String
        
        Private _ETIME As String
        
        Private _TEXT As String
        
        Private _CUSTNOTE As Long
        
        Private _USER As Long
        
        Private _DIARY As Long
        
        Private _KLINE As Long
        
        Private _DIARIESSIGNATURE_SUBFORM As QUERY_DIARIESSIGNATURE
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Reminder of Appointment"))
            _DIARIESSIGNATURE_SUBFORM = new QUERY_DIARIESSIGNATURE(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DIARIESSIGNATURE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Reminder of Appointment", _DIARIESSIGNATURE_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Reminder of Appointment"))
            _DIARIESSIGNATURE_SUBFORM = new QUERY_DIARIESSIGNATURE(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DIARIESSIGNATURE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Reminder of Appointment", _DIARIESSIGNATURE_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FUTUREGENDIARY"
                else
                    return "FUTUREGENDIARY_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURDATE={0},USER={1},KLINE={2}", _
                  string.format("{0}",CURDATE), _
                  string.format("{0}",USER), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Employee"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if not(value is nothing) then
                  _STIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if not(value is nothing) then
                  _ETIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Calendar Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Calendar Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DIARY")>  _
        Public Property DIARY() As nullable (of int64)
            Get
                return _DIARY
            End Get
            Set
                if not(value is nothing) then
                  _DIARY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Calendar Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DIARIESSIGNATURE_SUBFORM() As QUERY_DIARIESSIGNATURE
            Get
                return _DIARIESSIGNATURE_SUBFORM
            End Get
            Set
                _DIARIESSIGNATURE_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _DIARIESSIGNATURE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DIARIESSIGNATURE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DIARIESSIGNATURE in _DIARIESSIGNATURE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DIARIESSIGNATURE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FUTUREGENDIARY")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _DIARIESSIGNATURE_SUBFORM.value.count > 0 then
              for each itm as DIARIESSIGNATURE in _DIARIESSIGNATURE_SUBFORM.Value
                itm.toXML(xw,"DIARIESSIGNATURE_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FUTUREGENDIARY = JsonConvert.DeserializeObject(Of FUTUREGENDIARY)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DAY = .DAY
                  _USERLOGIN = .USERLOGIN
                  _STIME = .STIME
                  _ETIME = .ETIME
                  _TEXT = .TEXT
                  _CUSTNOTE = .CUSTNOTE
                  _USER = .USER
                  _DIARY = .DIARY
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_FUTUREGENDIARY
        
        DIARIESSIGNATURE = 0
    End Enum
    
    <QueryTitle("Reminder of Appointment")>  _
    Public Class QUERY_DIARIESSIGNATURE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DIARIESSIGNATURE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DIARIESSIGNATURE)
            _Parent = nothing
            _Name = "DIARIESSIGNATURE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DIARIESSIGNATURE)
            _Parent = Parent
            _name = "DIARIESSIGNATURE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DIARIESSIGNATURE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DIARIESSIGNATURE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DIARIESSIGNATURE As DIARIESSIGNATURE In JsonConvert.DeserializeObject(Of QUERY_DIARIESSIGNATURE)(stream.ReadToEnd).Value
              With _DIARIESSIGNATURE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DIARIESSIGNATURE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DIARIESSIGNATURE = JsonConvert.DeserializeObject(Of DIARIESSIGNATURE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DIARIESSIGNATURE)
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DIARY = obj.DIARY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DIARIESSIGNATURE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DIARIESSIGNATURE as DIARIESSIGNATURE in value
              If _DIARIESSIGNATURE.Equals(trycast(obj,DIARIESSIGNATURE)) Then
                  value.remove(_DIARIESSIGNATURE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DIARIESSIGNATURE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _REMINDFLAG As String
        
        Private _REMINDTIME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DIARY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DIARIESSIGNATURE"
                else
                    return "DIARIESSIGNATURE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DIARY={0}", _
                  string.format("{0}",DIARY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if not(value is nothing) then
                  _REMINDFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if not(value is nothing) then
                  _REMINDTIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Remind?"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Remind?"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Calendar Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Remind?"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DIARY")>  _
        Public Property DIARY() As nullable (of int64)
            Get
                return _DIARY
            End Get
            Set
                if not(value is nothing) then
                  _DIARY = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DIARIESSIGNATURE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DIARY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DIARIESSIGNATURE = JsonConvert.DeserializeObject(Of DIARIESSIGNATURE)(e.StreamReader.ReadToEnd)
                With obj
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DIARY = .DIARY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Credit")>  _
    Public Class QUERY_CUSTOBLIGO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = nothing
            _Name = "CUSTOBLIGO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = Parent
            _name = "CUSTOBLIGO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGO As CUSTOBLIGO In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGO)(stream.ReadToEnd).Value
              With _CUSTOBLIGO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGO)
                  .ORD_DEBIT = obj.ORD_DEBIT
                  .DOC_DEBIT = obj.DOC_DEBIT
                  .PROJ_DEBIT = obj.PROJ_DEBIT
                  .IV_DEBIT = obj.IV_DEBIT
                  .ACC_DEBIT = obj.ACC_DEBIT
                  .CHEQUE_DEBIT = obj.CHEQUE_DEBIT
                  .CODE = obj.CODE
                  .OLD = obj.OLD
                  .UPTO90 = obj.UPTO90
                  .UPTO60 = obj.UPTO60
                  .UPTO30 = obj.UPTO30
                  .FUTURE = obj.FUTURE
                  .TOTOLD = obj.TOTOLD
                  .CREDIT = obj.CREDIT
                  .MAX_CREDIT = obj.MAX_CREDIT
                  .CREDIT_DIFF = obj.CREDIT_DIFF
                  .CRCODE = obj.CRCODE
                  .OBLIGO = obj.OBLIGO
                  .MAX_OBLIGO = obj.MAX_OBLIGO
                  .OBLIGO_DIFF = obj.OBLIGO_DIFF
                  .OBCODE = obj.OBCODE
                  .STATDES = obj.STATDES
                  .RESTRICTDATE = obj.RESTRICTDATE
                  .WAITING = obj.WAITING
                  .THISMONTH = obj.THISMONTH
                  .NEXTMONTH = obj.NEXTMONTH
                  .TWOMONTHS = obj.TWOMONTHS
                  .FUTURECHEQUES = obj.FUTURECHEQUES
                  .SECURECHECKS = obj.SECURECHECKS
                  .CREDITCARDS = obj.CREDITCARDS
                  .MAX_CREDIT_ENV = obj.MAX_CREDIT_ENV
                  .CREDIT_ENV = obj.CREDIT_ENV
                  .CREDIT_ENV_DIFF = obj.CREDIT_ENV_DIFF
                  .CR_CODE_ENV = obj.CR_CODE_ENV
                  .MAX_OBLIGO_ENV = obj.MAX_OBLIGO_ENV
                  .OBLIGO_ENV = obj.OBLIGO_ENV
                  .OBLIGO_ENV_DIFF = obj.OBLIGO_ENV_DIFF
                  .OB_CODE_ENV = obj.OB_CODE_ENV
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGO as CUSTOBLIGO in value
              If _CUSTOBLIGO.Equals(trycast(obj,CUSTOBLIGO)) Then
                  value.remove(_CUSTOBLIGO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORD_DEBIT As Decimal
        
        Private _DOC_DEBIT As Decimal
        
        Private _PROJ_DEBIT As Decimal
        
        Private _IV_DEBIT As Decimal
        
        Private _ACC_DEBIT As Decimal
        
        Private _CHEQUE_DEBIT As Decimal
        
        Private _CODE As String
        
        Private _OLD As Decimal
        
        Private _UPTO90 As Decimal
        
        Private _UPTO60 As Decimal
        
        Private _UPTO30 As Decimal
        
        Private _FUTURE As Decimal
        
        Private _TOTOLD As Decimal
        
        Private _CREDIT As Decimal
        
        Private _MAX_CREDIT As Decimal
        
        Private _CREDIT_DIFF As Decimal
        
        Private _CRCODE As String
        
        Private _OBLIGO As Decimal
        
        Private _MAX_OBLIGO As Decimal
        
        Private _OBLIGO_DIFF As Decimal
        
        Private _OBCODE As String
        
        Private _STATDES As String
        
        Private _RESTRICTDATE As System.DateTimeOffset
        
        Private _WAITING As Decimal
        
        Private _THISMONTH As Decimal
        
        Private _NEXTMONTH As Decimal
        
        Private _TWOMONTHS As Decimal
        
        Private _FUTURECHEQUES As Decimal
        
        Private _SECURECHECKS As Decimal
        
        Private _CREDITCARDS As Decimal
        
        Private _MAX_CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV_DIFF As Decimal
        
        Private _CR_CODE_ENV As String
        
        Private _MAX_OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV_DIFF As Decimal
        
        Private _OB_CODE_ENV As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _CUST As Long
        
        Private _OBLIGO_ORDERS_SUBFORM As QUERY_OBLIGO_ORDERS
        
        Private _OBLIGO_TRANS_SUBFORM As QUERY_OBLIGO_TRANS
        
        Private _OBLIGO_PROJ_SUBFORM As QUERY_OBLIGO_PROJ
        
        Private _OBLIGO_IV_SUBFORM As QUERY_OBLIGO_IV
        
        Private _OBLIGO_FNCITEMS_SUBFORM As QUERY_OBLIGO_FNCITEMS
        
        Private _OBLIGO_CHECKS_SUBFORM As QUERY_OBLIGO_CHECKS
        
        Private _OBLIGO_CHECKS2_SUBFORM As QUERY_OBLIGO_CHECKS2
        
        Private _SECURE_CHECKS_SUBFORM As QUERY_SECURE_CHECKS
        
        Private _OBLIGO_FNCBAL5_SUBFORM As QUERY_OBLIGO_FNCBAL5
        
        Private _CUSTOBLIGOENV_SUBFORM As QUERY_CUSTOBLIGOENV
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGO"
                else
                    return "CUSTOBLIGO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORD_DEBIT")>  _
        Public Property ORD_DEBIT() As nullable(of decimal)
            Get
                return _ORD_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ORD_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Documents"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOC_DEBIT")>  _
        Public Property DOC_DEBIT() As nullable(of decimal)
            Get
                return _DOC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DOC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Project Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PROJ_DEBIT")>  _
        Public Property PROJ_DEBIT() As nullable(of decimal)
            Get
                return _PROJ_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _PROJ_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Pending Sales Invs."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IV_DEBIT")>  _
        Public Property IV_DEBIT() As nullable(of decimal)
            Get
                return _IV_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _IV_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unpaid Bills"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ACC_DEBIT")>  _
        Public Property ACC_DEBIT() As nullable(of decimal)
            Get
                return _ACC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ACC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CHEQUE_DEBIT")>  _
        Public Property CHEQUE_DEBIT() As nullable(of decimal)
            Get
                return _CHEQUE_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _CHEQUE_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Open Orders"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("> 90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLD")>  _
        Public Property OLD() As nullable(of decimal)
            Get
                return _OLD
            End Get
            Set
                if not(value is nothing) then
                  _OLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("61-90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO90")>  _
        Public Property UPTO90() As nullable(of decimal)
            Get
                return _UPTO90
            End Get
            Set
                if not(value is nothing) then
                  _UPTO90 = Value
                end if
            End Set
        End Property
        
        <DisplayName("31-60"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO60")>  _
        Public Property UPTO60() As nullable(of decimal)
            Get
                return _UPTO60
            End Get
            Set
                if not(value is nothing) then
                  _UPTO60 = Value
                end if
            End Set
        End Property
        
        <DisplayName("1-30"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO30")>  _
        Public Property UPTO30() As nullable(of decimal)
            Get
                return _UPTO30
            End Get
            Set
                if not(value is nothing) then
                  _UPTO30 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURE")>  _
        Public Property FUTURE() As nullable(of decimal)
            Get
                return _FUTURE
            End Get
            Set
                if not(value is nothing) then
                  _FUTURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total for Aging"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TOTOLD")>  _
        Public Property TOTOLD() As nullable(of decimal)
            Get
                return _TOTOLD
            End Get
            Set
                if not(value is nothing) then
                  _TOTOLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT")>  _
        Public Property MAX_CREDIT() As nullable(of decimal)
            Get
                return _MAX_CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("61-90"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_DIFF")>  _
        Public Property CREDIT_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if not(value is nothing) then
                  _CRCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO")>  _
        Public Property MAX_OBLIGO() As nullable(of decimal)
            Get
                return _MAX_OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Credit Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_DIFF")>  _
        Public Property OBLIGO_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liab. Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("OBCODE")>  _
        Public Property OBCODE() As String
            Get
                return _OBCODE
            End Get
            Set
                if not(value is nothing) then
                  _OBCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Status"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Restricted"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Credit Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("RESTRICTDATE")>  _
        Public Property RESTRICTDATE() As nullable (of DateTimeOffset)
            Get
                return _RESTRICTDATE
            End Get
            Set
                if not(value is nothing) then
                  _RESTRICTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Awaiting Clearance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WAITING")>  _
        Public Property WAITING() As nullable(of decimal)
            Get
                return _WAITING
            End Get
            Set
                if not(value is nothing) then
                  _WAITING = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated This Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("THISMONTH")>  _
        Public Property THISMONTH() As nullable(of decimal)
            Get
                return _THISMONTH
            End Get
            Set
                if not(value is nothing) then
                  _THISMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Next Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("NEXTMONTH")>  _
        Public Property NEXTMONTH() As nullable(of decimal)
            Get
                return _NEXTMONTH
            End Get
            Set
                if not(value is nothing) then
                  _NEXTMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2 Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("TWOMONTHS")>  _
        Public Property TWOMONTHS() As nullable(of decimal)
            Get
                return _TWOMONTHS
            End Get
            Set
                if not(value is nothing) then
                  _TWOMONTHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2+ Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURECHEQUES")>  _
        Public Property FUTURECHEQUES() As nullable(of decimal)
            Get
                return _FUTURECHEQUES
            End Get
            Set
                if not(value is nothing) then
                  _FUTURECHEQUES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Secure Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SECURECHECKS")>  _
        Public Property SECURECHECKS() As nullable(of decimal)
            Get
                return _SECURECHECKS
            End Get
            Set
                if not(value is nothing) then
                  _SECURECHECKS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Cards"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(234),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITCARDS")>  _
        Public Property CREDITCARDS() As nullable(of decimal)
            Get
                return _CREDITCARDS
            End Get
            Set
                if not(value is nothing) then
                  _CREDITCARDS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Cred Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT_ENV")>  _
        Public Property MAX_CREDIT_ENV() As nullable(of decimal)
            Get
                return _MAX_CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV")>  _
        Public Property CREDIT_ENV() As nullable(of decimal)
            Get
                return _CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV_DIFF")>  _
        Public Property CREDIT_ENV_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CR_CODE_ENV")>  _
        Public Property CR_CODE_ENV() As String
            Get
                return _CR_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CR_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liab Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO_ENV")>  _
        Public Property MAX_OBLIGO_ENV() As nullable(of decimal)
            Get
                return _MAX_OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV")>  _
        Public Property OBLIGO_ENV() As nullable(of decimal)
            Get
                return _OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liabil Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV_DIFF")>  _
        Public Property OBLIGO_ENV_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("OB_CODE_ENV")>  _
        Public Property OB_CODE_ENV() As String
            Get
                return _OB_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OB_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (No.)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(315),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (Name)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_ORDERS_SUBFORM() As QUERY_OBLIGO_ORDERS
            Get
                return _OBLIGO_ORDERS_SUBFORM
            End Get
            Set
                _OBLIGO_ORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_TRANS_SUBFORM() As QUERY_OBLIGO_TRANS
            Get
                return _OBLIGO_TRANS_SUBFORM
            End Get
            Set
                _OBLIGO_TRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_PROJ_SUBFORM() As QUERY_OBLIGO_PROJ
            Get
                return _OBLIGO_PROJ_SUBFORM
            End Get
            Set
                _OBLIGO_PROJ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_IV_SUBFORM() As QUERY_OBLIGO_IV
            Get
                return _OBLIGO_IV_SUBFORM
            End Get
            Set
                _OBLIGO_IV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCITEMS_SUBFORM() As QUERY_OBLIGO_FNCITEMS
            Get
                return _OBLIGO_FNCITEMS_SUBFORM
            End Get
            Set
                _OBLIGO_FNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS_SUBFORM() As QUERY_OBLIGO_CHECKS
            Get
                return _OBLIGO_CHECKS_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS2_SUBFORM() As QUERY_OBLIGO_CHECKS2
            Get
                return _OBLIGO_CHECKS2_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SECURE_CHECKS_SUBFORM() As QUERY_SECURE_CHECKS
            Get
                return _SECURE_CHECKS_SUBFORM
            End Get
            Set
                _SECURE_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCBAL5_SUBFORM() As QUERY_OBLIGO_FNCBAL5
            Get
                return _OBLIGO_FNCBAL5_SUBFORM
            End Get
            Set
                _OBLIGO_FNCBAL5_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGOENV_SUBFORM() As QUERY_CUSTOBLIGOENV
            Get
                return _CUSTOBLIGOENV_SUBFORM
            End Get
            Set
                _CUSTOBLIGOENV_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_ORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_ORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_TRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_TRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_PROJ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_PROJ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_IV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_IV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SECURE_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SECURE_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCBAL5_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCBAL5_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGOENV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGOENV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_ORDERS_SUBFORM")
              next
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_TRANS_SUBFORM")
              next
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_PROJ_SUBFORM")
              next
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_IV_SUBFORM")
              next
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCITEMS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS2_SUBFORM")
              next
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.Value
                itm.toXML(xw,"SECURE_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCBAL5_SUBFORM")
              next
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGOENV_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD_DEBIT = .ORD_DEBIT
                  _DOC_DEBIT = .DOC_DEBIT
                  _PROJ_DEBIT = .PROJ_DEBIT
                  _IV_DEBIT = .IV_DEBIT
                  _ACC_DEBIT = .ACC_DEBIT
                  _CHEQUE_DEBIT = .CHEQUE_DEBIT
                  _CODE = .CODE
                  _OLD = .OLD
                  _UPTO90 = .UPTO90
                  _UPTO60 = .UPTO60
                  _UPTO30 = .UPTO30
                  _FUTURE = .FUTURE
                  _TOTOLD = .TOTOLD
                  _CREDIT = .CREDIT
                  _MAX_CREDIT = .MAX_CREDIT
                  _CREDIT_DIFF = .CREDIT_DIFF
                  _CRCODE = .CRCODE
                  _OBLIGO = .OBLIGO
                  _MAX_OBLIGO = .MAX_OBLIGO
                  _OBLIGO_DIFF = .OBLIGO_DIFF
                  _OBCODE = .OBCODE
                  _STATDES = .STATDES
                  _RESTRICTDATE = .RESTRICTDATE
                  _WAITING = .WAITING
                  _THISMONTH = .THISMONTH
                  _NEXTMONTH = .NEXTMONTH
                  _TWOMONTHS = .TWOMONTHS
                  _FUTURECHEQUES = .FUTURECHEQUES
                  _SECURECHECKS = .SECURECHECKS
                  _CREDITCARDS = .CREDITCARDS
                  _MAX_CREDIT_ENV = .MAX_CREDIT_ENV
                  _CREDIT_ENV = .CREDIT_ENV
                  _CREDIT_ENV_DIFF = .CREDIT_ENV_DIFF
                  _CR_CODE_ENV = .CR_CODE_ENV
                  _MAX_OBLIGO_ENV = .MAX_OBLIGO_ENV
                  _OBLIGO_ENV = .OBLIGO_ENV
                  _OBLIGO_ENV_DIFF = .OBLIGO_ENV_DIFF
                  _OB_CODE_ENV = .OB_CODE_ENV
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTOBLIGO
        
        OBLIGO_ORDERS = 0
        
        OBLIGO_TRANS = 1
        
        OBLIGO_PROJ = 2
        
        OBLIGO_IV = 3
        
        OBLIGO_FNCITEMS = 4
        
        OBLIGO_CHECKS = 5
        
        OBLIGO_CHECKS2 = 6
        
        SECURE_CHECKS = 7
        
        OBLIGO_FNCBAL5 = 8
        
        CUSTOBLIGOENV = 9
    End Enum
    
    <QueryTitle("Open Orders")>  _
    Public Class QUERY_OBLIGO_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = nothing
            _Name = "OBLIGO_ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = Parent
            _name = "OBLIGO_ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_ORDERS As OBLIGO_ORDERS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_ORDERS)(stream.ReadToEnd).Value
              With _OBLIGO_ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_ORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .PRICEBAL1 = obj.PRICEBAL1
                  .CODE = obj.CODE
                  .PRICEBAL2 = obj.PRICEBAL2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .ORD2 = obj.ORD2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_ORDERS as OBLIGO_ORDERS in value
              If _OBLIGO_ORDERS.Equals(trycast(obj,OBLIGO_ORDERS)) Then
                  value.remove(_OBLIGO_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICEBAL1 As Decimal
        
        Private _CODE As String
        
        Private _PRICEBAL2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _ORD2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_ORDERS"
                else
                    return "OBLIGO_ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL1")>  _
        Public Property PRICEBAL1() As nullable(of decimal)
            Get
                return _PRICEBAL1
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Value"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL2")>  _
        Public Property PRICEBAL2() As nullable(of decimal)
            Get
                return _PRICEBAL2
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Value"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD2")>  _
        Public Property ORD2() As nullable (of int64)
            Get
                return _ORD2
            End Get
            Set
                if not(value is nothing) then
                  _ORD2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _PRICEBAL1 = .PRICEBAL1
                  _CODE = .CODE
                  _PRICEBAL2 = .PRICEBAL2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _ORD2 = .ORD2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Documents")>  _
    Public Class QUERY_OBLIGO_TRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_TRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = nothing
            _Name = "OBLIGO_TRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = Parent
            _name = "OBLIGO_TRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_TRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_TRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_TRANS As OBLIGO_TRANS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_TRANS)(stream.ReadToEnd).Value
              With _OBLIGO_TRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_TRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_TRANS)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_TRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_TRANS as OBLIGO_TRANS in value
              If _OBLIGO_TRANS.Equals(trycast(obj,OBLIGO_TRANS)) Then
                  value.remove(_OBLIGO_TRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_TRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DOCCODE As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_TRANS"
                else
                    return "OBLIGO_TRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if not(value is nothing) then
                  _DOCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Amount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_TRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Project Hours")>  _
    Public Class QUERY_OBLIGO_PROJ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_PROJ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = nothing
            _Name = "OBLIGO_PROJ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = Parent
            _name = "OBLIGO_PROJ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_PROJ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_PROJ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_PROJ As OBLIGO_PROJ In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_PROJ)(stream.ReadToEnd).Value
              With _OBLIGO_PROJ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_PROJ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_PROJ)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .USERLOGIN = obj.USERLOGIN
                  .TRANS = obj.TRANS
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_PROJ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_PROJ as OBLIGO_PROJ in value
              If _OBLIGO_PROJ.Equals(trycast(obj,OBLIGO_PROJ)) Then
                  value.remove(_OBLIGO_PROJ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_PROJ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _USERLOGIN As String
        
        Private _TRANS As Long
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_PROJ"
                else
                    return "OBLIGO_PROJ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_PROJ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _USERLOGIN = .USERLOGIN
                  _TRANS = .TRANS
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pending Sales Invoices")>  _
    Public Class QUERY_OBLIGO_IV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_IV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = nothing
            _Name = "OBLIGO_IV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = Parent
            _name = "OBLIGO_IV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_IV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_IV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_IV As OBLIGO_IV In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_IV)(stream.ReadToEnd).Value
              With _OBLIGO_IV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_IV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_IV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .DEBIT = obj.DEBIT
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_IV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_IV as OBLIGO_IV in value
              If _OBLIGO_IV.Equals(trycast(obj,OBLIGO_IV)) Then
                  value.remove(_OBLIGO_IV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_IV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _DEBIT As String
        
        Private _IV As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_IV"
                else
                    return "OBLIGO_IV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},TYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_IV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _DEBIT = .DEBIT
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unpaid Bills")>  _
    Public Class QUERY_OBLIGO_FNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = nothing
            _Name = "OBLIGO_FNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = Parent
            _name = "OBLIGO_FNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCITEMS As OBLIGO_FNCITEMS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCITEMS)(stream.ReadToEnd).Value
              With _OBLIGO_FNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCITEMS)
                  .BALDATE = obj.BALDATE
                  .FNCNUM = obj.FNCNUM
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .SUM1 = obj.SUM1
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCIREF1 = obj.FNCIREF1
                  .FNCIREF2 = obj.FNCIREF2
                  .ORDNAME = obj.ORDNAME
                  .FNCICODE = obj.FNCICODE
                  .ACCNAME = obj.ACCNAME
                  .SUM5 = obj.SUM5
                  .CODE5 = obj.CODE5
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCITEMS as OBLIGO_FNCITEMS in value
              If _OBLIGO_FNCITEMS.Equals(trycast(obj,OBLIGO_FNCITEMS)) Then
                  value.remove(_OBLIGO_FNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _FNCNUM As String
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _SUM1 As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCIREF1 As String
        
        Private _FNCIREF2 As String
        
        Private _ORDNAME As String
        
        Private _FNCICODE As String
        
        Private _ACCNAME As String
        
        Private _SUM5 As Decimal
        
        Private _CODE5 As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCITEMS"
                else
                    return "OBLIGO_FNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(20),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUM1")>  _
        Public Property SUM1() As nullable(of decimal)
            Get
                return _SUM1
            End Get
            Set
                if not(value is nothing) then
                  _SUM1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Due Date"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 1 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF1")>  _
        Public Property FNCIREF1() As String
            Get
                return _FNCIREF1
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 2 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF2")>  _
        Public Property FNCIREF2() As String
            Get
                return _FNCIREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if not(value is nothing) then
                  _FNCICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Due Date"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("SUM5")>  _
        Public Property SUM5() As nullable(of decimal)
            Get
                return _SUM5
            End Get
            Set
                if not(value is nothing) then
                  _SUM5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _FNCNUM = .FNCNUM
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _SUM1 = .SUM1
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCIREF1 = .FNCIREF1
                  _FNCIREF2 = .FNCIREF2
                  _ORDNAME = .ORDNAME
                  _FNCICODE = .FNCICODE
                  _ACCNAME = .ACCNAME
                  _SUM5 = .SUM5
                  _CODE5 = .CODE5
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Post-dated Cheques")>  _
    Public Class QUERY_OBLIGO_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = Parent
            _name = "OBLIGO_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS As OBLIGO_CHECKS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS as OBLIGO_CHECKS in value
              If _OBLIGO_CHECKS.Equals(trycast(obj,OBLIGO_CHECKS)) Then
                  value.remove(_OBLIGO_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS"
                else
                    return "OBLIGO_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Cheques Past Due Date")>  _
    Public Class QUERY_OBLIGO_CHECKS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = Parent
            _name = "OBLIGO_CHECKS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS2 As OBLIGO_CHECKS2 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS2)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS2)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENTA = obj.PAYMENTA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS2 as OBLIGO_CHECKS2 in value
              If _OBLIGO_CHECKS2.Equals(trycast(obj,OBLIGO_CHECKS2)) Then
                  value.remove(_OBLIGO_CHECKS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENTA As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS2"
                else
                    return "OBLIGO_CHECKS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENTA")>  _
        Public Property PAYMENTA() As nullable (of int64)
            Get
                return _PAYMENTA
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTA = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENTA = .PAYMENTA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Secure Post-dated Cheques")>  _
    Public Class QUERY_SECURE_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SECURE_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = nothing
            _Name = "SECURE_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = Parent
            _name = "SECURE_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SECURE_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SECURE_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SECURE_CHECKS As SECURE_CHECKS In JsonConvert.DeserializeObject(Of QUERY_SECURE_CHECKS)(stream.ReadToEnd).Value
              With _SECURE_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SECURE_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SECURE_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SECURE_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SECURE_CHECKS as SECURE_CHECKS in value
              If _SECURE_CHECKS.Equals(trycast(obj,SECURE_CHECKS)) Then
                  value.remove(_SECURE_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SECURE_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SECURE_CHECKS"
                else
                    return "SECURE_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date of Receipt"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SECURE_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Balances in Transaction Currency")>  _
    Public Class QUERY_OBLIGO_FNCBAL5
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCBAL5)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = nothing
            _Name = "OBLIGO_FNCBAL5"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = Parent
            _name = "OBLIGO_FNCBAL5_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCBAL5)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCBAL5)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCBAL5 As OBLIGO_FNCBAL5 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCBAL5)(stream.ReadToEnd).Value
              With _OBLIGO_FNCBAL5
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCBAL5)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCBAL5)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BALANCE5 = obj.BALANCE5
                  .CODE5 = obj.CODE5
                  .BALANCE3 = obj.BALANCE3
                  .BAL3 = obj.BAL3
                  .CODE3 = obj.CODE3
                  .ACCOUNT = obj.ACCOUNT
                  .CURRENCY5 = obj.CURRENCY5
                  .UCUST = obj.UCUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCBAL5(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCBAL5 as OBLIGO_FNCBAL5 in value
              If _OBLIGO_FNCBAL5.Equals(trycast(obj,OBLIGO_FNCBAL5)) Then
                  value.remove(_OBLIGO_FNCBAL5)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCBAL5
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _BALANCE5 As Decimal
        
        Private _CODE5 As String
        
        Private _BALANCE3 As Decimal
        
        Private _BAL3 As Decimal
        
        Private _CODE3 As String
        
        Private _ACCOUNT As Long
        
        Private _CURRENCY5 As Long
        
        Private _UCUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCBAL5"
                else
                    return "OBLIGO_FNCBAL5_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACCOUNT={0},CURRENCY5={1},UCUST={2}", _
                  string.format("{0}",ACCOUNT), _
                  string.format("{0}",CURRENCY5), _
                  string.format("{0}",UCUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE5")>  _
        Public Property BALANCE5() As nullable(of decimal)
            Get
                return _BALANCE5
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Acct Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE3")>  _
        Public Property BALANCE3() As nullable(of decimal)
            Get
                return _BALANCE3
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BAL3")>  _
        Public Property BAL3() As nullable(of decimal)
            Get
                return _BAL3
            End Get
            Set
                if not(value is nothing) then
                  _BAL3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Account No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACCOUNT")>  _
        Public Property ACCOUNT() As nullable (of int64)
            Get
                return _ACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _ACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transact. Curr (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY5")>  _
        Public Property CURRENCY5() As nullable (of int64)
            Get
                return _CURRENCY5
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("UCUST")>  _
        Public Property UCUST() As nullable (of int64)
            Get
                return _UCUST
            End Get
            Set
                if not(value is nothing) then
                  _UCUST = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCBAL5")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACCOUNT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY5")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "UCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BALANCE5 = .BALANCE5
                  _CODE5 = .CODE5
                  _BALANCE3 = .BALANCE3
                  _BAL3 = .BAL3
                  _CODE3 = .CODE3
                  _ACCOUNT = .ACCOUNT
                  _CURRENCY5 = .CURRENCY5
                  _UCUST = .UCUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit per Company")>  _
    Public Class QUERY_CUSTOBLIGOENV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGOENV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = nothing
            _Name = "CUSTOBLIGOENV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = Parent
            _name = "CUSTOBLIGOENV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGOENV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGOENV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGOENV As CUSTOBLIGOENV In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGOENV)(stream.ReadToEnd).Value
              With _CUSTOBLIGOENV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGOENV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGOENV)
                  .TITLE = obj.TITLE
                  .CREDIT = obj.CREDIT
                  .OBLIGO = obj.OBLIGO
                  .CODE = obj.CODE
                  .DNAME = obj.DNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGOENV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGOENV as CUSTOBLIGOENV in value
              If _CUSTOBLIGOENV.Equals(trycast(obj,CUSTOBLIGOENV)) Then
                  value.remove(_CUSTOBLIGOENV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGOENV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _CREDIT As Decimal
        
        Private _OBLIGO As Decimal
        
        Private _CODE As String
        
        Private _DNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGOENV"
                else
                    return "CUSTOBLIGOENV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DNAME={0}", _
                  string.format("'{0}'",DNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Company Name"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DNAME")>  _
        Public Property DNAME() As String
            Get
                return _DNAME
            End Get
            Set
                if not(value is nothing) then
                  _DNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGOENV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _CREDIT = .CREDIT
                  _OBLIGO = .OBLIGO
                  _CODE = .CODE
                  _DNAME = .DNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Follow-up Calls")>  _
    Public Class QUERY_DOCUMENTS_Q_B
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_Q_B)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_Q_B)
            _Parent = nothing
            _Name = "DOCUMENTS_Q_B"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_Q_B)
            _Parent = Parent
            _name = "DOCUMENTS_Q_B_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_Q_B)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_Q_B)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_Q_B As DOCUMENTS_Q_B In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_Q_B)(stream.ReadToEnd).Value
              With _DOCUMENTS_Q_B
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_Q_B)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q_B = JsonConvert.DeserializeObject(Of DOCUMENTS_Q_B)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_Q_B)
                  .STARTDATE = obj.STARTDATE
                  .DOCNO = obj.DOCNO
                  .MALFCODE = obj.MALFCODE
                  .MALFDES = obj.MALFDES
                  .CODE = obj.CODE
                  .DOC = obj.DOC
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_Q_B(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_Q_B as DOCUMENTS_Q_B in value
              If _DOCUMENTS_Q_B.Equals(trycast(obj,DOCUMENTS_Q_B)) Then
                  value.remove(_DOCUMENTS_Q_B)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_Q_B
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _STARTDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _MALFCODE As String
        
        Private _MALFDES As String
        
        Private _CODE As String
        
        Private _DOC As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_Q_B"
                else
                    return "DOCUMENTS_Q_B_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date Opened"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Opened"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("STARTDATE")>  _
        Public Property STARTDATE() As nullable (of DateTimeOffset)
            Get
                return _STARTDATE
            End Get
            Set
                if not(value is nothing) then
                  _STARTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Call Number"),  _
         nType("Edm.String"),  _
         tab("Date Opened"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Malfunction Code"),  _
         nType("Edm.String"),  _
         tab("Date Opened"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("MALFCODE")>  _
        Public Property MALFCODE() As String
            Get
                return _MALFCODE
            End Get
            Set
                if not(value is nothing) then
                  _MALFCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Malf. Description"),  _
         nType("Edm.String"),  _
         tab("Date Opened"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("MALFDES")>  _
        Public Property MALFDES() As String
            Get
                return _MALFDES
            End Get
            Set
                if not(value is nothing) then
                  _MALFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Call Status"),  _
         nType("Edm.String"),  _
         tab("Date Opened"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Opened"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Date Opened"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_Q_B")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q_B = JsonConvert.DeserializeObject(Of DOCUMENTS_Q_B)(e.StreamReader.ReadToEnd)
                With obj
                  _STARTDATE = .STARTDATE
                  _DOCNO = .DOCNO
                  _MALFCODE = .MALFCODE
                  _MALFDES = .MALFDES
                  _CODE = .CODE
                  _DOC = .DOC
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = nothing
            _Name = "SHIPTO2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = Parent
            _name = "SHIPTO2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO2 As SHIPTO2 In JsonConvert.DeserializeObject(Of QUERY_SHIPTO2)(stream.ReadToEnd).Value
              With _SHIPTO2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO2)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .TAXCODE = obj.TAXCODE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO2 as SHIPTO2 in value
              If _SHIPTO2.Equals(trycast(obj,SHIPTO2)) Then
                  value.remove(_SHIPTO2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO2"
                else
                    return "SHIPTO2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(160),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                  _TAXCODE = .TAXCODE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Serv. Call-Electronic Signature")>  _
    Public Class QUERY_DOCUMENTS_Q_A
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_Q_A)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_Q_A)
            _Parent = nothing
            _Name = "DOCUMENTS_Q_A"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_Q_A)
            _Parent = Parent
            _name = "DOCUMENTS_Q_A_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_Q_A)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_Q_A)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_Q_A As DOCUMENTS_Q_A In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_Q_A)(stream.ReadToEnd).Value
              With _DOCUMENTS_Q_A
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_Q_A)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q_A = JsonConvert.DeserializeObject(Of DOCUMENTS_Q_A)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_Q_A)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_Q_A(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_Q_A as DOCUMENTS_Q_A in value
              If _DOCUMENTS_Q_A.Equals(trycast(obj,DOCUMENTS_Q_A)) Then
                  value.remove(_DOCUMENTS_Q_A)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_Q_A
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_Q_A"
                else
                    return "DOCUMENTS_Q_A_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_Q_A")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_Q_A = JsonConvert.DeserializeObject(Of DOCUMENTS_Q_A)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Details")>  _
    Public Class QUERY_DOCUMENTS_DCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_DCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_DCONT)
            _Parent = nothing
            _Name = "DOCUMENTS_DCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_DCONT)
            _Parent = Parent
            _name = "DOCUMENTS_DCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_DCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_DCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_DCONT As DOCUMENTS_DCONT In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_DCONT)(stream.ReadToEnd).Value
              With _DOCUMENTS_DCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_DCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_DCONT = JsonConvert.DeserializeObject(Of DOCUMENTS_DCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_DCONT)
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .PAYCUSTNAME = obj.PAYCUSTNAME
                  .PAYCUSTDES = obj.PAYCUSTDES
                  .TAXCODE = obj.TAXCODE
                  .DOCNO = obj.DOCNO
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_DCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_DCONT as DOCUMENTS_DCONT in value
              If _DOCUMENTS_DCONT.Equals(trycast(obj,DOCUMENTS_DCONT)) Then
                  value.remove(_DOCUMENTS_DCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_DCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _IsSetPAYCUSTNAME As Boolean = Boolean.FalseString
        
        Private _PAYCUSTNAME As String
        
        Private _PAYCUSTDES As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_DCONT"
                else
                    return "DOCUMENTS_DCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(10),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(11),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(12),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(22),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(24),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City/State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(25),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City/State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(26),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(30),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(40),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(50),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(60),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Customer No."),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(100),  _
         twodBarcode("PAYCUSTNAME")>  _
        Public Property PAYCUSTNAME() As String
            Get
                return _PAYCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Customer No.", value, "^.{0,16}$") then Exit Property
                _IsSetPAYCUSTNAME = True
                If loading Then
                  _PAYCUSTNAME = Value
                Else
                    if not _PAYCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Cust. Name"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCUSTDES")>  _
        Public Property PAYCUSTDES() As String
            Get
                return _PAYCUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYCUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(120),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetPAYCUSTNAME then
              if f then
                  jw.WriteRaw(", ""PAYCUSTNAME"": ")
              else
                  jw.WriteRaw("""PAYCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCUSTNAME)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_DCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetPAYCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCUSTNAME")
              .WriteAttributeString("value", me.PAYCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_DCONT = JsonConvert.DeserializeObject(Of DOCUMENTS_DCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _PAYCUSTNAME = .PAYCUSTNAME
                  _PAYCUSTDES = .PAYCUSTDES
                  _TAXCODE = .TAXCODE
                  _DOCNO = .DOCNO
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Purchase Orders for the Call")>  _
    Public Class QUERY_DOCQPORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCQPORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCQPORDERS)
            _Parent = nothing
            _Name = "DOCQPORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCQPORDERS)
            _Parent = Parent
            _name = "DOCQPORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCQPORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCQPORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCQPORDERS As DOCQPORDERS In JsonConvert.DeserializeObject(Of QUERY_DOCQPORDERS)(stream.ReadToEnd).Value
              With _DOCQPORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCQPORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQPORDERS = JsonConvert.DeserializeObject(Of DOCQPORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCQPORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .SUPNAME = obj.SUPNAME
                  .CDES = obj.CDES
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .DETAILS = obj.DETAILS
                  .ORD = obj.ORD
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCQPORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCQPORDERS as DOCQPORDERS in value
              If _DOCQPORDERS.Equals(trycast(obj,DOCQPORDERS)) Then
                  value.remove(_DOCQPORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCQPORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _SUPNAME As String
        
        Private _CDES As String
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _DETAILS As String
        
        Private _ORD As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCQPORDERS"
                else
                    return "DOCQPORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Name"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if not(value is nothing) then
                  _CDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Final Price"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Final Price"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if not(value is nothing) then
                  _ORD = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCQPORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQPORDERS = JsonConvert.DeserializeObject(Of DOCQPORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _SUPNAME = .SUPNAME
                  _CDES = .CDES
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _DETAILS = .DETAILS
                  _ORD = .ORD
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("PRs for Service Call")>  _
    Public Class QUERY_DOCQPURDEMANDS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCQPURDEMANDS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCQPURDEMANDS)
            _Parent = nothing
            _Name = "DOCQPURDEMANDS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCQPURDEMANDS)
            _Parent = Parent
            _name = "DOCQPURDEMANDS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCQPURDEMANDS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCQPURDEMANDS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCQPURDEMANDS As DOCQPURDEMANDS In JsonConvert.DeserializeObject(Of QUERY_DOCQPURDEMANDS)(stream.ReadToEnd).Value
              With _DOCQPURDEMANDS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCQPURDEMANDS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQPURDEMANDS = JsonConvert.DeserializeObject(Of DOCQPURDEMANDS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCQPURDEMANDS)
                  .CURDATE = obj.CURDATE
                  .PRDNO = obj.PRDNO
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .AUTO = obj.AUTO
                  .CLOSEDBOOL = obj.CLOSEDBOOL
                  .ESTIMATETOTALPRICE = obj.ESTIMATETOTALPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CURCODE = obj.CURCODE
                  .DETAILS = obj.DETAILS
                  .PURDEMAND = obj.PURDEMAND
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCQPURDEMANDS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCQPURDEMANDS as DOCQPURDEMANDS in value
              If _DOCQPURDEMANDS.Equals(trycast(obj,DOCQPURDEMANDS)) Then
                  value.remove(_DOCQPURDEMANDS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCQPURDEMANDS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _PRDNO As String
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _AUTO As String
        
        Private _CLOSEDBOOL As String
        
        Private _ESTIMATETOTALPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CURCODE As String
        
        Private _DETAILS As String
        
        Private _PURDEMAND As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCQPURDEMANDS"
                else
                    return "DOCQPURDEMANDS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PRDNO={0}", _
                  string.format("'{0}'",PRDNO) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Purch Demand Doc No."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PRDNO")>  _
        Public Property PRDNO() As String
            Get
                return _PRDNO
            End Get
            Set
                if not(value is nothing) then
                  _PRDNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Name"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Automatic"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("AUTO")>  _
        Public Property [AUTO]() As String
            Get
                return _AUTO
            End Get
            Set
                if not(value is nothing) then
                  _AUTO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Closed?"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("CLOSEDBOOL")>  _
        Public Property CLOSEDBOOL() As String
            Get
                return _CLOSEDBOOL
            End Get
            Set
                if not(value is nothing) then
                  _CLOSEDBOOL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Estimated Total Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("ESTIMATETOTALPRICE")>  _
        Public Property ESTIMATETOTALPRICE() As nullable(of decimal)
            Get
                return _ESTIMATETOTALPRICE
            End Get
            Set
                if not(value is nothing) then
                  _ESTIMATETOTALPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Final Price"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("CURCODE")>  _
        Public Property CURCODE() As String
            Get
                return _CURCODE
            End Get
            Set
                if not(value is nothing) then
                  _CURCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("PR (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Final Price"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PURDEMAND")>  _
        Public Property PURDEMAND() As nullable (of int64)
            Get
                return _PURDEMAND
            End Get
            Set
                if not(value is nothing) then
                  _PURDEMAND = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCQPURDEMANDS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PRDNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQPURDEMANDS = JsonConvert.DeserializeObject(Of DOCQPURDEMANDS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _PRDNO = .PRDNO
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _AUTO = .AUTO
                  _CLOSEDBOOL = .CLOSEDBOOL
                  _ESTIMATETOTALPRICE = .ESTIMATETOTALPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CURCODE = .CURCODE
                  _DETAILS = .DETAILS
                  _PURDEMAND = .PURDEMAND
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Reports by Field Technician")>  _
    Public Class QUERY_FSMTECHDETAILS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of FSMTECHDETAILS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of FSMTECHDETAILS)
            _Parent = nothing
            _Name = "FSMTECHDETAILS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of FSMTECHDETAILS)
            _Parent = Parent
            _name = "FSMTECHDETAILS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of FSMTECHDETAILS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(FSMTECHDETAILS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _FSMTECHDETAILS As FSMTECHDETAILS In JsonConvert.DeserializeObject(Of QUERY_FSMTECHDETAILS)(stream.ReadToEnd).Value
              With _FSMTECHDETAILS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_FSMTECHDETAILS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FSMTECHDETAILS = JsonConvert.DeserializeObject(Of FSMTECHDETAILS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, FSMTECHDETAILS)
                  .MALFCODE = obj.MALFCODE
                  .MALFDES = obj.MALFDES
                  .CODE = obj.CODE
                  .DES = obj.DES
                  .DETAILS = obj.DETAILS
                  .MALF = obj.MALF
                  .SOLUTION = obj.SOLUTION
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new FSMTECHDETAILS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _FSMTECHDETAILS as FSMTECHDETAILS in value
              If _FSMTECHDETAILS.Equals(trycast(obj,FSMTECHDETAILS)) Then
                  value.remove(_FSMTECHDETAILS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class FSMTECHDETAILS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetMALFCODE As Boolean = Boolean.FalseString
        
        Private _MALFCODE As String
        
        Private _MALFDES As String
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _DES As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetMALF As Boolean = Boolean.FalseString
        
        Private _MALF As Long
        
        Private _IsSetSOLUTION As Boolean = Boolean.FalseString
        
        Private _SOLUTION As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "FSMTECHDETAILS"
                else
                    return "FSMTECHDETAILS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "MALF={0},SOLUTION={1}", _
                  string.format("{0}",MALF), _
                  string.format("{0}",SOLUTION) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Malfunction Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("MALFCODE")>  _
        Public Property MALFCODE() As String
            Get
                return _MALFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Malfunction Code", value, "^.{0,3}$") then Exit Property
                _IsSetMALFCODE = True
                If loading Then
                  _MALFCODE = Value
                Else
                    if not _MALFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MALFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MALFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Malf. Description"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("MALFDES")>  _
        Public Property MALFDES() As String
            Get
                return _MALFDES
            End Get
            Set
                if not(value is nothing) then
                  _MALFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Resolution Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resolution Code", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resolution"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DES")>  _
        Public Property DES() As String
            Get
                return _DES
            End Get
            Set
                if not(value is nothing) then
                  _DES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(50),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Malfunction Code(ID)"),  _
         nType("Edm.Int64"),  _
         tab("Malfunction Code"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("MALF")>  _
        Public Property MALF() As nullable (of int64)
            Get
                return _MALF
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Malfunction Code(ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetMALF = True
                If loading Then
                  _MALF = Value
                Else
                    if not _MALF = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MALF", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MALF = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resolution Code (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Malfunction Code"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("SOLUTION")>  _
        Public Property SOLUTION() As nullable (of int64)
            Get
                return _SOLUTION
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resolution Code (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSOLUTION = True
                If loading Then
                  _SOLUTION = Value
                Else
                    if not _SOLUTION = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SOLUTION", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SOLUTION = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetMALFCODE then
              if f then
                  jw.WriteRaw(", ""MALFCODE"": ")
              else
                  jw.WriteRaw("""MALFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.MALFCODE)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetMALF then
              if f then
                  jw.WriteRaw(", ""MALF"": ")
              else
                  jw.WriteRaw("""MALF"": ")
                  f = true
              end if
              jw.WriteValue(me.MALF)
            end if
            if _IsSetSOLUTION then
              if f then
                  jw.WriteRaw(", ""SOLUTION"": ")
              else
                  jw.WriteRaw("""SOLUTION"": ")
                  f = true
              end if
              jw.WriteValue(me.SOLUTION)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "FSMTECHDETAILS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "MALF")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SOLUTION")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetMALFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MALFCODE")
              .WriteAttributeString("value", me.MALFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetMALF then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MALF")
              .WriteAttributeString("value", me.MALF)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSOLUTION then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SOLUTION")
              .WriteAttributeString("value", me.SOLUTION)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as FSMTECHDETAILS = JsonConvert.DeserializeObject(Of FSMTECHDETAILS)(e.StreamReader.ReadToEnd)
                With obj
                  _MALFCODE = .MALFCODE
                  _MALFDES = .MALFDES
                  _CODE = .CODE
                  _DES = .DES
                  _DETAILS = .DETAILS
                  _MALF = .MALF
                  _SOLUTION = .SOLUTION
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Load From Mobile Device")>  _
    Public Class QUERY_ADCFSMITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ADCFSMITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ADCFSMITEMS)
            _Parent = nothing
            _Name = "ADCFSMITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Details of Malfunction")
            .add(1, "Description of Repair")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ADCFSMITEMS)
            _Parent = Parent
            _name = "ADCFSMITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Details of Malfunction")
            .add(1, "Description of Repair")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ADCFSMITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ADCFSMITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ADCFSMITEMS As ADCFSMITEMS In JsonConvert.DeserializeObject(Of QUERY_ADCFSMITEMS)(stream.ReadToEnd).Value
              With _ADCFSMITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ADCFSMITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCFSMITEMS = JsonConvert.DeserializeObject(Of ADCFSMITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ADCFSMITEMS)
                  .KLINE = obj.KLINE
                  .RECORDTYPE = obj.RECORDTYPE
                  .USERLOGIN = obj.USERLOGIN
                  .ASTARTDATE = obj.ASTARTDATE
                  .AENDDATE = obj.AENDDATE
                  .PDATE = obj.PDATE
                  .EDATE = obj.EDATE
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .SERVTCODE = obj.SERVTCODE
                  .SERVTDES = obj.SERVTDES
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .PARTDES = obj.PARTDES
                  .SERIALNAME = obj.SERIALNAME
                  .SERNUM = obj.SERNUM
                  .MAINTDES = obj.MAINTDES
                  .MALFCODE = obj.MALFCODE
                  .MALFDES = obj.MALFDES
                  .CODE = obj.CODE
                  .BOOKNUM = obj.BOOKNUM
                  .DOCREF = obj.DOCREF
                  .SCODE = obj.SCODE
                  .PROJDOCNO = obj.PROJDOCNO
                  .STATDES = obj.STATDES
                  .DETAILS = obj.DETAILS
                  .NAME = obj.NAME
                  .FLAG = obj.FLAG
                  .NOCHARGENAME = obj.NOCHARGENAME
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .CURDATE = obj.CURDATE
                  .STIME = obj.STIME
                  .ETIME = obj.ETIME
                  .TQUANT = obj.TQUANT
                  .CQUANT = obj.CQUANT
                  .INPROADTIME = obj.INPROADTIME
                  .ROADFLAG = obj.ROADFLAG
                  .ONROADFLAG = obj.ONROADFLAG
                  .PRICE = obj.PRICE
                  .CCODE = obj.CCODE
                  .PERCENT = obj.PERCENT
                  .UPDPRICE = obj.UPDPRICE
                  .UPDPERCENT = obj.UPDPERCENT
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENAME = obj.EXTFILENAME
                  .TECHLOGIN = obj.TECHLOGIN
                  .GPSX = obj.GPSX
                  .GPSY = obj.GPSY
                  .PDOCNO = obj.PDOCNO
                  .REPEATCALL = obj.REPEATCALL
                  .METERREADING = obj.METERREADING
                  .KEY1 = obj.KEY1
                  .KEY2 = obj.KEY2
                  .DELFLAG = obj.DELFLAG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ADCFSMITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ADCFSMITEMS as ADCFSMITEMS in value
              If _ADCFSMITEMS.Equals(trycast(obj,ADCFSMITEMS)) Then
                  value.remove(_ADCFSMITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ADCFSMITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _KLINE As Long
        
        Private _IsSetRECORDTYPE As Boolean = Boolean.FalseString
        
        Private _RECORDTYPE As String
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _IsSetASTARTDATE As Boolean = Boolean.FalseString
        
        Private _ASTARTDATE As System.DateTimeOffset
        
        Private _IsSetAENDDATE As Boolean = Boolean.FalseString
        
        Private _AENDDATE As System.DateTimeOffset
        
        Private _IsSetPDATE As Boolean = Boolean.FalseString
        
        Private _PDATE As System.DateTimeOffset
        
        Private _IsSetEDATE As Boolean = Boolean.FalseString
        
        Private _EDATE As System.DateTimeOffset
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _IsSetSERVTCODE As Boolean = Boolean.FalseString
        
        Private _SERVTCODE As String
        
        Private _SERVTDES As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _PARTDES As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetSERNUM As Boolean = Boolean.FalseString
        
        Private _SERNUM As String
        
        Private _IsSetMAINTDES As Boolean = Boolean.FalseString
        
        Private _MAINTDES As String
        
        Private _IsSetMALFCODE As Boolean = Boolean.FalseString
        
        Private _MALFCODE As String
        
        Private _MALFDES As String
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _IsSetDOCREF As Boolean = Boolean.FalseString
        
        Private _DOCREF As String
        
        Private _IsSetSCODE As Boolean = Boolean.FalseString
        
        Private _SCODE As String
        
        Private _IsSetPROJDOCNO As Boolean = Boolean.FalseString
        
        Private _PROJDOCNO As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetNOCHARGENAME As Boolean = Boolean.FalseString
        
        Private _NOCHARGENAME As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _IsSetCQUANT As Boolean = Boolean.FalseString
        
        Private _CQUANT As Decimal
        
        Private _IsSetINPROADTIME As Boolean = Boolean.FalseString
        
        Private _INPROADTIME As String
        
        Private _IsSetROADFLAG As Boolean = Boolean.FalseString
        
        Private _ROADFLAG As String
        
        Private _IsSetONROADFLAG As Boolean = Boolean.FalseString
        
        Private _ONROADFLAG As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetCCODE As Boolean = Boolean.FalseString
        
        Private _CCODE As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetUPDPRICE As Boolean = Boolean.FalseString
        
        Private _UPDPRICE As String
        
        Private _IsSetUPDPERCENT As Boolean = Boolean.FalseString
        
        Private _UPDPERCENT As String
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetTECHLOGIN As Boolean = Boolean.FalseString
        
        Private _TECHLOGIN As String
        
        Private _IsSetGPSX As Boolean = Boolean.FalseString
        
        Private _GPSX As String
        
        Private _IsSetGPSY As Boolean = Boolean.FalseString
        
        Private _GPSY As String
        
        Private _IsSetPDOCNO As Boolean = Boolean.FalseString
        
        Private _PDOCNO As String
        
        Private _IsSetREPEATCALL As Boolean = Boolean.FalseString
        
        Private _REPEATCALL As String
        
        Private _IsSetMETERREADING As Boolean = Boolean.FalseString
        
        Private _METERREADING As Long
        
        Private _IsSetKEY1 As Boolean = Boolean.FalseString
        
        Private _KEY1 As String
        
        Private _IsSetKEY2 As Boolean = Boolean.FalseString
        
        Private _KEY2 As String
        
        Private _IsSetDELFLAG As Boolean = Boolean.FalseString
        
        Private _DELFLAG As String
        
        Private _ADCMALFDETTEXT_SUBFORM As QUERY_ADCMALFDETTEXT
        
        Private _ADCSOLDETTEXT_SUBFORM As QUERY_ADCSOLDETTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Details of Malfunction"))
            ChildQuery.add(1, new oNavigation("Description of Repair"))
            _ADCMALFDETTEXT_SUBFORM = new QUERY_ADCMALFDETTEXT(me)
            _ADCSOLDETTEXT_SUBFORM = new QUERY_ADCSOLDETTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ADCMALFDETTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _ADCMALFDETTEXT_SUBFORM))
                   .add(1, new oNavigation("Description of Repair", _ADCSOLDETTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_ADCSOLDETTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _ADCMALFDETTEXT_SUBFORM))
                   .add(1, new oNavigation("Description of Repair", _ADCSOLDETTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Details of Malfunction"))
            ChildQuery.add(1, new oNavigation("Description of Repair"))
            _ADCMALFDETTEXT_SUBFORM = new QUERY_ADCMALFDETTEXT(me)
            _ADCSOLDETTEXT_SUBFORM = new QUERY_ADCSOLDETTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_ADCMALFDETTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _ADCMALFDETTEXT_SUBFORM))
                   .add(1, new oNavigation("Description of Repair", _ADCSOLDETTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_ADCSOLDETTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Details of Malfunction", _ADCMALFDETTEXT_SUBFORM))
                   .add(1, new oNavigation("Description of Repair", _ADCSOLDETTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ADCFSMITEMS"
                else
                    return "ADCFSMITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Ln"),  _
         nType("Edm.Int64"),  _
         tab("Ln"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("RECORDTYPE"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(0),  _
         twodBarcode("RECORDTYPE")>  _
        Public Property RECORDTYPE() As String
            Get
                return _RECORDTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("RECORDTYPE", value, "^.{0,1}$") then Exit Property
                _IsSetRECORDTYPE = True
                If loading Then
                  _RECORDTYPE = Value
                Else
                    if not _RECORDTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RECORDTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RECORDTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User Name"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(20),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User Name", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(30),  _
         twodBarcode("ASTARTDATE")>  _
        Public Property ASTARTDATE() As nullable (of DateTimeOffset)
            Get
                return _ASTARTDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Actual Start Date", value, "^.*$") then Exit Property
                _IsSetASTARTDATE = True
                If loading Then
                  _ASTARTDATE = Value
                Else
                    if not _ASTARTDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ASTARTDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ASTARTDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Completed"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(40),  _
         twodBarcode("AENDDATE")>  _
        Public Property AENDDATE() As nullable (of DateTimeOffset)
            Get
                return _AENDDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Completed", value, "^.*$") then Exit Property
                _IsSetAENDDATE = True
                If loading Then
                  _AENDDATE = Value
                Else
                    if not _AENDDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AENDDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AENDDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(41),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetPDATE = True
                If loading Then
                  _PDATE = Value
                Else
                    if not _PDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(43),  _
         twodBarcode("EDATE")>  _
        Public Property EDATE() As nullable (of DateTimeOffset)
            Get
                return _EDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetEDATE = True
                If loading Then
                  _EDATE = Value
                Else
                    if not _EDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(45),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms (Code)"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(46),  _
         twodBarcode("SERVTCODE")>  _
        Public Property SERVTCODE() As String
            Get
                return _SERVTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Service Terms (Code)", value, "^.{0,3}$") then Exit Property
                _IsSetSERVTCODE = True
                If loading Then
                  _SERVTCODE = Value
                Else
                    if not _SERVTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERVTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERVTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("SERVTDES")>  _
        Public Property SERVTDES() As String
            Get
                return _SERVTDES
            End Get
            Set
                if not(value is nothing) then
                  _SERVTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(50),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified Part Desc."),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(55),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Modified Part Desc.", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(65),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order/Lot", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(70),  _
         twodBarcode("SERNUM")>  _
        Public Property SERNUM() As String
            Get
                return _SERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number", value, "^.{0,20}$") then Exit Property
                _IsSetSERNUM = True
                If loading Then
                  _SERNUM = Value
                Else
                    if not _SERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Servicing Package"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(75),  _
         twodBarcode("MAINTDES")>  _
        Public Property MAINTDES() As String
            Get
                return _MAINTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Servicing Package", value, "^.{0,10}$") then Exit Property
                _IsSetMAINTDES = True
                If loading Then
                  _MAINTDES = Value
                Else
                    if not _MAINTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAINTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAINTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Malfunction Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(80),  _
         twodBarcode("MALFCODE")>  _
        Public Property MALFCODE() As String
            Get
                return _MALFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Malfunction Code", value, "^.{0,3}$") then Exit Property
                _IsSetMALFCODE = True
                If loading Then
                  _MALFCODE = Value
                Else
                    if not _MALFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MALFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MALFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Malf. Description"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("MALFDES")>  _
        Public Property MALFDES() As String
            Get
                return _MALFDES
            End Get
            Set
                if not(value is nothing) then
                  _MALFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Resolution Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(100),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resolution Code", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("External Call Number"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(110),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("External Call Number", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Reference"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(115),  _
         twodBarcode("DOCREF")>  _
        Public Property DOCREF() As String
            Get
                return _DOCREF
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust's Reference", value, "^.{0,16}$") then Exit Property
                _IsSetDOCREF = True
                If loading Then
                  _DOCREF = Value
                Else
                    if not _DOCREF = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCREF", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCREF = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Problem Code"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(120),  _
         twodBarcode("SCODE")>  _
        Public Property SCODE() As String
            Get
                return _SCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Problem Code", value, "^.{0,3}$") then Exit Property
                _IsSetSCODE = True
                If loading Then
                  _SCODE = Value
                Else
                    if not _SCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project No."),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(125),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project No.", value, "^.{0,16}$") then Exit Property
                _IsSetPROJDOCNO = True
                If loading Then
                  _PROJDOCNO = Value
                Else
                    if not _PROJDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Status"),  _
         nType("Edm.String"),  _
         tab("Malfunction Code"),  _
         Pos(130),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(140),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Authorizer (Contact)"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(145),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Authorizer (Contact)", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billable"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(146),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Exempt Type"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(147),  _
         twodBarcode("NOCHARGENAME")>  _
        Public Property NOCHARGENAME() As String
            Get
                return _NOCHARGENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Exempt Type", value, "^.{0,20}$") then Exit Property
                _IsSetNOCHARGENAME = True
                If loading Then
                  _NOCHARGENAME = Value
                Else
                    if not _NOCHARGENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOCHARGENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOCHARGENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(150),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(160),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Details"),  _
         Pos(170),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(172),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(174),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("End Time"),  _
         Pos(180),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Actual Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("End Time"),  _
         Pos(190),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCQUANT = True
                If loading Then
                  _CQUANT = Value
                Else
                    if not _CQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Travel Tm to Charge"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(192),  _
         twodBarcode("INPROADTIME")>  _
        Public Property INPROADTIME() As String
            Get
                return _INPROADTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Travel Tm to Charge", value, "^.{0,5}$") then Exit Property
                _IsSetINPROADTIME = True
                If loading Then
                  _INPROADTIME = Value
                Else
                    if not _INPROADTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INPROADTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INPROADTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Add Travel Time?"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(194),  _
         twodBarcode("ROADFLAG")>  _
        Public Property ROADFLAG() As String
            Get
                return _ROADFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Add Travel Time?", value, "^.{0,1}$") then Exit Property
                _IsSetROADFLAG = True
                If loading Then
                  _ROADFLAG = Value
                Else
                    if not _ROADFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ROADFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ROADFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Travel Time?"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(195),  _
         twodBarcode("ONROADFLAG")>  _
        Public Property ONROADFLAG() As String
            Get
                return _ONROADFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Travel Time?", value, "^.{0,1}$") then Exit Property
                _IsSetONROADFLAG = True
                If loading Then
                  _ONROADFLAG = Value
                Else
                    if not _ONROADFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ONROADFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ONROADFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("End Time"),  _
         Pos(200),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("End Time"),  _
         Pos(210),  _
         twodBarcode("CCODE")>  _
        Public Property CCODE() As String
            Get
                return _CCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCCODE = True
                If loading Then
                  _CCODE = Value
                Else
                    if not _CCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Discount (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Discount (%)"),  _
         Pos(220),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount (%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zero Price?"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(225),  _
         twodBarcode("UPDPRICE")>  _
        Public Property UPDPRICE() As String
            Get
                return _UPDPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zero Price?", value, "^.{0,1}$") then Exit Property
                _IsSetUPDPRICE = True
                If loading Then
                  _UPDPRICE = Value
                Else
                    if not _UPDPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UPDPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UPDPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zero Discount?"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(227),  _
         twodBarcode("UPDPERCENT")>  _
        Public Property UPDPERCENT() As String
            Get
                return _UPDPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zero Discount?", value, "^.{0,1}$") then Exit Property
                _IsSetUPDPERCENT = True
                If loading Then
                  _UPDPERCENT = Value
                Else
                    if not _UPDPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UPDPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UPDPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(230),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(240),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Technician"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(250),  _
         twodBarcode("TECHLOGIN")>  _
        Public Property TECHLOGIN() As String
            Get
                return _TECHLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Technician", value, "^.{0,20}$") then Exit Property
                _IsSetTECHLOGIN = True
                If loading Then
                  _TECHLOGIN = Value
                Else
                    if not _TECHLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TECHLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TECHLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Latitude"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(270),  _
         twodBarcode("GPSX")>  _
        Public Property GPSX() As String
            Get
                return _GPSX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSX = True
                If loading Then
                  _GPSX = Value
                Else
                    if not _GPSX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Longitude"),  _
         nType("Edm.String"),  _
         tab("Discount (%)"),  _
         Pos(280),  _
         twodBarcode("GPSY")>  _
        Public Property GPSY() As String
            Get
                return _GPSY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Longitude", value, "^.{0,20}$") then Exit Property
                _IsSetGPSY = True
                If loading Then
                  _GPSY = Value
                Else
                    if not _GPSY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GPSY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GPSY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Follow-up of Call"),  _
         nType("Edm.String"),  _
         tab("Follow-up of Call"),  _
         Pos(285),  _
         twodBarcode("PDOCNO")>  _
        Public Property PDOCNO() As String
            Get
                return _PDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Follow-up of Call", value, "^.{0,16}$") then Exit Property
                _IsSetPDOCNO = True
                If loading Then
                  _PDOCNO = Value
                Else
                    if not _PDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Repeat Call"),  _
         nType("Edm.String"),  _
         tab("Follow-up of Call"),  _
         Pos(286),  _
         twodBarcode("REPEATCALL")>  _
        Public Property REPEATCALL() As String
            Get
                return _REPEATCALL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Repeat Call", value, "^.{0,1}$") then Exit Property
                _IsSetREPEATCALL = True
                If loading Then
                  _REPEATCALL = Value
                Else
                    if not _REPEATCALL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REPEATCALL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REPEATCALL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Meter Reading"),  _
         nType("Edm.Int64"),  _
         tab("Follow-up of Call"),  _
         Pos(287),  _
         twodBarcode("METERREADING")>  _
        Public Property METERREADING() As nullable (of int64)
            Get
                return _METERREADING
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Meter Reading", value, "^[0-9\-]+$") then Exit Property
                _IsSetMETERREADING = True
                If loading Then
                  _METERREADING = Value
                Else
                    if not _METERREADING = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("METERREADING", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _METERREADING = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("KEY1"),  _
         nType("Edm.String"),  _
         tab("Follow-up of Call"),  _
         Pos(0),  _
         twodBarcode("KEY1")>  _
        Public Property KEY1() As String
            Get
                return _KEY1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("KEY1", value, "^.{0,20}$") then Exit Property
                _IsSetKEY1 = True
                If loading Then
                  _KEY1 = Value
                Else
                    if not _KEY1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KEY1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KEY1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("KEY2"),  _
         nType("Edm.String"),  _
         tab("Follow-up of Call"),  _
         Pos(0),  _
         twodBarcode("KEY2")>  _
        Public Property KEY2() As String
            Get
                return _KEY2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("KEY2", value, "^.{0,20}$") then Exit Property
                _IsSetKEY2 = True
                If loading Then
                  _KEY2 = Value
                Else
                    if not _KEY2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KEY2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KEY2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Delete Record?"),  _
         nType("Edm.String"),  _
         tab("Follow-up of Call"),  _
         Pos(300),  _
         twodBarcode("DELFLAG")>  _
        Public Property DELFLAG() As String
            Get
                return _DELFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delete Record?", value, "^.{0,1}$") then Exit Property
                _IsSetDELFLAG = True
                If loading Then
                  _DELFLAG = Value
                Else
                    if not _DELFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DELFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DELFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ADCMALFDETTEXT_SUBFORM() As QUERY_ADCMALFDETTEXT
            Get
                return _ADCMALFDETTEXT_SUBFORM
            End Get
            Set
                _ADCMALFDETTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ADCSOLDETTEXT_SUBFORM() As QUERY_ADCSOLDETTEXT
            Get
                return _ADCSOLDETTEXT_SUBFORM
            End Get
            Set
                _ADCSOLDETTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetRECORDTYPE then
              if f then
                  jw.WriteRaw(", ""RECORDTYPE"": ")
              else
                  jw.WriteRaw("""RECORDTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.RECORDTYPE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetASTARTDATE then
              if f then
                  jw.WriteRaw(", ""ASTARTDATE"": ")
              else
                  jw.WriteRaw("""ASTARTDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.ASTARTDATE)
            end if
            if _IsSetAENDDATE then
              if f then
                  jw.WriteRaw(", ""AENDDATE"": ")
              else
                  jw.WriteRaw("""AENDDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.AENDDATE)
            end if
            if _IsSetPDATE then
              if f then
                  jw.WriteRaw(", ""PDATE"": ")
              else
                  jw.WriteRaw("""PDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PDATE)
            end if
            if _IsSetEDATE then
              if f then
                  jw.WriteRaw(", ""EDATE"": ")
              else
                  jw.WriteRaw("""EDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.EDATE)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetSERVTCODE then
              if f then
                  jw.WriteRaw(", ""SERVTCODE"": ")
              else
                  jw.WriteRaw("""SERVTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SERVTCODE)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetSERNUM then
              if f then
                  jw.WriteRaw(", ""SERNUM"": ")
              else
                  jw.WriteRaw("""SERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.SERNUM)
            end if
            if _IsSetMAINTDES then
              if f then
                  jw.WriteRaw(", ""MAINTDES"": ")
              else
                  jw.WriteRaw("""MAINTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.MAINTDES)
            end if
            if _IsSetMALFCODE then
              if f then
                  jw.WriteRaw(", ""MALFCODE"": ")
              else
                  jw.WriteRaw("""MALFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.MALFCODE)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetDOCREF then
              if f then
                  jw.WriteRaw(", ""DOCREF"": ")
              else
                  jw.WriteRaw("""DOCREF"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCREF)
            end if
            if _IsSetSCODE then
              if f then
                  jw.WriteRaw(", ""SCODE"": ")
              else
                  jw.WriteRaw("""SCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SCODE)
            end if
            if _IsSetPROJDOCNO then
              if f then
                  jw.WriteRaw(", ""PROJDOCNO"": ")
              else
                  jw.WriteRaw("""PROJDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJDOCNO)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetNOCHARGENAME then
              if f then
                  jw.WriteRaw(", ""NOCHARGENAME"": ")
              else
                  jw.WriteRaw("""NOCHARGENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NOCHARGENAME)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetCQUANT then
              if f then
                  jw.WriteRaw(", ""CQUANT"": ")
              else
                  jw.WriteRaw("""CQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.CQUANT)
            end if
            if _IsSetINPROADTIME then
              if f then
                  jw.WriteRaw(", ""INPROADTIME"": ")
              else
                  jw.WriteRaw("""INPROADTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.INPROADTIME)
            end if
            if _IsSetROADFLAG then
              if f then
                  jw.WriteRaw(", ""ROADFLAG"": ")
              else
                  jw.WriteRaw("""ROADFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ROADFLAG)
            end if
            if _IsSetONROADFLAG then
              if f then
                  jw.WriteRaw(", ""ONROADFLAG"": ")
              else
                  jw.WriteRaw("""ONROADFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ONROADFLAG)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetCCODE then
              if f then
                  jw.WriteRaw(", ""CCODE"": ")
              else
                  jw.WriteRaw("""CCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CCODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetUPDPRICE then
              if f then
                  jw.WriteRaw(", ""UPDPRICE"": ")
              else
                  jw.WriteRaw("""UPDPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.UPDPRICE)
            end if
            if _IsSetUPDPERCENT then
              if f then
                  jw.WriteRaw(", ""UPDPERCENT"": ")
              else
                  jw.WriteRaw("""UPDPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.UPDPERCENT)
            end if
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetTECHLOGIN then
              if f then
                  jw.WriteRaw(", ""TECHLOGIN"": ")
              else
                  jw.WriteRaw("""TECHLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.TECHLOGIN)
            end if
            if _IsSetGPSX then
              if f then
                  jw.WriteRaw(", ""GPSX"": ")
              else
                  jw.WriteRaw("""GPSX"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSX)
            end if
            if _IsSetGPSY then
              if f then
                  jw.WriteRaw(", ""GPSY"": ")
              else
                  jw.WriteRaw("""GPSY"": ")
                  f = true
              end if
              jw.WriteValue(me.GPSY)
            end if
            if _IsSetPDOCNO then
              if f then
                  jw.WriteRaw(", ""PDOCNO"": ")
              else
                  jw.WriteRaw("""PDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PDOCNO)
            end if
            if _IsSetREPEATCALL then
              if f then
                  jw.WriteRaw(", ""REPEATCALL"": ")
              else
                  jw.WriteRaw("""REPEATCALL"": ")
                  f = true
              end if
              jw.WriteValue(me.REPEATCALL)
            end if
            if _IsSetMETERREADING then
              if f then
                  jw.WriteRaw(", ""METERREADING"": ")
              else
                  jw.WriteRaw("""METERREADING"": ")
                  f = true
              end if
              jw.WriteValue(me.METERREADING)
            end if
            if _IsSetKEY1 then
              if f then
                  jw.WriteRaw(", ""KEY1"": ")
              else
                  jw.WriteRaw("""KEY1"": ")
                  f = true
              end if
              jw.WriteValue(me.KEY1)
            end if
            if _IsSetKEY2 then
              if f then
                  jw.WriteRaw(", ""KEY2"": ")
              else
                  jw.WriteRaw("""KEY2"": ")
                  f = true
              end if
              jw.WriteValue(me.KEY2)
            end if
            if _IsSetDELFLAG then
              if f then
                  jw.WriteRaw(", ""DELFLAG"": ")
              else
                  jw.WriteRaw("""DELFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.DELFLAG)
            end if
            if _ADCMALFDETTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ADCMALFDETTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ADCMALFDETTEXT in _ADCMALFDETTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ADCMALFDETTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ADCSOLDETTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ADCSOLDETTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ADCSOLDETTEXT in _ADCSOLDETTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ADCSOLDETTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ADCFSMITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetRECORDTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RECORDTYPE")
              .WriteAttributeString("value", me.RECORDTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetASTARTDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ASTARTDATE")
              .WriteAttributeString("value", me.ASTARTDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetAENDDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AENDDATE")
              .WriteAttributeString("value", me.AENDDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDATE")
              .WriteAttributeString("value", me.PDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EDATE")
              .WriteAttributeString("value", me.EDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSERVTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERVTCODE")
              .WriteAttributeString("value", me.SERVTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERNUM")
              .WriteAttributeString("value", me.SERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetMAINTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAINTDES")
              .WriteAttributeString("value", me.MAINTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetMALFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MALFCODE")
              .WriteAttributeString("value", me.MALFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOCREF then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCREF")
              .WriteAttributeString("value", me.DOCREF)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SCODE")
              .WriteAttributeString("value", me.SCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPROJDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJDOCNO")
              .WriteAttributeString("value", me.PROJDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOCHARGENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOCHARGENAME")
              .WriteAttributeString("value", me.NOCHARGENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetCQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CQUANT")
              .WriteAttributeString("value", me.CQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetINPROADTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INPROADTIME")
              .WriteAttributeString("value", me.INPROADTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetROADFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ROADFLAG")
              .WriteAttributeString("value", me.ROADFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetONROADFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ONROADFLAG")
              .WriteAttributeString("value", me.ONROADFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CCODE")
              .WriteAttributeString("value", me.CCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetUPDPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UPDPRICE")
              .WriteAttributeString("value", me.UPDPRICE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetUPDPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UPDPERCENT")
              .WriteAttributeString("value", me.UPDPERCENT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetTECHLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TECHLOGIN")
              .WriteAttributeString("value", me.TECHLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGPSX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSX")
              .WriteAttributeString("value", me.GPSX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGPSY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GPSY")
              .WriteAttributeString("value", me.GPSY)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDOCNO")
              .WriteAttributeString("value", me.PDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREPEATCALL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REPEATCALL")
              .WriteAttributeString("value", me.REPEATCALL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetMETERREADING then
              .WriteStartElement("field")
              .WriteAttributeString("name", "METERREADING")
              .WriteAttributeString("value", me.METERREADING)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKEY1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KEY1")
              .WriteAttributeString("value", me.KEY1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetKEY2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KEY2")
              .WriteAttributeString("value", me.KEY2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDELFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DELFLAG")
              .WriteAttributeString("value", me.DELFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _ADCMALFDETTEXT_SUBFORM.value.count > 0 then
              for each itm as ADCMALFDETTEXT in _ADCMALFDETTEXT_SUBFORM.Value
                itm.toXML(xw,"ADCMALFDETTEXT_SUBFORM")
              next
            end if
            if _ADCSOLDETTEXT_SUBFORM.value.count > 0 then
              for each itm as ADCSOLDETTEXT in _ADCSOLDETTEXT_SUBFORM.Value
                itm.toXML(xw,"ADCSOLDETTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCFSMITEMS = JsonConvert.DeserializeObject(Of ADCFSMITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _KLINE = .KLINE
                  _RECORDTYPE = .RECORDTYPE
                  _USERLOGIN = .USERLOGIN
                  _ASTARTDATE = .ASTARTDATE
                  _AENDDATE = .AENDDATE
                  _PDATE = .PDATE
                  _EDATE = .EDATE
                  _OWNERLOGIN = .OWNERLOGIN
                  _SERVTCODE = .SERVTCODE
                  _SERVTDES = .SERVTDES
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _PARTDES = .PARTDES
                  _SERIALNAME = .SERIALNAME
                  _SERNUM = .SERNUM
                  _MAINTDES = .MAINTDES
                  _MALFCODE = .MALFCODE
                  _MALFDES = .MALFDES
                  _CODE = .CODE
                  _BOOKNUM = .BOOKNUM
                  _DOCREF = .DOCREF
                  _SCODE = .SCODE
                  _PROJDOCNO = .PROJDOCNO
                  _STATDES = .STATDES
                  _DETAILS = .DETAILS
                  _NAME = .NAME
                  _FLAG = .FLAG
                  _NOCHARGENAME = .NOCHARGENAME
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _CURDATE = .CURDATE
                  _STIME = .STIME
                  _ETIME = .ETIME
                  _TQUANT = .TQUANT
                  _CQUANT = .CQUANT
                  _INPROADTIME = .INPROADTIME
                  _ROADFLAG = .ROADFLAG
                  _ONROADFLAG = .ONROADFLAG
                  _PRICE = .PRICE
                  _CCODE = .CCODE
                  _PERCENT = .PERCENT
                  _UPDPRICE = .UPDPRICE
                  _UPDPERCENT = .UPDPERCENT
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENAME = .EXTFILENAME
                  _TECHLOGIN = .TECHLOGIN
                  _GPSX = .GPSX
                  _GPSY = .GPSY
                  _PDOCNO = .PDOCNO
                  _REPEATCALL = .REPEATCALL
                  _METERREADING = .METERREADING
                  _KEY1 = .KEY1
                  _KEY2 = .KEY2
                  _DELFLAG = .DELFLAG
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_ADCFSMITEMS
        
        ADCMALFDETTEXT = 0
        
        ADCSOLDETTEXT = 1
    End Enum
    
    <QueryTitle("Details of Malfunction")>  _
    Public Class QUERY_ADCMALFDETTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ADCMALFDETTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ADCMALFDETTEXT)
            _Parent = nothing
            _Name = "ADCMALFDETTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ADCMALFDETTEXT)
            _Parent = Parent
            _name = "ADCMALFDETTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ADCMALFDETTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ADCMALFDETTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ADCMALFDETTEXT As ADCMALFDETTEXT In JsonConvert.DeserializeObject(Of QUERY_ADCMALFDETTEXT)(stream.ReadToEnd).Value
              With _ADCMALFDETTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ADCMALFDETTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCMALFDETTEXT = JsonConvert.DeserializeObject(Of ADCMALFDETTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ADCMALFDETTEXT)
                  .ORD = obj.ORD
                  .TEXT = obj.TEXT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ADCMALFDETTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ADCMALFDETTEXT as ADCMALFDETTEXT in value
              If _ADCMALFDETTEXT.Equals(trycast(obj,ADCMALFDETTEXT)) Then
                  value.remove(_ADCMALFDETTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ADCMALFDETTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ADCMALFDETTEXT"
                else
                    return "ADCMALFDETTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0}", _
                  string.format("{0}",ORD) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ADCMALFDETTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCMALFDETTEXT = JsonConvert.DeserializeObject(Of ADCMALFDETTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD = .ORD
                  _TEXT = .TEXT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Description of Repair")>  _
    Public Class QUERY_ADCSOLDETTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ADCSOLDETTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ADCSOLDETTEXT)
            _Parent = nothing
            _Name = "ADCSOLDETTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ADCSOLDETTEXT)
            _Parent = Parent
            _name = "ADCSOLDETTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ADCSOLDETTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ADCSOLDETTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ADCSOLDETTEXT As ADCSOLDETTEXT In JsonConvert.DeserializeObject(Of QUERY_ADCSOLDETTEXT)(stream.ReadToEnd).Value
              With _ADCSOLDETTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ADCSOLDETTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCSOLDETTEXT = JsonConvert.DeserializeObject(Of ADCSOLDETTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ADCSOLDETTEXT)
                  .ORD = obj.ORD
                  .TEXT = obj.TEXT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ADCSOLDETTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ADCSOLDETTEXT as ADCSOLDETTEXT in value
              If _ADCSOLDETTEXT.Equals(trycast(obj,ADCSOLDETTEXT)) Then
                  value.remove(_ADCSOLDETTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ADCSOLDETTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ADCSOLDETTEXT"
                else
                    return "ADCSOLDETTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0}", _
                  string.format("{0}",ORD) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ADCSOLDETTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ADCSOLDETTEXT = JsonConvert.DeserializeObject(Of ADCSOLDETTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD = .ORD
                  _TEXT = .TEXT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Last Load From Mobile Device")>  _
    Public Class QUERY_LASTADCFSMITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTADCFSMITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTADCFSMITEMS)
            _Parent = nothing
            _Name = "LASTADCFSMITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTADCFSMITEMS)
            _Parent = Parent
            _name = "LASTADCFSMITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTADCFSMITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTADCFSMITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTADCFSMITEMS As LASTADCFSMITEMS In JsonConvert.DeserializeObject(Of QUERY_LASTADCFSMITEMS)(stream.ReadToEnd).Value
              With _LASTADCFSMITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTADCFSMITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTADCFSMITEMS = JsonConvert.DeserializeObject(Of LASTADCFSMITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTADCFSMITEMS)
                  .KLINE = obj.KLINE
                  .RECORDTYPE = obj.RECORDTYPE
                  .USERLOGIN = obj.USERLOGIN
                  .ASTARTDATE = obj.ASTARTDATE
                  .AENDDATE = obj.AENDDATE
                  .PDATE = obj.PDATE
                  .EDATE = obj.EDATE
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .SERVTCODE = obj.SERVTCODE
                  .SERVTDES = obj.SERVTDES
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .SERNUM = obj.SERNUM
                  .MAINTDES = obj.MAINTDES
                  .MALFCODE = obj.MALFCODE
                  .MALFDES = obj.MALFDES
                  .CODE = obj.CODE
                  .BOOKNUM = obj.BOOKNUM
                  .DOCREF = obj.DOCREF
                  .SCODE = obj.SCODE
                  .STATDES = obj.STATDES
                  .DETAILS = obj.DETAILS
                  .NAME = obj.NAME
                  .FLAG = obj.FLAG
                  .NOCHARGENAME = obj.NOCHARGENAME
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .CURDATE = obj.CURDATE
                  .STIME = obj.STIME
                  .ETIME = obj.ETIME
                  .TQUANT = obj.TQUANT
                  .CQUANT = obj.CQUANT
                  .INPROADTIME = obj.INPROADTIME
                  .ROADFLAG = obj.ROADFLAG
                  .ONROADFLAG = obj.ONROADFLAG
                  .PRICE = obj.PRICE
                  .CCODE = obj.CCODE
                  .PERCENT = obj.PERCENT
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENAME = obj.EXTFILENAME
                  .TECHLOGIN = obj.TECHLOGIN
                  .GPSX = obj.GPSX
                  .GPSY = obj.GPSY
                  .PDOCNO = obj.PDOCNO
                  .REPEATCALL = obj.REPEATCALL
                  .METERREADING = obj.METERREADING
                  .KEY1 = obj.KEY1
                  .KEY2 = obj.KEY2
                  .DELFLAG = obj.DELFLAG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTADCFSMITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTADCFSMITEMS as LASTADCFSMITEMS in value
              If _LASTADCFSMITEMS.Equals(trycast(obj,LASTADCFSMITEMS)) Then
                  value.remove(_LASTADCFSMITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTADCFSMITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _KLINE As Long
        
        Private _IsSetRECORDTYPE As Boolean = Boolean.FalseString
        
        Private _RECORDTYPE As String
        
        Private _USERLOGIN As String
        
        Private _ASTARTDATE As System.DateTimeOffset
        
        Private _AENDDATE As System.DateTimeOffset
        
        Private _PDATE As System.DateTimeOffset
        
        Private _EDATE As System.DateTimeOffset
        
        Private _OWNERLOGIN As String
        
        Private _SERVTCODE As String
        
        Private _SERVTDES As String
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _SERNUM As String
        
        Private _MAINTDES As String
        
        Private _MALFCODE As String
        
        Private _MALFDES As String
        
        Private _CODE As String
        
        Private _BOOKNUM As String
        
        Private _DOCREF As String
        
        Private _SCODE As String
        
        Private _STATDES As String
        
        Private _DETAILS As String
        
        Private _NAME As String
        
        Private _FLAG As String
        
        Private _NOCHARGENAME As String
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _STIME As String
        
        Private _ETIME As String
        
        Private _TQUANT As Decimal
        
        Private _CQUANT As Decimal
        
        Private _INPROADTIME As String
        
        Private _ROADFLAG As String
        
        Private _ONROADFLAG As String
        
        Private _PRICE As Decimal
        
        Private _CCODE As String
        
        Private _PERCENT As Decimal
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENAME As String
        
        Private _TECHLOGIN As String
        
        Private _GPSX As String
        
        Private _GPSY As String
        
        Private _PDOCNO As String
        
        Private _REPEATCALL As String
        
        Private _METERREADING As Long
        
        Private _IsSetKEY1 As Boolean = Boolean.FalseString
        
        Private _KEY1 As String
        
        Private _IsSetKEY2 As Boolean = Boolean.FalseString
        
        Private _KEY2 As String
        
        Private _DELFLAG As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTADCFSMITEMS"
                else
                    return "LASTADCFSMITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Ln"),  _
         nType("Edm.Int64"),  _
         tab("Ln"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("RECORDTYPE"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(0),  _
         twodBarcode("RECORDTYPE")>  _
        Public Property RECORDTYPE() As String
            Get
                return _RECORDTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("RECORDTYPE", value, "^.{0,1}$") then Exit Property
                _IsSetRECORDTYPE = True
                If loading Then
                  _RECORDTYPE = Value
                Else
                    if not _RECORDTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RECORDTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RECORDTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User Name"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ASTARTDATE")>  _
        Public Property ASTARTDATE() As nullable (of DateTimeOffset)
            Get
                return _ASTARTDATE
            End Get
            Set
                if not(value is nothing) then
                  _ASTARTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Completed"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("AENDDATE")>  _
        Public Property AENDDATE() As nullable (of DateTimeOffset)
            Get
                return _AENDDATE
            End Get
            Set
                if not(value is nothing) then
                  _AENDDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Ln"),  _
         Pos(43),  _
         [ReadOnly](true),  _
         twodBarcode("EDATE")>  _
        Public Property EDATE() As nullable (of DateTimeOffset)
            Get
                return _EDATE
            End Get
            Set
                if not(value is nothing) then
                  _EDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Ln"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms (Code)"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("SERVTCODE")>  _
        Public Property SERVTCODE() As String
            Get
                return _SERVTCODE
            End Get
            Set
                if not(value is nothing) then
                  _SERVTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Service Terms"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("SERVTDES")>  _
        Public Property SERVTDES() As String
            Get
                return _SERVTDES
            End Get
            Set
                if not(value is nothing) then
                  _SERVTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("SERNUM")>  _
        Public Property SERNUM() As String
            Get
                return _SERNUM
            End Get
            Set
                if not(value is nothing) then
                  _SERNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Servicing Package"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("MAINTDES")>  _
        Public Property MAINTDES() As String
            Get
                return _MAINTDES
            End Get
            Set
                if not(value is nothing) then
                  _MAINTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Malfunction Code"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("MALFCODE")>  _
        Public Property MALFCODE() As String
            Get
                return _MALFCODE
            End Get
            Set
                if not(value is nothing) then
                  _MALFCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Malf. Description"),  _
         nType("Edm.String"),  _
         tab("Service Terms (Code)"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("MALFDES")>  _
        Public Property MALFDES() As String
            Get
                return _MALFDES
            End Get
            Set
                if not(value is nothing) then
                  _MALFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Resolution Code"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("External Call Number"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if not(value is nothing) then
                  _BOOKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Reference"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(115),  _
         [ReadOnly](true),  _
         twodBarcode("DOCREF")>  _
        Public Property DOCREF() As String
            Get
                return _DOCREF
            End Get
            Set
                if not(value is nothing) then
                  _DOCREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Problem Code"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("SCODE")>  _
        Public Property SCODE() As String
            Get
                return _SCODE
            End Get
            Set
                if not(value is nothing) then
                  _SCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Call Status"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorizer (Contact)"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(145),  _
         [ReadOnly](true),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if not(value is nothing) then
                  _NAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable"),  _
         nType("Edm.String"),  _
         tab("Resolution Code"),  _
         Pos(146),  _
         [ReadOnly](true),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if not(value is nothing) then
                  _FLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billing Exempt Type"),  _
         nType("Edm.String"),  _
         tab("Billing Exempt Type"),  _
         Pos(147),  _
         [ReadOnly](true),  _
         twodBarcode("NOCHARGENAME")>  _
        Public Property NOCHARGENAME() As String
            Get
                return _NOCHARGENAME
            End Get
            Set
                if not(value is nothing) then
                  _NOCHARGENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Billing Exempt Type"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Billing Exempt Type"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Billing Exempt Type"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Billing Exempt Type"),  _
         Pos(172),  _
         [ReadOnly](true),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if not(value is nothing) then
                  _STIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Billing Exempt Type"),  _
         Pos(174),  _
         [ReadOnly](true),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if not(value is nothing) then
                  _ETIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Billing Exempt Type"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Billing Exempt Type"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if not(value is nothing) then
                  _CQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Travel Tm to Charge"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(192),  _
         [ReadOnly](true),  _
         twodBarcode("INPROADTIME")>  _
        Public Property INPROADTIME() As String
            Get
                return _INPROADTIME
            End Get
            Set
                if not(value is nothing) then
                  _INPROADTIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Add Travel Time?"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(194),  _
         [ReadOnly](true),  _
         twodBarcode("ROADFLAG")>  _
        Public Property ROADFLAG() As String
            Get
                return _ROADFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ROADFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Travel Time?"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(195),  _
         [ReadOnly](true),  _
         twodBarcode("ONROADFLAG")>  _
        Public Property ONROADFLAG() As String
            Get
                return _ONROADFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ONROADFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Travel Tm to Charge"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("CCODE")>  _
        Public Property CCODE() As String
            Get
                return _CCODE
            End Get
            Set
                if not(value is nothing) then
                  _CCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Travel Tm to Charge"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("Travel Tm to Charge"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Technician"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("TECHLOGIN")>  _
        Public Property TECHLOGIN() As String
            Get
                return _TECHLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _TECHLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Latitude"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("GPSX")>  _
        Public Property GPSX() As String
            Get
                return _GPSX
            End Get
            Set
                if not(value is nothing) then
                  _GPSX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Longitude"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("GPSY")>  _
        Public Property GPSY() As String
            Get
                return _GPSY
            End Get
            Set
                if not(value is nothing) then
                  _GPSY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Follow-up of Call"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(285),  _
         [ReadOnly](true),  _
         twodBarcode("PDOCNO")>  _
        Public Property PDOCNO() As String
            Get
                return _PDOCNO
            End Get
            Set
                if not(value is nothing) then
                  _PDOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Repeat Call"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(286),  _
         [ReadOnly](true),  _
         twodBarcode("REPEATCALL")>  _
        Public Property REPEATCALL() As String
            Get
                return _REPEATCALL
            End Get
            Set
                if not(value is nothing) then
                  _REPEATCALL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Meter Reading"),  _
         nType("Edm.Int64"),  _
         tab("Technician"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("METERREADING")>  _
        Public Property METERREADING() As nullable (of int64)
            Get
                return _METERREADING
            End Get
            Set
                if not(value is nothing) then
                  _METERREADING = Value
                end if
            End Set
        End Property
        
        <DisplayName("KEY1"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(0),  _
         twodBarcode("KEY1")>  _
        Public Property KEY1() As String
            Get
                return _KEY1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("KEY1", value, "^.{0,20}$") then Exit Property
                _IsSetKEY1 = True
                If loading Then
                  _KEY1 = Value
                Else
                    if not _KEY1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KEY1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KEY1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("KEY2"),  _
         nType("Edm.String"),  _
         tab("Technician"),  _
         Pos(0),  _
         twodBarcode("KEY2")>  _
        Public Property KEY2() As String
            Get
                return _KEY2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("KEY2", value, "^.{0,20}$") then Exit Property
                _IsSetKEY2 = True
                If loading Then
                  _KEY2 = Value
                Else
                    if not _KEY2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KEY2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KEY2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Delete Record?"),  _
         nType("Edm.String"),  _
         tab("Delete Record?"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("DELFLAG")>  _
        Public Property DELFLAG() As String
            Get
                return _DELFLAG
            End Get
            Set
                if not(value is nothing) then
                  _DELFLAG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetRECORDTYPE then
              if f then
                  jw.WriteRaw(", ""RECORDTYPE"": ")
              else
                  jw.WriteRaw("""RECORDTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.RECORDTYPE)
            end if
            if _IsSetKEY1 then
              if f then
                  jw.WriteRaw(", ""KEY1"": ")
              else
                  jw.WriteRaw("""KEY1"": ")
                  f = true
              end if
              jw.WriteValue(me.KEY1)
            end if
            if _IsSetKEY2 then
              if f then
                  jw.WriteRaw(", ""KEY2"": ")
              else
                  jw.WriteRaw("""KEY2"": ")
                  f = true
              end if
              jw.WriteValue(me.KEY2)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTADCFSMITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetRECORDTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RECORDTYPE")
              .WriteAttributeString("value", me.RECORDTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetKEY1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KEY1")
              .WriteAttributeString("value", me.KEY1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetKEY2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KEY2")
              .WriteAttributeString("value", me.KEY2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTADCFSMITEMS = JsonConvert.DeserializeObject(Of LASTADCFSMITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _KLINE = .KLINE
                  _RECORDTYPE = .RECORDTYPE
                  _USERLOGIN = .USERLOGIN
                  _ASTARTDATE = .ASTARTDATE
                  _AENDDATE = .AENDDATE
                  _PDATE = .PDATE
                  _EDATE = .EDATE
                  _OWNERLOGIN = .OWNERLOGIN
                  _SERVTCODE = .SERVTCODE
                  _SERVTDES = .SERVTDES
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _SERNUM = .SERNUM
                  _MAINTDES = .MAINTDES
                  _MALFCODE = .MALFCODE
                  _MALFDES = .MALFDES
                  _CODE = .CODE
                  _BOOKNUM = .BOOKNUM
                  _DOCREF = .DOCREF
                  _SCODE = .SCODE
                  _STATDES = .STATDES
                  _DETAILS = .DETAILS
                  _NAME = .NAME
                  _FLAG = .FLAG
                  _NOCHARGENAME = .NOCHARGENAME
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _CURDATE = .CURDATE
                  _STIME = .STIME
                  _ETIME = .ETIME
                  _TQUANT = .TQUANT
                  _CQUANT = .CQUANT
                  _INPROADTIME = .INPROADTIME
                  _ROADFLAG = .ROADFLAG
                  _ONROADFLAG = .ONROADFLAG
                  _PRICE = .PRICE
                  _CCODE = .CCODE
                  _PERCENT = .PERCENT
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENAME = .EXTFILENAME
                  _TECHLOGIN = .TECHLOGIN
                  _GPSX = .GPSX
                  _GPSY = .GPSY
                  _PDOCNO = .PDOCNO
                  _REPEATCALL = .REPEATCALL
                  _METERREADING = .METERREADING
                  _KEY1 = .KEY1
                  _KEY2 = .KEY2
                  _DELFLAG = .DELFLAG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Dialogue")>  _
    Public Class QUERY_INTERNALDIALOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INTERNALDIALOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = nothing
            _Name = "INTERNALDIALOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = Parent
            _name = "INTERNALDIALOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INTERNALDIALOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INTERNALDIALOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INTERNALDIALOGTEXT As INTERNALDIALOGTEXT In JsonConvert.DeserializeObject(Of QUERY_INTERNALDIALOGTEXT)(stream.ReadToEnd).Value
              With _INTERNALDIALOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INTERNALDIALOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INTERNALDIALOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INTERNALDIALOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INTERNALDIALOGTEXT as INTERNALDIALOGTEXT in value
              If _INTERNALDIALOGTEXT.Equals(trycast(obj,INTERNALDIALOGTEXT)) Then
                  value.remove(_INTERNALDIALOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INTERNALDIALOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INTERNALDIALOGTEXT"
                else
                    return "INTERNALDIALOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Comment"),  _
         nType("Edm.String"),  _
         tab("Comment"),  _
         Pos(30),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Comment", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Comment"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INTERNALDIALOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_DOCQ_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCQ_CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCQ_CHANGES_LOG)
            _Parent = nothing
            _Name = "DOCQ_CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCQ_CHANGES_LOG)
            _Parent = Parent
            _name = "DOCQ_CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCQ_CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCQ_CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCQ_CHANGES_LOG As DOCQ_CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_DOCQ_CHANGES_LOG)(stream.ReadToEnd).Value
              With _DOCQ_CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCQ_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQ_CHANGES_LOG = JsonConvert.DeserializeObject(Of DOCQ_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCQ_CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCQ_CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCQ_CHANGES_LOG as DOCQ_CHANGES_LOG in value
              If _DOCQ_CHANGES_LOG.Equals(trycast(obj,DOCQ_CHANGES_LOG)) Then
                  value.remove(_DOCQ_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCQ_CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCQ_CHANGES_LOG"
                else
                    return "DOCQ_CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Form"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Log (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCQ_CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCQ_CHANGES_LOG = JsonConvert.DeserializeObject(Of DOCQ_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
End Namespace
