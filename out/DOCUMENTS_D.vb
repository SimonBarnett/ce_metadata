Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Customer Shipments")>  _
    Public Class QUERY_DOCUMENTS_D
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_D)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_D)
            _Parent = nothing
            _Name = "DOCUMENTS_D"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Shipped Items")
            .add(1, "Sales Orders for Document")
            .add(2, "Choose Order Items")
            .add(3, "Packing Slips in Document")
            .add(4, "Link Packing Slips to Document")
            .add(5, "Shipping Address")
            .add(6, "Customer Details")
            .add(7, "Bill of Lading - Additional Data")
            .add(8, "Return Documents")
            .add(9, "Remarks")
            .add(10, "Attachments")
            .add(11, "Tasks for Document")
            .add(12, "To Do Item")
            .add(13, "History of Statuses")
            .add(14, "Projects/Accounts")
            .add(15, "List of Styles")
            .add(16, "Customer's Inventory")
            .add(17, "Customer Credit")
            .add(18, "Warehouse Tasks for Document")
            .add(19, "Intrastat Definitions")
            .add(20, "Digital Signature")
            .add(21, "Delivery Scheduling Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_D)
            _Parent = Parent
            _name = "DOCUMENTS_D_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Shipped Items")
            .add(1, "Sales Orders for Document")
            .add(2, "Choose Order Items")
            .add(3, "Packing Slips in Document")
            .add(4, "Link Packing Slips to Document")
            .add(5, "Shipping Address")
            .add(6, "Customer Details")
            .add(7, "Bill of Lading - Additional Data")
            .add(8, "Return Documents")
            .add(9, "Remarks")
            .add(10, "Attachments")
            .add(11, "Tasks for Document")
            .add(12, "To Do Item")
            .add(13, "History of Statuses")
            .add(14, "Projects/Accounts")
            .add(15, "List of Styles")
            .add(16, "Customer's Inventory")
            .add(17, "Customer Credit")
            .add(18, "Warehouse Tasks for Document")
            .add(19, "Intrastat Definitions")
            .add(20, "Digital Signature")
            .add(21, "Delivery Scheduling Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_D)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_D)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_D As DOCUMENTS_D In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_D)(stream.ReadToEnd).Value
              With _DOCUMENTS_D
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_D)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_D = JsonConvert.DeserializeObject(Of DOCUMENTS_D)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_D)
                  .CUSTNAME = obj.CUSTNAME
                  .CDES = obj.CDES
                  .NAME = obj.NAME
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .BOOKNUM = obj.BOOKNUM
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .ORDNAME = obj.ORDNAME
                  .ORDRMADOCNUM = obj.ORDRMADOCNUM
                  .ORDDETAILS = obj.ORDDETAILS
                  .REFERENCE = obj.REFERENCE
                  .PROJDOCNO = obj.PROJDOCNO
                  .PROJDES = obj.PROJDES
                  .RMADOCNO = obj.RMADOCNO
                  .PLNAME = obj.PLNAME
                  .PDOCNO = obj.PDOCNO
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .WARHSDES = obj.WARHSDES
                  .TOWARHSNAME = obj.TOWARHSNAME
                  .TOLOCNAME = obj.TOLOCNAME
                  .TOWARHSDES = obj.TOWARHSDES
                  .PARENTSERNUM = obj.PARENTSERNUM
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .LORRYNUM = obj.LORRYNUM
                  .SHIPPERNAME = obj.SHIPPERNAME
                  .SHIPPERDES = obj.SHIPPERDES
                  .DISTRDATE = obj.DISTRDATE
                  .BOXNUM = obj.BOXNUM
                  .AIRWAYBILL = obj.AIRWAYBILL
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .FLAG = obj.FLAG
                  .IVALL = obj.IVALL
                  .PRINTEDBOOL = obj.PRINTEDBOOL
                  .PL = obj.PL
                  .PACKCODE = obj.PACKCODE
                  .PACKNAME = obj.PACKNAME
                  .MWEIGHT = obj.MWEIGHT
                  .WEIGHT = obj.WEIGHT
                  .WEIGHTDIFF = obj.WEIGHTDIFF
                  .NWEIGHT = obj.NWEIGHT
                  .VOLUME = obj.VOLUME
                  .VUNITNAME = obj.VUNITNAME
                  .ADJPRICEFLAG = obj.ADJPRICEFLAG
                  .POSTPONEIV = obj.POSTPONEIV
                  .POSTPONEIV2 = obj.POSTPONEIV2
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TAXCODE = obj.TAXCODE
                  .DETAILS = obj.DETAILS
                  .EXTFILEFLAGB = obj.EXTFILEFLAGB
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .TOTQUANT = obj.TOTQUANT
                  .PACKNUM = obj.PACKNUM
                  .IDCODEPT = obj.IDCODEPT
                  .TYPE = obj.TYPE
                  .DOC = obj.DOC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_D(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_D as DOCUMENTS_D in value
              If _DOCUMENTS_D.Equals(trycast(obj,DOCUMENTS_D)) Then
                  value.remove(_DOCUMENTS_D)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_D
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _ORDRMADOCNUM As String
        
        Private _ORDDETAILS As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _IsSetPROJDOCNO As Boolean = Boolean.FalseString
        
        Private _PROJDOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetRMADOCNO As Boolean = Boolean.FalseString
        
        Private _RMADOCNO As String
        
        Private _IsSetPLNAME As Boolean = Boolean.FalseString
        
        Private _PLNAME As String
        
        Private _IsSetPDOCNO As Boolean = Boolean.FalseString
        
        Private _PDOCNO As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _WARHSDES As String
        
        Private _IsSetTOWARHSNAME As Boolean = Boolean.FalseString
        
        Private _TOWARHSNAME As String
        
        Private _IsSetTOLOCNAME As Boolean = Boolean.FalseString
        
        Private _TOLOCNAME As String
        
        Private _TOWARHSDES As String
        
        Private _IsSetPARENTSERNUM As Boolean = Boolean.FalseString
        
        Private _PARENTSERNUM As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetLORRYNUM As Boolean = Boolean.FalseString
        
        Private _LORRYNUM As String
        
        Private _IsSetSHIPPERNAME As Boolean = Boolean.FalseString
        
        Private _SHIPPERNAME As String
        
        Private _SHIPPERDES As String
        
        Private _IsSetDISTRDATE As Boolean = Boolean.FalseString
        
        Private _DISTRDATE As System.DateTimeOffset
        
        Private _IsSetBOXNUM As Boolean = Boolean.FalseString
        
        Private _BOXNUM As String
        
        Private _IsSetAIRWAYBILL As Boolean = Boolean.FalseString
        
        Private _AIRWAYBILL As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IVALL As String
        
        Private _PRINTEDBOOL As String
        
        Private _PL As String
        
        Private _IsSetPACKCODE As Boolean = Boolean.FalseString
        
        Private _PACKCODE As String
        
        Private _PACKNAME As String
        
        Private _IsSetMWEIGHT As Boolean = Boolean.FalseString
        
        Private _MWEIGHT As Decimal
        
        Private _WEIGHT As Decimal
        
        Private _WEIGHTDIFF As Decimal
        
        Private _NWEIGHT As Decimal
        
        Private _VOLUME As Decimal
        
        Private _VUNITNAME As String
        
        Private _ADJPRICEFLAG As String
        
        Private _IsSetPOSTPONEIV As Boolean = Boolean.FalseString
        
        Private _POSTPONEIV As String
        
        Private _IsSetPOSTPONEIV2 As Boolean = Boolean.FalseString
        
        Private _POSTPONEIV2 As String
        
        Private _QPRICE As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _EXTFILEFLAGB As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _TOTQUANT As Decimal
        
        Private _PACKNUM As Long
        
        Private _IDCODEPT As String
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _IsSetDOC As Boolean = Boolean.FalseString
        
        Private _DOC As Long
        
        Private _TRANSORDER_D_SUBFORM As QUERY_TRANSORDER_D
        
        Private _DOCORD_SUBFORM As QUERY_DOCORD
        
        Private _DOCORDI_SUBFORM As QUERY_DOCORDI
        
        Private _DOCPACK_SUBFORM As QUERY_DOCPACK
        
        Private _DOCPACK2_SUBFORM As QUERY_DOCPACK2
        
        Private _SHIPTO2_SUBFORM As QUERY_SHIPTO2
        
        Private _DOCUMENTS_DCONT_SUBFORM As QUERY_DOCUMENTS_DCONT
        
        Private _PACKLIST_SUBFORM As QUERY_PACKLIST
        
        Private _DOC_N_SUBFORM As QUERY_DOC_N
        
        Private _DOCUMENTSTEXT_SUBFORM As QUERY_DOCUMENTSTEXT
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _MATRIXSUM_SUBFORM As QUERY_MATRIXSUM
        
        Private _CUSTBALANCE_SUBFORM As QUERY_CUSTBALANCE
        
        Private _CUSTOBLIGO_SUBFORM As QUERY_CUSTOBLIGO
        
        Private _LINKWTASK_SUBFORM As QUERY_LINKWTASK
        
        Private _DOCUMENTSINTRASTAT_SUBFORM As QUERY_DOCUMENTSINTRASTAT
        
        Private _IVSIGN_SUBFORM As QUERY_IVSIGN
        
        Private _DISTRDETAILS_SUBFORM As QUERY_DISTRDETAILS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Shipped Items"))
            ChildQuery.add(1, new oNavigation("Sales Orders for Document"))
            ChildQuery.add(2, new oNavigation("Choose Order Items"))
            ChildQuery.add(3, new oNavigation("Packing Slips in Document"))
            ChildQuery.add(4, new oNavigation("Link Packing Slips to Document"))
            ChildQuery.add(5, new oNavigation("Shipping Address"))
            ChildQuery.add(6, new oNavigation("Customer Details"))
            ChildQuery.add(7, new oNavigation("Bill of Lading - Additional Data"))
            ChildQuery.add(8, new oNavigation("Return Documents"))
            ChildQuery.add(9, new oNavigation("Remarks"))
            ChildQuery.add(10, new oNavigation("Attachments"))
            ChildQuery.add(11, new oNavigation("Tasks for Document"))
            ChildQuery.add(12, new oNavigation("To Do Item"))
            ChildQuery.add(13, new oNavigation("History of Statuses"))
            ChildQuery.add(14, new oNavigation("Projects/Accounts"))
            ChildQuery.add(15, new oNavigation("List of Styles"))
            ChildQuery.add(16, new oNavigation("Customer's Inventory"))
            ChildQuery.add(17, new oNavigation("Customer Credit"))
            ChildQuery.add(18, new oNavigation("Warehouse Tasks for Document"))
            ChildQuery.add(19, new oNavigation("Intrastat Definitions"))
            ChildQuery.add(20, new oNavigation("Digital Signature"))
            ChildQuery.add(21, new oNavigation("Delivery Scheduling Details"))
            _TRANSORDER_D_SUBFORM = new QUERY_TRANSORDER_D(me)
            _DOCORD_SUBFORM = new QUERY_DOCORD(me)
            _DOCORDI_SUBFORM = new QUERY_DOCORDI(me)
            _DOCPACK_SUBFORM = new QUERY_DOCPACK(me)
            _DOCPACK2_SUBFORM = new QUERY_DOCPACK2(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _DOCUMENTS_DCONT_SUBFORM = new QUERY_DOCUMENTS_DCONT(me)
            _PACKLIST_SUBFORM = new QUERY_PACKLIST(me)
            _DOC_N_SUBFORM = new QUERY_DOC_N(me)
            _DOCUMENTSTEXT_SUBFORM = new QUERY_DOCUMENTSTEXT(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _CUSTBALANCE_SUBFORM = new QUERY_CUSTBALANCE(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _LINKWTASK_SUBFORM = new QUERY_LINKWTASK(me)
            _DOCUMENTSINTRASTAT_SUBFORM = new QUERY_DOCUMENTSINTRASTAT(me)
            _IVSIGN_SUBFORM = new QUERY_IVSIGN(me)
            _DISTRDETAILS_SUBFORM = new QUERY_DISTRDETAILS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSORDER_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_DOCORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_DOCORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_DOCPACK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_DOCPACK2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCUMENTS_DCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PACKLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_DOC_N_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCUMENTSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_CUSTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_LINKWTASK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_DOCUMENTSINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_IVSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_DISTRDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Shipped Items"))
            ChildQuery.add(1, new oNavigation("Sales Orders for Document"))
            ChildQuery.add(2, new oNavigation("Choose Order Items"))
            ChildQuery.add(3, new oNavigation("Packing Slips in Document"))
            ChildQuery.add(4, new oNavigation("Link Packing Slips to Document"))
            ChildQuery.add(5, new oNavigation("Shipping Address"))
            ChildQuery.add(6, new oNavigation("Customer Details"))
            ChildQuery.add(7, new oNavigation("Bill of Lading - Additional Data"))
            ChildQuery.add(8, new oNavigation("Return Documents"))
            ChildQuery.add(9, new oNavigation("Remarks"))
            ChildQuery.add(10, new oNavigation("Attachments"))
            ChildQuery.add(11, new oNavigation("Tasks for Document"))
            ChildQuery.add(12, new oNavigation("To Do Item"))
            ChildQuery.add(13, new oNavigation("History of Statuses"))
            ChildQuery.add(14, new oNavigation("Projects/Accounts"))
            ChildQuery.add(15, new oNavigation("List of Styles"))
            ChildQuery.add(16, new oNavigation("Customer's Inventory"))
            ChildQuery.add(17, new oNavigation("Customer Credit"))
            ChildQuery.add(18, new oNavigation("Warehouse Tasks for Document"))
            ChildQuery.add(19, new oNavigation("Intrastat Definitions"))
            ChildQuery.add(20, new oNavigation("Digital Signature"))
            ChildQuery.add(21, new oNavigation("Delivery Scheduling Details"))
            _TRANSORDER_D_SUBFORM = new QUERY_TRANSORDER_D(me)
            _DOCORD_SUBFORM = new QUERY_DOCORD(me)
            _DOCORDI_SUBFORM = new QUERY_DOCORDI(me)
            _DOCPACK_SUBFORM = new QUERY_DOCPACK(me)
            _DOCPACK2_SUBFORM = new QUERY_DOCPACK2(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _DOCUMENTS_DCONT_SUBFORM = new QUERY_DOCUMENTS_DCONT(me)
            _PACKLIST_SUBFORM = new QUERY_PACKLIST(me)
            _DOC_N_SUBFORM = new QUERY_DOC_N(me)
            _DOCUMENTSTEXT_SUBFORM = new QUERY_DOCUMENTSTEXT(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _CUSTBALANCE_SUBFORM = new QUERY_CUSTBALANCE(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _LINKWTASK_SUBFORM = new QUERY_LINKWTASK(me)
            _DOCUMENTSINTRASTAT_SUBFORM = new QUERY_DOCUMENTSINTRASTAT(me)
            _IVSIGN_SUBFORM = new QUERY_IVSIGN(me)
            _DISTRDETAILS_SUBFORM = new QUERY_DISTRDETAILS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSORDER_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_DOCORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_DOCORDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_DOCPACK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_DOCPACK2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCUMENTS_DCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PACKLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_DOC_N_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCUMENTSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_CUSTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_LINKWTASK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_DOCUMENTSINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(20)
               .setoDataQuery(_IVSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
            WITH ChildQuery(21)
               .setoDataQuery(_DISTRDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Shipped Items", _TRANSORDER_D_SUBFORM))
                   .add(1, new oNavigation("Sales Orders for Document", _DOCORD_SUBFORM))
                   .add(2, new oNavigation("Choose Order Items", _DOCORDI_SUBFORM))
                   .add(3, new oNavigation("Packing Slips in Document", _DOCPACK_SUBFORM))
                   .add(4, new oNavigation("Link Packing Slips to Document", _DOCPACK2_SUBFORM))
                   .add(5, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(6, new oNavigation("Customer Details", _DOCUMENTS_DCONT_SUBFORM))
                   .add(7, new oNavigation("Bill of Lading - Additional Data", _PACKLIST_SUBFORM))
                   .add(8, new oNavigation("Return Documents", _DOC_N_SUBFORM))
                   .add(9, new oNavigation("Remarks", _DOCUMENTSTEXT_SUBFORM))
                   .add(10, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(11, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(12, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(13, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(14, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(15, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(16, new oNavigation("Customer's Inventory", _CUSTBALANCE_SUBFORM))
                   .add(17, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(18, new oNavigation("Warehouse Tasks for Document", _LINKWTASK_SUBFORM))
                   .add(19, new oNavigation("Intrastat Definitions", _DOCUMENTSINTRASTAT_SUBFORM))
                   .add(20, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
                   .add(21, new oNavigation("Delivery Scheduling Details", _DISTRDETAILS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_D"
                else
                    return "DOCUMENTS_D_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(30),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Doc. No."),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(52),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Doc. No.", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(55),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(57),  _
         Mandatory(true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(60),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("RMA for Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(61),  _
         [ReadOnly](true),  _
         twodBarcode("ORDRMADOCNUM")>  _
        Public Property ORDRMADOCNUM() As String
            Get
                return _ORDRMADOCNUM
            End Get
            Set
                if not(value is nothing) then
                  _ORDRMADOCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details (Order)"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("ORDDETAILS")>  _
        Public Property ORDDETAILS() As String
            Get
                return _ORDDETAILS
            End Get
            Set
                if not(value is nothing) then
                  _ORDDETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(63),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer's Purch Ord", value, "^.{0,15}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(64),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetPROJDOCNO = True
                If loading Then
                  _PROJDOCNO = Value
                Else
                    if not _PROJDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("RMA Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(66),  _
         twodBarcode("RMADOCNO")>  _
        Public Property RMADOCNO() As String
            Get
                return _RMADOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("RMA Number", value, "^.{0,16}$") then Exit Property
                _IsSetRMADOCNO = True
                If loading Then
                  _RMADOCNO = Value
                Else
                    if not _RMADOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RMADOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RMADOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price List Code"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(68),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price List Code", value, "^.{0,6}$") then Exit Property
                _IsSetPLNAME = True
                If loading Then
                  _PLNAME = Value
                Else
                    if not _PLNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Previous Shipmt Doc."),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(69),  _
         twodBarcode("PDOCNO")>  _
        Public Property PDOCNO() As String
            Get
                return _PDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Previous Shipmt Doc.", value, "^.{0,16}$") then Exit Property
                _IsSetPDOCNO = True
                If loading Then
                  _PDOCNO = Value
                Else
                    if not _PDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Warehouse"),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(70),  _
         Mandatory(true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipping Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(72),  _
         Mandatory(true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Descrip."),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(73),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSDES")>  _
        Public Property WARHSDES() As String
            Get
                return _WARHSDES
            End Get
            Set
                if not(value is nothing) then
                  _WARHSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Consignmt Warehs"),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(74),  _
         twodBarcode("TOWARHSNAME")>  _
        Public Property TOWARHSNAME() As String
            Get
                return _TOWARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Consignmt Warehs", value, "^.{0,4}$") then Exit Property
                _IsSetTOWARHSNAME = True
                If loading Then
                  _TOWARHSNAME = Value
                Else
                    if not _TOWARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOWARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOWARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(76),  _
         twodBarcode("TOLOCNAME")>  _
        Public Property TOLOCNAME() As String
            Get
                return _TOLOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetTOLOCNAME = True
                If loading Then
                  _TOLOCNAME = Value
                Else
                    if not _TOLOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOLOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOLOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Descrip."),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("TOWARHSDES")>  _
        Public Property TOWARHSDES() As String
            Get
                return _TOWARHSDES
            End Get
            Set
                if not(value is nothing) then
                  _TOWARHSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Parent's Serial No."),  _
         nType("Edm.String"),  _
         tab("Previous Shipmt Doc."),  _
         Pos(80),  _
         twodBarcode("PARENTSERNUM")>  _
        Public Property PARENTSERNUM() As String
            Get
                return _PARENTSERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Parent's Serial No.", value, "^.{0,20}$") then Exit Property
                _IsSetPARENTSERNUM = True
                If loading Then
                  _PARENTSERNUM = Value
                Else
                    if not _PARENTSERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARENTSERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARENTSERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Parent Part Number"),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(82),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Parent Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(84),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Truck No."),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(90),  _
         twodBarcode("LORRYNUM")>  _
        Public Property LORRYNUM() As String
            Get
                return _LORRYNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Truck No.", value, "^.{0,12}$") then Exit Property
                _IsSetLORRYNUM = True
                If loading Then
                  _LORRYNUM = Value
                Else
                    if not _LORRYNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LORRYNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LORRYNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipper/Driver No."),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(92),  _
         twodBarcode("SHIPPERNAME")>  _
        Public Property SHIPPERNAME() As String
            Get
                return _SHIPPERNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipper/Driver No.", value, "^.{0,8}$") then Exit Property
                _IsSetSHIPPERNAME = True
                If loading Then
                  _SHIPPERNAME = Value
                Else
                    if not _SHIPPERNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHIPPERNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHIPPERNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipper/Driver Name"),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(94),  _
         [ReadOnly](true),  _
         twodBarcode("SHIPPERDES")>  _
        Public Property SHIPPERDES() As String
            Get
                return _SHIPPERDES
            End Get
            Set
                if not(value is nothing) then
                  _SHIPPERDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Delivery Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Parent Part Number"),  _
         Pos(96),  _
         twodBarcode("DISTRDATE")>  _
        Public Property DISTRDATE() As nullable (of DateTimeOffset)
            Get
                return _DISTRDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Date", value, "^.*$") then Exit Property
                _IsSetDISTRDATE = True
                If loading Then
                  _DISTRDATE = Value
                Else
                    if not _DISTRDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Pallet"),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(98),  _
         twodBarcode("BOXNUM")>  _
        Public Property BOXNUM() As String
            Get
                return _BOXNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipping Pallet", value, "^.{0,16}$") then Exit Property
                _IsSetBOXNUM = True
                If loading Then
                  _BOXNUM = Value
                Else
                    if not _BOXNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOXNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOXNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Number"),  _
         nType("Edm.String"),  _
         tab("Parent Part Number"),  _
         Pos(99),  _
         twodBarcode("AIRWAYBILL")>  _
        Public Property AIRWAYBILL() As String
            Get
                return _AIRWAYBILL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Number", value, "^.{0,20}$") then Exit Property
                _IsSetAIRWAYBILL = True
                If loading Then
                  _AIRWAYBILL = Value
                Else
                    if not _AIRWAYBILL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AIRWAYBILL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AIRWAYBILL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(100),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(101),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(110),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(120),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(140),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billed"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("IVALL")>  _
        Public Property IVALL() As String
            Get
                return _IVALL
            End Get
            Set
                if not(value is nothing) then
                  _IVALL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Printed"),  _
         nType("Edm.String"),  _
         tab("Printed"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("PRINTEDBOOL")>  _
        Public Property PRINTEDBOOL() As String
            Get
                return _PRINTEDBOOL
            End Get
            Set
                if not(value is nothing) then
                  _PRINTEDBOOL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bill of Lading?"),  _
         nType("Edm.String"),  _
         tab("Printed"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("PL")>  _
        Public Property PL() As String
            Get
                return _PL
            End Get
            Set
                if not(value is nothing) then
                  _PL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Printed"),  _
         Pos(185),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Type Code", value, "^.{0,2}$") then Exit Property
                _IsSetPACKCODE = True
                If loading Then
                  _PACKCODE = Value
                Else
                    if not _PACKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Desc."),  _
         nType("Edm.String"),  _
         tab("Printed"),  _
         Pos(186),  _
         [ReadOnly](true),  _
         twodBarcode("PACKNAME")>  _
        Public Property PACKNAME() As String
            Get
                return _PACKNAME
            End Get
            Set
                if not(value is nothing) then
                  _PACKNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manual Gross Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Printed"),  _
         Pos(187),  _
         twodBarcode("MWEIGHT")>  _
        Public Property MWEIGHT() As nullable(of decimal)
            Get
                return _MWEIGHT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Manual Gross Weight", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetMWEIGHT = True
                If loading Then
                  _MWEIGHT = Value
                Else
                    if not _MWEIGHT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MWEIGHT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MWEIGHT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Auto Gross Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Printed"),  _
         Pos(188),  _
         [ReadOnly](true),  _
         twodBarcode("WEIGHT")>  _
        Public Property WEIGHT() As nullable(of decimal)
            Get
                return _WEIGHT
            End Get
            Set
                if not(value is nothing) then
                  _WEIGHT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Difference"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Printed"),  _
         Pos(189),  _
         [ReadOnly](true),  _
         twodBarcode("WEIGHTDIFF")>  _
        Public Property WEIGHTDIFF() As nullable(of decimal)
            Get
                return _WEIGHTDIFF
            End Get
            Set
                if not(value is nothing) then
                  _WEIGHTDIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Auto Net Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Printed"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("NWEIGHT")>  _
        Public Property NWEIGHT() As nullable(of decimal)
            Get
                return _NWEIGHT
            End Get
            Set
                if not(value is nothing) then
                  _NWEIGHT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(4),  _
         Precision(16),  _
         tab("Volume"),  _
         Pos(192),  _
         [ReadOnly](true),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if not(value is nothing) then
                  _VOLUME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(193),  _
         [ReadOnly](true),  _
         twodBarcode("VUNITNAME")>  _
        Public Property VUNITNAME() As String
            Get
                return _VUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _VUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjust Prices?"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("ADJPRICEFLAG")>  _
        Public Property ADJPRICEFLAG() As String
            Get
                return _ADJPRICEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ADJPRICEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Delay Inv-Next Month"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(215),  _
         twodBarcode("POSTPONEIV")>  _
        Public Property POSTPONEIV() As String
            Get
                return _POSTPONEIV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delay Inv-Next Month", value, "^.{0,1}$") then Exit Property
                _IsSetPOSTPONEIV = True
                If loading Then
                  _POSTPONEIV = Value
                Else
                    if not _POSTPONEIV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("POSTPONEIV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _POSTPONEIV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Separate Invoice?"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(216),  _
         twodBarcode("POSTPONEIV2")>  _
        Public Property POSTPONEIV2() As String
            Get
                return _POSTPONEIV2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Separate Invoice?", value, "^.{0,1}$") then Exit Property
                _IsSetPOSTPONEIV2 = True
                If loading Then
                  _POSTPONEIV2 = Value
                Else
                    if not _POSTPONEIV2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("POSTPONEIV2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _POSTPONEIV2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Volume"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Volume"),  _
         Pos(230),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Volume"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Tax"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Tax"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Sales Tax"),  _
         Pos(270),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Sales Tax"),  _
         Pos(272),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Sales Tax"),  _
         Pos(275),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("Sales Tax"),  _
         Pos(276),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAGB")>  _
        Public Property EXTFILEFLAGB() As String
            Get
                return _EXTFILEFLAGB
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAGB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Sales Tax"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Sales Tax"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(300),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(302),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty of Items"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Sales Rep Number"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Number of Crates"),  _
         nType("Edm.Int64"),  _
         tab("Sales Rep Number"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("PACKNUM")>  _
        Public Property PACKNUM() As nullable (of int64)
            Get
                return _PACKNUM
            End Get
            Set
                if not(value is nothing) then
                  _PACKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Ref. - Portugal"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(335),  _
         [ReadOnly](true),  _
         twodBarcode("IDCODEPT")>  _
        Public Property IDCODEPT() As String
            Get
                return _IDCODEPT
            End Get
            Set
                if not(value is nothing) then
                  _IDCODEPT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Number"),  _
         Pos(6),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Sales Rep Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetDOC = True
                If loading Then
                  _DOC = Value
                Else
                    if not _DOC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDER_D_SUBFORM() As QUERY_TRANSORDER_D
            Get
                return _TRANSORDER_D_SUBFORM
            End Get
            Set
                _TRANSORDER_D_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCORD_SUBFORM() As QUERY_DOCORD
            Get
                return _DOCORD_SUBFORM
            End Get
            Set
                _DOCORD_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCORDI_SUBFORM() As QUERY_DOCORDI
            Get
                return _DOCORDI_SUBFORM
            End Get
            Set
                _DOCORDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCPACK_SUBFORM() As QUERY_DOCPACK
            Get
                return _DOCPACK_SUBFORM
            End Get
            Set
                _DOCPACK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCPACK2_SUBFORM() As QUERY_DOCPACK2
            Get
                return _DOCPACK2_SUBFORM
            End Get
            Set
                _DOCPACK2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO2_SUBFORM() As QUERY_SHIPTO2
            Get
                return _SHIPTO2_SUBFORM
            End Get
            Set
                _SHIPTO2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTS_DCONT_SUBFORM() As QUERY_DOCUMENTS_DCONT
            Get
                return _DOCUMENTS_DCONT_SUBFORM
            End Get
            Set
                _DOCUMENTS_DCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PACKLIST_SUBFORM() As QUERY_PACKLIST
            Get
                return _PACKLIST_SUBFORM
            End Get
            Set
                _PACKLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOC_N_SUBFORM() As QUERY_DOC_N
            Get
                return _DOC_N_SUBFORM
            End Get
            Set
                _DOC_N_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTSTEXT_SUBFORM() As QUERY_DOCUMENTSTEXT
            Get
                return _DOCUMENTSTEXT_SUBFORM
            End Get
            Set
                _DOCUMENTSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUM_SUBFORM() As QUERY_MATRIXSUM
            Get
                return _MATRIXSUM_SUBFORM
            End Get
            Set
                _MATRIXSUM_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTBALANCE_SUBFORM() As QUERY_CUSTBALANCE
            Get
                return _CUSTBALANCE_SUBFORM
            End Get
            Set
                _CUSTBALANCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGO_SUBFORM() As QUERY_CUSTOBLIGO
            Get
                return _CUSTOBLIGO_SUBFORM
            End Get
            Set
                _CUSTOBLIGO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKWTASK_SUBFORM() As QUERY_LINKWTASK
            Get
                return _LINKWTASK_SUBFORM
            End Get
            Set
                _LINKWTASK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTSINTRASTAT_SUBFORM() As QUERY_DOCUMENTSINTRASTAT
            Get
                return _DOCUMENTSINTRASTAT_SUBFORM
            End Get
            Set
                _DOCUMENTSINTRASTAT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVSIGN_SUBFORM() As QUERY_IVSIGN
            Get
                return _IVSIGN_SUBFORM
            End Get
            Set
                _IVSIGN_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DISTRDETAILS_SUBFORM() As QUERY_DISTRDETAILS
            Get
                return _DISTRDETAILS_SUBFORM
            End Get
            Set
                _DISTRDETAILS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetPROJDOCNO then
              if f then
                  jw.WriteRaw(", ""PROJDOCNO"": ")
              else
                  jw.WriteRaw("""PROJDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJDOCNO)
            end if
            if _IsSetRMADOCNO then
              if f then
                  jw.WriteRaw(", ""RMADOCNO"": ")
              else
                  jw.WriteRaw("""RMADOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.RMADOCNO)
            end if
            if _IsSetPLNAME then
              if f then
                  jw.WriteRaw(", ""PLNAME"": ")
              else
                  jw.WriteRaw("""PLNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLNAME)
            end if
            if _IsSetPDOCNO then
              if f then
                  jw.WriteRaw(", ""PDOCNO"": ")
              else
                  jw.WriteRaw("""PDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PDOCNO)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetTOWARHSNAME then
              if f then
                  jw.WriteRaw(", ""TOWARHSNAME"": ")
              else
                  jw.WriteRaw("""TOWARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOWARHSNAME)
            end if
            if _IsSetTOLOCNAME then
              if f then
                  jw.WriteRaw(", ""TOLOCNAME"": ")
              else
                  jw.WriteRaw("""TOLOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOLOCNAME)
            end if
            if _IsSetPARENTSERNUM then
              if f then
                  jw.WriteRaw(", ""PARENTSERNUM"": ")
              else
                  jw.WriteRaw("""PARENTSERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PARENTSERNUM)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetLORRYNUM then
              if f then
                  jw.WriteRaw(", ""LORRYNUM"": ")
              else
                  jw.WriteRaw("""LORRYNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.LORRYNUM)
            end if
            if _IsSetSHIPPERNAME then
              if f then
                  jw.WriteRaw(", ""SHIPPERNAME"": ")
              else
                  jw.WriteRaw("""SHIPPERNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SHIPPERNAME)
            end if
            if _IsSetDISTRDATE then
              if f then
                  jw.WriteRaw(", ""DISTRDATE"": ")
              else
                  jw.WriteRaw("""DISTRDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRDATE)
            end if
            if _IsSetBOXNUM then
              if f then
                  jw.WriteRaw(", ""BOXNUM"": ")
              else
                  jw.WriteRaw("""BOXNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOXNUM)
            end if
            if _IsSetAIRWAYBILL then
              if f then
                  jw.WriteRaw(", ""AIRWAYBILL"": ")
              else
                  jw.WriteRaw("""AIRWAYBILL"": ")
                  f = true
              end if
              jw.WriteValue(me.AIRWAYBILL)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetPACKCODE then
              if f then
                  jw.WriteRaw(", ""PACKCODE"": ")
              else
                  jw.WriteRaw("""PACKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKCODE)
            end if
            if _IsSetMWEIGHT then
              if f then
                  jw.WriteRaw(", ""MWEIGHT"": ")
              else
                  jw.WriteRaw("""MWEIGHT"": ")
                  f = true
              end if
              jw.WriteValue(me.MWEIGHT)
            end if
            if _IsSetPOSTPONEIV then
              if f then
                  jw.WriteRaw(", ""POSTPONEIV"": ")
              else
                  jw.WriteRaw("""POSTPONEIV"": ")
                  f = true
              end if
              jw.WriteValue(me.POSTPONEIV)
            end if
            if _IsSetPOSTPONEIV2 then
              if f then
                  jw.WriteRaw(", ""POSTPONEIV2"": ")
              else
                  jw.WriteRaw("""POSTPONEIV2"": ")
                  f = true
              end if
              jw.WriteValue(me.POSTPONEIV2)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _IsSetDOC then
              if f then
                  jw.WriteRaw(", ""DOC"": ")
              else
                  jw.WriteRaw("""DOC"": ")
                  f = true
              end if
              jw.WriteValue(me.DOC)
            end if
            if _TRANSORDER_D_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDER_D_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDER_D in _TRANSORDER_D_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDER_D_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCORD_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCORD_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCORD in _DOCORD_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCORD_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCORDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCORDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCORDI in _DOCORDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCORDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCPACK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCPACK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCPACK in _DOCPACK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCPACK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCPACK2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCPACK2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCPACK2 in _DOCPACK2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCPACK2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTS_DCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTS_DCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTS_DCONT in _DOCUMENTS_DCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTS_DCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PACKLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PACKLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PACKLIST in _PACKLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PACKLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOC_N_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOC_N_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOC_N in _DOC_N_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOC_N_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTSTEXT in _DOCUMENTSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUM_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUM_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTBALANCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTBALANCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTBALANCE in _CUSTBALANCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTBALANCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKWTASK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKWTASK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKWTASK in _LINKWTASK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKWTASK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCUMENTSINTRASTAT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTSINTRASTAT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTSINTRASTAT in _DOCUMENTSINTRASTAT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTSINTRASTAT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVSIGN in _IVSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DISTRDETAILS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DISTRDETAILS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DISTRDETAILS in _DISTRDETAILS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DISTRDETAILS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_D")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPROJDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJDOCNO")
              .WriteAttributeString("value", me.PROJDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRMADOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RMADOCNO")
              .WriteAttributeString("value", me.RMADOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPLNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLNAME")
              .WriteAttributeString("value", me.PLNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetPDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDOCNO")
              .WriteAttributeString("value", me.PDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetTOWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOWARHSNAME")
              .WriteAttributeString("value", me.TOWARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetTOLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOLOCNAME")
              .WriteAttributeString("value", me.TOLOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetPARENTSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARENTSERNUM")
              .WriteAttributeString("value", me.PARENTSERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetLORRYNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LORRYNUM")
              .WriteAttributeString("value", me.LORRYNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetSHIPPERNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHIPPERNAME")
              .WriteAttributeString("value", me.SHIPPERNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDISTRDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRDATE")
              .WriteAttributeString("value", me.DISTRDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetBOXNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOXNUM")
              .WriteAttributeString("value", me.BOXNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetAIRWAYBILL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AIRWAYBILL")
              .WriteAttributeString("value", me.AIRWAYBILL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPACKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKCODE")
              .WriteAttributeString("value", me.PACKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetMWEIGHT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MWEIGHT")
              .WriteAttributeString("value", me.MWEIGHT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetPOSTPONEIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "POSTPONEIV")
              .WriteAttributeString("value", me.POSTPONEIV)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPOSTPONEIV2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "POSTPONEIV2")
              .WriteAttributeString("value", me.POSTPONEIV2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetDOC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", me.DOC)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _TRANSORDER_D_SUBFORM.value.count > 0 then
              for each itm as TRANSORDER_D in _TRANSORDER_D_SUBFORM.Value
                itm.toXML(xw,"TRANSORDER_D_SUBFORM")
              next
            end if
            if _DOCORD_SUBFORM.value.count > 0 then
              for each itm as DOCORD in _DOCORD_SUBFORM.Value
                itm.toXML(xw,"DOCORD_SUBFORM")
              next
            end if
            if _DOCORDI_SUBFORM.value.count > 0 then
              for each itm as DOCORDI in _DOCORDI_SUBFORM.Value
                itm.toXML(xw,"DOCORDI_SUBFORM")
              next
            end if
            if _DOCPACK_SUBFORM.value.count > 0 then
              for each itm as DOCPACK in _DOCPACK_SUBFORM.Value
                itm.toXML(xw,"DOCPACK_SUBFORM")
              next
            end if
            if _DOCPACK2_SUBFORM.value.count > 0 then
              for each itm as DOCPACK2 in _DOCPACK2_SUBFORM.Value
                itm.toXML(xw,"DOCPACK2_SUBFORM")
              next
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.Value
                itm.toXML(xw,"SHIPTO2_SUBFORM")
              next
            end if
            if _DOCUMENTS_DCONT_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTS_DCONT in _DOCUMENTS_DCONT_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTS_DCONT_SUBFORM")
              next
            end if
            if _PACKLIST_SUBFORM.value.count > 0 then
              for each itm as PACKLIST in _PACKLIST_SUBFORM.Value
                itm.toXML(xw,"PACKLIST_SUBFORM")
              next
            end if
            if _DOC_N_SUBFORM.value.count > 0 then
              for each itm as DOC_N in _DOC_N_SUBFORM.Value
                itm.toXML(xw,"DOC_N_SUBFORM")
              next
            end if
            if _DOCUMENTSTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTSTEXT in _DOCUMENTSTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTSTEXT_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUM_SUBFORM")
              next
            end if
            if _CUSTBALANCE_SUBFORM.value.count > 0 then
              for each itm as CUSTBALANCE in _CUSTBALANCE_SUBFORM.Value
                itm.toXML(xw,"CUSTBALANCE_SUBFORM")
              next
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGO_SUBFORM")
              next
            end if
            if _LINKWTASK_SUBFORM.value.count > 0 then
              for each itm as LINKWTASK in _LINKWTASK_SUBFORM.Value
                itm.toXML(xw,"LINKWTASK_SUBFORM")
              next
            end if
            if _DOCUMENTSINTRASTAT_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTSINTRASTAT in _DOCUMENTSINTRASTAT_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTSINTRASTAT_SUBFORM")
              next
            end if
            if _IVSIGN_SUBFORM.value.count > 0 then
              for each itm as IVSIGN in _IVSIGN_SUBFORM.Value
                itm.toXML(xw,"IVSIGN_SUBFORM")
              next
            end if
            if _DISTRDETAILS_SUBFORM.value.count > 0 then
              for each itm as DISTRDETAILS in _DISTRDETAILS_SUBFORM.Value
                itm.toXML(xw,"DISTRDETAILS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_D = JsonConvert.DeserializeObject(Of DOCUMENTS_D)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CDES = .CDES
                  _NAME = .NAME
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _BOOKNUM = .BOOKNUM
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _ORDNAME = .ORDNAME
                  _ORDRMADOCNUM = .ORDRMADOCNUM
                  _ORDDETAILS = .ORDDETAILS
                  _REFERENCE = .REFERENCE
                  _PROJDOCNO = .PROJDOCNO
                  _PROJDES = .PROJDES
                  _RMADOCNO = .RMADOCNO
                  _PLNAME = .PLNAME
                  _PDOCNO = .PDOCNO
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _WARHSDES = .WARHSDES
                  _TOWARHSNAME = .TOWARHSNAME
                  _TOLOCNAME = .TOLOCNAME
                  _TOWARHSDES = .TOWARHSDES
                  _PARENTSERNUM = .PARENTSERNUM
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _LORRYNUM = .LORRYNUM
                  _SHIPPERNAME = .SHIPPERNAME
                  _SHIPPERDES = .SHIPPERDES
                  _DISTRDATE = .DISTRDATE
                  _BOXNUM = .BOXNUM
                  _AIRWAYBILL = .AIRWAYBILL
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _FLAG = .FLAG
                  _IVALL = .IVALL
                  _PRINTEDBOOL = .PRINTEDBOOL
                  _PL = .PL
                  _PACKCODE = .PACKCODE
                  _PACKNAME = .PACKNAME
                  _MWEIGHT = .MWEIGHT
                  _WEIGHT = .WEIGHT
                  _WEIGHTDIFF = .WEIGHTDIFF
                  _NWEIGHT = .NWEIGHT
                  _VOLUME = .VOLUME
                  _VUNITNAME = .VUNITNAME
                  _ADJPRICEFLAG = .ADJPRICEFLAG
                  _POSTPONEIV = .POSTPONEIV
                  _POSTPONEIV2 = .POSTPONEIV2
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TAXCODE = .TAXCODE
                  _DETAILS = .DETAILS
                  _EXTFILEFLAGB = .EXTFILEFLAGB
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _TOTQUANT = .TOTQUANT
                  _PACKNUM = .PACKNUM
                  _IDCODEPT = .IDCODEPT
                  _TYPE = .TYPE
                  _DOC = .DOC
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCUMENTS_D
        
        TRANSORDER_D = 0
        
        DOCORD = 1
        
        DOCORDI = 2
        
        DOCPACK = 3
        
        DOCPACK2 = 4
        
        SHIPTO2 = 5
        
        DOCUMENTS_DCONT = 6
        
        PACKLIST = 7
        
        DOC_N = 8
        
        DOCUMENTSTEXT = 9
        
        EXTFILES = 10
        
        GENCUSTNOTES = 11
        
        DOCTODOLIST = 12
        
        DOCTODOLISTLOG = 13
        
        PROJLINK = 14
        
        MATRIXSUM = 15
        
        CUSTBALANCE = 16
        
        CUSTOBLIGO = 17
        
        LINKWTASK = 18
        
        DOCUMENTSINTRASTAT = 19
        
        IVSIGN = 20
        
        DISTRDETAILS = 21
    End Enum
    
    <QueryTitle("Shipped Items")>  _
    Public Class QUERY_TRANSORDER_D
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDER_D)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDER_D)
            _Parent = nothing
            _Name = "TRANSORDER_D"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Document Total")
            .add(1, "Serial Numbers in Transaction")
            .add(2, "Auto Recording of Serial Nos.")
            .add(3, "Available Inventory in Warehouse")
            .add(4, "Inventory for Part")
            .add(5, "Latest Part Sales to Customer")
            .add(6, "Projects/Accounts")
            .add(7, "Calls to Cust for Clarification")
            .add(8, "Analysis Results")
            .add(9, "Electronic Signature")
            .add(10, "Invoices/Credit Memos for Item")
            .add(11, "Warehouse Tasks for Line Item")
            .add(12, "Intrastat Definitions")
            .add(13, "Line Items - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDER_D)
            _Parent = Parent
            _name = "TRANSORDER_D_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Document Total")
            .add(1, "Serial Numbers in Transaction")
            .add(2, "Auto Recording of Serial Nos.")
            .add(3, "Available Inventory in Warehouse")
            .add(4, "Inventory for Part")
            .add(5, "Latest Part Sales to Customer")
            .add(6, "Projects/Accounts")
            .add(7, "Calls to Cust for Clarification")
            .add(8, "Analysis Results")
            .add(9, "Electronic Signature")
            .add(10, "Invoices/Credit Memos for Item")
            .add(11, "Warehouse Tasks for Line Item")
            .add(12, "Intrastat Definitions")
            .add(13, "Line Items - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDER_D)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDER_D)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDER_D As TRANSORDER_D In JsonConvert.DeserializeObject(Of QUERY_TRANSORDER_D)(stream.ReadToEnd).Value
              With _TRANSORDER_D
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDER_D)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_D = JsonConvert.DeserializeObject(Of TRANSORDER_D)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDER_D)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .CQUANT = obj.CQUANT
                  .PQUANT = obj.PQUANT
                  .SETFLAG = obj.SETFLAG
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .MINPRICE = obj.MINPRICE
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .BARCODE = obj.BARCODE
                  .REVNUM = obj.REVNUM
                  .REVNAME = obj.REVNAME
                  .CUSTPARTNAME = obj.CUSTPARTNAME
                  .CUSTPARTBARCODE = obj.CUSTPARTBARCODE
                  .CUSTNAME = obj.CUSTNAME
                  .TOCUSTNAME = obj.TOCUSTNAME
                  .ORDREFERENCE = obj.ORDREFERENCE
                  .YOURORDLINE = obj.YOURORDLINE
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .NUMPACK = obj.NUMPACK
                  .PACKCODE = obj.PACKCODE
                  .CARTONNUM = obj.CARTONNUM
                  .ORDNAME = obj.ORDNAME
                  .OLINE = obj.OLINE
                  .PALLETNAME = obj.PALLETNAME
                  .DATECODE = obj.DATECODE
                  .DUEDATEOI = obj.DUEDATEOI
                  .FLAG = obj.FLAG
                  .CHECKING = obj.CHECKING
                  .IVNUM = obj.IVNUM
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .DSTCODE = obj.DSTCODE
                  .CODEDES = obj.CODEDES
                  .TOWARHSNAME = obj.TOWARHSNAME
                  .TOLOCNAME = obj.TOLOCNAME
                  .TOPALLETNAME = obj.TOPALLETNAME
                  .ONLOAN = obj.ONLOAN
                  .BUDCODE = obj.BUDCODE
                  .COSTCNAME = obj.COSTCNAME
                  .EXCH = obj.EXCH
                  .TRANSREFERENCE = obj.TRANSREFERENCE
                  .PNUMPACK = obj.PNUMPACK
                  .MPARTNAME = obj.MPARTNAME
                  .MPARTDES = obj.MPARTDES
                  .MMPARTNAME = obj.MMPARTNAME
                  .ANALYSISVALID = obj.ANALYSISVALID
                  .ANALYSISNOTVALID = obj.ANALYSISNOTVALID
                  .VATFLAG = obj.VATFLAG
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDER_D(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDER_D as TRANSORDER_D in value
              If _TRANSORDER_D.Equals(trycast(obj,TRANSORDER_D)) Then
                  value.remove(_TRANSORDER_D)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDER_D
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetCQUANT As Boolean = Boolean.FalseString
        
        Private _CQUANT As Decimal
        
        Private _PQUANT As Decimal
        
        Private _IsSetSETFLAG As Boolean = Boolean.FalseString
        
        Private _SETFLAG As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _MINPRICE As Decimal
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _IsSetBARCODE As Boolean = Boolean.FalseString
        
        Private _BARCODE As String
        
        Private _REVNUM As String
        
        Private _IsSetREVNAME As Boolean = Boolean.FalseString
        
        Private _REVNAME As String
        
        Private _IsSetCUSTPARTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTPARTNAME As String
        
        Private _IsSetCUSTPARTBARCODE As Boolean = Boolean.FalseString
        
        Private _CUSTPARTBARCODE As String
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetTOCUSTNAME As Boolean = Boolean.FalseString
        
        Private _TOCUSTNAME As String
        
        Private _ORDREFERENCE As String
        
        Private _YOURORDLINE As Long
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _IsSetPACKCODE As Boolean = Boolean.FalseString
        
        Private _PACKCODE As String
        
        Private _IsSetCARTONNUM As Boolean = Boolean.FalseString
        
        Private _CARTONNUM As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetOLINE As Boolean = Boolean.FalseString
        
        Private _OLINE As Long
        
        Private _IsSetPALLETNAME As Boolean = Boolean.FalseString
        
        Private _PALLETNAME As String
        
        Private _DATECODE As String
        
        Private _DUEDATEOI As System.DateTimeOffset
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetCHECKING As Boolean = Boolean.FalseString
        
        Private _CHECKING As String
        
        Private _IVNUM As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _IsSetDSTCODE As Boolean = Boolean.FalseString
        
        Private _DSTCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetTOWARHSNAME As Boolean = Boolean.FalseString
        
        Private _TOWARHSNAME As String
        
        Private _IsSetTOLOCNAME As Boolean = Boolean.FalseString
        
        Private _TOLOCNAME As String
        
        Private _IsSetTOPALLETNAME As Boolean = Boolean.FalseString
        
        Private _TOPALLETNAME As String
        
        Private _IsSetONLOAN As Boolean = Boolean.FalseString
        
        Private _ONLOAN As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _IsSetTRANSREFERENCE As Boolean = Boolean.FalseString
        
        Private _TRANSREFERENCE As String
        
        Private _PNUMPACK As Long
        
        Private _IsSetMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MPARTNAME As String
        
        Private _MPARTDES As String
        
        Private _IsSetMMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MMPARTNAME As String
        
        Private _ANALYSISVALID As String
        
        Private _ANALYSISNOTVALID As String
        
        Private _IsSetVATFLAG As Boolean = Boolean.FalseString
        
        Private _VATFLAG As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetTRANS As Boolean = Boolean.FalseString
        
        Private _TRANS As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Private _DOCUMENTSTOTAL_SUBFORM As QUERY_DOCUMENTSTOTAL
        
        Private _SERNTRANS_SUBFORM As QUERY_SERNTRANS
        
        Private _OPENSERNUM_SUBFORM As QUERY_OPENSERNUM
        
        Private _PARTWARHSBAL_SUBFORM As QUERY_PARTWARHSBAL
        
        Private _PARTBALANCE_SUBFORM As QUERY_PARTBALANCE
        
        Private _LASTCUSTPARTSALES_SUBFORM As QUERY_LASTCUSTPARTSALES
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _TRANSCONTACTS_SUBFORM As QUERY_TRANSCONTACTS
        
        Private _TRANSLABANALYSES_SUBFORM As QUERY_TRANSLABANALYSES
        
        Private _TRANSDSIGN_SUBFORM As QUERY_TRANSDSIGN
        
        Private _TRANSIV_D_SUBFORM As QUERY_TRANSIV_D
        
        Private _WTASKTRANSLINK_SUBFORM As QUERY_WTASKTRANSLINK
        
        Private _TRANSORDERINTRASTAT_SUBFORM As QUERY_TRANSORDERINTRASTAT
        
        Private _TRANSORDERTEXT_SUBFORM As QUERY_TRANSORDERTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Document Total"))
            ChildQuery.add(1, new oNavigation("Serial Numbers in Transaction"))
            ChildQuery.add(2, new oNavigation("Auto Recording of Serial Nos."))
            ChildQuery.add(3, new oNavigation("Available Inventory in Warehouse"))
            ChildQuery.add(4, new oNavigation("Inventory for Part"))
            ChildQuery.add(5, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(6, new oNavigation("Projects/Accounts"))
            ChildQuery.add(7, new oNavigation("Calls to Cust for Clarification"))
            ChildQuery.add(8, new oNavigation("Analysis Results"))
            ChildQuery.add(9, new oNavigation("Electronic Signature"))
            ChildQuery.add(10, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(11, new oNavigation("Warehouse Tasks for Line Item"))
            ChildQuery.add(12, new oNavigation("Intrastat Definitions"))
            ChildQuery.add(13, new oNavigation("Line Items - Remarks"))
            _DOCUMENTSTOTAL_SUBFORM = new QUERY_DOCUMENTSTOTAL(me)
            _SERNTRANS_SUBFORM = new QUERY_SERNTRANS(me)
            _OPENSERNUM_SUBFORM = new QUERY_OPENSERNUM(me)
            _PARTWARHSBAL_SUBFORM = new QUERY_PARTWARHSBAL(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSCONTACTS_SUBFORM = new QUERY_TRANSCONTACTS(me)
            _TRANSLABANALYSES_SUBFORM = new QUERY_TRANSLABANALYSES(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _WTASKTRANSLINK_SUBFORM = new QUERY_WTASKTRANSLINK(me)
            _TRANSORDERINTRASTAT_SUBFORM = new QUERY_TRANSORDERINTRASTAT(me)
            _TRANSORDERTEXT_SUBFORM = new QUERY_TRANSORDERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCUMENTSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_SERNTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OPENSERNUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PARTWARHSBAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_TRANSCONTACTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_TRANSLABANALYSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_WTASKTRANSLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_TRANSORDERINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_TRANSORDERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Document Total"))
            ChildQuery.add(1, new oNavigation("Serial Numbers in Transaction"))
            ChildQuery.add(2, new oNavigation("Auto Recording of Serial Nos."))
            ChildQuery.add(3, new oNavigation("Available Inventory in Warehouse"))
            ChildQuery.add(4, new oNavigation("Inventory for Part"))
            ChildQuery.add(5, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(6, new oNavigation("Projects/Accounts"))
            ChildQuery.add(7, new oNavigation("Calls to Cust for Clarification"))
            ChildQuery.add(8, new oNavigation("Analysis Results"))
            ChildQuery.add(9, new oNavigation("Electronic Signature"))
            ChildQuery.add(10, new oNavigation("Invoices/Credit Memos for Item"))
            ChildQuery.add(11, new oNavigation("Warehouse Tasks for Line Item"))
            ChildQuery.add(12, new oNavigation("Intrastat Definitions"))
            ChildQuery.add(13, new oNavigation("Line Items - Remarks"))
            _DOCUMENTSTOTAL_SUBFORM = new QUERY_DOCUMENTSTOTAL(me)
            _SERNTRANS_SUBFORM = new QUERY_SERNTRANS(me)
            _OPENSERNUM_SUBFORM = new QUERY_OPENSERNUM(me)
            _PARTWARHSBAL_SUBFORM = new QUERY_PARTWARHSBAL(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _TRANSCONTACTS_SUBFORM = new QUERY_TRANSCONTACTS(me)
            _TRANSLABANALYSES_SUBFORM = new QUERY_TRANSLABANALYSES(me)
            _TRANSDSIGN_SUBFORM = new QUERY_TRANSDSIGN(me)
            _TRANSIV_D_SUBFORM = new QUERY_TRANSIV_D(me)
            _WTASKTRANSLINK_SUBFORM = new QUERY_WTASKTRANSLINK(me)
            _TRANSORDERINTRASTAT_SUBFORM = new QUERY_TRANSORDERINTRASTAT(me)
            _TRANSORDERTEXT_SUBFORM = new QUERY_TRANSORDERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCUMENTSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_SERNTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OPENSERNUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PARTWARHSBAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_TRANSCONTACTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_TRANSLABANALYSES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_TRANSDSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_TRANSIV_D_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_WTASKTRANSLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_TRANSORDERINTRASTAT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_TRANSORDERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Document Total", _DOCUMENTSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Serial Numbers in Transaction", _SERNTRANS_SUBFORM))
                   .add(2, new oNavigation("Auto Recording of Serial Nos.", _OPENSERNUM_SUBFORM))
                   .add(3, new oNavigation("Available Inventory in Warehouse", _PARTWARHSBAL_SUBFORM))
                   .add(4, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(5, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(6, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Analysis Results", _TRANSLABANALYSES_SUBFORM))
                   .add(9, new oNavigation("Electronic Signature", _TRANSDSIGN_SUBFORM))
                   .add(10, new oNavigation("Invoices/Credit Memos for Item", _TRANSIV_D_SUBFORM))
                   .add(11, new oNavigation("Warehouse Tasks for Line Item", _WTASKTRANSLINK_SUBFORM))
                   .add(12, new oNavigation("Intrastat Definitions", _TRANSORDERINTRASTAT_SUBFORM))
                   .add(13, new oNavigation("Line Items - Remarks", _TRANSORDERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDER_D"
                else
                    return "TRANSORDER_D_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},TYPE={1}", _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(3),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Balance to Ship"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(10),  _
         twodBarcode("CQUANT")>  _
        Public Property CQUANT() As nullable(of decimal)
            Get
                return _CQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Balance to Ship", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCQUANT = True
                If loading Then
                  _CQUANT = Value
                Else
                    if not _CQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("PQUANT")>  _
        Public Property PQUANT() As nullable(of decimal)
            Get
                return _PQUANT
            End Get
            Set
                if not(value is nothing) then
                  _PQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approve"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         twodBarcode("SETFLAG")>  _
        Public Property SETFLAG() As String
            Get
                return _SETFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Approve", value, "^.{0,1}$") then Exit Property
                _IsSetSETFLAG = True
                If loading Then
                  _SETFLAG = Value
                Else
                    if not _SETFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SETFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SETFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(16),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(19),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Item Currency"),  _
         Pos(22),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Item Currency"),  _
         Pos(23),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Item Currency"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("MINPRICE")>  _
        Public Property MINPRICE() As nullable(of decimal)
            Get
                return _MINPRICE
            End Get
            Set
                if not(value is nothing) then
                  _MINPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(29),  _
         Mandatory(true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order/Lot", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(31),  _
         twodBarcode("BARCODE")>  _
        Public Property BARCODE() As String
            Get
                return _BARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetBARCODE = True
                If loading Then
                  _BARCODE = Value
                Else
                    if not _BARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("BOM Revision Number"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("REVNUM")>  _
        Public Property REVNUM() As String
            Get
                return _REVNUM
            End Get
            Set
                if not(value is nothing) then
                  _REVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(33),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Revision No.", value, "^.{0,10}$") then Exit Property
                _IsSetREVNAME = True
                If loading Then
                  _REVNAME = Value
                Else
                    if not _REVNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REVNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REVNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust. Part Number"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(34),  _
         twodBarcode("CUSTPARTNAME")>  _
        Public Property CUSTPARTNAME() As String
            Get
                return _CUSTPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust. Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetCUSTPARTNAME = True
                If loading Then
                  _CUSTPARTNAME = Value
                Else
                    if not _CUSTPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Bar Code"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(35),  _
         twodBarcode("CUSTPARTBARCODE")>  _
        Public Property CUSTPARTBARCODE() As String
            Get
                return _CUSTPARTBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTPARTBARCODE = True
                If loading Then
                  _CUSTPARTBARCODE = Value
                Else
                    if not _CUSTPARTBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("From Status"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(36),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("From Status", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Status"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(37),  _
         Mandatory(true),  _
         twodBarcode("TOCUSTNAME")>  _
        Public Property TOCUSTNAME() As String
            Get
                return _TOCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Status", value, "^.{0,16}$") then Exit Property
                _IsSetTOCUSTNAME = True
                If loading Then
                  _TOCUSTNAME = Value
                Else
                    if not _TOCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Order"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("ORDREFERENCE")>  _
        Public Property ORDREFERENCE() As String
            Get
                return _ORDREFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _ORDREFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Order Ln"),  _
         nType("Edm.Int64"),  _
         tab("Cust's Order Ln"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("YOURORDLINE")>  _
        Public Property YOURORDLINE() As nullable (of int64)
            Get
                return _YOURORDLINE
            End Get
            Set
                if not(value is nothing) then
                  _YOURORDLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Cust's Order Ln"),  _
         Pos(40),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Qty (Factory Units)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Cust's Order Ln"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Cust's Order Ln"),  _
         Pos(50),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Packing Crates (No.)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Cust's Order Ln"),  _
         Pos(52),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Type Code", value, "^.{0,2}$") then Exit Property
                _IsSetPACKCODE = True
                If loading Then
                  _PACKCODE = Value
                Else
                    if not _PACKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Number"),  _
         nType("Edm.String"),  _
         tab("Cust's Order Ln"),  _
         Pos(55),  _
         twodBarcode("CARTONNUM")>  _
        Public Property CARTONNUM() As String
            Get
                return _CARTONNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Number", value, "^.{0,8}$") then Exit Property
                _IsSetCARTONNUM = True
                If loading Then
                  _CARTONNUM = Value
                Else
                    if not _CARTONNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CARTONNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CARTONNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Cust's Order Ln"),  _
         Pos(56),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ln"),  _
         nType("Edm.Int64"),  _
         tab("Cust's Order Ln"),  _
         Pos(57),  _
         twodBarcode("OLINE")>  _
        Public Property OLINE() As nullable (of int64)
            Get
                return _OLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ln", value, "^[0-9\-]+$") then Exit Property
                _IsSetOLINE = True
                If loading Then
                  _OLINE = Value
                Else
                    if not _OLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Pallet"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(58),  _
         twodBarcode("PALLETNAME")>  _
        Public Property PALLETNAME() As String
            Get
                return _PALLETNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Pallet", value, "^.{0,16}$") then Exit Property
                _IsSetPALLETNAME = True
                If loading Then
                  _PALLETNAME = Value
                Else
                    if not _PALLETNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PALLETNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PALLETNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Inventory Date Code"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(59),  _
         [ReadOnly](true),  _
         twodBarcode("DATECODE")>  _
        Public Property DATECODE() As String
            Get
                return _DATECODE
            End Get
            Set
                if not(value is nothing) then
                  _DATECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Pallet"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATEOI")>  _
        Public Property DUEDATEOI() As nullable (of DateTimeOffset)
            Get
                return _DUEDATEOI
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATEOI = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(63),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Checking"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(64),  _
         twodBarcode("CHECKING")>  _
        Public Property CHECKING() As String
            Get
                return _CHECKING
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Checking", value, "^.{0,1}$") then Exit Property
                _IsSetCHECKING = True
                If loading Then
                  _CHECKING = Value
                Else
                    if not _CHECKING = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CHECKING", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CHECKING = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(70),  _
         Mandatory(true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Pallet"),  _
         Pos(72),  _
         Mandatory(true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(73),  _
         twodBarcode("DSTCODE")>  _
        Public Property DSTCODE() As String
            Get
                return _DSTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDSTCODE = True
                If loading Then
                  _DSTCODE = Value
                Else
                    if not _DSTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DSTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DSTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(74),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Warehouse"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(75),  _
         twodBarcode("TOWARHSNAME")>  _
        Public Property TOWARHSNAME() As String
            Get
                return _TOWARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetTOWARHSNAME = True
                If loading Then
                  _TOWARHSNAME = Value
                Else
                    if not _TOWARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOWARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOWARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(76),  _
         twodBarcode("TOLOCNAME")>  _
        Public Property TOLOCNAME() As String
            Get
                return _TOLOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetTOLOCNAME = True
                If loading Then
                  _TOLOCNAME = Value
                Else
                    if not _TOLOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOLOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOLOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Pallet"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(77),  _
         twodBarcode("TOPALLETNAME")>  _
        Public Property TOPALLETNAME() As String
            Get
                return _TOPALLETNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Pallet", value, "^.{0,16}$") then Exit Property
                _IsSetTOPALLETNAME = True
                If loading Then
                  _TOPALLETNAME = Value
                Else
                    if not _TOPALLETNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPALLETNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPALLETNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("On Loan"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(78),  _
         twodBarcode("ONLOAN")>  _
        Public Property ONLOAN() As String
            Get
                return _ONLOAN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("On Loan", value, "^.{0,1}$") then Exit Property
                _IsSetONLOAN = True
                If loading Then
                  _ONLOAN = Value
                Else
                    if not _ONLOAN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ONLOAN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ONLOAN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(79),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(80),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Exchange Rate"),  _
         Pos(90),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line Reference"),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(95),  _
         twodBarcode("TRANSREFERENCE")>  _
        Public Property TRANSREFERENCE() As String
            Get
                return _TRANSREFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line Reference", value, "^.{0,16}$") then Exit Property
                _IsSetTRANSREFERENCE = True
                If loading Then
                  _TRANSREFERENCE = Value
                Else
                    if not _TRANSREFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSREFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSREFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Balance of Crates"),  _
         nType("Edm.Int64"),  _
         tab("Exchange Rate"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("PNUMPACK")>  _
        Public Property PNUMPACK() As nullable (of int64)
            Get
                return _PNUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _PNUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(400),  _
         twodBarcode("MPARTNAME")>  _
        Public Property MPARTNAME() As String
            Get
                return _MPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetMPARTNAME = True
                If loading Then
                  _MPARTNAME = Value
                Else
                    if not _MPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(401),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTDES")>  _
        Public Property MPARTDES() As String
            Get
                return _MPARTDES
            End Get
            Set
                if not(value is nothing) then
                  _MPARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part by Base Product"),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(402),  _
         twodBarcode("MMPARTNAME")>  _
        Public Property MMPARTNAME() As String
            Get
                return _MMPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part by Base Product", value, "^.{0,15}$") then Exit Property
                _IsSetMMPARTNAME = True
                If loading Then
                  _MMPARTNAME = Value
                Else
                    if not _MMPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MMPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MMPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Acceptable"),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(410),  _
         [ReadOnly](true),  _
         twodBarcode("ANALYSISVALID")>  _
        Public Property ANALYSISVALID() As String
            Get
                return _ANALYSISVALID
            End Get
            Set
                if not(value is nothing) then
                  _ANALYSISVALID = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unacceptable"),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(420),  _
         [ReadOnly](true),  _
         twodBarcode("ANALYSISNOTVALID")>  _
        Public Property ANALYSISNOTVALID() As String
            Get
                return _ANALYSISNOTVALID
            End Get
            Set
                if not(value is nothing) then
                  _ANALYSISNOTVALID = Value
                end if
            End Set
        End Property
        
        <DisplayName("VAT?"),  _
         nType("Edm.String"),  _
         tab("VAT?"),  _
         Pos(430),  _
         twodBarcode("VATFLAG")>  _
        Public Property VATFLAG() As String
            Get
                return _VATFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("VAT?", value, "^.{0,1}$") then Exit Property
                _IsSetVATFLAG = True
                If loading Then
                  _VATFLAG = Value
                Else
                    if not _VATFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VATFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VATFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("VAT?"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("VAT?"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Transaction (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetTRANS = True
                If loading Then
                  _TRANS = Value
                Else
                    if not _TRANS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("VAT?"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCUMENTSTOTAL_SUBFORM() As QUERY_DOCUMENTSTOTAL
            Get
                return _DOCUMENTSTOTAL_SUBFORM
            End Get
            Set
                _DOCUMENTSTOTAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SERNTRANS_SUBFORM() As QUERY_SERNTRANS
            Get
                return _SERNTRANS_SUBFORM
            End Get
            Set
                _SERNTRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OPENSERNUM_SUBFORM() As QUERY_OPENSERNUM
            Get
                return _OPENSERNUM_SUBFORM
            End Get
            Set
                _OPENSERNUM_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTWARHSBAL_SUBFORM() As QUERY_PARTWARHSBAL
            Get
                return _PARTWARHSBAL_SUBFORM
            End Get
            Set
                _PARTWARHSBAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTBALANCE_SUBFORM() As QUERY_PARTBALANCE
            Get
                return _PARTBALANCE_SUBFORM
            End Get
            Set
                _PARTBALANCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTCUSTPARTSALES_SUBFORM() As QUERY_LASTCUSTPARTSALES
            Get
                return _LASTCUSTPARTSALES_SUBFORM
            End Get
            Set
                _LASTCUSTPARTSALES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSCONTACTS_SUBFORM() As QUERY_TRANSCONTACTS
            Get
                return _TRANSCONTACTS_SUBFORM
            End Get
            Set
                _TRANSCONTACTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSLABANALYSES_SUBFORM() As QUERY_TRANSLABANALYSES
            Get
                return _TRANSLABANALYSES_SUBFORM
            End Get
            Set
                _TRANSLABANALYSES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSDSIGN_SUBFORM() As QUERY_TRANSDSIGN
            Get
                return _TRANSDSIGN_SUBFORM
            End Get
            Set
                _TRANSDSIGN_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSIV_D_SUBFORM() As QUERY_TRANSIV_D
            Get
                return _TRANSIV_D_SUBFORM
            End Get
            Set
                _TRANSIV_D_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property WTASKTRANSLINK_SUBFORM() As QUERY_WTASKTRANSLINK
            Get
                return _WTASKTRANSLINK_SUBFORM
            End Get
            Set
                _WTASKTRANSLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDERINTRASTAT_SUBFORM() As QUERY_TRANSORDERINTRASTAT
            Get
                return _TRANSORDERINTRASTAT_SUBFORM
            End Get
            Set
                _TRANSORDERINTRASTAT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSORDERTEXT_SUBFORM() As QUERY_TRANSORDERTEXT
            Get
                return _TRANSORDERTEXT_SUBFORM
            End Get
            Set
                _TRANSORDERTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetCQUANT then
              if f then
                  jw.WriteRaw(", ""CQUANT"": ")
              else
                  jw.WriteRaw("""CQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.CQUANT)
            end if
            if _IsSetSETFLAG then
              if f then
                  jw.WriteRaw(", ""SETFLAG"": ")
              else
                  jw.WriteRaw("""SETFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.SETFLAG)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetBARCODE then
              if f then
                  jw.WriteRaw(", ""BARCODE"": ")
              else
                  jw.WriteRaw("""BARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BARCODE)
            end if
            if _IsSetREVNAME then
              if f then
                  jw.WriteRaw(", ""REVNAME"": ")
              else
                  jw.WriteRaw("""REVNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.REVNAME)
            end if
            if _IsSetCUSTPARTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTPARTNAME"": ")
              else
                  jw.WriteRaw("""CUSTPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTNAME)
            end if
            if _IsSetCUSTPARTBARCODE then
              if f then
                  jw.WriteRaw(", ""CUSTPARTBARCODE"": ")
              else
                  jw.WriteRaw("""CUSTPARTBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTBARCODE)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetTOCUSTNAME then
              if f then
                  jw.WriteRaw(", ""TOCUSTNAME"": ")
              else
                  jw.WriteRaw("""TOCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOCUSTNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetPACKCODE then
              if f then
                  jw.WriteRaw(", ""PACKCODE"": ")
              else
                  jw.WriteRaw("""PACKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKCODE)
            end if
            if _IsSetCARTONNUM then
              if f then
                  jw.WriteRaw(", ""CARTONNUM"": ")
              else
                  jw.WriteRaw("""CARTONNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CARTONNUM)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetOLINE then
              if f then
                  jw.WriteRaw(", ""OLINE"": ")
              else
                  jw.WriteRaw("""OLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.OLINE)
            end if
            if _IsSetPALLETNAME then
              if f then
                  jw.WriteRaw(", ""PALLETNAME"": ")
              else
                  jw.WriteRaw("""PALLETNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PALLETNAME)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetCHECKING then
              if f then
                  jw.WriteRaw(", ""CHECKING"": ")
              else
                  jw.WriteRaw("""CHECKING"": ")
                  f = true
              end if
              jw.WriteValue(me.CHECKING)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetDSTCODE then
              if f then
                  jw.WriteRaw(", ""DSTCODE"": ")
              else
                  jw.WriteRaw("""DSTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DSTCODE)
            end if
            if _IsSetTOWARHSNAME then
              if f then
                  jw.WriteRaw(", ""TOWARHSNAME"": ")
              else
                  jw.WriteRaw("""TOWARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOWARHSNAME)
            end if
            if _IsSetTOLOCNAME then
              if f then
                  jw.WriteRaw(", ""TOLOCNAME"": ")
              else
                  jw.WriteRaw("""TOLOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOLOCNAME)
            end if
            if _IsSetTOPALLETNAME then
              if f then
                  jw.WriteRaw(", ""TOPALLETNAME"": ")
              else
                  jw.WriteRaw("""TOPALLETNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPALLETNAME)
            end if
            if _IsSetONLOAN then
              if f then
                  jw.WriteRaw(", ""ONLOAN"": ")
              else
                  jw.WriteRaw("""ONLOAN"": ")
                  f = true
              end if
              jw.WriteValue(me.ONLOAN)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetTRANSREFERENCE then
              if f then
                  jw.WriteRaw(", ""TRANSREFERENCE"": ")
              else
                  jw.WriteRaw("""TRANSREFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSREFERENCE)
            end if
            if _IsSetMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MPARTNAME"": ")
              else
                  jw.WriteRaw("""MPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MPARTNAME)
            end if
            if _IsSetMMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MMPARTNAME"": ")
              else
                  jw.WriteRaw("""MMPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MMPARTNAME)
            end if
            if _IsSetVATFLAG then
              if f then
                  jw.WriteRaw(", ""VATFLAG"": ")
              else
                  jw.WriteRaw("""VATFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.VATFLAG)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetTRANS then
              if f then
                  jw.WriteRaw(", ""TRANS"": ")
              else
                  jw.WriteRaw("""TRANS"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANS)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
            if _DOCUMENTSTOTAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCUMENTSTOTAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCUMENTSTOTAL in _DOCUMENTSTOTAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCUMENTSTOTAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SERNTRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SERNTRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SERNTRANS in _SERNTRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SERNTRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OPENSERNUM_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OPENSERNUM_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OPENSERNUM in _OPENSERNUM_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OPENSERNUM_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTWARHSBAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTWARHSBAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTWARHSBAL in _PARTWARHSBAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTWARHSBAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTBALANCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTBALANCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTCUSTPARTSALES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTCUSTPARTSALES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSCONTACTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSCONTACTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSCONTACTS in _TRANSCONTACTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSCONTACTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSLABANALYSES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSLABANALYSES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSLABANALYSES in _TRANSLABANALYSES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSLABANALYSES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSDSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSDSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSIV_D_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSIV_D_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _WTASKTRANSLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", WTASKTRANSLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as WTASKTRANSLINK in _WTASKTRANSLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _WTASKTRANSLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDERINTRASTAT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDERINTRASTAT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDERINTRASTAT in _TRANSORDERINTRASTAT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDERINTRASTAT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSORDERTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSORDERTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSORDERTEXT in _TRANSORDERTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSORDERTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDER_D")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetCQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CQUANT")
              .WriteAttributeString("value", me.CQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSETFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SETFLAG")
              .WriteAttributeString("value", me.SETFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BARCODE")
              .WriteAttributeString("value", me.BARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREVNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REVNAME")
              .WriteAttributeString("value", me.REVNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTNAME")
              .WriteAttributeString("value", me.CUSTPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTBARCODE")
              .WriteAttributeString("value", me.CUSTPARTBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTOCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOCUSTNAME")
              .WriteAttributeString("value", me.TOCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPACKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKCODE")
              .WriteAttributeString("value", me.PACKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetCARTONNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CARTONNUM")
              .WriteAttributeString("value", me.CARTONNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OLINE")
              .WriteAttributeString("value", me.OLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPALLETNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PALLETNAME")
              .WriteAttributeString("value", me.PALLETNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCHECKING then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CHECKING")
              .WriteAttributeString("value", me.CHECKING)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetDSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DSTCODE")
              .WriteAttributeString("value", me.DSTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetTOWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOWARHSNAME")
              .WriteAttributeString("value", me.TOWARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetTOLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOLOCNAME")
              .WriteAttributeString("value", me.TOLOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetTOPALLETNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPALLETNAME")
              .WriteAttributeString("value", me.TOPALLETNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetONLOAN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ONLOAN")
              .WriteAttributeString("value", me.ONLOAN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetTRANSREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSREFERENCE")
              .WriteAttributeString("value", me.TRANSREFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MPARTNAME")
              .WriteAttributeString("value", me.MPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetMMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MMPARTNAME")
              .WriteAttributeString("value", me.MMPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetVATFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VATFLAG")
              .WriteAttributeString("value", me.VATFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTRANS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANS")
              .WriteAttributeString("value", me.TRANS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _DOCUMENTSTOTAL_SUBFORM.value.count > 0 then
              for each itm as DOCUMENTSTOTAL in _DOCUMENTSTOTAL_SUBFORM.Value
                itm.toXML(xw,"DOCUMENTSTOTAL_SUBFORM")
              next
            end if
            if _SERNTRANS_SUBFORM.value.count > 0 then
              for each itm as SERNTRANS in _SERNTRANS_SUBFORM.Value
                itm.toXML(xw,"SERNTRANS_SUBFORM")
              next
            end if
            if _OPENSERNUM_SUBFORM.value.count > 0 then
              for each itm as OPENSERNUM in _OPENSERNUM_SUBFORM.Value
                itm.toXML(xw,"OPENSERNUM_SUBFORM")
              next
            end if
            if _PARTWARHSBAL_SUBFORM.value.count > 0 then
              for each itm as PARTWARHSBAL in _PARTWARHSBAL_SUBFORM.Value
                itm.toXML(xw,"PARTWARHSBAL_SUBFORM")
              next
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.Value
                itm.toXML(xw,"PARTBALANCE_SUBFORM")
              next
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.Value
                itm.toXML(xw,"LASTCUSTPARTSALES_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _TRANSCONTACTS_SUBFORM.value.count > 0 then
              for each itm as TRANSCONTACTS in _TRANSCONTACTS_SUBFORM.Value
                itm.toXML(xw,"TRANSCONTACTS_SUBFORM")
              next
            end if
            if _TRANSLABANALYSES_SUBFORM.value.count > 0 then
              for each itm as TRANSLABANALYSES in _TRANSLABANALYSES_SUBFORM.Value
                itm.toXML(xw,"TRANSLABANALYSES_SUBFORM")
              next
            end if
            if _TRANSDSIGN_SUBFORM.value.count > 0 then
              for each itm as TRANSDSIGN in _TRANSDSIGN_SUBFORM.Value
                itm.toXML(xw,"TRANSDSIGN_SUBFORM")
              next
            end if
            if _TRANSIV_D_SUBFORM.value.count > 0 then
              for each itm as TRANSIV_D in _TRANSIV_D_SUBFORM.Value
                itm.toXML(xw,"TRANSIV_D_SUBFORM")
              next
            end if
            if _WTASKTRANSLINK_SUBFORM.value.count > 0 then
              for each itm as WTASKTRANSLINK in _WTASKTRANSLINK_SUBFORM.Value
                itm.toXML(xw,"WTASKTRANSLINK_SUBFORM")
              next
            end if
            if _TRANSORDERINTRASTAT_SUBFORM.value.count > 0 then
              for each itm as TRANSORDERINTRASTAT in _TRANSORDERINTRASTAT_SUBFORM.Value
                itm.toXML(xw,"TRANSORDERINTRASTAT_SUBFORM")
              next
            end if
            if _TRANSORDERTEXT_SUBFORM.value.count > 0 then
              for each itm as TRANSORDERTEXT in _TRANSORDERTEXT_SUBFORM.Value
                itm.toXML(xw,"TRANSORDERTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDER_D = JsonConvert.DeserializeObject(Of TRANSORDER_D)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _CQUANT = .CQUANT
                  _PQUANT = .PQUANT
                  _SETFLAG = .SETFLAG
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _MINPRICE = .MINPRICE
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _BARCODE = .BARCODE
                  _REVNUM = .REVNUM
                  _REVNAME = .REVNAME
                  _CUSTPARTNAME = .CUSTPARTNAME
                  _CUSTPARTBARCODE = .CUSTPARTBARCODE
                  _CUSTNAME = .CUSTNAME
                  _TOCUSTNAME = .TOCUSTNAME
                  _ORDREFERENCE = .ORDREFERENCE
                  _YOURORDLINE = .YOURORDLINE
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _NUMPACK = .NUMPACK
                  _PACKCODE = .PACKCODE
                  _CARTONNUM = .CARTONNUM
                  _ORDNAME = .ORDNAME
                  _OLINE = .OLINE
                  _PALLETNAME = .PALLETNAME
                  _DATECODE = .DATECODE
                  _DUEDATEOI = .DUEDATEOI
                  _FLAG = .FLAG
                  _CHECKING = .CHECKING
                  _IVNUM = .IVNUM
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _DSTCODE = .DSTCODE
                  _CODEDES = .CODEDES
                  _TOWARHSNAME = .TOWARHSNAME
                  _TOLOCNAME = .TOLOCNAME
                  _TOPALLETNAME = .TOPALLETNAME
                  _ONLOAN = .ONLOAN
                  _BUDCODE = .BUDCODE
                  _COSTCNAME = .COSTCNAME
                  _EXCH = .EXCH
                  _TRANSREFERENCE = .TRANSREFERENCE
                  _PNUMPACK = .PNUMPACK
                  _MPARTNAME = .MPARTNAME
                  _MPARTDES = .MPARTDES
                  _MMPARTNAME = .MMPARTNAME
                  _ANALYSISVALID = .ANALYSISVALID
                  _ANALYSISNOTVALID = .ANALYSISNOTVALID
                  _VATFLAG = .VATFLAG
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSORDER_D
        
        DOCUMENTSTOTAL = 0
        
        SERNTRANS = 1
        
        OPENSERNUM = 2
        
        PARTWARHSBAL = 3
        
        PARTBALANCE = 4
        
        LASTCUSTPARTSALES = 5
        
        PROJLINK = 6
        
        TRANSCONTACTS = 7
        
        TRANSLABANALYSES = 8
        
        TRANSDSIGN = 9
        
        TRANSIV_D = 10
        
        WTASKTRANSLINK = 11
        
        TRANSORDERINTRASTAT = 12
        
        TRANSORDERTEXT = 13
    End Enum
    
    <QueryTitle("Document Total")>  _
    Public Class QUERY_DOCUMENTSTOTAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTSTOTAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTSTOTAL)
            _Parent = nothing
            _Name = "DOCUMENTSTOTAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTSTOTAL)
            _Parent = Parent
            _name = "DOCUMENTSTOTAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTSTOTAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTSTOTAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTSTOTAL As DOCUMENTSTOTAL In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTSTOTAL)(stream.ReadToEnd).Value
              With _DOCUMENTSTOTAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTSTOTAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSTOTAL = JsonConvert.DeserializeObject(Of DOCUMENTSTOTAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTSTOTAL)
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .CHARTOTPRICE = obj.CHARTOTPRICE
                  .DETAILS = obj.DETAILS
                  .STATDES = obj.STATDES
                  .DOCNO = obj.DOCNO
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTSTOTAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTSTOTAL as DOCUMENTSTOTAL in value
              If _DOCUMENTSTOTAL.Equals(trycast(obj,DOCUMENTSTOTAL)) Then
                  value.remove(_DOCUMENTSTOTAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTSTOTAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _CHARTOTPRICE As String
        
        Private _DETAILS As String
        
        Private _STATDES As String
        
        Private _DOCNO As String
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTSTOTAL"
                else
                    return "DOCUMENTSTOTAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Bef. Disc."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CHARTOTPRICE")>  _
        Public Property CHARTOTPRICE() As String
            Get
                return _CHARTOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _CHARTOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Type"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTSTOTAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSTOTAL = JsonConvert.DeserializeObject(Of DOCUMENTSTOTAL)(e.StreamReader.ReadToEnd)
                With obj
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _CHARTOTPRICE = .CHARTOTPRICE
                  _DETAILS = .DETAILS
                  _STATDES = .STATDES
                  _DOCNO = .DOCNO
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Serial Numbers in Transaction")>  _
    Public Class QUERY_SERNTRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SERNTRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SERNTRANS)
            _Parent = nothing
            _Name = "SERNTRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SERNTRANS)
            _Parent = Parent
            _name = "SERNTRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SERNTRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SERNTRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SERNTRANS As SERNTRANS In JsonConvert.DeserializeObject(Of QUERY_SERNTRANS)(stream.ReadToEnd).Value
              With _SERNTRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SERNTRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SERNTRANS = JsonConvert.DeserializeObject(Of SERNTRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SERNTRANS)
                  .SERNUM = obj.SERNUM
                  .PARENTSERNUM = obj.PARENTSERNUM
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .INCUSENUM = obj.INCUSENUM
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .SERN = obj.SERN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SERNTRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SERNTRANS as SERNTRANS in value
              If _SERNTRANS.Equals(trycast(obj,SERNTRANS)) Then
                  value.remove(_SERNTRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SERNTRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSERNUM As Boolean = Boolean.FalseString
        
        Private _SERNUM As String
        
        Private _IsSetPARENTSERNUM As Boolean = Boolean.FalseString
        
        Private _PARENTSERNUM As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetINCUSENUM As Boolean = Boolean.FalseString
        
        Private _INCUSENUM As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetSERN As Boolean = Boolean.FalseString
        
        Private _SERN As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SERNTRANS"
                else
                    return "SERNTRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SERN={0}", _
                  string.format("{0}",SERN) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Serial Number"),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(10),  _
         twodBarcode("SERNUM")>  _
        Public Property SERNUM() As String
            Get
                return _SERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number", value, "^.{0,20}$") then Exit Property
                _IsSetSERNUM = True
                If loading Then
                  _SERNUM = Value
                Else
                    if not _SERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Parent's Serial No."),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(20),  _
         twodBarcode("PARENTSERNUM")>  _
        Public Property PARENTSERNUM() As String
            Get
                return _PARENTSERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Parent's Serial No.", value, "^.{0,20}$") then Exit Property
                _IsSetPARENTSERNUM = True
                If loading Then
                  _PARENTSERNUM = Value
                Else
                    if not _PARENTSERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARENTSERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARENTSERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Parent Part Number"),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(22),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Parent Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Stamp"),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(26),  _
         twodBarcode("INCUSENUM")>  _
        Public Property INCUSENUM() As String
            Get
                return _INCUSENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Stamp", value, "^.{0,16}$") then Exit Property
                _IsSetINCUSENUM = True
                If loading Then
                  _INCUSENUM = Value
                Else
                    if not _INCUSENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INCUSENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INCUSENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Serial Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Serial Number"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Serial Number"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("SERN")>  _
        Public Property SERN() As nullable (of int64)
            Get
                return _SERN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSERN = True
                If loading Then
                  _SERN = Value
                Else
                    if not _SERN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSERNUM then
              if f then
                  jw.WriteRaw(", ""SERNUM"": ")
              else
                  jw.WriteRaw("""SERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.SERNUM)
            end if
            if _IsSetPARENTSERNUM then
              if f then
                  jw.WriteRaw(", ""PARENTSERNUM"": ")
              else
                  jw.WriteRaw("""PARENTSERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PARENTSERNUM)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetINCUSENUM then
              if f then
                  jw.WriteRaw(", ""INCUSENUM"": ")
              else
                  jw.WriteRaw("""INCUSENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.INCUSENUM)
            end if
            if _IsSetSERN then
              if f then
                  jw.WriteRaw(", ""SERN"": ")
              else
                  jw.WriteRaw("""SERN"": ")
                  f = true
              end if
              jw.WriteValue(me.SERN)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SERNTRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERN")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERNUM")
              .WriteAttributeString("value", me.SERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPARENTSERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARENTSERNUM")
              .WriteAttributeString("value", me.PARENTSERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetINCUSENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INCUSENUM")
              .WriteAttributeString("value", me.INCUSENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERN")
              .WriteAttributeString("value", me.SERN)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SERNTRANS = JsonConvert.DeserializeObject(Of SERNTRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _SERNUM = .SERNUM
                  _PARENTSERNUM = .PARENTSERNUM
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _INCUSENUM = .INCUSENUM
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _SERN = .SERN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Auto Recording of Serial Nos.")>  _
    Public Class QUERY_OPENSERNUM
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OPENSERNUM)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OPENSERNUM)
            _Parent = nothing
            _Name = "OPENSERNUM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OPENSERNUM)
            _Parent = Parent
            _name = "OPENSERNUM_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OPENSERNUM)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OPENSERNUM)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OPENSERNUM As OPENSERNUM In JsonConvert.DeserializeObject(Of QUERY_OPENSERNUM)(stream.ReadToEnd).Value
              With _OPENSERNUM
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OPENSERNUM)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OPENSERNUM = JsonConvert.DeserializeObject(Of OPENSERNUM)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OPENSERNUM)
                  .OPENFLAG = obj.OPENFLAG
                  .PREFIX = obj.PREFIX
                  .FROMNUMA = obj.FROMNUMA
                  .TONUMA = obj.TONUMA
                  .SIZ = obj.SIZ
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OPENSERNUM(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OPENSERNUM as OPENSERNUM in value
              If _OPENSERNUM.Equals(trycast(obj,OPENSERNUM)) Then
                  value.remove(_OPENSERNUM)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OPENSERNUM
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetOPENFLAG As Boolean = Boolean.FalseString
        
        Private _OPENFLAG As String
        
        Private _IsSetPREFIX As Boolean = Boolean.FalseString
        
        Private _PREFIX As String
        
        Private _IsSetFROMNUMA As Boolean = Boolean.FalseString
        
        Private _FROMNUMA As String
        
        Private _IsSetTONUMA As Boolean = Boolean.FalseString
        
        Private _TONUMA As String
        
        Private _IsSetSIZ As Boolean = Boolean.FalseString
        
        Private _SIZ As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OPENSERNUM"
                else
                    return "OPENSERNUM_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0}", _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open New Serial Nos?"),  _
         nType("Edm.String"),  _
         tab("Open New Serial Nos?"),  _
         Pos(40),  _
         twodBarcode("OPENFLAG")>  _
        Public Property OPENFLAG() As String
            Get
                return _OPENFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Open New Serial Nos?", value, "^.{0,1}$") then Exit Property
                _IsSetOPENFLAG = True
                If loading Then
                  _OPENFLAG = Value
                Else
                    if not _OPENFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OPENFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OPENFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Prefix"),  _
         nType("Edm.String"),  _
         tab("Open New Serial Nos?"),  _
         Pos(50),  _
         twodBarcode("PREFIX")>  _
        Public Property PREFIX() As String
            Get
                return _PREFIX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Prefix", value, "^.{0,12}$") then Exit Property
                _IsSetPREFIX = True
                If loading Then
                  _PREFIX = Value
                Else
                    if not _PREFIX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREFIX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREFIX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("From Serial Number"),  _
         nType("Edm.String"),  _
         tab("Open New Serial Nos?"),  _
         Pos(52),  _
         twodBarcode("FROMNUMA")>  _
        Public Property FROMNUMA() As String
            Get
                return _FROMNUMA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("From Serial Number", value, "^.{0,8}$") then Exit Property
                _IsSetFROMNUMA = True
                If loading Then
                  _FROMNUMA = Value
                Else
                    if not _FROMNUMA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMNUMA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMNUMA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Serial Number"),  _
         nType("Edm.String"),  _
         tab("Open New Serial Nos?"),  _
         Pos(54),  _
         twodBarcode("TONUMA")>  _
        Public Property TONUMA() As String
            Get
                return _TONUMA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Serial Number", value, "^.{0,8}$") then Exit Property
                _IsSetTONUMA = True
                If loading Then
                  _TONUMA = Value
                Else
                    if not _TONUMA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TONUMA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TONUMA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Serial Number Length"),  _
         nType("Edm.Int64"),  _
         tab("Open New Serial Nos?"),  _
         Pos(60),  _
         twodBarcode("SIZ")>  _
        Public Property SIZ() As nullable (of int64)
            Get
                return _SIZ
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Serial Number Length", value, "^[0-9\-]+$") then Exit Property
                _IsSetSIZ = True
                If loading Then
                  _SIZ = Value
                Else
                    if not _SIZ = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZ", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZ = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Open New Serial Nos?"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetOPENFLAG then
              if f then
                  jw.WriteRaw(", ""OPENFLAG"": ")
              else
                  jw.WriteRaw("""OPENFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.OPENFLAG)
            end if
            if _IsSetPREFIX then
              if f then
                  jw.WriteRaw(", ""PREFIX"": ")
              else
                  jw.WriteRaw("""PREFIX"": ")
                  f = true
              end if
              jw.WriteValue(me.PREFIX)
            end if
            if _IsSetFROMNUMA then
              if f then
                  jw.WriteRaw(", ""FROMNUMA"": ")
              else
                  jw.WriteRaw("""FROMNUMA"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMNUMA)
            end if
            if _IsSetTONUMA then
              if f then
                  jw.WriteRaw(", ""TONUMA"": ")
              else
                  jw.WriteRaw("""TONUMA"": ")
                  f = true
              end if
              jw.WriteValue(me.TONUMA)
            end if
            if _IsSetSIZ then
              if f then
                  jw.WriteRaw(", ""SIZ"": ")
              else
                  jw.WriteRaw("""SIZ"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZ)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OPENSERNUM")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetOPENFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OPENFLAG")
              .WriteAttributeString("value", me.OPENFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPREFIX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREFIX")
              .WriteAttributeString("value", me.PREFIX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetFROMNUMA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMNUMA")
              .WriteAttributeString("value", me.FROMNUMA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetTONUMA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TONUMA")
              .WriteAttributeString("value", me.TONUMA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetSIZ then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZ")
              .WriteAttributeString("value", me.SIZ)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OPENSERNUM = JsonConvert.DeserializeObject(Of OPENSERNUM)(e.StreamReader.ReadToEnd)
                With obj
                  _OPENFLAG = .OPENFLAG
                  _PREFIX = .PREFIX
                  _FROMNUMA = .FROMNUMA
                  _TONUMA = .TONUMA
                  _SIZ = .SIZ
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Available Inventory in Warehouse")>  _
    Public Class QUERY_PARTWARHSBAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTWARHSBAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTWARHSBAL)
            _Parent = nothing
            _Name = "PARTWARHSBAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTWARHSBAL)
            _Parent = Parent
            _name = "PARTWARHSBAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTWARHSBAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTWARHSBAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTWARHSBAL As PARTWARHSBAL In JsonConvert.DeserializeObject(Of QUERY_PARTWARHSBAL)(stream.ReadToEnd).Value
              With _PARTWARHSBAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTWARHSBAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTWARHSBAL = JsonConvert.DeserializeObject(Of PARTWARHSBAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTWARHSBAL)
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTNAME = obj.CUSTNAME
                  .LOCNAME = obj.LOCNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTWARHSBAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTWARHSBAL as PARTWARHSBAL in value
              If _PARTWARHSBAL.Equals(trycast(obj,PARTWARHSBAL)) Then
                  value.remove(_PARTWARHSBAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTWARHSBAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SERIALNAME As String
        
        Private _CUSTNAME As String
        
        Private _LOCNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTWARHSBAL"
                else
                    return "PARTWARHSBAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Work Order/Lot No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Work Order/Lot No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Work Order/Lot No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Work Order/Lot No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Work Order/Lot No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Warehouse (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTWARHSBAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTWARHSBAL = JsonConvert.DeserializeObject(Of PARTWARHSBAL)(e.StreamReader.ReadToEnd)
                With obj
                  _SERIALNAME = .SERIALNAME
                  _CUSTNAME = .CUSTNAME
                  _LOCNAME = .LOCNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _ACT = .ACT
                  _CUST = .CUST
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Inventory for Part")>  _
    Public Class QUERY_PARTBALANCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTBALANCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = nothing
            _Name = "PARTBALANCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = Parent
            _name = "PARTBALANCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTBALANCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTBALANCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTBALANCE As PARTBALANCE In JsonConvert.DeserializeObject(Of QUERY_PARTBALANCE)(stream.ReadToEnd).Value
              With _PARTBALANCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTBALANCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTBALANCE)
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .VELOCITY = obj.VELOCITY
                  .TYPE = obj.TYPE
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .CUSTNAME = obj.CUSTNAME
                  .ACTNAME = obj.ACTNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .LASTDATE = obj.LASTDATE
                  .NUMPACK = obj.NUMPACK
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTBALANCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTBALANCE as PARTBALANCE in value
              If _PARTBALANCE.Equals(trycast(obj,PARTBALANCE)) Then
                  value.remove(_PARTBALANCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTBALANCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _VELOCITY As String
        
        Private _TYPE As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _CUSTNAME As String
        
        Private _ACTNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _LASTDATE As System.DateTimeOffset
        
        Private _NUMPACK As Long
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTBALANCE"
                else
                    return "PARTBALANCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Velocity"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("VELOCITY")>  _
        Public Property VELOCITY() As String
            Get
                return _VELOCITY
            End Get
            Set
                if not(value is nothing) then
                  _VELOCITY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (D/F/W)"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Buy/Sell)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Warehouse"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Buy/Sell Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. No."),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. Name"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation/Pallet"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Expir. Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Factory Unit"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Last Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Factory Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("LASTDATE")>  _
        Public Property LASTDATE() As nullable (of DateTimeOffset)
            Get
                return _LASTDATE
            End Get
            Set
                if not(value is nothing) then
                  _LASTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTBALANCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With obj
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _VELOCITY = .VELOCITY
                  _TYPE = .TYPE
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _CUSTNAME = .CUSTNAME
                  _ACTNAME = .ACTNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _LASTDATE = .LASTDATE
                  _NUMPACK = .NUMPACK
                  _ACT = .ACT
                  _CUST = .CUST
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Latest Part Sales to Customer")>  _
    Public Class QUERY_LASTCUSTPARTSALES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTCUSTPARTSALES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = nothing
            _Name = "LASTCUSTPARTSALES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = Parent
            _name = "LASTCUSTPARTSALES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTCUSTPARTSALES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTCUSTPARTSALES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTCUSTPARTSALES As LASTCUSTPARTSALES In JsonConvert.DeserializeObject(Of QUERY_LASTCUSTPARTSALES)(stream.ReadToEnd).Value
              With _LASTCUSTPARTSALES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTCUSTPARTSALES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTCUSTPARTSALES)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTCUSTPARTSALES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTCUSTPARTSALES as LASTCUSTPARTSALES in value
              If _LASTCUSTPARTSALES.Equals(trycast(obj,LASTCUSTPARTSALES)) Then
                  value.remove(_LASTCUSTPARTSALES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTCUSTPARTSALES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTCUSTPARTSALES"
                else
                    return "LASTCUSTPARTSALES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Overall Discount"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Overall Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Overall Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTCUSTPARTSALES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Calls to Cust for Clarification")>  _
    Public Class QUERY_TRANSCONTACTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSCONTACTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSCONTACTS)
            _Parent = nothing
            _Name = "TRANSCONTACTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSCONTACTS)
            _Parent = Parent
            _name = "TRANSCONTACTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSCONTACTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSCONTACTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSCONTACTS As TRANSCONTACTS In JsonConvert.DeserializeObject(Of QUERY_TRANSCONTACTS)(stream.ReadToEnd).Value
              With _TRANSCONTACTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSCONTACTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTS = JsonConvert.DeserializeObject(Of TRANSCONTACTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSCONTACTS)
                  .CURDATE = obj.CURDATE
                  .CALLERLOGIN = obj.CALLERLOGIN
                  .CLIENTNAME = obj.CLIENTNAME
                  .TEXT = obj.TEXT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSCONTACTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSCONTACTS as TRANSCONTACTS in value
              If _TRANSCONTACTS.Equals(trycast(obj,TRANSCONTACTS)) Then
                  value.remove(_TRANSCONTACTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSCONTACTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetCALLERLOGIN As Boolean = Boolean.FalseString
        
        Private _CALLERLOGIN As String
        
        Private _IsSetCLIENTNAME As Boolean = Boolean.FalseString
        
        Private _CLIENTNAME As String
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _TRANSCONTACTSIGN_SUBFORM As QUERY_TRANSCONTACTSIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Electronic Signature"))
            _TRANSCONTACTSIGN_SUBFORM = new QUERY_TRANSCONTACTSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSCONTACTSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Electronic Signature", _TRANSCONTACTSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Electronic Signature"))
            _TRANSCONTACTSIGN_SUBFORM = new QUERY_TRANSCONTACTSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSCONTACTSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Electronic Signature", _TRANSCONTACTSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSCONTACTS"
                else
                    return "TRANSCONTACTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Initiator (Usr)"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         twodBarcode("CALLERLOGIN")>  _
        Public Property CALLERLOGIN() As String
            Get
                return _CALLERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Initiator (Usr)", value, "^.{0,20}$") then Exit Property
                _IsSetCALLERLOGIN = True
                If loading Then
                  _CALLERLOGIN = Value
                Else
                    if not _CALLERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CALLERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CALLERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Taker"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         twodBarcode("CLIENTNAME")>  _
        Public Property CLIENTNAME() As String
            Get
                return _CLIENTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Taker", value, "^.{0,12}$") then Exit Property
                _IsSetCLIENTNAME = True
                If loading Then
                  _CLIENTNAME = Value
                Else
                    if not _CLIENTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLIENTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLIENTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,44}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSCONTACTSIGN_SUBFORM() As QUERY_TRANSCONTACTSIGN
            Get
                return _TRANSCONTACTSIGN_SUBFORM
            End Get
            Set
                _TRANSCONTACTSIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetCALLERLOGIN then
              if f then
                  jw.WriteRaw(", ""CALLERLOGIN"": ")
              else
                  jw.WriteRaw("""CALLERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.CALLERLOGIN)
            end if
            if _IsSetCLIENTNAME then
              if f then
                  jw.WriteRaw(", ""CLIENTNAME"": ")
              else
                  jw.WriteRaw("""CLIENTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CLIENTNAME)
            end if
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _TRANSCONTACTSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSCONTACTSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSCONTACTSIGN in _TRANSCONTACTSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSCONTACTSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSCONTACTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCALLERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CALLERLOGIN")
              .WriteAttributeString("value", me.CALLERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCLIENTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLIENTNAME")
              .WriteAttributeString("value", me.CLIENTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "44")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _TRANSCONTACTSIGN_SUBFORM.value.count > 0 then
              for each itm as TRANSCONTACTSIGN in _TRANSCONTACTSIGN_SUBFORM.Value
                itm.toXML(xw,"TRANSCONTACTSIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTS = JsonConvert.DeserializeObject(Of TRANSCONTACTS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _CALLERLOGIN = .CALLERLOGIN
                  _CLIENTNAME = .CLIENTNAME
                  _TEXT = .TEXT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSCONTACTS
        
        TRANSCONTACTSIGN = 0
    End Enum
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_TRANSCONTACTSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSCONTACTSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSCONTACTSIGN)
            _Parent = nothing
            _Name = "TRANSCONTACTSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSCONTACTSIGN)
            _Parent = Parent
            _name = "TRANSCONTACTSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSCONTACTSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSCONTACTSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSCONTACTSIGN As TRANSCONTACTSIGN In JsonConvert.DeserializeObject(Of QUERY_TRANSCONTACTSIGN)(stream.ReadToEnd).Value
              With _TRANSCONTACTSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSCONTACTSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTSIGN = JsonConvert.DeserializeObject(Of TRANSCONTACTSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSCONTACTSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .TRANS = obj.TRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSCONTACTSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSCONTACTSIGN as TRANSCONTACTSIGN in value
              If _TRANSCONTACTSIGN.Equals(trycast(obj,TRANSCONTACTSIGN)) Then
                  value.remove(_TRANSCONTACTSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSCONTACTSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _TRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSCONTACTSIGN"
                else
                    return "TRANSCONTACTSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TRANS={0},KLINE={1}", _
                  string.format("{0}",TRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSCONTACTSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTSIGN = JsonConvert.DeserializeObject(Of TRANSCONTACTSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _TRANS = .TRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Analysis Results")>  _
    Public Class QUERY_TRANSLABANALYSES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSLABANALYSES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSLABANALYSES)
            _Parent = nothing
            _Name = "TRANSLABANALYSES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Possible Analysis Results")
            .add(1, "Additional Results")
            .add(2, "Method of Analysis - Text")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSLABANALYSES)
            _Parent = Parent
            _name = "TRANSLABANALYSES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Possible Analysis Results")
            .add(1, "Additional Results")
            .add(2, "Method of Analysis - Text")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSLABANALYSES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSLABANALYSES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSLABANALYSES As TRANSLABANALYSES In JsonConvert.DeserializeObject(Of QUERY_TRANSLABANALYSES)(stream.ReadToEnd).Value
              With _TRANSLABANALYSES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSLABANALYSES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSLABANALYSES = JsonConvert.DeserializeObject(Of TRANSLABANALYSES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSLABANALYSES)
                  .ANALYSISCODE = obj.ANALYSISCODE
                  .ANALYSISDES = obj.ANALYSISDES
                  .METHODNAME = obj.METHODNAME
                  .MINVALUE = obj.MINVALUE
                  .MAXVALUE = obj.MAXVALUE
                  .RESCODE = obj.RESCODE
                  .QRANKCODE = obj.QRANKCODE
                  .VALID = obj.VALID
                  .NOTVALID = obj.NOTVALID
                  .STANDARDDEV = obj.STANDARDDEV
                  .PRINTFLAG = obj.PRINTFLAG
                  .AUTOFLAG = obj.AUTOFLAG
                  .ANALYSIS = obj.ANALYSIS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSLABANALYSES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSLABANALYSES as TRANSLABANALYSES in value
              If _TRANSLABANALYSES.Equals(trycast(obj,TRANSLABANALYSES)) Then
                  value.remove(_TRANSLABANALYSES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSLABANALYSES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetANALYSISCODE As Boolean = Boolean.FalseString
        
        Private _ANALYSISCODE As String
        
        Private _ANALYSISDES As String
        
        Private _IsSetMETHODNAME As Boolean = Boolean.FalseString
        
        Private _METHODNAME As String
        
        Private _IsSetMINVALUE As Boolean = Boolean.FalseString
        
        Private _MINVALUE As String
        
        Private _IsSetMAXVALUE As Boolean = Boolean.FalseString
        
        Private _MAXVALUE As String
        
        Private _IsSetRESCODE As Boolean = Boolean.FalseString
        
        Private _RESCODE As String
        
        Private _IsSetQRANKCODE As Boolean = Boolean.FalseString
        
        Private _QRANKCODE As String
        
        Private _VALID As String
        
        Private _NOTVALID As String
        
        Private _STANDARDDEV As String
        
        Private _IsSetPRINTFLAG As Boolean = Boolean.FalseString
        
        Private _PRINTFLAG As String
        
        Private _AUTOFLAG As String
        
        Private _IsSetANALYSIS As Boolean = Boolean.FalseString
        
        Private _ANALYSIS As Long
        
        Private _TRANSANALYSESRESULTS_SUBFORM As QUERY_TRANSANALYSESRESULTS
        
        Private _TRANSANALYSESITEMS_SUBFORM As QUERY_TRANSANALYSESITEMS
        
        Private _TRANSLABANALYSESTEXT_SUBFORM As QUERY_TRANSLABANALYSESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Possible Analysis Results"))
            ChildQuery.add(1, new oNavigation("Additional Results"))
            ChildQuery.add(2, new oNavigation("Method of Analysis - Text"))
            _TRANSANALYSESRESULTS_SUBFORM = new QUERY_TRANSANALYSESRESULTS(me)
            _TRANSANALYSESITEMS_SUBFORM = new QUERY_TRANSANALYSESITEMS(me)
            _TRANSLABANALYSESTEXT_SUBFORM = new QUERY_TRANSLABANALYSESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSANALYSESRESULTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSANALYSESITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSLABANALYSESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Possible Analysis Results"))
            ChildQuery.add(1, new oNavigation("Additional Results"))
            ChildQuery.add(2, new oNavigation("Method of Analysis - Text"))
            _TRANSANALYSESRESULTS_SUBFORM = new QUERY_TRANSANALYSESRESULTS(me)
            _TRANSANALYSESITEMS_SUBFORM = new QUERY_TRANSANALYSESITEMS(me)
            _TRANSLABANALYSESTEXT_SUBFORM = new QUERY_TRANSLABANALYSESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSANALYSESRESULTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_TRANSANALYSESITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_TRANSLABANALYSESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Possible Analysis Results", _TRANSANALYSESRESULTS_SUBFORM))
                   .add(1, new oNavigation("Additional Results", _TRANSANALYSESITEMS_SUBFORM))
                   .add(2, new oNavigation("Method of Analysis - Text", _TRANSLABANALYSESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSLABANALYSES"
                else
                    return "TRANSLABANALYSES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ANALYSIS={0}", _
                  string.format("{0}",ANALYSIS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Analysis Code"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("ANALYSISCODE")>  _
        Public Property ANALYSISCODE() As String
            Get
                return _ANALYSISCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Analysis Code", value, "^.{0,10}$") then Exit Property
                _IsSetANALYSISCODE = True
                If loading Then
                  _ANALYSISCODE = Value
                Else
                    if not _ANALYSISCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANALYSISCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANALYSISCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Analysis Description"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("ANALYSISDES")>  _
        Public Property ANALYSISDES() As String
            Get
                return _ANALYSISDES
            End Get
            Set
                if not(value is nothing) then
                  _ANALYSISDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Method of Analysis"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(25),  _
         twodBarcode("METHODNAME")>  _
        Public Property METHODNAME() As String
            Get
                return _METHODNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Method of Analysis", value, "^.{0,20}$") then Exit Property
                _IsSetMETHODNAME = True
                If loading Then
                  _METHODNAME = Value
                Else
                    if not _METHODNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("METHODNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _METHODNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Value"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(30),  _
         twodBarcode("MINVALUE")>  _
        Public Property MINVALUE() As String
            Get
                return _MINVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Minimum Value", value, "^.{0,24}$") then Exit Property
                _IsSetMINVALUE = True
                If loading Then
                  _MINVALUE = Value
                Else
                    if not _MINVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MINVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MINVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Maximum Value"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(40),  _
         twodBarcode("MAXVALUE")>  _
        Public Property MAXVALUE() As String
            Get
                return _MAXVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Maximum Value", value, "^.{0,24}$") then Exit Property
                _IsSetMAXVALUE = True
                If loading Then
                  _MAXVALUE = Value
                Else
                    if not _MAXVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAXVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAXVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Result"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(60),  _
         twodBarcode("RESCODE")>  _
        Public Property RESCODE() As String
            Get
                return _RESCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Result", value, "^.{0,24}$") then Exit Property
                _IsSetRESCODE = True
                If loading Then
                  _RESCODE = Value
                Else
                    if not _RESCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quality Code"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(65),  _
         twodBarcode("QRANKCODE")>  _
        Public Property QRANKCODE() As String
            Get
                return _QRANKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quality Code", value, "^.{0,4}$") then Exit Property
                _IsSetQRANKCODE = True
                If loading Then
                  _QRANKCODE = Value
                Else
                    if not _QRANKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QRANKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QRANKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Acceptable?"),  _
         nType("Edm.String"),  _
         tab("Analysis Code"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("VALID")>  _
        Public Property VALID() As String
            Get
                return _VALID
            End Get
            Set
                if not(value is nothing) then
                  _VALID = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unacceptable?"),  _
         nType("Edm.String"),  _
         tab("Unacceptable?"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("NOTVALID")>  _
        Public Property NOTVALID() As String
            Get
                return _NOTVALID
            End Get
            Set
                if not(value is nothing) then
                  _NOTVALID = Value
                end if
            End Set
        End Property
        
        <DisplayName("Standard Deviation"),  _
         nType("Edm.String"),  _
         tab("Unacceptable?"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("STANDARDDEV")>  _
        Public Property STANDARDDEV() As String
            Get
                return _STANDARDDEV
            End Get
            Set
                if not(value is nothing) then
                  _STANDARDDEV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Display in Printout?"),  _
         nType("Edm.String"),  _
         tab("Unacceptable?"),  _
         Pos(90),  _
         twodBarcode("PRINTFLAG")>  _
        Public Property PRINTFLAG() As String
            Get
                return _PRINTFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Display in Printout?", value, "^.{0,1}$") then Exit Property
                _IsSetPRINTFLAG = True
                If loading Then
                  _PRINTFLAG = Value
                Else
                    if not _PRINTFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRINTFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRINTFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Automatic?"),  _
         nType("Edm.String"),  _
         tab("Unacceptable?"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("AUTOFLAG")>  _
        Public Property AUTOFLAG() As String
            Get
                return _AUTOFLAG
            End Get
            Set
                if not(value is nothing) then
                  _AUTOFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Analysis (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unacceptable?"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ANALYSIS")>  _
        Public Property ANALYSIS() As nullable (of int64)
            Get
                return _ANALYSIS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Analysis (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetANALYSIS = True
                If loading Then
                  _ANALYSIS = Value
                Else
                    if not _ANALYSIS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANALYSIS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANALYSIS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSANALYSESRESULTS_SUBFORM() As QUERY_TRANSANALYSESRESULTS
            Get
                return _TRANSANALYSESRESULTS_SUBFORM
            End Get
            Set
                _TRANSANALYSESRESULTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSANALYSESITEMS_SUBFORM() As QUERY_TRANSANALYSESITEMS
            Get
                return _TRANSANALYSESITEMS_SUBFORM
            End Get
            Set
                _TRANSANALYSESITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSLABANALYSESTEXT_SUBFORM() As QUERY_TRANSLABANALYSESTEXT
            Get
                return _TRANSLABANALYSESTEXT_SUBFORM
            End Get
            Set
                _TRANSLABANALYSESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANALYSISCODE then
              if f then
                  jw.WriteRaw(", ""ANALYSISCODE"": ")
              else
                  jw.WriteRaw("""ANALYSISCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ANALYSISCODE)
            end if
            if _IsSetMETHODNAME then
              if f then
                  jw.WriteRaw(", ""METHODNAME"": ")
              else
                  jw.WriteRaw("""METHODNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.METHODNAME)
            end if
            if _IsSetMINVALUE then
              if f then
                  jw.WriteRaw(", ""MINVALUE"": ")
              else
                  jw.WriteRaw("""MINVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.MINVALUE)
            end if
            if _IsSetMAXVALUE then
              if f then
                  jw.WriteRaw(", ""MAXVALUE"": ")
              else
                  jw.WriteRaw("""MAXVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.MAXVALUE)
            end if
            if _IsSetRESCODE then
              if f then
                  jw.WriteRaw(", ""RESCODE"": ")
              else
                  jw.WriteRaw("""RESCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.RESCODE)
            end if
            if _IsSetQRANKCODE then
              if f then
                  jw.WriteRaw(", ""QRANKCODE"": ")
              else
                  jw.WriteRaw("""QRANKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QRANKCODE)
            end if
            if _IsSetPRINTFLAG then
              if f then
                  jw.WriteRaw(", ""PRINTFLAG"": ")
              else
                  jw.WriteRaw("""PRINTFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.PRINTFLAG)
            end if
            if _IsSetANALYSIS then
              if f then
                  jw.WriteRaw(", ""ANALYSIS"": ")
              else
                  jw.WriteRaw("""ANALYSIS"": ")
                  f = true
              end if
              jw.WriteValue(me.ANALYSIS)
            end if
            if _TRANSANALYSESRESULTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSANALYSESRESULTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSANALYSESRESULTS in _TRANSANALYSESRESULTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSANALYSESRESULTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSANALYSESITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSANALYSESITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSANALYSESITEMS in _TRANSANALYSESITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSANALYSESITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSLABANALYSESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSLABANALYSESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSLABANALYSESTEXT in _TRANSLABANALYSESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSLABANALYSESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSLABANALYSES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ANALYSIS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANALYSISCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANALYSISCODE")
              .WriteAttributeString("value", me.ANALYSISCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetMETHODNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "METHODNAME")
              .WriteAttributeString("value", me.METHODNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetMINVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MINVALUE")
              .WriteAttributeString("value", me.MINVALUE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetMAXVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAXVALUE")
              .WriteAttributeString("value", me.MAXVALUE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetRESCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESCODE")
              .WriteAttributeString("value", me.RESCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetQRANKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QRANKCODE")
              .WriteAttributeString("value", me.QRANKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRINTFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRINTFLAG")
              .WriteAttributeString("value", me.PRINTFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetANALYSIS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANALYSIS")
              .WriteAttributeString("value", me.ANALYSIS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _TRANSANALYSESRESULTS_SUBFORM.value.count > 0 then
              for each itm as TRANSANALYSESRESULTS in _TRANSANALYSESRESULTS_SUBFORM.Value
                itm.toXML(xw,"TRANSANALYSESRESULTS_SUBFORM")
              next
            end if
            if _TRANSANALYSESITEMS_SUBFORM.value.count > 0 then
              for each itm as TRANSANALYSESITEMS in _TRANSANALYSESITEMS_SUBFORM.Value
                itm.toXML(xw,"TRANSANALYSESITEMS_SUBFORM")
              next
            end if
            if _TRANSLABANALYSESTEXT_SUBFORM.value.count > 0 then
              for each itm as TRANSLABANALYSESTEXT in _TRANSLABANALYSESTEXT_SUBFORM.Value
                itm.toXML(xw,"TRANSLABANALYSESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSLABANALYSES = JsonConvert.DeserializeObject(Of TRANSLABANALYSES)(e.StreamReader.ReadToEnd)
                With obj
                  _ANALYSISCODE = .ANALYSISCODE
                  _ANALYSISDES = .ANALYSISDES
                  _METHODNAME = .METHODNAME
                  _MINVALUE = .MINVALUE
                  _MAXVALUE = .MAXVALUE
                  _RESCODE = .RESCODE
                  _QRANKCODE = .QRANKCODE
                  _VALID = .VALID
                  _NOTVALID = .NOTVALID
                  _STANDARDDEV = .STANDARDDEV
                  _PRINTFLAG = .PRINTFLAG
                  _AUTOFLAG = .AUTOFLAG
                  _ANALYSIS = .ANALYSIS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSLABANALYSES
        
        TRANSANALYSESRESULTS = 0
        
        TRANSANALYSESITEMS = 1
        
        TRANSLABANALYSESTEXT = 2
    End Enum
    
    <QueryTitle("Possible Analysis Results")>  _
    Public Class QUERY_TRANSANALYSESRESULTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSANALYSESRESULTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSANALYSESRESULTS)
            _Parent = nothing
            _Name = "TRANSANALYSESRESULTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSANALYSESRESULTS)
            _Parent = Parent
            _name = "TRANSANALYSESRESULTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSANALYSESRESULTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSANALYSESRESULTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSANALYSESRESULTS As TRANSANALYSESRESULTS In JsonConvert.DeserializeObject(Of QUERY_TRANSANALYSESRESULTS)(stream.ReadToEnd).Value
              With _TRANSANALYSESRESULTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSANALYSESRESULTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSANALYSESRESULTS = JsonConvert.DeserializeObject(Of TRANSANALYSESRESULTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSANALYSESRESULTS)
                  .RESCODE = obj.RESCODE
                  .VALID = obj.VALID
                  .NOTVALID = obj.NOTVALID
                  .QRANKCODE = obj.QRANKCODE
                  .FROMVAL = obj.FROMVAL
                  .TOVAL = obj.TOVAL
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSANALYSESRESULTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSANALYSESRESULTS as TRANSANALYSESRESULTS in value
              If _TRANSANALYSESRESULTS.Equals(trycast(obj,TRANSANALYSESRESULTS)) Then
                  value.remove(_TRANSANALYSESRESULTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSANALYSESRESULTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetRESCODE As Boolean = Boolean.FalseString
        
        Private _RESCODE As String
        
        Private _IsSetVALID As Boolean = Boolean.FalseString
        
        Private _VALID As String
        
        Private _IsSetNOTVALID As Boolean = Boolean.FalseString
        
        Private _NOTVALID As String
        
        Private _IsSetQRANKCODE As Boolean = Boolean.FalseString
        
        Private _QRANKCODE As String
        
        Private _IsSetFROMVAL As Boolean = Boolean.FalseString
        
        Private _FROMVAL As String
        
        Private _IsSetTOVAL As Boolean = Boolean.FalseString
        
        Private _TOVAL As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSANALYSESRESULTS"
                else
                    return "TRANSANALYSESRESULTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "RESCODE={0}", _
                  string.format("'{0}'",RESCODE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Possible Result"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("RESCODE")>  _
        Public Property RESCODE() As String
            Get
                return _RESCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Possible Result", value, "^.{0,24}$") then Exit Property
                _IsSetRESCODE = True
                If loading Then
                  _RESCODE = Value
                Else
                    if not _RESCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Acceptable?"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(20),  _
         twodBarcode("VALID")>  _
        Public Property VALID() As String
            Get
                return _VALID
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Acceptable?", value, "^.{0,1}$") then Exit Property
                _IsSetVALID = True
                If loading Then
                  _VALID = Value
                Else
                    if not _VALID = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALID", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALID = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unacceptable?"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(30),  _
         twodBarcode("NOTVALID")>  _
        Public Property NOTVALID() As String
            Get
                return _NOTVALID
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unacceptable?", value, "^.{0,1}$") then Exit Property
                _IsSetNOTVALID = True
                If loading Then
                  _NOTVALID = Value
                Else
                    if not _NOTVALID = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOTVALID", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOTVALID = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quality Code"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(40),  _
         twodBarcode("QRANKCODE")>  _
        Public Property QRANKCODE() As String
            Get
                return _QRANKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quality Code", value, "^.{0,4}$") then Exit Property
                _IsSetQRANKCODE = True
                If loading Then
                  _QRANKCODE = Value
                Else
                    if not _QRANKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QRANKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QRANKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Minimum QualityValue"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(50),  _
         twodBarcode("FROMVAL")>  _
        Public Property FROMVAL() As String
            Get
                return _FROMVAL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Minimum QualityValue", value, "^.{0,24}$") then Exit Property
                _IsSetFROMVAL = True
                If loading Then
                  _FROMVAL = Value
                Else
                    if not _FROMVAL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMVAL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMVAL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Maximum QualityValue"),  _
         nType("Edm.String"),  _
         tab("Possible Result"),  _
         Pos(60),  _
         twodBarcode("TOVAL")>  _
        Public Property TOVAL() As String
            Get
                return _TOVAL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Maximum QualityValue", value, "^.{0,24}$") then Exit Property
                _IsSetTOVAL = True
                If loading Then
                  _TOVAL = Value
                Else
                    if not _TOVAL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOVAL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOVAL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetRESCODE then
              if f then
                  jw.WriteRaw(", ""RESCODE"": ")
              else
                  jw.WriteRaw("""RESCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.RESCODE)
            end if
            if _IsSetVALID then
              if f then
                  jw.WriteRaw(", ""VALID"": ")
              else
                  jw.WriteRaw("""VALID"": ")
                  f = true
              end if
              jw.WriteValue(me.VALID)
            end if
            if _IsSetNOTVALID then
              if f then
                  jw.WriteRaw(", ""NOTVALID"": ")
              else
                  jw.WriteRaw("""NOTVALID"": ")
                  f = true
              end if
              jw.WriteValue(me.NOTVALID)
            end if
            if _IsSetQRANKCODE then
              if f then
                  jw.WriteRaw(", ""QRANKCODE"": ")
              else
                  jw.WriteRaw("""QRANKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QRANKCODE)
            end if
            if _IsSetFROMVAL then
              if f then
                  jw.WriteRaw(", ""FROMVAL"": ")
              else
                  jw.WriteRaw("""FROMVAL"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMVAL)
            end if
            if _IsSetTOVAL then
              if f then
                  jw.WriteRaw(", ""TOVAL"": ")
              else
                  jw.WriteRaw("""TOVAL"": ")
                  f = true
              end if
              jw.WriteValue(me.TOVAL)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSANALYSESRESULTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "RESCODE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            if _IsSetRESCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESCODE")
              .WriteAttributeString("value", me.RESCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetVALID then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALID")
              .WriteAttributeString("value", me.VALID)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOTVALID then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOTVALID")
              .WriteAttributeString("value", me.NOTVALID)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetQRANKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QRANKCODE")
              .WriteAttributeString("value", me.QRANKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetFROMVAL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMVAL")
              .WriteAttributeString("value", me.FROMVAL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetTOVAL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOVAL")
              .WriteAttributeString("value", me.TOVAL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSANALYSESRESULTS = JsonConvert.DeserializeObject(Of TRANSANALYSESRESULTS)(e.StreamReader.ReadToEnd)
                With obj
                  _RESCODE = .RESCODE
                  _VALID = .VALID
                  _NOTVALID = .NOTVALID
                  _QRANKCODE = .QRANKCODE
                  _FROMVAL = .FROMVAL
                  _TOVAL = .TOVAL
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Additional Results")>  _
    Public Class QUERY_TRANSANALYSESITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSANALYSESITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSANALYSESITEMS)
            _Parent = nothing
            _Name = "TRANSANALYSESITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSANALYSESITEMS)
            _Parent = Parent
            _name = "TRANSANALYSESITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSANALYSESITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSANALYSESITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSANALYSESITEMS As TRANSANALYSESITEMS In JsonConvert.DeserializeObject(Of QUERY_TRANSANALYSESITEMS)(stream.ReadToEnd).Value
              With _TRANSANALYSESITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSANALYSESITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSANALYSESITEMS = JsonConvert.DeserializeObject(Of TRANSANALYSESITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSANALYSESITEMS)
                  .RESULT = obj.RESULT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSANALYSESITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSANALYSESITEMS as TRANSANALYSESITEMS in value
              If _TRANSANALYSESITEMS.Equals(trycast(obj,TRANSANALYSESITEMS)) Then
                  value.remove(_TRANSANALYSESITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSANALYSESITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetRESULT As Boolean = Boolean.FalseString
        
        Private _RESULT As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSANALYSESITEMS"
                else
                    return "TRANSANALYSESITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Result"),  _
         nType("Edm.String"),  _
         tab("Result"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("RESULT")>  _
        Public Property RESULT() As String
            Get
                return _RESULT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Result", value, "^.{0,24}$") then Exit Property
                _IsSetRESULT = True
                If loading Then
                  _RESULT = Value
                Else
                    if not _RESULT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESULT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESULT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Result"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetRESULT then
              if f then
                  jw.WriteRaw(", ""RESULT"": ")
              else
                  jw.WriteRaw("""RESULT"": ")
                  f = true
              end if
              jw.WriteValue(me.RESULT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSANALYSESITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetRESULT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESULT")
              .WriteAttributeString("value", me.RESULT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSANALYSESITEMS = JsonConvert.DeserializeObject(Of TRANSANALYSESITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _RESULT = .RESULT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Method of Analysis - Text")>  _
    Public Class QUERY_TRANSLABANALYSESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSLABANALYSESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSLABANALYSESTEXT)
            _Parent = nothing
            _Name = "TRANSLABANALYSESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSLABANALYSESTEXT)
            _Parent = Parent
            _name = "TRANSLABANALYSESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSLABANALYSESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSLABANALYSESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSLABANALYSESTEXT As TRANSLABANALYSESTEXT In JsonConvert.DeserializeObject(Of QUERY_TRANSLABANALYSESTEXT)(stream.ReadToEnd).Value
              With _TRANSLABANALYSESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSLABANALYSESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSLABANALYSESTEXT = JsonConvert.DeserializeObject(Of TRANSLABANALYSESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSLABANALYSESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSLABANALYSESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSLABANALYSESTEXT as TRANSLABANALYSESTEXT in value
              If _TRANSLABANALYSESTEXT.Equals(trycast(obj,TRANSLABANALYSESTEXT)) Then
                  value.remove(_TRANSLABANALYSESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSLABANALYSESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSLABANALYSESTEXT"
                else
                    return "TRANSLABANALYSESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSLABANALYSESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSLABANALYSESTEXT = JsonConvert.DeserializeObject(Of TRANSLABANALYSESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_TRANSDSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSDSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = nothing
            _Name = "TRANSDSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSDSIGN)
            _Parent = Parent
            _name = "TRANSDSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSDSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSDSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSDSIGN As TRANSDSIGN In JsonConvert.DeserializeObject(Of QUERY_TRANSDSIGN)(stream.ReadToEnd).Value
              With _TRANSDSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSDSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSDSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSDSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSDSIGN as TRANSDSIGN in value
              If _TRANSDSIGN.Equals(trycast(obj,TRANSDSIGN)) Then
                  value.remove(_TRANSDSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSDSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSDSIGN"
                else
                    return "TRANSDSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(1),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSDSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSDSIGN = JsonConvert.DeserializeObject(Of TRANSDSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices/Credit Memos for Item")>  _
    Public Class QUERY_TRANSIV_D
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSIV_D)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = nothing
            _Name = "TRANSIV_D"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSIV_D)
            _Parent = Parent
            _name = "TRANSIV_D_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSIV_D)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSIV_D)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSIV_D As TRANSIV_D In JsonConvert.DeserializeObject(Of QUERY_TRANSIV_D)(stream.ReadToEnd).Value
              With _TRANSIV_D
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSIV_D)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSIV_D)
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .IVDATE = obj.IVDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSIV_D(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSIV_D as TRANSIV_D in value
              If _TRANSIV_D.Equals(trycast(obj,TRANSIV_D)) Then
                  value.remove(_TRANSIV_D)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSIV_D
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSIV_D"
                else
                    return "TRANSIV_D_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Invoice/Memo Number"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Invoice/Memo Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Invoice/Memo Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Invoice/Memo Number"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice/Memo Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Invoice/Memo Number"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice/Memo Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(63),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSIV_D")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSIV_D = JsonConvert.DeserializeObject(Of TRANSIV_D)(e.StreamReader.ReadToEnd)
                With obj
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _IVDATE = .IVDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Warehouse Tasks for Line Item")>  _
    Public Class QUERY_WTASKTRANSLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of WTASKTRANSLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of WTASKTRANSLINK)
            _Parent = nothing
            _Name = "WTASKTRANSLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of WTASKTRANSLINK)
            _Parent = Parent
            _name = "WTASKTRANSLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of WTASKTRANSLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(WTASKTRANSLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _WTASKTRANSLINK As WTASKTRANSLINK In JsonConvert.DeserializeObject(Of QUERY_WTASKTRANSLINK)(stream.ReadToEnd).Value
              With _WTASKTRANSLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_WTASKTRANSLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as WTASKTRANSLINK = JsonConvert.DeserializeObject(Of WTASKTRANSLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, WTASKTRANSLINK)
                  .CURDATE = obj.CURDATE
                  .WTASKNUM = obj.WTASKNUM
                  .WTASKTYPECODE = obj.WTASKTYPECODE
                  .WTASKTYPEDES = obj.WTASKTYPEDES
                  .REMARK = obj.REMARK
                  .LINE = obj.LINE
                  .KLINE = obj.KLINE
                  .WTASK = obj.WTASK
                  .WTASKI = obj.WTASKI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new WTASKTRANSLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _WTASKTRANSLINK as WTASKTRANSLINK in value
              If _WTASKTRANSLINK.Equals(trycast(obj,WTASKTRANSLINK)) Then
                  value.remove(_WTASKTRANSLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class WTASKTRANSLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _WTASKNUM As String
        
        Private _WTASKTYPECODE As String
        
        Private _WTASKTYPEDES As String
        
        Private _REMARK As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _KLINE As Long
        
        Private _WTASK As Long
        
        Private _WTASKI As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "WTASKTRANSLINK"
                else
                    return "WTASKTRANSLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},WTASK={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",WTASK) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task No."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKNUM")>  _
        Public Property WTASKNUM() As String
            Get
                return _WTASKNUM
            End Get
            Set
                if not(value is nothing) then
                  _WTASKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPECODE")>  _
        Public Property WTASKTYPECODE() As String
            Get
                return _WTASKTYPECODE
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type Desc."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPEDES")>  _
        Public Property WTASKTYPEDES() As String
            Get
                return _WTASKTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if not(value is nothing) then
                  _REMARK = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WTASK")>  _
        Public Property WTASK() As nullable (of int64)
            Get
                return _WTASK
            End Get
            Set
                if not(value is nothing) then
                  _WTASK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Line (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Task Line (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WTASKI")>  _
        Public Property WTASKI() As nullable (of int64)
            Get
                return _WTASKI
            End Get
            Set
                if not(value is nothing) then
                  _WTASKI = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "WTASKTRANSLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WTASK")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as WTASKTRANSLINK = JsonConvert.DeserializeObject(Of WTASKTRANSLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _WTASKNUM = .WTASKNUM
                  _WTASKTYPECODE = .WTASKTYPECODE
                  _WTASKTYPEDES = .WTASKTYPEDES
                  _REMARK = .REMARK
                  _LINE = .LINE
                  _KLINE = .KLINE
                  _WTASK = .WTASK
                  _WTASKI = .WTASKI
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Intrastat Definitions")>  _
    Public Class QUERY_TRANSORDERINTRASTAT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDERINTRASTAT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDERINTRASTAT)
            _Parent = nothing
            _Name = "TRANSORDERINTRASTAT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDERINTRASTAT)
            _Parent = Parent
            _name = "TRANSORDERINTRASTAT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDERINTRASTAT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDERINTRASTAT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDERINTRASTAT As TRANSORDERINTRASTAT In JsonConvert.DeserializeObject(Of QUERY_TRANSORDERINTRASTAT)(stream.ReadToEnd).Value
              With _TRANSORDERINTRASTAT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDERINTRASTAT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERINTRASTAT = JsonConvert.DeserializeObject(Of TRANSORDERINTRASTAT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDERINTRASTAT)
                  .TRANSTYPE1 = obj.TRANSTYPE1
                  .TRANSTYPE2 = obj.TRANSTYPE2
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDERINTRASTAT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDERINTRASTAT as TRANSORDERINTRASTAT in value
              If _TRANSORDERINTRASTAT.Equals(trycast(obj,TRANSORDERINTRASTAT)) Then
                  value.remove(_TRANSORDERINTRASTAT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDERINTRASTAT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTRANSTYPE1 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE1 As String
        
        Private _IsSetTRANSTYPE2 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE2 As String
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDERINTRASTAT"
                else
                    return "TRANSORDERINTRASTAT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Nature of Trans-1st"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(30),  _
         twodBarcode("TRANSTYPE1")>  _
        Public Property TRANSTYPE1() As String
            Get
                return _TRANSTYPE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-1st", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE1 = True
                If loading Then
                  _TRANSTYPE1 = Value
                Else
                    if not _TRANSTYPE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-2nd"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(40),  _
         twodBarcode("TRANSTYPE2")>  _
        Public Property TRANSTYPE2() As String
            Get
                return _TRANSTYPE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-2nd", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE2 = True
                If loading Then
                  _TRANSTYPE2 = Value
                Else
                    if not _TRANSTYPE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Terms of Delivery"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(50),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Terms of Delivery", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(60),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Nature of Trans-1st"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTRANSTYPE1 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE1"": ")
              else
                  jw.WriteRaw("""TRANSTYPE1"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE1)
            end if
            if _IsSetTRANSTYPE2 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE2"": ")
              else
                  jw.WriteRaw("""TRANSTYPE2"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE2)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDERINTRASTAT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTRANSTYPE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE1")
              .WriteAttributeString("value", me.TRANSTYPE1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE2")
              .WriteAttributeString("value", me.TRANSTYPE2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERINTRASTAT = JsonConvert.DeserializeObject(Of TRANSORDERINTRASTAT)(e.StreamReader.ReadToEnd)
                With obj
                  _TRANSTYPE1 = .TRANSTYPE1
                  _TRANSTYPE2 = .TRANSTYPE2
                  _IMPTERMNAME = .IMPTERMNAME
                  _COUNTRYNAME = .COUNTRYNAME
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Line Items - Remarks")>  _
    Public Class QUERY_TRANSORDERTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSORDERTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSORDERTEXT)
            _Parent = nothing
            _Name = "TRANSORDERTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSORDERTEXT)
            _Parent = Parent
            _name = "TRANSORDERTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSORDERTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSORDERTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSORDERTEXT As TRANSORDERTEXT In JsonConvert.DeserializeObject(Of QUERY_TRANSORDERTEXT)(stream.ReadToEnd).Value
              With _TRANSORDERTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSORDERTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERTEXT = JsonConvert.DeserializeObject(Of TRANSORDERTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSORDERTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSORDERTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSORDERTEXT as TRANSORDERTEXT in value
              If _TRANSORDERTEXT.Equals(trycast(obj,TRANSORDERTEXT)) Then
                  value.remove(_TRANSORDERTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSORDERTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSORDERTEXT"
                else
                    return "TRANSORDERTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSORDERTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSORDERTEXT = JsonConvert.DeserializeObject(Of TRANSORDERTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Orders for Document")>  _
    Public Class QUERY_DOCORD
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCORD)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCORD)
            _Parent = nothing
            _Name = "DOCORD"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCORD)
            _Parent = Parent
            _name = "DOCORD_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCORD)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCORD)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCORD As DOCORD In JsonConvert.DeserializeObject(Of QUERY_DOCORD)(stream.ReadToEnd).Value
              With _DOCORD
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCORD)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCORD = JsonConvert.DeserializeObject(Of DOCORD)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCORD)
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .CURDATE = obj.CURDATE
                  .CUSTNAME = obj.CUSTNAME
                  .RETURNS = obj.RETURNS
                  .ORD = obj.ORD
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCORD(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCORD as DOCORD in value
              If _DOCORD.Equals(trycast(obj,DOCORD)) Then
                  value.remove(_DOCORD)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCORD
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _CUSTNAME As String
        
        Private _IsSetRETURNS As Boolean = Boolean.FalseString
        
        Private _RETURNS As String
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCORD"
                else
                    return "DOCORD_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0}", _
                  string.format("{0}",ORD) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer's Purch Ord", value, "^.{0,15}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Return?"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(40),  _
         twodBarcode("RETURNS")>  _
        Public Property RETURNS() As String
            Get
                return _RETURNS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Return?", value, "^.{0,1}$") then Exit Property
                _IsSetRETURNS = True
                If loading Then
                  _RETURNS = Value
                Else
                    if not _RETURNS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RETURNS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RETURNS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetRETURNS then
              if f then
                  jw.WriteRaw(", ""RETURNS"": ")
              else
                  jw.WriteRaw("""RETURNS"": ")
                  f = true
              end if
              jw.WriteValue(me.RETURNS)
            end if
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCORD")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetRETURNS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RETURNS")
              .WriteAttributeString("value", me.RETURNS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCORD = JsonConvert.DeserializeObject(Of DOCORD)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _CURDATE = .CURDATE
                  _CUSTNAME = .CUSTNAME
                  _RETURNS = .RETURNS
                  _ORD = .ORD
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Choose Order Items")>  _
    Public Class QUERY_DOCORDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCORDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCORDI)
            _Parent = nothing
            _Name = "DOCORDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCORDI)
            _Parent = Parent
            _name = "DOCORDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCORDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCORDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCORDI As DOCORDI In JsonConvert.DeserializeObject(Of QUERY_DOCORDI)(stream.ReadToEnd).Value
              With _DOCORDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCORDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCORDI = JsonConvert.DeserializeObject(Of DOCORDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCORDI)
                  .FLAG = obj.FLAG
                  .ORDNAME = obj.ORDNAME
                  .ORDPERCENT = obj.ORDPERCENT
                  .AGENTCODE = obj.AGENTCODE
                  .CODE = obj.CODE
                  .CODEDES = obj.CODEDES
                  .LINE = obj.LINE
                  .DUEDATE = obj.DUEDATE
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .ORD = obj.ORD
                  .ORDI = obj.ORDI
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCORDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCORDI as DOCORDI in value
              If _DOCORDI.Equals(trycast(obj,DOCORDI)) Then
                  value.remove(_DOCORDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCORDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _ORDNAME As String
        
        Private _ORDPERCENT As Decimal
        
        Private _AGENTCODE As String
        
        Private _CODE As String
        
        Private _CODEDES As String
        
        Private _LINE As Long
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Private _IsSetORDI As Boolean = Boolean.FalseString
        
        Private _ORDI As Long
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCORDI"
                else
                    return "DOCORDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0},KLINE={1}", _
                  string.format("{0}",ORD), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Choose Item"),  _
         nType("Edm.String"),  _
         tab("Choose Item"),  _
         Pos(1),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Choose Item", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Choose Item"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Choose Item"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("ORDPERCENT")>  _
        Public Property ORDPERCENT() As nullable(of decimal)
            Get
                return _ORDPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _ORDPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Choose Item"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if not(value is nothing) then
                  _AGENTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Choose Item"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Choose Item"),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Choose Item"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if not(value is nothing) then
                  _LINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Choose Item"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line Item (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDI = True
                If loading Then
                  _ORDI = Value
                Else
                    if not _ORDI = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDI", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDI = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(240),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
            if _IsSetORDI then
              if f then
                  jw.WriteRaw(", ""ORDI"": ")
              else
                  jw.WriteRaw("""ORDI"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDI)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCORDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDI then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", me.ORDI)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCORDI = JsonConvert.DeserializeObject(Of DOCORDI)(e.StreamReader.ReadToEnd)
                With obj
                  _FLAG = .FLAG
                  _ORDNAME = .ORDNAME
                  _ORDPERCENT = .ORDPERCENT
                  _AGENTCODE = .AGENTCODE
                  _CODE = .CODE
                  _CODEDES = .CODEDES
                  _LINE = .LINE
                  _DUEDATE = .DUEDATE
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _ORD = .ORD
                  _ORDI = .ORDI
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Packing Slips in Document")>  _
    Public Class QUERY_DOCPACK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCPACK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCPACK)
            _Parent = nothing
            _Name = "DOCPACK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCPACK)
            _Parent = Parent
            _name = "DOCPACK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCPACK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCPACK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCPACK As DOCPACK In JsonConvert.DeserializeObject(Of QUERY_DOCPACK)(stream.ReadToEnd).Value
              With _DOCPACK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCPACK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCPACK = JsonConvert.DeserializeObject(Of DOCPACK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCPACK)
                  .DOCNO = obj.DOCNO
                  .BOOKNUM = obj.BOOKNUM
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .MWEIGHT = obj.MWEIGHT
                  .PACKCODE = obj.PACKCODE
                  .PACKNAME = obj.PACKNAME
                  .PACK = obj.PACK
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCPACK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCPACK as DOCPACK in value
              If _DOCPACK.Equals(trycast(obj,DOCPACK)) Then
                  value.remove(_DOCPACK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCPACK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _REFERENCE As String
        
        Private _MWEIGHT As Decimal
        
        Private _PACKCODE As String
        
        Private _PACKNAME As String
        
        Private _IsSetPACK As Boolean = Boolean.FalseString
        
        Private _PACK As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCPACK"
                else
                    return "DOCPACK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PACK={0}", _
                  string.format("{0}",PACK) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Packing Slip Number"),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Packing Slip Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("External Slip No."),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(11),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("External Slip No.", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Packing Slip Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _REFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manual Gross Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Packing Slip Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("MWEIGHT")>  _
        Public Property MWEIGHT() As nullable(of decimal)
            Get
                return _MWEIGHT
            End Get
            Set
                if not(value is nothing) then
                  _MWEIGHT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if not(value is nothing) then
                  _PACKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Desc."),  _
         nType("Edm.String"),  _
         tab("Packing Slip Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PACKNAME")>  _
        Public Property PACKNAME() As String
            Get
                return _PACKNAME
            End Get
            Set
                if not(value is nothing) then
                  _PACKNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Crate (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Crate (ID)"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("PACK")>  _
        Public Property PACK() As nullable (of int64)
            Get
                return _PACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPACK = True
                If loading Then
                  _PACK = Value
                Else
                    if not _PACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetPACK then
              if f then
                  jw.WriteRaw(", ""PACK"": ")
              else
                  jw.WriteRaw("""PACK"": ")
                  f = true
              end if
              jw.WriteValue(me.PACK)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCPACK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PACK")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACK")
              .WriteAttributeString("value", me.PACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCPACK = JsonConvert.DeserializeObject(Of DOCPACK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _BOOKNUM = .BOOKNUM
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _MWEIGHT = .MWEIGHT
                  _PACKCODE = .PACKCODE
                  _PACKNAME = .PACKNAME
                  _PACK = .PACK
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Link Packing Slips to Document")>  _
    Public Class QUERY_DOCPACK2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCPACK2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCPACK2)
            _Parent = nothing
            _Name = "DOCPACK2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCPACK2)
            _Parent = Parent
            _name = "DOCPACK2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCPACK2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCPACK2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCPACK2 As DOCPACK2 In JsonConvert.DeserializeObject(Of QUERY_DOCPACK2)(stream.ReadToEnd).Value
              With _DOCPACK2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCPACK2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCPACK2 = JsonConvert.DeserializeObject(Of DOCPACK2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCPACK2)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DETAILS = obj.DETAILS
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .FLAG = obj.FLAG
                  .PACK = obj.PACK
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCPACK2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCPACK2 as DOCPACK2 in value
              If _DOCPACK2.Equals(trycast(obj,DOCPACK2)) Then
                  value.remove(_DOCPACK2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCPACK2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DETAILS As String
        
        Private _ORDNAME As String
        
        Private _REFERENCE As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetPACK As Boolean = Boolean.FalseString
        
        Private _PACK As Long
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCPACK2"
                else
                    return "DOCPACK2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Slip Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _REFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Document?"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("In Document?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("PACK")>  _
        Public Property PACK() As nullable (of int64)
            Get
                return _PACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPACK = True
                If loading Then
                  _PACK = Value
                Else
                    if not _PACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetPACK then
              if f then
                  jw.WriteRaw(", ""PACK"": ")
              else
                  jw.WriteRaw("""PACK"": ")
                  f = true
              end if
              jw.WriteValue(me.PACK)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCPACK2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACK")
              .WriteAttributeString("value", me.PACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCPACK2 = JsonConvert.DeserializeObject(Of DOCPACK2)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DETAILS = .DETAILS
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _FLAG = .FLAG
                  _PACK = .PACK
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = nothing
            _Name = "SHIPTO2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = Parent
            _name = "SHIPTO2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO2 As SHIPTO2 In JsonConvert.DeserializeObject(Of QUERY_SHIPTO2)(stream.ReadToEnd).Value
              With _SHIPTO2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO2)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .TAXCODE = obj.TAXCODE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO2 as SHIPTO2 in value
              If _SHIPTO2.Equals(trycast(obj,SHIPTO2)) Then
                  value.remove(_SHIPTO2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO2"
                else
                    return "SHIPTO2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(160),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                  _TAXCODE = .TAXCODE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Details")>  _
    Public Class QUERY_DOCUMENTS_DCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTS_DCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTS_DCONT)
            _Parent = nothing
            _Name = "DOCUMENTS_DCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTS_DCONT)
            _Parent = Parent
            _name = "DOCUMENTS_DCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTS_DCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTS_DCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTS_DCONT As DOCUMENTS_DCONT In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTS_DCONT)(stream.ReadToEnd).Value
              With _DOCUMENTS_DCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTS_DCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_DCONT = JsonConvert.DeserializeObject(Of DOCUMENTS_DCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTS_DCONT)
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .PAYCUSTNAME = obj.PAYCUSTNAME
                  .PAYCUSTDES = obj.PAYCUSTDES
                  .TAXCODE = obj.TAXCODE
                  .DOCNO = obj.DOCNO
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTS_DCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTS_DCONT as DOCUMENTS_DCONT in value
              If _DOCUMENTS_DCONT.Equals(trycast(obj,DOCUMENTS_DCONT)) Then
                  value.remove(_DOCUMENTS_DCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTS_DCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _IsSetPAYCUSTNAME As Boolean = Boolean.FalseString
        
        Private _PAYCUSTNAME As String
        
        Private _PAYCUSTDES As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _IsSetTYPE As Boolean = Boolean.FalseString
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTS_DCONT"
                else
                    return "DOCUMENTS_DCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(10),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(11),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(12),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(22),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(24),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City/State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(25),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City/State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(26),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(30),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(40),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(50),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(60),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Customer No."),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(100),  _
         twodBarcode("PAYCUSTNAME")>  _
        Public Property PAYCUSTNAME() As String
            Get
                return _PAYCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Customer No.", value, "^.{0,16}$") then Exit Property
                _IsSetPAYCUSTNAME = True
                If loading Then
                  _PAYCUSTNAME = Value
                Else
                    if not _PAYCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Cust. Name"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCUSTDES")>  _
        Public Property PAYCUSTDES() As String
            Get
                return _PAYCUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYCUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(120),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetTYPE = True
                If loading Then
                  _TYPE = Value
                Else
                    if not _TYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetPAYCUSTNAME then
              if f then
                  jw.WriteRaw(", ""PAYCUSTNAME"": ")
              else
                  jw.WriteRaw("""PAYCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCUSTNAME)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetTYPE then
              if f then
                  jw.WriteRaw(", ""TYPE"": ")
              else
                  jw.WriteRaw("""TYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTS_DCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetPAYCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCUSTNAME")
              .WriteAttributeString("value", me.PAYCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", me.TYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTS_DCONT = JsonConvert.DeserializeObject(Of DOCUMENTS_DCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _PAYCUSTNAME = .PAYCUSTNAME
                  _PAYCUSTDES = .PAYCUSTDES
                  _TAXCODE = .TAXCODE
                  _DOCNO = .DOCNO
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Bill of Lading - Additional Data")>  _
    Public Class QUERY_PACKLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PACKLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PACKLIST)
            _Parent = nothing
            _Name = "PACKLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PACKLIST)
            _Parent = Parent
            _name = "PACKLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PACKLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PACKLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PACKLIST As PACKLIST In JsonConvert.DeserializeObject(Of QUERY_PACKLIST)(stream.ReadToEnd).Value
              With _PACKLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PACKLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PACKLIST = JsonConvert.DeserializeObject(Of PACKLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PACKLIST)
                  .SHIPDES = obj.SHIPDES
                  .PORTNAME = obj.PORTNAME
                  .PORTDES = obj.PORTDES
                  .DPORTNAME = obj.DPORTNAME
                  .DPORTDES = obj.DPORTDES
                  .SEAL = obj.SEAL
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .VOLUME = obj.VOLUME
                  .VUNITNAME = obj.VUNITNAME
                  .WEIGHT = obj.WEIGHT
                  .WUNITNAME = obj.WUNITNAME
                  .INSURANCE = obj.INSURANCE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PACKLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PACKLIST as PACKLIST in value
              If _PACKLIST.Equals(trycast(obj,PACKLIST)) Then
                  value.remove(_PACKLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PACKLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSHIPDES As Boolean = Boolean.FalseString
        
        Private _SHIPDES As String
        
        Private _IsSetPORTNAME As Boolean = Boolean.FalseString
        
        Private _PORTNAME As String
        
        Private _PORTDES As String
        
        Private _IsSetDPORTNAME As Boolean = Boolean.FalseString
        
        Private _DPORTNAME As String
        
        Private _DPORTDES As String
        
        Private _IsSetSEAL As Boolean = Boolean.FalseString
        
        Private _SEAL As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetVOLUME As Boolean = Boolean.FalseString
        
        Private _VOLUME As Decimal
        
        Private _IsSetVUNITNAME As Boolean = Boolean.FalseString
        
        Private _VUNITNAME As String
        
        Private _IsSetWEIGHT As Boolean = Boolean.FalseString
        
        Private _WEIGHT As Decimal
        
        Private _IsSetWUNITNAME As Boolean = Boolean.FalseString
        
        Private _WUNITNAME As String
        
        Private _IsSetINSURANCE As Boolean = Boolean.FalseString
        
        Private _INSURANCE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PACKLIST"
                else
                    return "PACKLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Ship Name/Flight No."),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(10),  _
         twodBarcode("SHIPDES")>  _
        Public Property SHIPDES() As String
            Get
                return _SHIPDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ship Name/Flight No.", value, "^.{0,32}$") then Exit Property
                _IsSetSHIPDES = True
                If loading Then
                  _SHIPDES = Value
                Else
                    if not _SHIPDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHIPDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHIPDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Port of Origin-Code"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(20),  _
         twodBarcode("PORTNAME")>  _
        Public Property PORTNAME() As String
            Get
                return _PORTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Port of Origin-Code", value, "^.{0,3}$") then Exit Property
                _IsSetPORTNAME = True
                If loading Then
                  _PORTNAME = Value
                Else
                    if not _PORTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PORTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PORTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name of Port"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PORTDES")>  _
        Public Property PORTDES() As String
            Get
                return _PORTDES
            End Get
            Set
                if not(value is nothing) then
                  _PORTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Port of Destin.-Code"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(24),  _
         twodBarcode("DPORTNAME")>  _
        Public Property DPORTNAME() As String
            Get
                return _DPORTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Port of Destin.-Code", value, "^.{0,3}$") then Exit Property
                _IsSetDPORTNAME = True
                If loading Then
                  _DPORTNAME = Value
                Else
                    if not _DPORTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DPORTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DPORTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Port of Destination"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("DPORTDES")>  _
        Public Property DPORTDES() As String
            Get
                return _DPORTDES
            End Get
            Set
                if not(value is nothing) then
                  _DPORTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Seal Number"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(50),  _
         twodBarcode("SEAL")>  _
        Public Property SEAL() As String
            Get
                return _SEAL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Seal Number", value, "^.{0,15}$") then Exit Property
                _IsSetSEAL = True
                If loading Then
                  _SEAL = Value
                Else
                    if not _SEAL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SEAL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SEAL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country of Origin"),  _
         nType("Edm.String"),  _
         tab("Ship Name/Flight No."),  _
         Pos(60),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country of Origin", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(4),  _
         Precision(16),  _
         tab("Ship Name/Flight No."),  _
         Pos(80),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Volume", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetVOLUME = True
                If loading Then
                  _VOLUME = Value
                Else
                    if not _VOLUME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VOLUME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VOLUME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit of Volume"),  _
         nType("Edm.String"),  _
         tab("Unit of Volume"),  _
         Pos(85),  _
         twodBarcode("VUNITNAME")>  _
        Public Property VUNITNAME() As String
            Get
                return _VUNITNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit of Volume", value, "^.{0,3}$") then Exit Property
                _IsSetVUNITNAME = True
                If loading Then
                  _VUNITNAME = Value
                Else
                    if not _VUNITNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VUNITNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VUNITNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Unit of Volume"),  _
         Pos(90),  _
         twodBarcode("WEIGHT")>  _
        Public Property WEIGHT() As nullable(of decimal)
            Get
                return _WEIGHT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Weight", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetWEIGHT = True
                If loading Then
                  _WEIGHT = Value
                Else
                    if not _WEIGHT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WEIGHT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WEIGHT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit of Weight"),  _
         nType("Edm.String"),  _
         tab("Unit of Volume"),  _
         Pos(95),  _
         twodBarcode("WUNITNAME")>  _
        Public Property WUNITNAME() As String
            Get
                return _WUNITNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit of Weight", value, "^.{0,3}$") then Exit Property
                _IsSetWUNITNAME = True
                If loading Then
                  _WUNITNAME = Value
                Else
                    if not _WUNITNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WUNITNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WUNITNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust Pays Insurance?"),  _
         nType("Edm.String"),  _
         tab("Unit of Volume"),  _
         Pos(110),  _
         twodBarcode("INSURANCE")>  _
        Public Property INSURANCE() As String
            Get
                return _INSURANCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust Pays Insurance?", value, "^.{0,1}$") then Exit Property
                _IsSetINSURANCE = True
                If loading Then
                  _INSURANCE = Value
                Else
                    if not _INSURANCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INSURANCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INSURANCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSHIPDES then
              if f then
                  jw.WriteRaw(", ""SHIPDES"": ")
              else
                  jw.WriteRaw("""SHIPDES"": ")
                  f = true
              end if
              jw.WriteValue(me.SHIPDES)
            end if
            if _IsSetPORTNAME then
              if f then
                  jw.WriteRaw(", ""PORTNAME"": ")
              else
                  jw.WriteRaw("""PORTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PORTNAME)
            end if
            if _IsSetDPORTNAME then
              if f then
                  jw.WriteRaw(", ""DPORTNAME"": ")
              else
                  jw.WriteRaw("""DPORTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DPORTNAME)
            end if
            if _IsSetSEAL then
              if f then
                  jw.WriteRaw(", ""SEAL"": ")
              else
                  jw.WriteRaw("""SEAL"": ")
                  f = true
              end if
              jw.WriteValue(me.SEAL)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetVOLUME then
              if f then
                  jw.WriteRaw(", ""VOLUME"": ")
              else
                  jw.WriteRaw("""VOLUME"": ")
                  f = true
              end if
              jw.WriteValue(me.VOLUME)
            end if
            if _IsSetVUNITNAME then
              if f then
                  jw.WriteRaw(", ""VUNITNAME"": ")
              else
                  jw.WriteRaw("""VUNITNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.VUNITNAME)
            end if
            if _IsSetWEIGHT then
              if f then
                  jw.WriteRaw(", ""WEIGHT"": ")
              else
                  jw.WriteRaw("""WEIGHT"": ")
                  f = true
              end if
              jw.WriteValue(me.WEIGHT)
            end if
            if _IsSetWUNITNAME then
              if f then
                  jw.WriteRaw(", ""WUNITNAME"": ")
              else
                  jw.WriteRaw("""WUNITNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WUNITNAME)
            end if
            if _IsSetINSURANCE then
              if f then
                  jw.WriteRaw(", ""INSURANCE"": ")
              else
                  jw.WriteRaw("""INSURANCE"": ")
                  f = true
              end if
              jw.WriteValue(me.INSURANCE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PACKLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetSHIPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHIPDES")
              .WriteAttributeString("value", me.SHIPDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPORTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PORTNAME")
              .WriteAttributeString("value", me.PORTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetDPORTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DPORTNAME")
              .WriteAttributeString("value", me.DPORTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSEAL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SEAL")
              .WriteAttributeString("value", me.SEAL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetVOLUME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VOLUME")
              .WriteAttributeString("value", me.VOLUME)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "4")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetVUNITNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VUNITNAME")
              .WriteAttributeString("value", me.VUNITNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetWEIGHT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WEIGHT")
              .WriteAttributeString("value", me.WEIGHT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "10")
              .WriteEndElement
            end if
            if _IsSetWUNITNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WUNITNAME")
              .WriteAttributeString("value", me.WUNITNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetINSURANCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INSURANCE")
              .WriteAttributeString("value", me.INSURANCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PACKLIST = JsonConvert.DeserializeObject(Of PACKLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _SHIPDES = .SHIPDES
                  _PORTNAME = .PORTNAME
                  _PORTDES = .PORTDES
                  _DPORTNAME = .DPORTNAME
                  _DPORTDES = .DPORTDES
                  _SEAL = .SEAL
                  _COUNTRYNAME = .COUNTRYNAME
                  _VOLUME = .VOLUME
                  _VUNITNAME = .VUNITNAME
                  _WEIGHT = .WEIGHT
                  _WUNITNAME = .WUNITNAME
                  _INSURANCE = .INSURANCE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Return Documents")>  _
    Public Class QUERY_DOC_N
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOC_N)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOC_N)
            _Parent = nothing
            _Name = "DOC_N"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOC_N)
            _Parent = Parent
            _name = "DOC_N_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOC_N)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOC_N)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOC_N As DOC_N In JsonConvert.DeserializeObject(Of QUERY_DOC_N)(stream.ReadToEnd).Value
              With _DOC_N
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOC_N)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOC_N = JsonConvert.DeserializeObject(Of DOC_N)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOC_N)
                  .DOCNO = obj.DOCNO
                  .CURDATE = obj.CURDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .DETAILS = obj.DETAILS
                  .FLAG = obj.FLAG
                  .IVALL = obj.IVALL
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DOC = obj.DOC
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOC_N(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOC_N as DOC_N in value
              If _DOC_N.Equals(trycast(obj,DOC_N)) Then
                  value.remove(_DOC_N)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOC_N
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCNO As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _DETAILS As String
        
        Private _FLAG As String
        
        Private _IVALL As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _DOC As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOC_N"
                else
                    return "DOC_N_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOCNO={0},TYPE={1}", _
                  string.format("'{0}'",DOCNO), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Document"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Customer?"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if not(value is nothing) then
                  _FLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credited"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("IVALL")>  _
        Public Property IVALL() As String
            Get
                return _IVALL
            End Get
            Set
                if not(value is nothing) then
                  _IVALL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Document"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOC_N")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOC_N = JsonConvert.DeserializeObject(Of DOC_N)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _CURDATE = .CURDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _DETAILS = .DETAILS
                  _FLAG = .FLAG
                  _IVALL = .IVALL
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DOC = .DOC
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_DOCUMENTSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTSTEXT)
            _Parent = nothing
            _Name = "DOCUMENTSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTSTEXT)
            _Parent = Parent
            _name = "DOCUMENTSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTSTEXT As DOCUMENTSTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTSTEXT)(stream.ReadToEnd).Value
              With _DOCUMENTSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSTEXT = JsonConvert.DeserializeObject(Of DOCUMENTSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTSTEXT as DOCUMENTSTEXT in value
              If _DOCUMENTSTEXT.Equals(trycast(obj,DOCUMENTSTEXT)) Then
                  value.remove(_DOCUMENTSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTSTEXT"
                else
                    return "DOCUMENTSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(10),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSTEXT = JsonConvert.DeserializeObject(Of DOCUMENTSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("List of Styles")>  _
    Public Class QUERY_MATRIXSUM
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUM)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = nothing
            _Name = "MATRIXSUM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = Parent
            _name = "MATRIXSUM_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUM)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUM)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUM As MATRIXSUM In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUM)(stream.ReadToEnd).Value
              With _MATRIXSUM
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUM)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUM)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .SQUANT = obj.SQUANT
                  .SBARCODE = obj.SBARCODE
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .DISTRTYPECODE = obj.DISTRTYPECODE
                  .DISTRTYPEDES = obj.DISTRTYPEDES
                  .XQUANT = obj.XQUANT
                  .NUMPACK = obj.NUMPACK
                  .TOTQUANT = obj.TOTQUANT
                  .DUEDATE = obj.DUEDATE
                  .ACTNAME = obj.ACTNAME
                  .ACTDES = obj.ACTDES
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTNAME = obj.CUSTNAME
                  .TOCUSTNAME = obj.TOCUSTNAME
                  .PRICE = obj.PRICE
                  .CURCODE = obj.CURCODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PERCENT = obj.PERCENT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUM(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUM as MATRIXSUM in value
              If _MATRIXSUM.Equals(trycast(obj,MATRIXSUM)) Then
                  value.remove(_MATRIXSUM)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUM
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetSQUANT As Boolean = Boolean.FalseString
        
        Private _SQUANT As Long
        
        Private _IsSetSBARCODE As Boolean = Boolean.FalseString
        
        Private _SBARCODE As String
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetDISTRTYPECODE As Boolean = Boolean.FalseString
        
        Private _DISTRTYPECODE As String
        
        Private _DISTRTYPEDES As String
        
        Private _XQUANT As Decimal
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetACTNAME As Boolean = Boolean.FalseString
        
        Private _ACTNAME As String
        
        Private _ACTDES As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetTOCUSTNAME As Boolean = Boolean.FalseString
        
        Private _TOCUSTNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetCURCODE As Boolean = Boolean.FalseString
        
        Private _CURCODE As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _MATRIX_SUBFORM As QUERY_MATRIX
        
        Private _MATRIXSUMTEXT_SUBFORM As QUERY_MATRIXSUMTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUM"
                else
                    return "MATRIXSUM_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manual Quantity"),  _
         nType("Edm.Int64"),  _
         tab("Base Product No."),  _
         Pos(13),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable (of int64)
            Get
                return _SQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Manual Quantity", value, "^[0-9\-]+$") then Exit Property
                _IsSetSQUANT = True
                If loading Then
                  _SQUANT = Value
                Else
                    if not _SQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code/Manual"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(14),  _
         twodBarcode("SBARCODE")>  _
        Public Property SBARCODE() As String
            Get
                return _SBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code/Manual", value, "^.{0,16}$") then Exit Property
                _IsSetSBARCODE = True
                If loading Then
                  _SBARCODE = Value
                Else
                    if not _SBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(15),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Distribution Type"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(30),  _
         twodBarcode("DISTRTYPECODE")>  _
        Public Property DISTRTYPECODE() As String
            Get
                return _DISTRTYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distribution Type", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRTYPECODE = True
                If loading Then
                  _DISTRTYPECODE = Value
                Else
                    if not _DISTRTYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRTYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRTYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Type Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRTYPEDES")>  _
        Public Property DISTRTYPEDES() As String
            Get
                return _DISTRTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty in Assortment"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("XQUANT")>  _
        Public Property XQUANT() As nullable(of decimal)
            Get
                return _XQUANT
            End Get
            Set
                if not(value is nothing) then
                  _XQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Assortments"),  _
         nType("Edm.Int64"),  _
         tab("Qty in Assortment"),  _
         Pos(42),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Assortments", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Qty in Assortment"),  _
         Pos(46),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(50),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Operation", value, "^.{0,16}$") then Exit Property
                _IsSetACTNAME = True
                If loading Then
                  _ACTNAME = Value
                Else
                    if not _ACTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation Descrip."),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(60),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(65),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(70),  _
         twodBarcode("TOCUSTNAME")>  _
        Public Property TOCUSTNAME() As String
            Get
                return _TOCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetTOCUSTNAME = True
                If loading Then
                  _TOCUSTNAME = Value
                Else
                    if not _TOCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(80),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(85),  _
         twodBarcode("CURCODE")>  _
        Public Property CURCODE() As String
            Get
                return _CURCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCURCODE = True
                If loading Then
                  _CURCODE = Value
                Else
                    if not _CURCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount(%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(100),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount(%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIX_SUBFORM() As QUERY_MATRIX
            Get
                return _MATRIX_SUBFORM
            End Get
            Set
                _MATRIX_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUMTEXT_SUBFORM() As QUERY_MATRIXSUMTEXT
            Get
                return _MATRIXSUMTEXT_SUBFORM
            End Get
            Set
                _MATRIXSUMTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetSQUANT then
              if f then
                  jw.WriteRaw(", ""SQUANT"": ")
              else
                  jw.WriteRaw("""SQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.SQUANT)
            end if
            if _IsSetSBARCODE then
              if f then
                  jw.WriteRaw(", ""SBARCODE"": ")
              else
                  jw.WriteRaw("""SBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SBARCODE)
            end if
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetDISTRTYPECODE then
              if f then
                  jw.WriteRaw(", ""DISTRTYPECODE"": ")
              else
                  jw.WriteRaw("""DISTRTYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRTYPECODE)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetACTNAME then
              if f then
                  jw.WriteRaw(", ""ACTNAME"": ")
              else
                  jw.WriteRaw("""ACTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACTNAME)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetTOCUSTNAME then
              if f then
                  jw.WriteRaw(", ""TOCUSTNAME"": ")
              else
                  jw.WriteRaw("""TOCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOCUSTNAME)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetCURCODE then
              if f then
                  jw.WriteRaw(", ""CURCODE"": ")
              else
                  jw.WriteRaw("""CURCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURCODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIX_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIX in _MATRIX_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIX_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUMTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUMTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUM")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetSQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SQUANT")
              .WriteAttributeString("value", me.SQUANT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SBARCODE")
              .WriteAttributeString("value", me.SBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetDISTRTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRTYPECODE")
              .WriteAttributeString("value", me.DISTRTYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetACTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACTNAME")
              .WriteAttributeString("value", me.ACTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTOCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOCUSTNAME")
              .WriteAttributeString("value", me.TOCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCURCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURCODE")
              .WriteAttributeString("value", me.CURCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              for each itm as MATRIX in _MATRIX_SUBFORM.Value
                itm.toXML(xw,"MATRIX_SUBFORM")
              next
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUMTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _SQUANT = .SQUANT
                  _SBARCODE = .SBARCODE
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _DISTRTYPECODE = .DISTRTYPECODE
                  _DISTRTYPEDES = .DISTRTYPEDES
                  _XQUANT = .XQUANT
                  _NUMPACK = .NUMPACK
                  _TOTQUANT = .TOTQUANT
                  _DUEDATE = .DUEDATE
                  _ACTNAME = .ACTNAME
                  _ACTDES = .ACTDES
                  _SERIALNAME = .SERIALNAME
                  _CUSTNAME = .CUSTNAME
                  _TOCUSTNAME = .TOCUSTNAME
                  _PRICE = .PRICE
                  _CURCODE = .CURCODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PERCENT = .PERCENT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_MATRIXSUM
        
        MATRIX = 0
        
        MATRIXSUMTEXT = 1
    End Enum
    
    <QueryTitle("Assortment")>  _
    Public Class QUERY_MATRIX
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIX)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = nothing
            _Name = "MATRIX"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = Parent
            _name = "MATRIX_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIX)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIX)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIX As MATRIX In JsonConvert.DeserializeObject(Of QUERY_MATRIX)(stream.ReadToEnd).Value
              With _MATRIX
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIX)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIX)
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .MULT = obj.MULT
                  .TOTALSUM = obj.TOTALSUM
                  .SIZE1 = obj.SIZE1
                  .SIZE2 = obj.SIZE2
                  .SIZE3 = obj.SIZE3
                  .SIZE4 = obj.SIZE4
                  .SIZE5 = obj.SIZE5
                  .SIZE6 = obj.SIZE6
                  .SIZE7 = obj.SIZE7
                  .SIZE8 = obj.SIZE8
                  .SIZE9 = obj.SIZE9
                  .SIZE10 = obj.SIZE10
                  .SIZE11 = obj.SIZE11
                  .SIZE12 = obj.SIZE12
                  .SIZE13 = obj.SIZE13
                  .SIZE14 = obj.SIZE14
                  .SIZE15 = obj.SIZE15
                  .SIZE16 = obj.SIZE16
                  .SIZE17 = obj.SIZE17
                  .SIZE18 = obj.SIZE18
                  .SIZE19 = obj.SIZE19
                  .SIZE20 = obj.SIZE20
                  .SIZE21 = obj.SIZE21
                  .SIZE22 = obj.SIZE22
                  .SIZE23 = obj.SIZE23
                  .SIZE24 = obj.SIZE24
                  .SIZE25 = obj.SIZE25
                  .SIZE26 = obj.SIZE26
                  .SIZE27 = obj.SIZE27
                  .SIZE28 = obj.SIZE28
                  .SIZE29 = obj.SIZE29
                  .SIZE30 = obj.SIZE30
                  .SIZE31 = obj.SIZE31
                  .SIZE32 = obj.SIZE32
                  .SIZE33 = obj.SIZE33
                  .SIZE34 = obj.SIZE34
                  .SIZE35 = obj.SIZE35
                  .SIZE36 = obj.SIZE36
                  .SIZE37 = obj.SIZE37
                  .SIZE38 = obj.SIZE38
                  .SIZE39 = obj.SIZE39
                  .SIZE40 = obj.SIZE40
                  .XCOLOR = obj.XCOLOR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIX(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIX as MATRIX in value
              If _MATRIX.Equals(trycast(obj,MATRIX)) Then
                  value.remove(_MATRIX)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIX
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetMULT As Boolean = Boolean.FalseString
        
        Private _MULT As Long
        
        Private _TOTALSUM As Decimal
        
        Private _IsSetSIZE1 As Boolean = Boolean.FalseString
        
        Private _SIZE1 As Decimal
        
        Private _IsSetSIZE2 As Boolean = Boolean.FalseString
        
        Private _SIZE2 As Decimal
        
        Private _IsSetSIZE3 As Boolean = Boolean.FalseString
        
        Private _SIZE3 As Decimal
        
        Private _IsSetSIZE4 As Boolean = Boolean.FalseString
        
        Private _SIZE4 As Decimal
        
        Private _IsSetSIZE5 As Boolean = Boolean.FalseString
        
        Private _SIZE5 As Decimal
        
        Private _IsSetSIZE6 As Boolean = Boolean.FalseString
        
        Private _SIZE6 As Decimal
        
        Private _IsSetSIZE7 As Boolean = Boolean.FalseString
        
        Private _SIZE7 As Decimal
        
        Private _IsSetSIZE8 As Boolean = Boolean.FalseString
        
        Private _SIZE8 As Decimal
        
        Private _IsSetSIZE9 As Boolean = Boolean.FalseString
        
        Private _SIZE9 As Decimal
        
        Private _IsSetSIZE10 As Boolean = Boolean.FalseString
        
        Private _SIZE10 As Decimal
        
        Private _IsSetSIZE11 As Boolean = Boolean.FalseString
        
        Private _SIZE11 As Decimal
        
        Private _IsSetSIZE12 As Boolean = Boolean.FalseString
        
        Private _SIZE12 As Decimal
        
        Private _IsSetSIZE13 As Boolean = Boolean.FalseString
        
        Private _SIZE13 As Decimal
        
        Private _IsSetSIZE14 As Boolean = Boolean.FalseString
        
        Private _SIZE14 As Decimal
        
        Private _IsSetSIZE15 As Boolean = Boolean.FalseString
        
        Private _SIZE15 As Decimal
        
        Private _IsSetSIZE16 As Boolean = Boolean.FalseString
        
        Private _SIZE16 As Decimal
        
        Private _IsSetSIZE17 As Boolean = Boolean.FalseString
        
        Private _SIZE17 As Decimal
        
        Private _IsSetSIZE18 As Boolean = Boolean.FalseString
        
        Private _SIZE18 As Decimal
        
        Private _IsSetSIZE19 As Boolean = Boolean.FalseString
        
        Private _SIZE19 As Decimal
        
        Private _IsSetSIZE20 As Boolean = Boolean.FalseString
        
        Private _SIZE20 As Decimal
        
        Private _IsSetSIZE21 As Boolean = Boolean.FalseString
        
        Private _SIZE21 As Decimal
        
        Private _IsSetSIZE22 As Boolean = Boolean.FalseString
        
        Private _SIZE22 As Decimal
        
        Private _IsSetSIZE23 As Boolean = Boolean.FalseString
        
        Private _SIZE23 As Decimal
        
        Private _IsSetSIZE24 As Boolean = Boolean.FalseString
        
        Private _SIZE24 As Decimal
        
        Private _IsSetSIZE25 As Boolean = Boolean.FalseString
        
        Private _SIZE25 As Decimal
        
        Private _IsSetSIZE26 As Boolean = Boolean.FalseString
        
        Private _SIZE26 As Decimal
        
        Private _IsSetSIZE27 As Boolean = Boolean.FalseString
        
        Private _SIZE27 As Decimal
        
        Private _IsSetSIZE28 As Boolean = Boolean.FalseString
        
        Private _SIZE28 As Decimal
        
        Private _IsSetSIZE29 As Boolean = Boolean.FalseString
        
        Private _SIZE29 As Decimal
        
        Private _IsSetSIZE30 As Boolean = Boolean.FalseString
        
        Private _SIZE30 As Decimal
        
        Private _IsSetSIZE31 As Boolean = Boolean.FalseString
        
        Private _SIZE31 As Decimal
        
        Private _IsSetSIZE32 As Boolean = Boolean.FalseString
        
        Private _SIZE32 As Decimal
        
        Private _IsSetSIZE33 As Boolean = Boolean.FalseString
        
        Private _SIZE33 As Decimal
        
        Private _IsSetSIZE34 As Boolean = Boolean.FalseString
        
        Private _SIZE34 As Decimal
        
        Private _IsSetSIZE35 As Boolean = Boolean.FalseString
        
        Private _SIZE35 As Decimal
        
        Private _IsSetSIZE36 As Boolean = Boolean.FalseString
        
        Private _SIZE36 As Decimal
        
        Private _IsSetSIZE37 As Boolean = Boolean.FalseString
        
        Private _SIZE37 As Decimal
        
        Private _IsSetSIZE38 As Boolean = Boolean.FalseString
        
        Private _SIZE38 As Decimal
        
        Private _IsSetSIZE39 As Boolean = Boolean.FalseString
        
        Private _SIZE39 As Decimal
        
        Private _IsSetSIZE40 As Boolean = Boolean.FalseString
        
        Private _SIZE40 As Decimal
        
        Private _IsSetXCOLOR As Boolean = Boolean.FalseString
        
        Private _XCOLOR As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIX"
                else
                    return "MATRIX_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "XCOLOR={0}", _
                  string.format("{0}",XCOLOR) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(10),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Number of Sets"),  _
         nType("Edm.Int64"),  _
         tab("Color Code"),  _
         Pos(20),  _
         twodBarcode("MULT")>  _
        Public Property MULT() As nullable (of int64)
            Get
                return _MULT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Sets", value, "^[0-9\-]+$") then Exit Property
                _IsSetMULT = True
                If loading Then
                  _MULT = Value
                Else
                    if not _MULT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MULT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MULT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Color Code"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALSUM")>  _
        Public Property TOTALSUM() As nullable(of decimal)
            Get
                return _TOTALSUM
            End Get
            Set
                if not(value is nothing) then
                  _TOTALSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("1"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(60),  _
         twodBarcode("SIZE1")>  _
        Public Property SIZE1() As nullable(of decimal)
            Get
                return _SIZE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("1", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE1 = True
                If loading Then
                  _SIZE1 = Value
                Else
                    if not _SIZE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("2"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(70),  _
         twodBarcode("SIZE2")>  _
        Public Property SIZE2() As nullable(of decimal)
            Get
                return _SIZE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("2", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE2 = True
                If loading Then
                  _SIZE2 = Value
                Else
                    if not _SIZE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("3"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(80),  _
         twodBarcode("SIZE3")>  _
        Public Property SIZE3() As nullable(of decimal)
            Get
                return _SIZE3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("3", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE3 = True
                If loading Then
                  _SIZE3 = Value
                Else
                    if not _SIZE3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("4"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(90),  _
         twodBarcode("SIZE4")>  _
        Public Property SIZE4() As nullable(of decimal)
            Get
                return _SIZE4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("4", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE4 = True
                If loading Then
                  _SIZE4 = Value
                Else
                    if not _SIZE4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("5"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(100),  _
         twodBarcode("SIZE5")>  _
        Public Property SIZE5() As nullable(of decimal)
            Get
                return _SIZE5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("5", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE5 = True
                If loading Then
                  _SIZE5 = Value
                Else
                    if not _SIZE5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("6"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(110),  _
         twodBarcode("SIZE6")>  _
        Public Property SIZE6() As nullable(of decimal)
            Get
                return _SIZE6
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("6", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE6 = True
                If loading Then
                  _SIZE6 = Value
                Else
                    if not _SIZE6 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE6", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE6 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("7"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(120),  _
         twodBarcode("SIZE7")>  _
        Public Property SIZE7() As nullable(of decimal)
            Get
                return _SIZE7
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("7", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE7 = True
                If loading Then
                  _SIZE7 = Value
                Else
                    if not _SIZE7 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE7", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE7 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("8"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(130),  _
         twodBarcode("SIZE8")>  _
        Public Property SIZE8() As nullable(of decimal)
            Get
                return _SIZE8
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("8", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE8 = True
                If loading Then
                  _SIZE8 = Value
                Else
                    if not _SIZE8 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE8", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE8 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("9"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(140),  _
         twodBarcode("SIZE9")>  _
        Public Property SIZE9() As nullable(of decimal)
            Get
                return _SIZE9
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("9", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE9 = True
                If loading Then
                  _SIZE9 = Value
                Else
                    if not _SIZE9 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE9", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE9 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("10"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(150),  _
         twodBarcode("SIZE10")>  _
        Public Property SIZE10() As nullable(of decimal)
            Get
                return _SIZE10
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("10", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE10 = True
                If loading Then
                  _SIZE10 = Value
                Else
                    if not _SIZE10 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE10", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE10 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("11"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(160),  _
         twodBarcode("SIZE11")>  _
        Public Property SIZE11() As nullable(of decimal)
            Get
                return _SIZE11
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("11", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE11 = True
                If loading Then
                  _SIZE11 = Value
                Else
                    if not _SIZE11 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE11", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE11 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("12"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(170),  _
         twodBarcode("SIZE12")>  _
        Public Property SIZE12() As nullable(of decimal)
            Get
                return _SIZE12
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("12", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE12 = True
                If loading Then
                  _SIZE12 = Value
                Else
                    if not _SIZE12 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE12", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE12 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("13"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(180),  _
         twodBarcode("SIZE13")>  _
        Public Property SIZE13() As nullable(of decimal)
            Get
                return _SIZE13
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("13", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE13 = True
                If loading Then
                  _SIZE13 = Value
                Else
                    if not _SIZE13 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE13", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE13 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("14"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(190),  _
         twodBarcode("SIZE14")>  _
        Public Property SIZE14() As nullable(of decimal)
            Get
                return _SIZE14
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("14", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE14 = True
                If loading Then
                  _SIZE14 = Value
                Else
                    if not _SIZE14 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE14", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE14 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("15"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(200),  _
         twodBarcode("SIZE15")>  _
        Public Property SIZE15() As nullable(of decimal)
            Get
                return _SIZE15
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("15", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE15 = True
                If loading Then
                  _SIZE15 = Value
                Else
                    if not _SIZE15 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE15", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE15 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("16"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(210),  _
         twodBarcode("SIZE16")>  _
        Public Property SIZE16() As nullable(of decimal)
            Get
                return _SIZE16
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("16", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE16 = True
                If loading Then
                  _SIZE16 = Value
                Else
                    if not _SIZE16 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE16", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE16 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("17"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(220),  _
         twodBarcode("SIZE17")>  _
        Public Property SIZE17() As nullable(of decimal)
            Get
                return _SIZE17
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("17", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE17 = True
                If loading Then
                  _SIZE17 = Value
                Else
                    if not _SIZE17 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE17", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE17 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("18"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(230),  _
         twodBarcode("SIZE18")>  _
        Public Property SIZE18() As nullable(of decimal)
            Get
                return _SIZE18
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("18", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE18 = True
                If loading Then
                  _SIZE18 = Value
                Else
                    if not _SIZE18 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE18", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE18 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("19"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(240),  _
         twodBarcode("SIZE19")>  _
        Public Property SIZE19() As nullable(of decimal)
            Get
                return _SIZE19
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("19", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE19 = True
                If loading Then
                  _SIZE19 = Value
                Else
                    if not _SIZE19 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE19", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE19 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("20"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(250),  _
         twodBarcode("SIZE20")>  _
        Public Property SIZE20() As nullable(of decimal)
            Get
                return _SIZE20
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("20", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE20 = True
                If loading Then
                  _SIZE20 = Value
                Else
                    if not _SIZE20 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE20", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE20 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("21"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(260),  _
         twodBarcode("SIZE21")>  _
        Public Property SIZE21() As nullable(of decimal)
            Get
                return _SIZE21
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("21", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE21 = True
                If loading Then
                  _SIZE21 = Value
                Else
                    if not _SIZE21 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE21", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE21 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("22"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(270),  _
         twodBarcode("SIZE22")>  _
        Public Property SIZE22() As nullable(of decimal)
            Get
                return _SIZE22
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("22", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE22 = True
                If loading Then
                  _SIZE22 = Value
                Else
                    if not _SIZE22 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE22", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE22 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("23"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(280),  _
         twodBarcode("SIZE23")>  _
        Public Property SIZE23() As nullable(of decimal)
            Get
                return _SIZE23
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("23", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE23 = True
                If loading Then
                  _SIZE23 = Value
                Else
                    if not _SIZE23 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE23", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE23 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("24"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(290),  _
         twodBarcode("SIZE24")>  _
        Public Property SIZE24() As nullable(of decimal)
            Get
                return _SIZE24
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("24", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE24 = True
                If loading Then
                  _SIZE24 = Value
                Else
                    if not _SIZE24 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE24", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE24 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("25"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(300),  _
         twodBarcode("SIZE25")>  _
        Public Property SIZE25() As nullable(of decimal)
            Get
                return _SIZE25
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("25", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE25 = True
                If loading Then
                  _SIZE25 = Value
                Else
                    if not _SIZE25 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE25", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE25 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("26"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(310),  _
         twodBarcode("SIZE26")>  _
        Public Property SIZE26() As nullable(of decimal)
            Get
                return _SIZE26
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("26", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE26 = True
                If loading Then
                  _SIZE26 = Value
                Else
                    if not _SIZE26 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE26", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE26 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("27"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(320),  _
         twodBarcode("SIZE27")>  _
        Public Property SIZE27() As nullable(of decimal)
            Get
                return _SIZE27
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("27", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE27 = True
                If loading Then
                  _SIZE27 = Value
                Else
                    if not _SIZE27 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE27", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE27 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("28"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(330),  _
         twodBarcode("SIZE28")>  _
        Public Property SIZE28() As nullable(of decimal)
            Get
                return _SIZE28
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("28", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE28 = True
                If loading Then
                  _SIZE28 = Value
                Else
                    if not _SIZE28 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE28", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE28 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("29"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(340),  _
         twodBarcode("SIZE29")>  _
        Public Property SIZE29() As nullable(of decimal)
            Get
                return _SIZE29
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("29", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE29 = True
                If loading Then
                  _SIZE29 = Value
                Else
                    if not _SIZE29 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE29", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE29 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("30"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(350),  _
         twodBarcode("SIZE30")>  _
        Public Property SIZE30() As nullable(of decimal)
            Get
                return _SIZE30
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("30", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE30 = True
                If loading Then
                  _SIZE30 = Value
                Else
                    if not _SIZE30 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE30", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE30 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S31"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(355),  _
         twodBarcode("SIZE31")>  _
        Public Property SIZE31() As nullable(of decimal)
            Get
                return _SIZE31
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S31", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE31 = True
                If loading Then
                  _SIZE31 = Value
                Else
                    if not _SIZE31 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE31", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE31 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S32"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(360),  _
         twodBarcode("SIZE32")>  _
        Public Property SIZE32() As nullable(of decimal)
            Get
                return _SIZE32
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S32", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE32 = True
                If loading Then
                  _SIZE32 = Value
                Else
                    if not _SIZE32 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE32", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE32 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S33"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(365),  _
         twodBarcode("SIZE33")>  _
        Public Property SIZE33() As nullable(of decimal)
            Get
                return _SIZE33
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S33", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE33 = True
                If loading Then
                  _SIZE33 = Value
                Else
                    if not _SIZE33 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE33", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE33 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S34"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(370),  _
         twodBarcode("SIZE34")>  _
        Public Property SIZE34() As nullable(of decimal)
            Get
                return _SIZE34
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S34", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE34 = True
                If loading Then
                  _SIZE34 = Value
                Else
                    if not _SIZE34 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE34", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE34 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S35"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(375),  _
         twodBarcode("SIZE35")>  _
        Public Property SIZE35() As nullable(of decimal)
            Get
                return _SIZE35
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S35", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE35 = True
                If loading Then
                  _SIZE35 = Value
                Else
                    if not _SIZE35 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE35", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE35 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S36"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(380),  _
         twodBarcode("SIZE36")>  _
        Public Property SIZE36() As nullable(of decimal)
            Get
                return _SIZE36
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S36", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE36 = True
                If loading Then
                  _SIZE36 = Value
                Else
                    if not _SIZE36 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE36", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE36 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S37"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(385),  _
         twodBarcode("SIZE37")>  _
        Public Property SIZE37() As nullable(of decimal)
            Get
                return _SIZE37
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S37", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE37 = True
                If loading Then
                  _SIZE37 = Value
                Else
                    if not _SIZE37 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE37", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE37 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S38"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(390),  _
         twodBarcode("SIZE38")>  _
        Public Property SIZE38() As nullable(of decimal)
            Get
                return _SIZE38
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S38", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE38 = True
                If loading Then
                  _SIZE38 = Value
                Else
                    if not _SIZE38 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE38", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE38 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S39"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(395),  _
         twodBarcode("SIZE39")>  _
        Public Property SIZE39() As nullable(of decimal)
            Get
                return _SIZE39
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S39", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE39 = True
                If loading Then
                  _SIZE39 = Value
                Else
                    if not _SIZE39 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE39", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE39 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S40"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(400),  _
         twodBarcode("SIZE40")>  _
        Public Property SIZE40() As nullable(of decimal)
            Get
                return _SIZE40
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S40", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE40 = True
                If loading Then
                  _SIZE40 = Value
                Else
                    if not _SIZE40 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE40", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE40 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color (ID)"),  _
         nType("Edm.Int64"),  _
         tab("S37"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("XCOLOR")>  _
        Public Property XCOLOR() As nullable (of int64)
            Get
                return _XCOLOR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetXCOLOR = True
                If loading Then
                  _XCOLOR = Value
                Else
                    if not _XCOLOR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLOR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLOR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetMULT then
              if f then
                  jw.WriteRaw(", ""MULT"": ")
              else
                  jw.WriteRaw("""MULT"": ")
                  f = true
              end if
              jw.WriteValue(me.MULT)
            end if
            if _IsSetSIZE1 then
              if f then
                  jw.WriteRaw(", ""SIZE1"": ")
              else
                  jw.WriteRaw("""SIZE1"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE1)
            end if
            if _IsSetSIZE2 then
              if f then
                  jw.WriteRaw(", ""SIZE2"": ")
              else
                  jw.WriteRaw("""SIZE2"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE2)
            end if
            if _IsSetSIZE3 then
              if f then
                  jw.WriteRaw(", ""SIZE3"": ")
              else
                  jw.WriteRaw("""SIZE3"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE3)
            end if
            if _IsSetSIZE4 then
              if f then
                  jw.WriteRaw(", ""SIZE4"": ")
              else
                  jw.WriteRaw("""SIZE4"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE4)
            end if
            if _IsSetSIZE5 then
              if f then
                  jw.WriteRaw(", ""SIZE5"": ")
              else
                  jw.WriteRaw("""SIZE5"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE5)
            end if
            if _IsSetSIZE6 then
              if f then
                  jw.WriteRaw(", ""SIZE6"": ")
              else
                  jw.WriteRaw("""SIZE6"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE6)
            end if
            if _IsSetSIZE7 then
              if f then
                  jw.WriteRaw(", ""SIZE7"": ")
              else
                  jw.WriteRaw("""SIZE7"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE7)
            end if
            if _IsSetSIZE8 then
              if f then
                  jw.WriteRaw(", ""SIZE8"": ")
              else
                  jw.WriteRaw("""SIZE8"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE8)
            end if
            if _IsSetSIZE9 then
              if f then
                  jw.WriteRaw(", ""SIZE9"": ")
              else
                  jw.WriteRaw("""SIZE9"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE9)
            end if
            if _IsSetSIZE10 then
              if f then
                  jw.WriteRaw(", ""SIZE10"": ")
              else
                  jw.WriteRaw("""SIZE10"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE10)
            end if
            if _IsSetSIZE11 then
              if f then
                  jw.WriteRaw(", ""SIZE11"": ")
              else
                  jw.WriteRaw("""SIZE11"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE11)
            end if
            if _IsSetSIZE12 then
              if f then
                  jw.WriteRaw(", ""SIZE12"": ")
              else
                  jw.WriteRaw("""SIZE12"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE12)
            end if
            if _IsSetSIZE13 then
              if f then
                  jw.WriteRaw(", ""SIZE13"": ")
              else
                  jw.WriteRaw("""SIZE13"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE13)
            end if
            if _IsSetSIZE14 then
              if f then
                  jw.WriteRaw(", ""SIZE14"": ")
              else
                  jw.WriteRaw("""SIZE14"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE14)
            end if
            if _IsSetSIZE15 then
              if f then
                  jw.WriteRaw(", ""SIZE15"": ")
              else
                  jw.WriteRaw("""SIZE15"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE15)
            end if
            if _IsSetSIZE16 then
              if f then
                  jw.WriteRaw(", ""SIZE16"": ")
              else
                  jw.WriteRaw("""SIZE16"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE16)
            end if
            if _IsSetSIZE17 then
              if f then
                  jw.WriteRaw(", ""SIZE17"": ")
              else
                  jw.WriteRaw("""SIZE17"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE17)
            end if
            if _IsSetSIZE18 then
              if f then
                  jw.WriteRaw(", ""SIZE18"": ")
              else
                  jw.WriteRaw("""SIZE18"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE18)
            end if
            if _IsSetSIZE19 then
              if f then
                  jw.WriteRaw(", ""SIZE19"": ")
              else
                  jw.WriteRaw("""SIZE19"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE19)
            end if
            if _IsSetSIZE20 then
              if f then
                  jw.WriteRaw(", ""SIZE20"": ")
              else
                  jw.WriteRaw("""SIZE20"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE20)
            end if
            if _IsSetSIZE21 then
              if f then
                  jw.WriteRaw(", ""SIZE21"": ")
              else
                  jw.WriteRaw("""SIZE21"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE21)
            end if
            if _IsSetSIZE22 then
              if f then
                  jw.WriteRaw(", ""SIZE22"": ")
              else
                  jw.WriteRaw("""SIZE22"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE22)
            end if
            if _IsSetSIZE23 then
              if f then
                  jw.WriteRaw(", ""SIZE23"": ")
              else
                  jw.WriteRaw("""SIZE23"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE23)
            end if
            if _IsSetSIZE24 then
              if f then
                  jw.WriteRaw(", ""SIZE24"": ")
              else
                  jw.WriteRaw("""SIZE24"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE24)
            end if
            if _IsSetSIZE25 then
              if f then
                  jw.WriteRaw(", ""SIZE25"": ")
              else
                  jw.WriteRaw("""SIZE25"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE25)
            end if
            if _IsSetSIZE26 then
              if f then
                  jw.WriteRaw(", ""SIZE26"": ")
              else
                  jw.WriteRaw("""SIZE26"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE26)
            end if
            if _IsSetSIZE27 then
              if f then
                  jw.WriteRaw(", ""SIZE27"": ")
              else
                  jw.WriteRaw("""SIZE27"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE27)
            end if
            if _IsSetSIZE28 then
              if f then
                  jw.WriteRaw(", ""SIZE28"": ")
              else
                  jw.WriteRaw("""SIZE28"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE28)
            end if
            if _IsSetSIZE29 then
              if f then
                  jw.WriteRaw(", ""SIZE29"": ")
              else
                  jw.WriteRaw("""SIZE29"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE29)
            end if
            if _IsSetSIZE30 then
              if f then
                  jw.WriteRaw(", ""SIZE30"": ")
              else
                  jw.WriteRaw("""SIZE30"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE30)
            end if
            if _IsSetSIZE31 then
              if f then
                  jw.WriteRaw(", ""SIZE31"": ")
              else
                  jw.WriteRaw("""SIZE31"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE31)
            end if
            if _IsSetSIZE32 then
              if f then
                  jw.WriteRaw(", ""SIZE32"": ")
              else
                  jw.WriteRaw("""SIZE32"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE32)
            end if
            if _IsSetSIZE33 then
              if f then
                  jw.WriteRaw(", ""SIZE33"": ")
              else
                  jw.WriteRaw("""SIZE33"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE33)
            end if
            if _IsSetSIZE34 then
              if f then
                  jw.WriteRaw(", ""SIZE34"": ")
              else
                  jw.WriteRaw("""SIZE34"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE34)
            end if
            if _IsSetSIZE35 then
              if f then
                  jw.WriteRaw(", ""SIZE35"": ")
              else
                  jw.WriteRaw("""SIZE35"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE35)
            end if
            if _IsSetSIZE36 then
              if f then
                  jw.WriteRaw(", ""SIZE36"": ")
              else
                  jw.WriteRaw("""SIZE36"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE36)
            end if
            if _IsSetSIZE37 then
              if f then
                  jw.WriteRaw(", ""SIZE37"": ")
              else
                  jw.WriteRaw("""SIZE37"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE37)
            end if
            if _IsSetSIZE38 then
              if f then
                  jw.WriteRaw(", ""SIZE38"": ")
              else
                  jw.WriteRaw("""SIZE38"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE38)
            end if
            if _IsSetSIZE39 then
              if f then
                  jw.WriteRaw(", ""SIZE39"": ")
              else
                  jw.WriteRaw("""SIZE39"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE39)
            end if
            if _IsSetSIZE40 then
              if f then
                  jw.WriteRaw(", ""SIZE40"": ")
              else
                  jw.WriteRaw("""SIZE40"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE40)
            end if
            if _IsSetXCOLOR then
              if f then
                  jw.WriteRaw(", ""XCOLOR"": ")
              else
                  jw.WriteRaw("""XCOLOR"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLOR)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIX")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetMULT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MULT")
              .WriteAttributeString("value", me.MULT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSIZE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE1")
              .WriteAttributeString("value", me.SIZE1)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE2")
              .WriteAttributeString("value", me.SIZE2)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE3")
              .WriteAttributeString("value", me.SIZE3)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE4")
              .WriteAttributeString("value", me.SIZE4)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE5")
              .WriteAttributeString("value", me.SIZE5)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE6 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE6")
              .WriteAttributeString("value", me.SIZE6)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE7 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE7")
              .WriteAttributeString("value", me.SIZE7)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE8 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE8")
              .WriteAttributeString("value", me.SIZE8)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE9 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE9")
              .WriteAttributeString("value", me.SIZE9)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE10 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE10")
              .WriteAttributeString("value", me.SIZE10)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE11 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE11")
              .WriteAttributeString("value", me.SIZE11)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE12 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE12")
              .WriteAttributeString("value", me.SIZE12)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE13 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE13")
              .WriteAttributeString("value", me.SIZE13)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE14 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE14")
              .WriteAttributeString("value", me.SIZE14)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE15 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE15")
              .WriteAttributeString("value", me.SIZE15)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE16 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE16")
              .WriteAttributeString("value", me.SIZE16)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE17 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE17")
              .WriteAttributeString("value", me.SIZE17)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE18 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE18")
              .WriteAttributeString("value", me.SIZE18)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE19 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE19")
              .WriteAttributeString("value", me.SIZE19)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE20 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE20")
              .WriteAttributeString("value", me.SIZE20)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE21 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE21")
              .WriteAttributeString("value", me.SIZE21)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE22 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE22")
              .WriteAttributeString("value", me.SIZE22)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE23 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE23")
              .WriteAttributeString("value", me.SIZE23)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE24 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE24")
              .WriteAttributeString("value", me.SIZE24)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE25 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE25")
              .WriteAttributeString("value", me.SIZE25)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE26 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE26")
              .WriteAttributeString("value", me.SIZE26)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE27 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE27")
              .WriteAttributeString("value", me.SIZE27)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE28 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE28")
              .WriteAttributeString("value", me.SIZE28)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE29 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE29")
              .WriteAttributeString("value", me.SIZE29)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE30 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE30")
              .WriteAttributeString("value", me.SIZE30)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE31 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE31")
              .WriteAttributeString("value", me.SIZE31)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE32 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE32")
              .WriteAttributeString("value", me.SIZE32)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE33 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE33")
              .WriteAttributeString("value", me.SIZE33)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE34 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE34")
              .WriteAttributeString("value", me.SIZE34)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE35 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE35")
              .WriteAttributeString("value", me.SIZE35)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE36 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE36")
              .WriteAttributeString("value", me.SIZE36)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE37 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE37")
              .WriteAttributeString("value", me.SIZE37)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE38 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE38")
              .WriteAttributeString("value", me.SIZE38)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE39 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE39")
              .WriteAttributeString("value", me.SIZE39)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE40 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE40")
              .WriteAttributeString("value", me.SIZE40)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetXCOLOR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", me.XCOLOR)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With obj
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _MULT = .MULT
                  _TOTALSUM = .TOTALSUM
                  _SIZE1 = .SIZE1
                  _SIZE2 = .SIZE2
                  _SIZE3 = .SIZE3
                  _SIZE4 = .SIZE4
                  _SIZE5 = .SIZE5
                  _SIZE6 = .SIZE6
                  _SIZE7 = .SIZE7
                  _SIZE8 = .SIZE8
                  _SIZE9 = .SIZE9
                  _SIZE10 = .SIZE10
                  _SIZE11 = .SIZE11
                  _SIZE12 = .SIZE12
                  _SIZE13 = .SIZE13
                  _SIZE14 = .SIZE14
                  _SIZE15 = .SIZE15
                  _SIZE16 = .SIZE16
                  _SIZE17 = .SIZE17
                  _SIZE18 = .SIZE18
                  _SIZE19 = .SIZE19
                  _SIZE20 = .SIZE20
                  _SIZE21 = .SIZE21
                  _SIZE22 = .SIZE22
                  _SIZE23 = .SIZE23
                  _SIZE24 = .SIZE24
                  _SIZE25 = .SIZE25
                  _SIZE26 = .SIZE26
                  _SIZE27 = .SIZE27
                  _SIZE28 = .SIZE28
                  _SIZE29 = .SIZE29
                  _SIZE30 = .SIZE30
                  _SIZE31 = .SIZE31
                  _SIZE32 = .SIZE32
                  _SIZE33 = .SIZE33
                  _SIZE34 = .SIZE34
                  _SIZE35 = .SIZE35
                  _SIZE36 = .SIZE36
                  _SIZE37 = .SIZE37
                  _SIZE38 = .SIZE38
                  _SIZE39 = .SIZE39
                  _SIZE40 = .SIZE40
                  _XCOLOR = .XCOLOR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_MATRIXSUMTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUMTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = nothing
            _Name = "MATRIXSUMTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = Parent
            _name = "MATRIXSUMTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUMTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUMTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUMTEXT As MATRIXSUMTEXT In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUMTEXT)(stream.ReadToEnd).Value
              With _MATRIXSUMTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUMTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUMTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUMTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUMTEXT as MATRIXSUMTEXT in value
              If _MATRIXSUMTEXT.Equals(trycast(obj,MATRIXSUMTEXT)) Then
                  value.remove(_MATRIXSUMTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUMTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUMTEXT"
                else
                    return "MATRIXSUMTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(4),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(5),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUMTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer's Inventory")>  _
    Public Class QUERY_CUSTBALANCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTBALANCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTBALANCE)
            _Parent = nothing
            _Name = "CUSTBALANCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTBALANCE)
            _Parent = Parent
            _name = "CUSTBALANCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTBALANCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTBALANCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTBALANCE As CUSTBALANCE In JsonConvert.DeserializeObject(Of QUERY_CUSTBALANCE)(stream.ReadToEnd).Value
              With _CUSTBALANCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTBALANCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTBALANCE = JsonConvert.DeserializeObject(Of CUSTBALANCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTBALANCE)
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .TYPE = obj.TYPE
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .SERIALNAME = obj.SERIALNAME
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .ACTNAME = obj.ACTNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .LASTDATE = obj.LASTDATE
                  .ACT = obj.ACT
                  .PART = obj.PART
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTBALANCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTBALANCE as CUSTBALANCE in value
              If _CUSTBALANCE.Equals(trycast(obj,CUSTBALANCE)) Then
                  value.remove(_CUSTBALANCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTBALANCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _TYPE As String
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _SERIALNAME As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _ACTNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _LASTDATE As System.DateTimeOffset
        
        Private _ACT As Long
        
        Private _PART As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTBALANCE"
                else
                    return "CUSTBALANCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},PART={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",PART), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (D/F/W)"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(8),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(9),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Warehouse"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Lot/Work Order"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Expir. Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Last Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("LASTDATE")>  _
        Public Property LASTDATE() As nullable (of DateTimeOffset)
            Get
                return _LASTDATE
            End Get
            Set
                if not(value is nothing) then
                  _LASTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Expir. Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Expir. Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Expir. Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Warehouse (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTBALANCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTBALANCE = JsonConvert.DeserializeObject(Of CUSTBALANCE)(e.StreamReader.ReadToEnd)
                With obj
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _TYPE = .TYPE
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _SERIALNAME = .SERIALNAME
                  _EXPIRYDATE = .EXPIRYDATE
                  _ACTNAME = .ACTNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _LASTDATE = .LASTDATE
                  _ACT = .ACT
                  _PART = .PART
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Credit")>  _
    Public Class QUERY_CUSTOBLIGO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = nothing
            _Name = "CUSTOBLIGO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = Parent
            _name = "CUSTOBLIGO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGO As CUSTOBLIGO In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGO)(stream.ReadToEnd).Value
              With _CUSTOBLIGO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGO)
                  .ORD_DEBIT = obj.ORD_DEBIT
                  .DOC_DEBIT = obj.DOC_DEBIT
                  .PROJ_DEBIT = obj.PROJ_DEBIT
                  .IV_DEBIT = obj.IV_DEBIT
                  .ACC_DEBIT = obj.ACC_DEBIT
                  .CHEQUE_DEBIT = obj.CHEQUE_DEBIT
                  .CODE = obj.CODE
                  .OLD = obj.OLD
                  .UPTO90 = obj.UPTO90
                  .UPTO60 = obj.UPTO60
                  .UPTO30 = obj.UPTO30
                  .FUTURE = obj.FUTURE
                  .TOTOLD = obj.TOTOLD
                  .CREDIT = obj.CREDIT
                  .MAX_CREDIT = obj.MAX_CREDIT
                  .CREDIT_DIFF = obj.CREDIT_DIFF
                  .CRCODE = obj.CRCODE
                  .OBLIGO = obj.OBLIGO
                  .MAX_OBLIGO = obj.MAX_OBLIGO
                  .OBLIGO_DIFF = obj.OBLIGO_DIFF
                  .OBCODE = obj.OBCODE
                  .STATDES = obj.STATDES
                  .RESTRICTDATE = obj.RESTRICTDATE
                  .WAITING = obj.WAITING
                  .THISMONTH = obj.THISMONTH
                  .NEXTMONTH = obj.NEXTMONTH
                  .TWOMONTHS = obj.TWOMONTHS
                  .FUTURECHEQUES = obj.FUTURECHEQUES
                  .SECURECHECKS = obj.SECURECHECKS
                  .CREDITCARDS = obj.CREDITCARDS
                  .MAX_CREDIT_ENV = obj.MAX_CREDIT_ENV
                  .CREDIT_ENV = obj.CREDIT_ENV
                  .CREDIT_ENV_DIFF = obj.CREDIT_ENV_DIFF
                  .CR_CODE_ENV = obj.CR_CODE_ENV
                  .MAX_OBLIGO_ENV = obj.MAX_OBLIGO_ENV
                  .OBLIGO_ENV = obj.OBLIGO_ENV
                  .OBLIGO_ENV_DIFF = obj.OBLIGO_ENV_DIFF
                  .OB_CODE_ENV = obj.OB_CODE_ENV
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGO as CUSTOBLIGO in value
              If _CUSTOBLIGO.Equals(trycast(obj,CUSTOBLIGO)) Then
                  value.remove(_CUSTOBLIGO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORD_DEBIT As Decimal
        
        Private _DOC_DEBIT As Decimal
        
        Private _PROJ_DEBIT As Decimal
        
        Private _IV_DEBIT As Decimal
        
        Private _ACC_DEBIT As Decimal
        
        Private _CHEQUE_DEBIT As Decimal
        
        Private _CODE As String
        
        Private _OLD As Decimal
        
        Private _UPTO90 As Decimal
        
        Private _UPTO60 As Decimal
        
        Private _UPTO30 As Decimal
        
        Private _FUTURE As Decimal
        
        Private _TOTOLD As Decimal
        
        Private _CREDIT As Decimal
        
        Private _MAX_CREDIT As Decimal
        
        Private _CREDIT_DIFF As Decimal
        
        Private _CRCODE As String
        
        Private _OBLIGO As Decimal
        
        Private _MAX_OBLIGO As Decimal
        
        Private _OBLIGO_DIFF As Decimal
        
        Private _OBCODE As String
        
        Private _STATDES As String
        
        Private _RESTRICTDATE As System.DateTimeOffset
        
        Private _WAITING As Decimal
        
        Private _THISMONTH As Decimal
        
        Private _NEXTMONTH As Decimal
        
        Private _TWOMONTHS As Decimal
        
        Private _FUTURECHEQUES As Decimal
        
        Private _SECURECHECKS As Decimal
        
        Private _CREDITCARDS As Decimal
        
        Private _MAX_CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV_DIFF As Decimal
        
        Private _CR_CODE_ENV As String
        
        Private _MAX_OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV_DIFF As Decimal
        
        Private _OB_CODE_ENV As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _CUST As Long
        
        Private _OBLIGO_ORDERS_SUBFORM As QUERY_OBLIGO_ORDERS
        
        Private _OBLIGO_TRANS_SUBFORM As QUERY_OBLIGO_TRANS
        
        Private _OBLIGO_PROJ_SUBFORM As QUERY_OBLIGO_PROJ
        
        Private _OBLIGO_IV_SUBFORM As QUERY_OBLIGO_IV
        
        Private _OBLIGO_FNCITEMS_SUBFORM As QUERY_OBLIGO_FNCITEMS
        
        Private _OBLIGO_CHECKS_SUBFORM As QUERY_OBLIGO_CHECKS
        
        Private _OBLIGO_CHECKS2_SUBFORM As QUERY_OBLIGO_CHECKS2
        
        Private _SECURE_CHECKS_SUBFORM As QUERY_SECURE_CHECKS
        
        Private _OBLIGO_FNCBAL5_SUBFORM As QUERY_OBLIGO_FNCBAL5
        
        Private _CUSTOBLIGOENV_SUBFORM As QUERY_CUSTOBLIGOENV
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGO"
                else
                    return "CUSTOBLIGO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORD_DEBIT")>  _
        Public Property ORD_DEBIT() As nullable(of decimal)
            Get
                return _ORD_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ORD_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Documents"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOC_DEBIT")>  _
        Public Property DOC_DEBIT() As nullable(of decimal)
            Get
                return _DOC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DOC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Project Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PROJ_DEBIT")>  _
        Public Property PROJ_DEBIT() As nullable(of decimal)
            Get
                return _PROJ_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _PROJ_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Pending Sales Invs."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IV_DEBIT")>  _
        Public Property IV_DEBIT() As nullable(of decimal)
            Get
                return _IV_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _IV_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unpaid Bills"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ACC_DEBIT")>  _
        Public Property ACC_DEBIT() As nullable(of decimal)
            Get
                return _ACC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ACC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CHEQUE_DEBIT")>  _
        Public Property CHEQUE_DEBIT() As nullable(of decimal)
            Get
                return _CHEQUE_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _CHEQUE_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Open Orders"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("> 90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLD")>  _
        Public Property OLD() As nullable(of decimal)
            Get
                return _OLD
            End Get
            Set
                if not(value is nothing) then
                  _OLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("61-90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO90")>  _
        Public Property UPTO90() As nullable(of decimal)
            Get
                return _UPTO90
            End Get
            Set
                if not(value is nothing) then
                  _UPTO90 = Value
                end if
            End Set
        End Property
        
        <DisplayName("31-60"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO60")>  _
        Public Property UPTO60() As nullable(of decimal)
            Get
                return _UPTO60
            End Get
            Set
                if not(value is nothing) then
                  _UPTO60 = Value
                end if
            End Set
        End Property
        
        <DisplayName("1-30"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO30")>  _
        Public Property UPTO30() As nullable(of decimal)
            Get
                return _UPTO30
            End Get
            Set
                if not(value is nothing) then
                  _UPTO30 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURE")>  _
        Public Property FUTURE() As nullable(of decimal)
            Get
                return _FUTURE
            End Get
            Set
                if not(value is nothing) then
                  _FUTURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total for Aging"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TOTOLD")>  _
        Public Property TOTOLD() As nullable(of decimal)
            Get
                return _TOTOLD
            End Get
            Set
                if not(value is nothing) then
                  _TOTOLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT")>  _
        Public Property MAX_CREDIT() As nullable(of decimal)
            Get
                return _MAX_CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("61-90"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_DIFF")>  _
        Public Property CREDIT_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if not(value is nothing) then
                  _CRCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO")>  _
        Public Property MAX_OBLIGO() As nullable(of decimal)
            Get
                return _MAX_OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Credit Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_DIFF")>  _
        Public Property OBLIGO_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liab. Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("OBCODE")>  _
        Public Property OBCODE() As String
            Get
                return _OBCODE
            End Get
            Set
                if not(value is nothing) then
                  _OBCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Status"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Restricted"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Credit Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("RESTRICTDATE")>  _
        Public Property RESTRICTDATE() As nullable (of DateTimeOffset)
            Get
                return _RESTRICTDATE
            End Get
            Set
                if not(value is nothing) then
                  _RESTRICTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Awaiting Clearance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WAITING")>  _
        Public Property WAITING() As nullable(of decimal)
            Get
                return _WAITING
            End Get
            Set
                if not(value is nothing) then
                  _WAITING = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated This Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("THISMONTH")>  _
        Public Property THISMONTH() As nullable(of decimal)
            Get
                return _THISMONTH
            End Get
            Set
                if not(value is nothing) then
                  _THISMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Next Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("NEXTMONTH")>  _
        Public Property NEXTMONTH() As nullable(of decimal)
            Get
                return _NEXTMONTH
            End Get
            Set
                if not(value is nothing) then
                  _NEXTMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2 Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("TWOMONTHS")>  _
        Public Property TWOMONTHS() As nullable(of decimal)
            Get
                return _TWOMONTHS
            End Get
            Set
                if not(value is nothing) then
                  _TWOMONTHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2+ Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURECHEQUES")>  _
        Public Property FUTURECHEQUES() As nullable(of decimal)
            Get
                return _FUTURECHEQUES
            End Get
            Set
                if not(value is nothing) then
                  _FUTURECHEQUES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Secure Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SECURECHECKS")>  _
        Public Property SECURECHECKS() As nullable(of decimal)
            Get
                return _SECURECHECKS
            End Get
            Set
                if not(value is nothing) then
                  _SECURECHECKS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Cards"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(234),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITCARDS")>  _
        Public Property CREDITCARDS() As nullable(of decimal)
            Get
                return _CREDITCARDS
            End Get
            Set
                if not(value is nothing) then
                  _CREDITCARDS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Cred Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT_ENV")>  _
        Public Property MAX_CREDIT_ENV() As nullable(of decimal)
            Get
                return _MAX_CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV")>  _
        Public Property CREDIT_ENV() As nullable(of decimal)
            Get
                return _CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV_DIFF")>  _
        Public Property CREDIT_ENV_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CR_CODE_ENV")>  _
        Public Property CR_CODE_ENV() As String
            Get
                return _CR_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CR_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liab Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO_ENV")>  _
        Public Property MAX_OBLIGO_ENV() As nullable(of decimal)
            Get
                return _MAX_OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV")>  _
        Public Property OBLIGO_ENV() As nullable(of decimal)
            Get
                return _OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liabil Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV_DIFF")>  _
        Public Property OBLIGO_ENV_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("OB_CODE_ENV")>  _
        Public Property OB_CODE_ENV() As String
            Get
                return _OB_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OB_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (No.)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(315),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (Name)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_ORDERS_SUBFORM() As QUERY_OBLIGO_ORDERS
            Get
                return _OBLIGO_ORDERS_SUBFORM
            End Get
            Set
                _OBLIGO_ORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_TRANS_SUBFORM() As QUERY_OBLIGO_TRANS
            Get
                return _OBLIGO_TRANS_SUBFORM
            End Get
            Set
                _OBLIGO_TRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_PROJ_SUBFORM() As QUERY_OBLIGO_PROJ
            Get
                return _OBLIGO_PROJ_SUBFORM
            End Get
            Set
                _OBLIGO_PROJ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_IV_SUBFORM() As QUERY_OBLIGO_IV
            Get
                return _OBLIGO_IV_SUBFORM
            End Get
            Set
                _OBLIGO_IV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCITEMS_SUBFORM() As QUERY_OBLIGO_FNCITEMS
            Get
                return _OBLIGO_FNCITEMS_SUBFORM
            End Get
            Set
                _OBLIGO_FNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS_SUBFORM() As QUERY_OBLIGO_CHECKS
            Get
                return _OBLIGO_CHECKS_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS2_SUBFORM() As QUERY_OBLIGO_CHECKS2
            Get
                return _OBLIGO_CHECKS2_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SECURE_CHECKS_SUBFORM() As QUERY_SECURE_CHECKS
            Get
                return _SECURE_CHECKS_SUBFORM
            End Get
            Set
                _SECURE_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCBAL5_SUBFORM() As QUERY_OBLIGO_FNCBAL5
            Get
                return _OBLIGO_FNCBAL5_SUBFORM
            End Get
            Set
                _OBLIGO_FNCBAL5_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGOENV_SUBFORM() As QUERY_CUSTOBLIGOENV
            Get
                return _CUSTOBLIGOENV_SUBFORM
            End Get
            Set
                _CUSTOBLIGOENV_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_ORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_ORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_TRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_TRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_PROJ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_PROJ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_IV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_IV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SECURE_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SECURE_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCBAL5_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCBAL5_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGOENV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGOENV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_ORDERS_SUBFORM")
              next
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_TRANS_SUBFORM")
              next
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_PROJ_SUBFORM")
              next
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_IV_SUBFORM")
              next
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCITEMS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS2_SUBFORM")
              next
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.Value
                itm.toXML(xw,"SECURE_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCBAL5_SUBFORM")
              next
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGOENV_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD_DEBIT = .ORD_DEBIT
                  _DOC_DEBIT = .DOC_DEBIT
                  _PROJ_DEBIT = .PROJ_DEBIT
                  _IV_DEBIT = .IV_DEBIT
                  _ACC_DEBIT = .ACC_DEBIT
                  _CHEQUE_DEBIT = .CHEQUE_DEBIT
                  _CODE = .CODE
                  _OLD = .OLD
                  _UPTO90 = .UPTO90
                  _UPTO60 = .UPTO60
                  _UPTO30 = .UPTO30
                  _FUTURE = .FUTURE
                  _TOTOLD = .TOTOLD
                  _CREDIT = .CREDIT
                  _MAX_CREDIT = .MAX_CREDIT
                  _CREDIT_DIFF = .CREDIT_DIFF
                  _CRCODE = .CRCODE
                  _OBLIGO = .OBLIGO
                  _MAX_OBLIGO = .MAX_OBLIGO
                  _OBLIGO_DIFF = .OBLIGO_DIFF
                  _OBCODE = .OBCODE
                  _STATDES = .STATDES
                  _RESTRICTDATE = .RESTRICTDATE
                  _WAITING = .WAITING
                  _THISMONTH = .THISMONTH
                  _NEXTMONTH = .NEXTMONTH
                  _TWOMONTHS = .TWOMONTHS
                  _FUTURECHEQUES = .FUTURECHEQUES
                  _SECURECHECKS = .SECURECHECKS
                  _CREDITCARDS = .CREDITCARDS
                  _MAX_CREDIT_ENV = .MAX_CREDIT_ENV
                  _CREDIT_ENV = .CREDIT_ENV
                  _CREDIT_ENV_DIFF = .CREDIT_ENV_DIFF
                  _CR_CODE_ENV = .CR_CODE_ENV
                  _MAX_OBLIGO_ENV = .MAX_OBLIGO_ENV
                  _OBLIGO_ENV = .OBLIGO_ENV
                  _OBLIGO_ENV_DIFF = .OBLIGO_ENV_DIFF
                  _OB_CODE_ENV = .OB_CODE_ENV
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTOBLIGO
        
        OBLIGO_ORDERS = 0
        
        OBLIGO_TRANS = 1
        
        OBLIGO_PROJ = 2
        
        OBLIGO_IV = 3
        
        OBLIGO_FNCITEMS = 4
        
        OBLIGO_CHECKS = 5
        
        OBLIGO_CHECKS2 = 6
        
        SECURE_CHECKS = 7
        
        OBLIGO_FNCBAL5 = 8
        
        CUSTOBLIGOENV = 9
    End Enum
    
    <QueryTitle("Open Orders")>  _
    Public Class QUERY_OBLIGO_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = nothing
            _Name = "OBLIGO_ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = Parent
            _name = "OBLIGO_ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_ORDERS As OBLIGO_ORDERS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_ORDERS)(stream.ReadToEnd).Value
              With _OBLIGO_ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_ORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .PRICEBAL1 = obj.PRICEBAL1
                  .CODE = obj.CODE
                  .PRICEBAL2 = obj.PRICEBAL2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .ORD2 = obj.ORD2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_ORDERS as OBLIGO_ORDERS in value
              If _OBLIGO_ORDERS.Equals(trycast(obj,OBLIGO_ORDERS)) Then
                  value.remove(_OBLIGO_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICEBAL1 As Decimal
        
        Private _CODE As String
        
        Private _PRICEBAL2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _ORD2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_ORDERS"
                else
                    return "OBLIGO_ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL1")>  _
        Public Property PRICEBAL1() As nullable(of decimal)
            Get
                return _PRICEBAL1
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Value"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL2")>  _
        Public Property PRICEBAL2() As nullable(of decimal)
            Get
                return _PRICEBAL2
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Value"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD2")>  _
        Public Property ORD2() As nullable (of int64)
            Get
                return _ORD2
            End Get
            Set
                if not(value is nothing) then
                  _ORD2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _PRICEBAL1 = .PRICEBAL1
                  _CODE = .CODE
                  _PRICEBAL2 = .PRICEBAL2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _ORD2 = .ORD2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Documents")>  _
    Public Class QUERY_OBLIGO_TRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_TRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = nothing
            _Name = "OBLIGO_TRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = Parent
            _name = "OBLIGO_TRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_TRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_TRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_TRANS As OBLIGO_TRANS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_TRANS)(stream.ReadToEnd).Value
              With _OBLIGO_TRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_TRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_TRANS)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_TRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_TRANS as OBLIGO_TRANS in value
              If _OBLIGO_TRANS.Equals(trycast(obj,OBLIGO_TRANS)) Then
                  value.remove(_OBLIGO_TRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_TRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DOCCODE As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_TRANS"
                else
                    return "OBLIGO_TRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if not(value is nothing) then
                  _DOCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Amount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_TRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Project Hours")>  _
    Public Class QUERY_OBLIGO_PROJ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_PROJ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = nothing
            _Name = "OBLIGO_PROJ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = Parent
            _name = "OBLIGO_PROJ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_PROJ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_PROJ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_PROJ As OBLIGO_PROJ In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_PROJ)(stream.ReadToEnd).Value
              With _OBLIGO_PROJ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_PROJ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_PROJ)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .USERLOGIN = obj.USERLOGIN
                  .TRANS = obj.TRANS
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_PROJ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_PROJ as OBLIGO_PROJ in value
              If _OBLIGO_PROJ.Equals(trycast(obj,OBLIGO_PROJ)) Then
                  value.remove(_OBLIGO_PROJ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_PROJ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _USERLOGIN As String
        
        Private _TRANS As Long
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_PROJ"
                else
                    return "OBLIGO_PROJ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_PROJ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _USERLOGIN = .USERLOGIN
                  _TRANS = .TRANS
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pending Sales Invoices")>  _
    Public Class QUERY_OBLIGO_IV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_IV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = nothing
            _Name = "OBLIGO_IV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = Parent
            _name = "OBLIGO_IV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_IV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_IV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_IV As OBLIGO_IV In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_IV)(stream.ReadToEnd).Value
              With _OBLIGO_IV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_IV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_IV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .DEBIT = obj.DEBIT
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_IV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_IV as OBLIGO_IV in value
              If _OBLIGO_IV.Equals(trycast(obj,OBLIGO_IV)) Then
                  value.remove(_OBLIGO_IV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_IV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _DEBIT As String
        
        Private _IV As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_IV"
                else
                    return "OBLIGO_IV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},TYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_IV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _DEBIT = .DEBIT
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unpaid Bills")>  _
    Public Class QUERY_OBLIGO_FNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = nothing
            _Name = "OBLIGO_FNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = Parent
            _name = "OBLIGO_FNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCITEMS As OBLIGO_FNCITEMS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCITEMS)(stream.ReadToEnd).Value
              With _OBLIGO_FNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCITEMS)
                  .BALDATE = obj.BALDATE
                  .FNCNUM = obj.FNCNUM
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .SUM1 = obj.SUM1
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCIREF1 = obj.FNCIREF1
                  .FNCIREF2 = obj.FNCIREF2
                  .ORDNAME = obj.ORDNAME
                  .FNCICODE = obj.FNCICODE
                  .ACCNAME = obj.ACCNAME
                  .SUM5 = obj.SUM5
                  .CODE5 = obj.CODE5
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCITEMS as OBLIGO_FNCITEMS in value
              If _OBLIGO_FNCITEMS.Equals(trycast(obj,OBLIGO_FNCITEMS)) Then
                  value.remove(_OBLIGO_FNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _FNCNUM As String
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _SUM1 As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCIREF1 As String
        
        Private _FNCIREF2 As String
        
        Private _ORDNAME As String
        
        Private _FNCICODE As String
        
        Private _ACCNAME As String
        
        Private _SUM5 As Decimal
        
        Private _CODE5 As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCITEMS"
                else
                    return "OBLIGO_FNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(20),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUM1")>  _
        Public Property SUM1() As nullable(of decimal)
            Get
                return _SUM1
            End Get
            Set
                if not(value is nothing) then
                  _SUM1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Due Date"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 1 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF1")>  _
        Public Property FNCIREF1() As String
            Get
                return _FNCIREF1
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 2 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF2")>  _
        Public Property FNCIREF2() As String
            Get
                return _FNCIREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if not(value is nothing) then
                  _FNCICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Due Date"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("SUM5")>  _
        Public Property SUM5() As nullable(of decimal)
            Get
                return _SUM5
            End Get
            Set
                if not(value is nothing) then
                  _SUM5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _FNCNUM = .FNCNUM
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _SUM1 = .SUM1
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCIREF1 = .FNCIREF1
                  _FNCIREF2 = .FNCIREF2
                  _ORDNAME = .ORDNAME
                  _FNCICODE = .FNCICODE
                  _ACCNAME = .ACCNAME
                  _SUM5 = .SUM5
                  _CODE5 = .CODE5
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Post-dated Cheques")>  _
    Public Class QUERY_OBLIGO_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = Parent
            _name = "OBLIGO_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS As OBLIGO_CHECKS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS as OBLIGO_CHECKS in value
              If _OBLIGO_CHECKS.Equals(trycast(obj,OBLIGO_CHECKS)) Then
                  value.remove(_OBLIGO_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS"
                else
                    return "OBLIGO_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Cheques Past Due Date")>  _
    Public Class QUERY_OBLIGO_CHECKS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = Parent
            _name = "OBLIGO_CHECKS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS2 As OBLIGO_CHECKS2 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS2)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS2)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENTA = obj.PAYMENTA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS2 as OBLIGO_CHECKS2 in value
              If _OBLIGO_CHECKS2.Equals(trycast(obj,OBLIGO_CHECKS2)) Then
                  value.remove(_OBLIGO_CHECKS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENTA As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS2"
                else
                    return "OBLIGO_CHECKS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENTA")>  _
        Public Property PAYMENTA() As nullable (of int64)
            Get
                return _PAYMENTA
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTA = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENTA = .PAYMENTA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Secure Post-dated Cheques")>  _
    Public Class QUERY_SECURE_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SECURE_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = nothing
            _Name = "SECURE_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = Parent
            _name = "SECURE_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SECURE_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SECURE_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SECURE_CHECKS As SECURE_CHECKS In JsonConvert.DeserializeObject(Of QUERY_SECURE_CHECKS)(stream.ReadToEnd).Value
              With _SECURE_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SECURE_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SECURE_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SECURE_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SECURE_CHECKS as SECURE_CHECKS in value
              If _SECURE_CHECKS.Equals(trycast(obj,SECURE_CHECKS)) Then
                  value.remove(_SECURE_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SECURE_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SECURE_CHECKS"
                else
                    return "SECURE_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date of Receipt"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SECURE_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Balances in Transaction Currency")>  _
    Public Class QUERY_OBLIGO_FNCBAL5
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCBAL5)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = nothing
            _Name = "OBLIGO_FNCBAL5"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = Parent
            _name = "OBLIGO_FNCBAL5_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCBAL5)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCBAL5)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCBAL5 As OBLIGO_FNCBAL5 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCBAL5)(stream.ReadToEnd).Value
              With _OBLIGO_FNCBAL5
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCBAL5)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCBAL5)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BALANCE5 = obj.BALANCE5
                  .CODE5 = obj.CODE5
                  .BALANCE3 = obj.BALANCE3
                  .BAL3 = obj.BAL3
                  .CODE3 = obj.CODE3
                  .ACCOUNT = obj.ACCOUNT
                  .CURRENCY5 = obj.CURRENCY5
                  .UCUST = obj.UCUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCBAL5(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCBAL5 as OBLIGO_FNCBAL5 in value
              If _OBLIGO_FNCBAL5.Equals(trycast(obj,OBLIGO_FNCBAL5)) Then
                  value.remove(_OBLIGO_FNCBAL5)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCBAL5
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _BALANCE5 As Decimal
        
        Private _CODE5 As String
        
        Private _BALANCE3 As Decimal
        
        Private _BAL3 As Decimal
        
        Private _CODE3 As String
        
        Private _ACCOUNT As Long
        
        Private _CURRENCY5 As Long
        
        Private _UCUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCBAL5"
                else
                    return "OBLIGO_FNCBAL5_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACCOUNT={0},CURRENCY5={1},UCUST={2}", _
                  string.format("{0}",ACCOUNT), _
                  string.format("{0}",CURRENCY5), _
                  string.format("{0}",UCUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE5")>  _
        Public Property BALANCE5() As nullable(of decimal)
            Get
                return _BALANCE5
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Acct Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE3")>  _
        Public Property BALANCE3() As nullable(of decimal)
            Get
                return _BALANCE3
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BAL3")>  _
        Public Property BAL3() As nullable(of decimal)
            Get
                return _BAL3
            End Get
            Set
                if not(value is nothing) then
                  _BAL3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Account No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACCOUNT")>  _
        Public Property ACCOUNT() As nullable (of int64)
            Get
                return _ACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _ACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transact. Curr (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY5")>  _
        Public Property CURRENCY5() As nullable (of int64)
            Get
                return _CURRENCY5
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("UCUST")>  _
        Public Property UCUST() As nullable (of int64)
            Get
                return _UCUST
            End Get
            Set
                if not(value is nothing) then
                  _UCUST = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCBAL5")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACCOUNT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY5")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "UCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BALANCE5 = .BALANCE5
                  _CODE5 = .CODE5
                  _BALANCE3 = .BALANCE3
                  _BAL3 = .BAL3
                  _CODE3 = .CODE3
                  _ACCOUNT = .ACCOUNT
                  _CURRENCY5 = .CURRENCY5
                  _UCUST = .UCUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit per Company")>  _
    Public Class QUERY_CUSTOBLIGOENV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGOENV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = nothing
            _Name = "CUSTOBLIGOENV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = Parent
            _name = "CUSTOBLIGOENV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGOENV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGOENV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGOENV As CUSTOBLIGOENV In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGOENV)(stream.ReadToEnd).Value
              With _CUSTOBLIGOENV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGOENV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGOENV)
                  .TITLE = obj.TITLE
                  .CREDIT = obj.CREDIT
                  .OBLIGO = obj.OBLIGO
                  .CODE = obj.CODE
                  .DNAME = obj.DNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGOENV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGOENV as CUSTOBLIGOENV in value
              If _CUSTOBLIGOENV.Equals(trycast(obj,CUSTOBLIGOENV)) Then
                  value.remove(_CUSTOBLIGOENV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGOENV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _CREDIT As Decimal
        
        Private _OBLIGO As Decimal
        
        Private _CODE As String
        
        Private _DNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGOENV"
                else
                    return "CUSTOBLIGOENV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DNAME={0}", _
                  string.format("'{0}'",DNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Company Name"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DNAME")>  _
        Public Property DNAME() As String
            Get
                return _DNAME
            End Get
            Set
                if not(value is nothing) then
                  _DNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGOENV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _CREDIT = .CREDIT
                  _OBLIGO = .OBLIGO
                  _CODE = .CODE
                  _DNAME = .DNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Warehouse Tasks for Document")>  _
    Public Class QUERY_LINKWTASK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKWTASK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKWTASK)
            _Parent = nothing
            _Name = "LINKWTASK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKWTASK)
            _Parent = Parent
            _name = "LINKWTASK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKWTASK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKWTASK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKWTASK As LINKWTASK In JsonConvert.DeserializeObject(Of QUERY_LINKWTASK)(stream.ReadToEnd).Value
              With _LINKWTASK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKWTASK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKWTASK = JsonConvert.DeserializeObject(Of LINKWTASK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKWTASK)
                  .WTASKNUM = obj.WTASKNUM
                  .WTASKTYPECODE = obj.WTASKTYPECODE
                  .WTASKTYPEDES = obj.WTASKTYPEDES
                  .STATDES = obj.STATDES
                  .WAVENUM = obj.WAVENUM
                  .WTASK = obj.WTASK
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKWTASK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKWTASK as LINKWTASK in value
              If _LINKWTASK.Equals(trycast(obj,LINKWTASK)) Then
                  value.remove(_LINKWTASK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKWTASK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WTASKNUM As String
        
        Private _WTASKTYPECODE As String
        
        Private _WTASKTYPEDES As String
        
        Private _STATDES As String
        
        Private _WAVENUM As String
        
        Private _IsSetWTASK As Boolean = Boolean.FalseString
        
        Private _WTASK As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKWTASK"
                else
                    return "LINKWTASK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "WTASK={0}", _
                  string.format("{0}",WTASK) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse Task No."),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKNUM")>  _
        Public Property WTASKNUM() As String
            Get
                return _WTASKNUM
            End Get
            Set
                if not(value is nothing) then
                  _WTASKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task Type"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPECODE")>  _
        Public Property WTASKTYPECODE() As String
            Get
                return _WTASKTYPECODE
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("WTASKTYPEDES")>  _
        Public Property WTASKTYPEDES() As String
            Get
                return _WTASKTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _WTASKTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Wave Number"),  _
         nType("Edm.String"),  _
         tab("Warehouse Task No."),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("WAVENUM")>  _
        Public Property WAVENUM() As String
            Get
                return _WAVENUM
            End Get
            Set
                if not(value is nothing) then
                  _WAVENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse Task (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Warehouse Task No."),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("WTASK")>  _
        Public Property WTASK() As nullable (of int64)
            Get
                return _WTASK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Warehouse Task (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetWTASK = True
                If loading Then
                  _WTASK = Value
                Else
                    if not _WTASK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WTASK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WTASK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetWTASK then
              if f then
                  jw.WriteRaw(", ""WTASK"": ")
              else
                  jw.WriteRaw("""WTASK"": ")
                  f = true
              end if
              jw.WriteValue(me.WTASK)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKWTASK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "WTASK")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetWTASK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WTASK")
              .WriteAttributeString("value", me.WTASK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKWTASK = JsonConvert.DeserializeObject(Of LINKWTASK)(e.StreamReader.ReadToEnd)
                With obj
                  _WTASKNUM = .WTASKNUM
                  _WTASKTYPECODE = .WTASKTYPECODE
                  _WTASKTYPEDES = .WTASKTYPEDES
                  _STATDES = .STATDES
                  _WAVENUM = .WAVENUM
                  _WTASK = .WTASK
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Intrastat Definitions")>  _
    Public Class QUERY_DOCUMENTSINTRASTAT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCUMENTSINTRASTAT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCUMENTSINTRASTAT)
            _Parent = nothing
            _Name = "DOCUMENTSINTRASTAT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCUMENTSINTRASTAT)
            _Parent = Parent
            _name = "DOCUMENTSINTRASTAT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCUMENTSINTRASTAT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCUMENTSINTRASTAT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCUMENTSINTRASTAT As DOCUMENTSINTRASTAT In JsonConvert.DeserializeObject(Of QUERY_DOCUMENTSINTRASTAT)(stream.ReadToEnd).Value
              With _DOCUMENTSINTRASTAT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCUMENTSINTRASTAT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSINTRASTAT = JsonConvert.DeserializeObject(Of DOCUMENTSINTRASTAT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCUMENTSINTRASTAT)
                  .TRANSTYPE1 = obj.TRANSTYPE1
                  .TRANSTYPE2 = obj.TRANSTYPE2
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCUMENTSINTRASTAT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCUMENTSINTRASTAT as DOCUMENTSINTRASTAT in value
              If _DOCUMENTSINTRASTAT.Equals(trycast(obj,DOCUMENTSINTRASTAT)) Then
                  value.remove(_DOCUMENTSINTRASTAT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCUMENTSINTRASTAT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTRANSTYPE1 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE1 As String
        
        Private _IsSetTRANSTYPE2 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE2 As String
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCUMENTSINTRASTAT"
                else
                    return "DOCUMENTSINTRASTAT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Nature of Trans-1st"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(30),  _
         twodBarcode("TRANSTYPE1")>  _
        Public Property TRANSTYPE1() As String
            Get
                return _TRANSTYPE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-1st", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE1 = True
                If loading Then
                  _TRANSTYPE1 = Value
                Else
                    if not _TRANSTYPE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-2nd"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(40),  _
         twodBarcode("TRANSTYPE2")>  _
        Public Property TRANSTYPE2() As String
            Get
                return _TRANSTYPE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-2nd", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE2 = True
                If loading Then
                  _TRANSTYPE2 = Value
                Else
                    if not _TRANSTYPE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Terms of Delivery"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(50),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Terms of Delivery", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(60),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Nature of Trans-1st"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTRANSTYPE1 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE1"": ")
              else
                  jw.WriteRaw("""TRANSTYPE1"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE1)
            end if
            if _IsSetTRANSTYPE2 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE2"": ")
              else
                  jw.WriteRaw("""TRANSTYPE2"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE2)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCUMENTSINTRASTAT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTRANSTYPE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE1")
              .WriteAttributeString("value", me.TRANSTYPE1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE2")
              .WriteAttributeString("value", me.TRANSTYPE2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCUMENTSINTRASTAT = JsonConvert.DeserializeObject(Of DOCUMENTSINTRASTAT)(e.StreamReader.ReadToEnd)
                With obj
                  _TRANSTYPE1 = .TRANSTYPE1
                  _TRANSTYPE2 = .TRANSTYPE2
                  _IMPTERMNAME = .IMPTERMNAME
                  _COUNTRYNAME = .COUNTRYNAME
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Digital Signature")>  _
    Public Class QUERY_IVSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVSIGN)
            _Parent = nothing
            _Name = "IVSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVSIGN)
            _Parent = Parent
            _name = "IVSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVSIGN As IVSIGN In JsonConvert.DeserializeObject(Of QUERY_IVSIGN)(stream.ReadToEnd).Value
              With _IVSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVSIGN = JsonConvert.DeserializeObject(Of IVSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVSIGN)
                  .SIGNEDSTR = obj.SIGNEDSTR
                  .SIGNEDSTRB = obj.SIGNEDSTRB
                  .SIGNEDSTR2 = obj.SIGNEDSTR2
                  .SIGNEDSTR2B = obj.SIGNEDSTR2B
                  .SIGNATURE = obj.SIGNATURE
                  .SIGNATUREB = obj.SIGNATUREB
                  .SIGNATURE2 = obj.SIGNATURE2
                  .SHORTSIGN = obj.SHORTSIGN
                  .CERTIFICATENUM = obj.CERTIFICATENUM
                  .VERSION = obj.VERSION
                  .UUID = obj.UUID
                  .FETCHATIMBRADO = obj.FETCHATIMBRADO
                  .NOCERTIFICADOSAT = obj.NOCERTIFICADOSAT
                  .SELLOCFD = obj.SELLOCFD
                  .SELLOCFDCONT = obj.SELLOCFDCONT
                  .SELLOSAT = obj.SELLOSAT
                  .SELLOSATCONT = obj.SELLOSATCONT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVSIGN as IVSIGN in value
              If _IVSIGN.Equals(trycast(obj,IVSIGN)) Then
                  value.remove(_IVSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SIGNEDSTR As String
        
        Private _SIGNEDSTRB As String
        
        Private _SIGNEDSTR2 As String
        
        Private _SIGNEDSTR2B As String
        
        Private _SIGNATURE As String
        
        Private _SIGNATUREB As String
        
        Private _SIGNATURE2 As String
        
        Private _SHORTSIGN As String
        
        Private _CERTIFICATENUM As String
        
        Private _VERSION As String
        
        Private _UUID As String
        
        Private _FETCHATIMBRADO As String
        
        Private _NOCERTIFICADOSAT As String
        
        Private _SELLOCFD As String
        
        Private _SELLOCFDCONT As String
        
        Private _SELLOSAT As String
        
        Private _SELLOSATCONT As String
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVSIGN"
                else
                    return "IVSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature String"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR")>  _
        Public Property SIGNEDSTR() As String
            Get
                return _SIGNEDSTR
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 2"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTRB")>  _
        Public Property SIGNEDSTRB() As String
            Get
                return _SIGNEDSTRB
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTRB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 3"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR2")>  _
        Public Property SIGNEDSTR2() As String
            Get
                return _SIGNEDSTR2
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 4"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR2B")>  _
        Public Property SIGNEDSTR2B() As String
            Get
                return _SIGNEDSTR2B
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR2B = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATURE")>  _
        Public Property SIGNATURE() As String
            Get
                return _SIGNATURE
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature 2"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATUREB")>  _
        Public Property SIGNATUREB() As String
            Get
                return _SIGNATUREB
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATUREB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature 3"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATURE2")>  _
        Public Property SIGNATURE2() As String
            Get
                return _SIGNATURE2
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATURE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Display Signature"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("SHORTSIGN")>  _
        Public Property SHORTSIGN() As String
            Get
                return _SHORTSIGN
            End Get
            Set
                if not(value is nothing) then
                  _SHORTSIGN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorization Code"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CERTIFICATENUM")>  _
        Public Property CERTIFICATENUM() As String
            Get
                return _CERTIFICATENUM
            End Get
            Set
                if not(value is nothing) then
                  _CERTIFICATENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Version"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("VERSION")>  _
        Public Property VERSION() As String
            Get
                return _VERSION
            End Get
            Set
                if not(value is nothing) then
                  _VERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unique ID"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("UUID")>  _
        Public Property UUID() As String
            Get
                return _UUID
            End Get
            Set
                if not(value is nothing) then
                  _UUID = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature Date"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("FETCHATIMBRADO")>  _
        Public Property FETCHATIMBRADO() As String
            Get
                return _FETCHATIMBRADO
            End Get
            Set
                if not(value is nothing) then
                  _FETCHATIMBRADO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc SAT Number"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(330),  _
         [ReadOnly](true),  _
         twodBarcode("NOCERTIFICADOSAT")>  _
        Public Property NOCERTIFICADOSAT() As String
            Get
                return _NOCERTIFICADOSAT
            End Get
            Set
                if not(value is nothing) then
                  _NOCERTIFICADOSAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("CDF Signature"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(340),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOCFD")>  _
        Public Property SELLOCFD() As String
            Get
                return _SELLOCFD
            End Get
            Set
                if not(value is nothing) then
                  _SELLOCFD = Value
                end if
            End Set
        End Property
        
        <DisplayName("CDF Signature Cont."),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(350),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOCFDCONT")>  _
        Public Property SELLOCFDCONT() As String
            Get
                return _SELLOCFDCONT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOCFDCONT = Value
                end if
            End Set
        End Property
        
        <DisplayName("SAT Signature"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(360),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOSAT")>  _
        Public Property SELLOSAT() As String
            Get
                return _SELLOSAT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOSAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("SAT Signature Cont."),  _
         nType("Edm.String"),  _
         tab("SAT Signature Cont."),  _
         Pos(370),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOSATCONT")>  _
        Public Property SELLOSATCONT() As String
            Get
                return _SELLOSATCONT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOSATCONT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("SAT Signature Cont."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVSIGN = JsonConvert.DeserializeObject(Of IVSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _SIGNEDSTR = .SIGNEDSTR
                  _SIGNEDSTRB = .SIGNEDSTRB
                  _SIGNEDSTR2 = .SIGNEDSTR2
                  _SIGNEDSTR2B = .SIGNEDSTR2B
                  _SIGNATURE = .SIGNATURE
                  _SIGNATUREB = .SIGNATUREB
                  _SIGNATURE2 = .SIGNATURE2
                  _SHORTSIGN = .SHORTSIGN
                  _CERTIFICATENUM = .CERTIFICATENUM
                  _VERSION = .VERSION
                  _UUID = .UUID
                  _FETCHATIMBRADO = .FETCHATIMBRADO
                  _NOCERTIFICADOSAT = .NOCERTIFICADOSAT
                  _SELLOCFD = .SELLOCFD
                  _SELLOCFDCONT = .SELLOCFDCONT
                  _SELLOSAT = .SELLOSAT
                  _SELLOSATCONT = .SELLOSATCONT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Delivery Scheduling Details")>  _
    Public Class QUERY_DISTRDETAILS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DISTRDETAILS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DISTRDETAILS)
            _Parent = nothing
            _Name = "DISTRDETAILS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DISTRDETAILS)
            _Parent = Parent
            _name = "DISTRDETAILS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DISTRDETAILS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DISTRDETAILS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DISTRDETAILS As DISTRDETAILS In JsonConvert.DeserializeObject(Of QUERY_DISTRDETAILS)(stream.ReadToEnd).Value
              With _DISTRDETAILS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DISTRDETAILS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DISTRDETAILS = JsonConvert.DeserializeObject(Of DISTRDETAILS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DISTRDETAILS)
                  .DUEDATE = obj.DUEDATE
                  .DISTRLINECODE = obj.DISTRLINECODE
                  .DISTRLINEDES = obj.DISTRLINEDES
                  .ROUNDNUM = obj.ROUNDNUM
                  .DISTRORDER = obj.DISTRORDER
                  .PACKNUM = obj.PACKNUM
                  .PLTSNUM = obj.PLTSNUM
                  .CONTAINERNUM = obj.CONTAINERNUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DISTRDETAILS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DISTRDETAILS as DISTRDETAILS in value
              If _DISTRDETAILS.Equals(trycast(obj,DISTRDETAILS)) Then
                  value.remove(_DISTRDETAILS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DISTRDETAILS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetDISTRLINECODE As Boolean = Boolean.FalseString
        
        Private _DISTRLINECODE As String
        
        Private _DISTRLINEDES As String
        
        Private _IsSetROUNDNUM As Boolean = Boolean.FalseString
        
        Private _ROUNDNUM As Long
        
        Private _IsSetDISTRORDER As Boolean = Boolean.FalseString
        
        Private _DISTRORDER As Long
        
        Private _IsSetPACKNUM As Boolean = Boolean.FalseString
        
        Private _PACKNUM As Long
        
        Private _IsSetPLTSNUM As Boolean = Boolean.FalseString
        
        Private _PLTSNUM As Long
        
        Private _IsSetCONTAINERNUM As Boolean = Boolean.FalseString
        
        Private _CONTAINERNUM As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DISTRDETAILS"
                else
                    return "DISTRDETAILS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Delivery Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Delivery Date"),  _
         Pos(10),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Code"),  _
         nType("Edm.String"),  _
         tab("Delivery Date"),  _
         Pos(20),  _
         twodBarcode("DISTRLINECODE")>  _
        Public Property DISTRLINECODE() As String
            Get
                return _DISTRLINECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distrib. Route Code", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRLINECODE = True
                If loading Then
                  _DISTRLINECODE = Value
                Else
                    if not _DISTRLINECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRLINECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRLINECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Route Desc."),  _
         nType("Edm.String"),  _
         tab("Delivery Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRLINEDES")>  _
        Public Property DISTRLINEDES() As String
            Get
                return _DISTRLINEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRLINEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Round Number"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(40),  _
         twodBarcode("ROUNDNUM")>  _
        Public Property ROUNDNUM() As nullable (of int64)
            Get
                return _ROUNDNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Round Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetROUNDNUM = True
                If loading Then
                  _ROUNDNUM = Value
                Else
                    if not _ROUNDNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ROUNDNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ROUNDNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Delivery Order"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(50),  _
         twodBarcode("DISTRORDER")>  _
        Public Property DISTRORDER() As nullable (of int64)
            Get
                return _DISTRORDER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Order", value, "^[0-9\-]+$") then Exit Property
                _IsSetDISTRORDER = True
                If loading Then
                  _DISTRORDER = Value
                Else
                    if not _DISTRORDER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRORDER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRORDER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Number of Crates"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(70),  _
         twodBarcode("PACKNUM")>  _
        Public Property PACKNUM() As nullable (of int64)
            Get
                return _PACKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Crates", value, "^[0-9\-]+$") then Exit Property
                _IsSetPACKNUM = True
                If loading Then
                  _PACKNUM = Value
                Else
                    if not _PACKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Number of Pallets"),  _
         nType("Edm.Int64"),  _
         tab("Delivery Date"),  _
         Pos(75),  _
         twodBarcode("PLTSNUM")>  _
        Public Property PLTSNUM() As nullable (of int64)
            Get
                return _PLTSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Pallets", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLTSNUM = True
                If loading Then
                  _PLTSNUM = Value
                Else
                    if not _PLTSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLTSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLTSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Container Number"),  _
         nType("Edm.String"),  _
         tab("Delivery Date"),  _
         Pos(80),  _
         twodBarcode("CONTAINERNUM")>  _
        Public Property CONTAINERNUM() As String
            Get
                return _CONTAINERNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Container Number", value, "^.{0,15}$") then Exit Property
                _IsSetCONTAINERNUM = True
                If loading Then
                  _CONTAINERNUM = Value
                Else
                    if not _CONTAINERNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CONTAINERNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CONTAINERNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetDISTRLINECODE then
              if f then
                  jw.WriteRaw(", ""DISTRLINECODE"": ")
              else
                  jw.WriteRaw("""DISTRLINECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRLINECODE)
            end if
            if _IsSetROUNDNUM then
              if f then
                  jw.WriteRaw(", ""ROUNDNUM"": ")
              else
                  jw.WriteRaw("""ROUNDNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ROUNDNUM)
            end if
            if _IsSetDISTRORDER then
              if f then
                  jw.WriteRaw(", ""DISTRORDER"": ")
              else
                  jw.WriteRaw("""DISTRORDER"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRORDER)
            end if
            if _IsSetPACKNUM then
              if f then
                  jw.WriteRaw(", ""PACKNUM"": ")
              else
                  jw.WriteRaw("""PACKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKNUM)
            end if
            if _IsSetPLTSNUM then
              if f then
                  jw.WriteRaw(", ""PLTSNUM"": ")
              else
                  jw.WriteRaw("""PLTSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PLTSNUM)
            end if
            if _IsSetCONTAINERNUM then
              if f then
                  jw.WriteRaw(", ""CONTAINERNUM"": ")
              else
                  jw.WriteRaw("""CONTAINERNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CONTAINERNUM)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DISTRDETAILS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDISTRLINECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRLINECODE")
              .WriteAttributeString("value", me.DISTRLINECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetROUNDNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ROUNDNUM")
              .WriteAttributeString("value", me.ROUNDNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDISTRORDER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRORDER")
              .WriteAttributeString("value", me.DISTRORDER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPACKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKNUM")
              .WriteAttributeString("value", me.PACKNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLTSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLTSNUM")
              .WriteAttributeString("value", me.PLTSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetCONTAINERNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CONTAINERNUM")
              .WriteAttributeString("value", me.CONTAINERNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DISTRDETAILS = JsonConvert.DeserializeObject(Of DISTRDETAILS)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _DISTRLINECODE = .DISTRLINECODE
                  _DISTRLINEDES = .DISTRLINEDES
                  _ROUNDNUM = .ROUNDNUM
                  _DISTRORDER = .DISTRORDER
                  _PACKNUM = .PACKNUM
                  _PLTSNUM = .PLTSNUM
                  _CONTAINERNUM = .CONTAINERNUM
                end with
            End If
        End Sub
    End Class
End Namespace
