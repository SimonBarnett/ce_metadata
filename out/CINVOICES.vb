Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Multi-Shipment Invoices")>  _
    Public Class QUERY_CINVOICES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CINVOICES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CINVOICES)
            _Parent = nothing
            _Name = "CINVOICES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Invoice Items")
            .add(1, "Documents for Invoice")
            .add(2, "Invoice - Add'l Details")
            .add(3, "Shipping Address")
            .add(4, "Payment Installments")
            .add(5, "Payments on Invoice")
            .add(6, "Sales Rep Commiss'n for Document")
            .add(7, "Tasks for Document")
            .add(8, "To Do Item")
            .add(9, "History of Statuses")
            .add(10, "Credit Card to Charge")
            .add(11, "Link Receipts to Invoice")
            .add(12, "Withholding Tax")
            .add(13, "Invoice/Memo - Remarks")
            .add(14, "Attachments")
            .add(15, "Additional Taxes for Invoice")
            .add(16, "Customer Credit")
            .add(17, "Internal Dialogue")
            .add(18, "Digital Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CINVOICES)
            _Parent = Parent
            _name = "CINVOICES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Invoice Items")
            .add(1, "Documents for Invoice")
            .add(2, "Invoice - Add'l Details")
            .add(3, "Shipping Address")
            .add(4, "Payment Installments")
            .add(5, "Payments on Invoice")
            .add(6, "Sales Rep Commiss'n for Document")
            .add(7, "Tasks for Document")
            .add(8, "To Do Item")
            .add(9, "History of Statuses")
            .add(10, "Credit Card to Charge")
            .add(11, "Link Receipts to Invoice")
            .add(12, "Withholding Tax")
            .add(13, "Invoice/Memo - Remarks")
            .add(14, "Attachments")
            .add(15, "Additional Taxes for Invoice")
            .add(16, "Customer Credit")
            .add(17, "Internal Dialogue")
            .add(18, "Digital Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CINVOICES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CINVOICES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CINVOICES As CINVOICES In JsonConvert.DeserializeObject(Of QUERY_CINVOICES)(stream.ReadToEnd).Value
              With _CINVOICES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CINVOICES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICES = JsonConvert.DeserializeObject(Of CINVOICES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CINVOICES)
                  .CUSTNAME = obj.CUSTNAME
                  .CDES = obj.CDES
                  .NAME = obj.NAME
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .FINAL = obj.FINAL
                  .DEBIT = obj.DEBIT
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .ADJPRICEFLAG = obj.ADJPRICEFLAG
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .PROJDOCNO = obj.PROJDOCNO
                  .PROJDES = obj.PROJDES
                  .BOOKNUM = obj.BOOKNUM
                  .PRINTEDBOOL = obj.PRINTEDBOOL
                  .PLNAME = obj.PLNAME
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .DISCOUNT = obj.DISCOUNT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TAXSUM = obj.TAXSUM
                  .TOTPRICE = obj.TOTPRICE
                  .WTAX = obj.WTAX
                  .AFTERWTAX = obj.AFTERWTAX
                  .CODE = obj.CODE
                  .IVREFA = obj.IVREFA
                  .DETAILS = obj.DETAILS
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .TAXCODE = obj.TAXCODE
                  .ADVFLAG = obj.ADVFLAG
                  .FNCNUM = obj.FNCNUM
                  .STORNOFLAG = obj.STORNOFLAG
                  .TOTPRICE2 = obj.TOTPRICE2
                  .TOTQUANT = obj.TOTQUANT
                  .CASHPAYMENT = obj.CASHPAYMENT
                  .DIFF = obj.DIFF
                  .BILLINGUSERLOGIN = obj.BILLINGUSERLOGIN
                  .EXTFILEFLAG = obj.EXTFILEFLAG
                  .INTERNAL = obj.INTERNAL
                  .TERRITORYCODE = obj.TERRITORYCODE
                  .TERRITORYDES = obj.TERRITORYDES
                  .CRCODE = obj.CRCODE
                  .CRDES = obj.CRDES
                  .IVCODENAME = obj.IVCODENAME
                  .IVCODEDES = obj.IVCODEDES
                  .BLACKLISTFLAG = obj.BLACKLISTFLAG
                  .IVRECONDATE = obj.IVRECONDATE
                  .IV = obj.IV
                  .IVTYPE = obj.IVTYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CINVOICES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CINVOICES as CINVOICES in value
              If _CINVOICES.Equals(trycast(obj,CINVOICES)) Then
                  value.remove(_CINVOICES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CINVOICES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetIVDATE As Boolean = Boolean.FalseString
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _FINAL As String
        
        Private _IsSetDEBIT As Boolean = Boolean.FalseString
        
        Private _DEBIT As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _ADJPRICEFLAG As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _IsSetDOCCODE As Boolean = Boolean.FalseString
        
        Private _DOCCODE As String
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _IsSetPROJDOCNO As Boolean = Boolean.FalseString
        
        Private _PROJDOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetBOOKNUM As Boolean = Boolean.FalseString
        
        Private _BOOKNUM As String
        
        Private _PRINTEDBOOL As String
        
        Private _IsSetPLNAME As Boolean = Boolean.FalseString
        
        Private _PLNAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetDISCOUNT As Boolean = Boolean.FalseString
        
        Private _DISCOUNT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _IsSetVAT As Boolean = Boolean.FalseString
        
        Private _VAT As Decimal
        
        Private _TAXSUM As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _WTAX As Decimal
        
        Private _AFTERWTAX As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetIVREFA As Boolean = Boolean.FalseString
        
        Private _IVREFA As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetADVFLAG As Boolean = Boolean.FalseString
        
        Private _ADVFLAG As String
        
        Private _FNCNUM As String
        
        Private _STORNOFLAG As String
        
        Private _TOTPRICE2 As Decimal
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetCASHPAYMENT As Boolean = Boolean.FalseString
        
        Private _CASHPAYMENT As Decimal
        
        Private _IsSetDIFF As Boolean = Boolean.FalseString
        
        Private _DIFF As Decimal
        
        Private _BILLINGUSERLOGIN As String
        
        Private _EXTFILEFLAG As String
        
        Private _INTERNAL As String
        
        Private _TERRITORYCODE As String
        
        Private _TERRITORYDES As String
        
        Private _IsSetCRCODE As Boolean = Boolean.FalseString
        
        Private _CRCODE As String
        
        Private _CRDES As String
        
        Private _IsSetIVCODENAME As Boolean = Boolean.FalseString
        
        Private _IVCODENAME As String
        
        Private _IVCODEDES As String
        
        Private _BLACKLISTFLAG As String
        
        Private _IVRECONDATE As System.DateTimeOffset
        
        Private _IsSetIV As Boolean = Boolean.FalseString
        
        Private _IV As Long
        
        Private _IsSetIVTYPE As Boolean = Boolean.FalseString
        
        Private _IVTYPE As String
        
        Private _CINVOICEITEMS_SUBFORM As QUERY_CINVOICEITEMS
        
        Private _CIVDOC_SUBFORM As QUERY_CIVDOC
        
        Private _CINVOICESCONT_SUBFORM As QUERY_CINVOICESCONT
        
        Private _SHIPTO2_SUBFORM As QUERY_SHIPTO2
        
        Private _IVPAY_SUBFORM As QUERY_IVPAY
        
        Private _IVCFNCITEMS_SUBFORM As QUERY_IVCFNCITEMS
        
        Private _IVCOMITEMS_SUBFORM As QUERY_IVCOMITEMS
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _PAYMENTDEF_SUBFORM As QUERY_PAYMENTDEF
        
        Private _CFNCITEMS2_SUBFORM As QUERY_CFNCITEMS2
        
        Private _IV2WTAX_SUBFORM As QUERY_IV2WTAX
        
        Private _PINVOICESTEXT_SUBFORM As QUERY_PINVOICESTEXT
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _IVADDTAXES_SUBFORM As QUERY_IVADDTAXES
        
        Private _CUSTOBLIGO_SUBFORM As QUERY_CUSTOBLIGO
        
        Private _INTERNALDIALOGTEXT_SUBFORM As QUERY_INTERNALDIALOGTEXT
        
        Private _IVSIGN_SUBFORM As QUERY_IVSIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Invoice Items"))
            ChildQuery.add(1, new oNavigation("Documents for Invoice"))
            ChildQuery.add(2, new oNavigation("Invoice - Add'l Details"))
            ChildQuery.add(3, new oNavigation("Shipping Address"))
            ChildQuery.add(4, new oNavigation("Payment Installments"))
            ChildQuery.add(5, new oNavigation("Payments on Invoice"))
            ChildQuery.add(6, new oNavigation("Sales Rep Commiss'n for Document"))
            ChildQuery.add(7, new oNavigation("Tasks for Document"))
            ChildQuery.add(8, new oNavigation("To Do Item"))
            ChildQuery.add(9, new oNavigation("History of Statuses"))
            ChildQuery.add(10, new oNavigation("Credit Card to Charge"))
            ChildQuery.add(11, new oNavigation("Link Receipts to Invoice"))
            ChildQuery.add(12, new oNavigation("Withholding Tax"))
            ChildQuery.add(13, new oNavigation("Invoice/Memo - Remarks"))
            ChildQuery.add(14, new oNavigation("Attachments"))
            ChildQuery.add(15, new oNavigation("Additional Taxes for Invoice"))
            ChildQuery.add(16, new oNavigation("Customer Credit"))
            ChildQuery.add(17, new oNavigation("Internal Dialogue"))
            ChildQuery.add(18, new oNavigation("Digital Signature"))
            _CINVOICEITEMS_SUBFORM = new QUERY_CINVOICEITEMS(me)
            _CIVDOC_SUBFORM = new QUERY_CIVDOC(me)
            _CINVOICESCONT_SUBFORM = new QUERY_CINVOICESCONT(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _IVPAY_SUBFORM = new QUERY_IVPAY(me)
            _IVCFNCITEMS_SUBFORM = new QUERY_IVCFNCITEMS(me)
            _IVCOMITEMS_SUBFORM = new QUERY_IVCOMITEMS(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PAYMENTDEF_SUBFORM = new QUERY_PAYMENTDEF(me)
            _CFNCITEMS2_SUBFORM = new QUERY_CFNCITEMS2(me)
            _IV2WTAX_SUBFORM = new QUERY_IV2WTAX(me)
            _PINVOICESTEXT_SUBFORM = new QUERY_PINVOICESTEXT(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _IVADDTAXES_SUBFORM = new QUERY_IVADDTAXES(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            _IVSIGN_SUBFORM = new QUERY_IVSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CINVOICEITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CIVDOC_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CINVOICESCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_IVPAY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_IVCFNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_IVCOMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PAYMENTDEF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_CFNCITEMS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_IV2WTAX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_PINVOICESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_IVADDTAXES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_IVSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Invoice Items"))
            ChildQuery.add(1, new oNavigation("Documents for Invoice"))
            ChildQuery.add(2, new oNavigation("Invoice - Add'l Details"))
            ChildQuery.add(3, new oNavigation("Shipping Address"))
            ChildQuery.add(4, new oNavigation("Payment Installments"))
            ChildQuery.add(5, new oNavigation("Payments on Invoice"))
            ChildQuery.add(6, new oNavigation("Sales Rep Commiss'n for Document"))
            ChildQuery.add(7, new oNavigation("Tasks for Document"))
            ChildQuery.add(8, new oNavigation("To Do Item"))
            ChildQuery.add(9, new oNavigation("History of Statuses"))
            ChildQuery.add(10, new oNavigation("Credit Card to Charge"))
            ChildQuery.add(11, new oNavigation("Link Receipts to Invoice"))
            ChildQuery.add(12, new oNavigation("Withholding Tax"))
            ChildQuery.add(13, new oNavigation("Invoice/Memo - Remarks"))
            ChildQuery.add(14, new oNavigation("Attachments"))
            ChildQuery.add(15, new oNavigation("Additional Taxes for Invoice"))
            ChildQuery.add(16, new oNavigation("Customer Credit"))
            ChildQuery.add(17, new oNavigation("Internal Dialogue"))
            ChildQuery.add(18, new oNavigation("Digital Signature"))
            _CINVOICEITEMS_SUBFORM = new QUERY_CINVOICEITEMS(me)
            _CIVDOC_SUBFORM = new QUERY_CIVDOC(me)
            _CINVOICESCONT_SUBFORM = new QUERY_CINVOICESCONT(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _IVPAY_SUBFORM = new QUERY_IVPAY(me)
            _IVCFNCITEMS_SUBFORM = new QUERY_IVCFNCITEMS(me)
            _IVCOMITEMS_SUBFORM = new QUERY_IVCOMITEMS(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PAYMENTDEF_SUBFORM = new QUERY_PAYMENTDEF(me)
            _CFNCITEMS2_SUBFORM = new QUERY_CFNCITEMS2(me)
            _IV2WTAX_SUBFORM = new QUERY_IV2WTAX(me)
            _PINVOICESTEXT_SUBFORM = new QUERY_PINVOICESTEXT(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _IVADDTAXES_SUBFORM = new QUERY_IVADDTAXES(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            _IVSIGN_SUBFORM = new QUERY_IVSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CINVOICEITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CIVDOC_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CINVOICESCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_IVPAY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_IVCFNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_IVCOMITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PAYMENTDEF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_CFNCITEMS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_IV2WTAX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_PINVOICESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_IVADDTAXES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_IVSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice Items", _CINVOICEITEMS_SUBFORM))
                   .add(1, new oNavigation("Documents for Invoice", _CIVDOC_SUBFORM))
                   .add(2, new oNavigation("Invoice - Add'l Details", _CINVOICESCONT_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(4, new oNavigation("Payment Installments", _IVPAY_SUBFORM))
                   .add(5, new oNavigation("Payments on Invoice", _IVCFNCITEMS_SUBFORM))
                   .add(6, new oNavigation("Sales Rep Commiss'n for Document", _IVCOMITEMS_SUBFORM))
                   .add(7, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(8, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(9, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(10, new oNavigation("Credit Card to Charge", _PAYMENTDEF_SUBFORM))
                   .add(11, new oNavigation("Link Receipts to Invoice", _CFNCITEMS2_SUBFORM))
                   .add(12, new oNavigation("Withholding Tax", _IV2WTAX_SUBFORM))
                   .add(13, new oNavigation("Invoice/Memo - Remarks", _PINVOICESTEXT_SUBFORM))
                   .add(14, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(15, new oNavigation("Additional Taxes for Invoice", _IVADDTAXES_SUBFORM))
                   .add(16, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
                   .add(18, new oNavigation("Digital Signature", _IVSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CINVOICES"
                else
                    return "CINVOICES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},IVTYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",IVTYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(5),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(15),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetIVDATE = True
                If loading Then
                  _IVDATE = Value
                Else
                    if not _IVDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("FINAL")>  _
        Public Property FINAL() As String
            Get
                return _FINAL
            End Get
            Set
                if not(value is nothing) then
                  _FINAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Debit/Credit", value, "^.{0,1}$") then Exit Property
                _IsSetDEBIT = True
                If loading Then
                  _DEBIT = Value
                Else
                    if not _DEBIT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEBIT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEBIT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(35),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(37),  _
         Mandatory(true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Adjust Prices?"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("ADJPRICEFLAG")>  _
        Public Property ADJPRICEFLAG() As String
            Get
                return _ADJPRICEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ADJPRICEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(39),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(40),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Code", value, "^.{0,4}$") then Exit Property
                _IsSetDOCCODE = True
                If loading Then
                  _DOCCODE = Value
                Else
                    if not _DOCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(42),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(45),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer's Purch Ord", value, "^.{0,15}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(46),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetPROJDOCNO = True
                If loading Then
                  _PROJDOCNO = Value
                Else
                    if not _PROJDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Invoice No"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Invoice No"),  _
         Pos(50),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Invoice No", value, "^.{0,16}$") then Exit Property
                _IsSetBOOKNUM = True
                If loading Then
                  _BOOKNUM = Value
                Else
                    if not _BOOKNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BOOKNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BOOKNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Printed"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Invoice No"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PRINTEDBOOL")>  _
        Public Property PRINTEDBOOL() As String
            Get
                return _PRINTEDBOOL
            End Get
            Set
                if not(value is nothing) then
                  _PRINTEDBOOL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price List Code"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Invoice No"),  _
         Pos(57),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price List Code", value, "^.{0,6}$") then Exit Property
                _IsSetPLNAME = True
                If loading Then
                  _PLNAME = Value
                Else
                    if not _PLNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Set Overall Disc. %"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Sales Rep Invoice No"),  _
         Pos(62),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Set Overall Disc. %", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Rep Invoice No"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Rep Invoice No"),  _
         Pos(70),  _
         twodBarcode("DISCOUNT")>  _
        Public Property DISCOUNT() As nullable(of decimal)
            Get
                return _DISCOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetDISCOUNT = True
                If loading Then
                  _DISCOUNT = Value
                Else
                    if not _DISCOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISCOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISCOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Rep Invoice No"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Rep Invoice No"),  _
         Pos(85),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Tax", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetVAT = True
                If loading Then
                  _VAT = Value
                Else
                    if not _VAT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VAT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VAT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Additional Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Additional Tax"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TAXSUM")>  _
        Public Property TAXSUM() As nullable(of decimal)
            Get
                return _TAXSUM
            End Get
            Set
                if not(value is nothing) then
                  _TAXSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount Owing"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Additional Tax"),  _
         Pos(95),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Amount Owing", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Taxes Withheld"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Additional Tax"),  _
         Pos(96),  _
         [ReadOnly](true),  _
         twodBarcode("WTAX")>  _
        Public Property WTAX() As nullable(of decimal)
            Get
                return _WTAX
            End Get
            Set
                if not(value is nothing) then
                  _WTAX = Value
                end if
            End Set
        End Property
        
        <DisplayName("After Withholding"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Additional Tax"),  _
         Pos(98),  _
         [ReadOnly](true),  _
         twodBarcode("AFTERWTAX")>  _
        Public Property AFTERWTAX() As nullable(of decimal)
            Get
                return _AFTERWTAX
            End Get
            Set
                if not(value is nothing) then
                  _AFTERWTAX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Additional Tax"),  _
         Pos(100),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("VAT Number-Cust."),  _
         nType("Edm.String"),  _
         tab("Additional Tax"),  _
         Pos(105),  _
         twodBarcode("IVREFA")>  _
        Public Property IVREFA() As String
            Get
                return _IVREFA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("VAT Number-Cust.", value, "^.{0,16}$") then Exit Property
                _IsSetIVREFA = True
                If loading Then
                  _IVREFA = Value
                Else
                    if not _IVREFA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVREFA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVREFA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Additional Tax"),  _
         Pos(110),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Additional Tax"),  _
         Pos(111),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(115),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(116),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(117),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(120),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Advance Payment?"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(150),  _
         twodBarcode("ADVFLAG")>  _
        Public Property ADVFLAG() As String
            Get
                return _ADVFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Advance Payment?", value, "^.{0,1}$") then Exit Property
                _IsSetADVFLAG = True
                If loading Then
                  _ADVFLAG = Value
                Else
                    if not _ADVFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADVFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADVFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Canceled?"),  _
         nType("Edm.String"),  _
         tab("Sales Rep Name"),  _
         Pos(165),  _
         [ReadOnly](true),  _
         twodBarcode("STORNOFLAG")>  _
        Public Property STORNOFLAG() As String
            Get
                return _STORNOFLAG
            End Get
            Set
                if not(value is nothing) then
                  _STORNOFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice Amount"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE2")>  _
        Public Property TOTPRICE2() As nullable(of decimal)
            Get
                return _TOTPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty of Items"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Invoice Amount"),  _
         Pos(175),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipts Total"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Invoice Amount"),  _
         Pos(180),  _
         twodBarcode("CASHPAYMENT")>  _
        Public Property CASHPAYMENT() As nullable(of decimal)
            Get
                return _CASHPAYMENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Receipts Total", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCASHPAYMENT = True
                If loading Then
                  _CASHPAYMENT = Value
                Else
                    if not _CASHPAYMENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CASHPAYMENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CASHPAYMENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Difference"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Invoice Amount"),  _
         Pos(190),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Difference", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetDIFF = True
                If loading Then
                  _DIFF = Value
                Else
                    if not _DIFF = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DIFF", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DIFF = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Follow-up By"),  _
         nType("Edm.String"),  _
         tab("Invoice Amount"),  _
         Pos(195),  _
         [ReadOnly](true),  _
         twodBarcode("BILLINGUSERLOGIN")>  _
        Public Property BILLINGUSERLOGIN() As String
            Get
                return _BILLINGUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _BILLINGUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("Invoice Amount"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAG")>  _
        Public Property EXTFILEFLAG() As String
            Get
                return _EXTFILEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Internal Invoice"),  _
         nType("Edm.String"),  _
         tab("Invoice Amount"),  _
         Pos(205),  _
         [ReadOnly](true),  _
         twodBarcode("INTERNAL")>  _
        Public Property INTERNAL() As String
            Get
                return _INTERNAL
            End Get
            Set
                if not(value is nothing) then
                  _INTERNAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Territory Code"),  _
         nType("Edm.String"),  _
         tab("Invoice Amount"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("TERRITORYCODE")>  _
        Public Property TERRITORYCODE() As String
            Get
                return _TERRITORYCODE
            End Get
            Set
                if not(value is nothing) then
                  _TERRITORYCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Territory Name"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(211),  _
         [ReadOnly](true),  _
         twodBarcode("TERRITORYDES")>  _
        Public Property TERRITORYDES() As String
            Get
                return _TERRITORYDES
            End Get
            Set
                if not(value is nothing) then
                  _TERRITORYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reason Code"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(220),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Reason Code", value, "^.{0,3}$") then Exit Property
                _IsSetCRCODE = True
                If loading Then
                  _CRCODE = Value
                Else
                    if not _CRCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CRCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CRCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Reason for Credit"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(221),  _
         [ReadOnly](true),  _
         twodBarcode("CRDES")>  _
        Public Property CRDES() As String
            Get
                return _CRDES
            End Get
            Set
                if not(value is nothing) then
                  _CRDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Add'l Class Code"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(240),  _
         twodBarcode("IVCODENAME")>  _
        Public Property IVCODENAME() As String
            Get
                return _IVCODENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Add'l Class Code", value, "^.{0,8}$") then Exit Property
                _IsSetIVCODENAME = True
                If loading Then
                  _IVCODENAME = Value
                Else
                    if not _IVCODENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVCODENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVCODENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Add'l Classification"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODEDES")>  _
        Public Property IVCODEDES() As String
            Get
                return _IVCODEDES
            End Get
            Set
                if not(value is nothing) then
                  _IVCODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Blacklisted?"),  _
         nType("Edm.String"),  _
         tab("Territory Name"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("BLACKLISTFLAG")>  _
        Public Property BLACKLISTFLAG() As String
            Get
                return _BLACKLISTFLAG
            End Get
            Set
                if not(value is nothing) then
                  _BLACKLISTFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Recon. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Territory Name"),  _
         Pos(265),  _
         [ReadOnly](true),  _
         twodBarcode("IVRECONDATE")>  _
        Public Property IVRECONDATE() As nullable (of DateTimeOffset)
            Get
                return _IVRECONDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVRECONDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Territory Name"),  _
         Pos(5),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Invoice (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetIV = True
                If loading Then
                  _IV = Value
                Else
                    if not _IV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("IVTYPE")>  _
        Public Property IVTYPE() As String
            Get
                return _IVTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type", value, "^.{0,1}$") then Exit Property
                _IsSetIVTYPE = True
                If loading Then
                  _IVTYPE = Value
                Else
                    if not _IVTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CINVOICEITEMS_SUBFORM() As QUERY_CINVOICEITEMS
            Get
                return _CINVOICEITEMS_SUBFORM
            End Get
            Set
                _CINVOICEITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CIVDOC_SUBFORM() As QUERY_CIVDOC
            Get
                return _CIVDOC_SUBFORM
            End Get
            Set
                _CIVDOC_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CINVOICESCONT_SUBFORM() As QUERY_CINVOICESCONT
            Get
                return _CINVOICESCONT_SUBFORM
            End Get
            Set
                _CINVOICESCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO2_SUBFORM() As QUERY_SHIPTO2
            Get
                return _SHIPTO2_SUBFORM
            End Get
            Set
                _SHIPTO2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVPAY_SUBFORM() As QUERY_IVPAY
            Get
                return _IVPAY_SUBFORM
            End Get
            Set
                _IVPAY_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVCFNCITEMS_SUBFORM() As QUERY_IVCFNCITEMS
            Get
                return _IVCFNCITEMS_SUBFORM
            End Get
            Set
                _IVCFNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVCOMITEMS_SUBFORM() As QUERY_IVCOMITEMS
            Get
                return _IVCOMITEMS_SUBFORM
            End Get
            Set
                _IVCOMITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PAYMENTDEF_SUBFORM() As QUERY_PAYMENTDEF
            Get
                return _PAYMENTDEF_SUBFORM
            End Get
            Set
                _PAYMENTDEF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CFNCITEMS2_SUBFORM() As QUERY_CFNCITEMS2
            Get
                return _CFNCITEMS2_SUBFORM
            End Get
            Set
                _CFNCITEMS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IV2WTAX_SUBFORM() As QUERY_IV2WTAX
            Get
                return _IV2WTAX_SUBFORM
            End Get
            Set
                _IV2WTAX_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PINVOICESTEXT_SUBFORM() As QUERY_PINVOICESTEXT
            Get
                return _PINVOICESTEXT_SUBFORM
            End Get
            Set
                _PINVOICESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVADDTAXES_SUBFORM() As QUERY_IVADDTAXES
            Get
                return _IVADDTAXES_SUBFORM
            End Get
            Set
                _IVADDTAXES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGO_SUBFORM() As QUERY_CUSTOBLIGO
            Get
                return _CUSTOBLIGO_SUBFORM
            End Get
            Set
                _CUSTOBLIGO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INTERNALDIALOGTEXT_SUBFORM() As QUERY_INTERNALDIALOGTEXT
            Get
                return _INTERNALDIALOGTEXT_SUBFORM
            End Get
            Set
                _INTERNALDIALOGTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property IVSIGN_SUBFORM() As QUERY_IVSIGN
            Get
                return _IVSIGN_SUBFORM
            End Get
            Set
                _IVSIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetIVDATE then
              if f then
                  jw.WriteRaw(", ""IVDATE"": ")
              else
                  jw.WriteRaw("""IVDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.IVDATE)
            end if
            if _IsSetDEBIT then
              if f then
                  jw.WriteRaw(", ""DEBIT"": ")
              else
                  jw.WriteRaw("""DEBIT"": ")
                  f = true
              end if
              jw.WriteValue(me.DEBIT)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetDOCCODE then
              if f then
                  jw.WriteRaw(", ""DOCCODE"": ")
              else
                  jw.WriteRaw("""DOCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCCODE)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetPROJDOCNO then
              if f then
                  jw.WriteRaw(", ""PROJDOCNO"": ")
              else
                  jw.WriteRaw("""PROJDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJDOCNO)
            end if
            if _IsSetBOOKNUM then
              if f then
                  jw.WriteRaw(", ""BOOKNUM"": ")
              else
                  jw.WriteRaw("""BOOKNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BOOKNUM)
            end if
            if _IsSetPLNAME then
              if f then
                  jw.WriteRaw(", ""PLNAME"": ")
              else
                  jw.WriteRaw("""PLNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLNAME)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetDISCOUNT then
              if f then
                  jw.WriteRaw(", ""DISCOUNT"": ")
              else
                  jw.WriteRaw("""DISCOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.DISCOUNT)
            end if
            if _IsSetVAT then
              if f then
                  jw.WriteRaw(", ""VAT"": ")
              else
                  jw.WriteRaw("""VAT"": ")
                  f = true
              end if
              jw.WriteValue(me.VAT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetIVREFA then
              if f then
                  jw.WriteRaw(", ""IVREFA"": ")
              else
                  jw.WriteRaw("""IVREFA"": ")
                  f = true
              end if
              jw.WriteValue(me.IVREFA)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetADVFLAG then
              if f then
                  jw.WriteRaw(", ""ADVFLAG"": ")
              else
                  jw.WriteRaw("""ADVFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.ADVFLAG)
            end if
            if _IsSetCASHPAYMENT then
              if f then
                  jw.WriteRaw(", ""CASHPAYMENT"": ")
              else
                  jw.WriteRaw("""CASHPAYMENT"": ")
                  f = true
              end if
              jw.WriteValue(me.CASHPAYMENT)
            end if
            if _IsSetDIFF then
              if f then
                  jw.WriteRaw(", ""DIFF"": ")
              else
                  jw.WriteRaw("""DIFF"": ")
                  f = true
              end if
              jw.WriteValue(me.DIFF)
            end if
            if _IsSetCRCODE then
              if f then
                  jw.WriteRaw(", ""CRCODE"": ")
              else
                  jw.WriteRaw("""CRCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CRCODE)
            end if
            if _IsSetIVCODENAME then
              if f then
                  jw.WriteRaw(", ""IVCODENAME"": ")
              else
                  jw.WriteRaw("""IVCODENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IVCODENAME)
            end if
            if _IsSetIV then
              if f then
                  jw.WriteRaw(", ""IV"": ")
              else
                  jw.WriteRaw("""IV"": ")
                  f = true
              end if
              jw.WriteValue(me.IV)
            end if
            if _IsSetIVTYPE then
              if f then
                  jw.WriteRaw(", ""IVTYPE"": ")
              else
                  jw.WriteRaw("""IVTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.IVTYPE)
            end if
            if _CINVOICEITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CINVOICEITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CINVOICEITEMS in _CINVOICEITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CINVOICEITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CIVDOC_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CIVDOC_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CIVDOC in _CIVDOC_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CIVDOC_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CINVOICESCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CINVOICESCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CINVOICESCONT in _CINVOICESCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CINVOICESCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVPAY_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVPAY_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVPAY in _IVPAY_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVPAY_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVCFNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVCFNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVCFNCITEMS in _IVCFNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVCFNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVCOMITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVCOMITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVCOMITEMS in _IVCOMITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVCOMITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PAYMENTDEF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PAYMENTDEF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PAYMENTDEF in _PAYMENTDEF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PAYMENTDEF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CFNCITEMS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CFNCITEMS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CFNCITEMS2 in _CFNCITEMS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CFNCITEMS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IV2WTAX_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IV2WTAX_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IV2WTAX in _IV2WTAX_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IV2WTAX_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PINVOICESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PINVOICESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PINVOICESTEXT in _PINVOICESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PINVOICESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVADDTAXES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVADDTAXES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVADDTAXES in _IVADDTAXES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVADDTAXES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INTERNALDIALOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INTERNALDIALOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _IVSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", IVSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as IVSIGN in _IVSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _IVSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CINVOICES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVTYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetIVDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVDATE")
              .WriteAttributeString("value", me.IVDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDEBIT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", me.DEBIT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCCODE")
              .WriteAttributeString("value", me.DOCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPROJDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJDOCNO")
              .WriteAttributeString("value", me.PROJDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBOOKNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BOOKNUM")
              .WriteAttributeString("value", me.BOOKNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPLNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLNAME")
              .WriteAttributeString("value", me.PLNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetDISCOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISCOUNT")
              .WriteAttributeString("value", me.DISCOUNT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetVAT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VAT")
              .WriteAttributeString("value", me.VAT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetIVREFA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVREFA")
              .WriteAttributeString("value", me.IVREFA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetADVFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADVFLAG")
              .WriteAttributeString("value", me.ADVFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCASHPAYMENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CASHPAYMENT")
              .WriteAttributeString("value", me.CASHPAYMENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetDIFF then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DIFF")
              .WriteAttributeString("value", me.DIFF)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCRCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CRCODE")
              .WriteAttributeString("value", me.CRCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetIVCODENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVCODENAME")
              .WriteAttributeString("value", me.IVCODENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", me.IV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetIVTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVTYPE")
              .WriteAttributeString("value", me.IVTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _CINVOICEITEMS_SUBFORM.value.count > 0 then
              for each itm as CINVOICEITEMS in _CINVOICEITEMS_SUBFORM.Value
                itm.toXML(xw,"CINVOICEITEMS_SUBFORM")
              next
            end if
            if _CIVDOC_SUBFORM.value.count > 0 then
              for each itm as CIVDOC in _CIVDOC_SUBFORM.Value
                itm.toXML(xw,"CIVDOC_SUBFORM")
              next
            end if
            if _CINVOICESCONT_SUBFORM.value.count > 0 then
              for each itm as CINVOICESCONT in _CINVOICESCONT_SUBFORM.Value
                itm.toXML(xw,"CINVOICESCONT_SUBFORM")
              next
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.Value
                itm.toXML(xw,"SHIPTO2_SUBFORM")
              next
            end if
            if _IVPAY_SUBFORM.value.count > 0 then
              for each itm as IVPAY in _IVPAY_SUBFORM.Value
                itm.toXML(xw,"IVPAY_SUBFORM")
              next
            end if
            if _IVCFNCITEMS_SUBFORM.value.count > 0 then
              for each itm as IVCFNCITEMS in _IVCFNCITEMS_SUBFORM.Value
                itm.toXML(xw,"IVCFNCITEMS_SUBFORM")
              next
            end if
            if _IVCOMITEMS_SUBFORM.value.count > 0 then
              for each itm as IVCOMITEMS in _IVCOMITEMS_SUBFORM.Value
                itm.toXML(xw,"IVCOMITEMS_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _PAYMENTDEF_SUBFORM.value.count > 0 then
              for each itm as PAYMENTDEF in _PAYMENTDEF_SUBFORM.Value
                itm.toXML(xw,"PAYMENTDEF_SUBFORM")
              next
            end if
            if _CFNCITEMS2_SUBFORM.value.count > 0 then
              for each itm as CFNCITEMS2 in _CFNCITEMS2_SUBFORM.Value
                itm.toXML(xw,"CFNCITEMS2_SUBFORM")
              next
            end if
            if _IV2WTAX_SUBFORM.value.count > 0 then
              for each itm as IV2WTAX in _IV2WTAX_SUBFORM.Value
                itm.toXML(xw,"IV2WTAX_SUBFORM")
              next
            end if
            if _PINVOICESTEXT_SUBFORM.value.count > 0 then
              for each itm as PINVOICESTEXT in _PINVOICESTEXT_SUBFORM.Value
                itm.toXML(xw,"PINVOICESTEXT_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _IVADDTAXES_SUBFORM.value.count > 0 then
              for each itm as IVADDTAXES in _IVADDTAXES_SUBFORM.Value
                itm.toXML(xw,"IVADDTAXES_SUBFORM")
              next
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGO_SUBFORM")
              next
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.Value
                itm.toXML(xw,"INTERNALDIALOGTEXT_SUBFORM")
              next
            end if
            if _IVSIGN_SUBFORM.value.count > 0 then
              for each itm as IVSIGN in _IVSIGN_SUBFORM.Value
                itm.toXML(xw,"IVSIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICES = JsonConvert.DeserializeObject(Of CINVOICES)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CDES = .CDES
                  _NAME = .NAME
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _FINAL = .FINAL
                  _DEBIT = .DEBIT
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _ADJPRICEFLAG = .ADJPRICEFLAG
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _PROJDOCNO = .PROJDOCNO
                  _PROJDES = .PROJDES
                  _BOOKNUM = .BOOKNUM
                  _PRINTEDBOOL = .PRINTEDBOOL
                  _PLNAME = .PLNAME
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _DISCOUNT = .DISCOUNT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TAXSUM = .TAXSUM
                  _TOTPRICE = .TOTPRICE
                  _WTAX = .WTAX
                  _AFTERWTAX = .AFTERWTAX
                  _CODE = .CODE
                  _IVREFA = .IVREFA
                  _DETAILS = .DETAILS
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _BRANCHNAME = .BRANCHNAME
                  _TAXCODE = .TAXCODE
                  _ADVFLAG = .ADVFLAG
                  _FNCNUM = .FNCNUM
                  _STORNOFLAG = .STORNOFLAG
                  _TOTPRICE2 = .TOTPRICE2
                  _TOTQUANT = .TOTQUANT
                  _CASHPAYMENT = .CASHPAYMENT
                  _DIFF = .DIFF
                  _BILLINGUSERLOGIN = .BILLINGUSERLOGIN
                  _EXTFILEFLAG = .EXTFILEFLAG
                  _INTERNAL = .INTERNAL
                  _TERRITORYCODE = .TERRITORYCODE
                  _TERRITORYDES = .TERRITORYDES
                  _CRCODE = .CRCODE
                  _CRDES = .CRDES
                  _IVCODENAME = .IVCODENAME
                  _IVCODEDES = .IVCODEDES
                  _BLACKLISTFLAG = .BLACKLISTFLAG
                  _IVRECONDATE = .IVRECONDATE
                  _IV = .IV
                  _IVTYPE = .IVTYPE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CINVOICES
        
        CINVOICEITEMS = 0
        
        CIVDOC = 1
        
        CINVOICESCONT = 2
        
        SHIPTO2 = 3
        
        IVPAY = 4
        
        IVCFNCITEMS = 5
        
        IVCOMITEMS = 6
        
        GENCUSTNOTES = 7
        
        DOCTODOLIST = 8
        
        DOCTODOLISTLOG = 9
        
        PAYMENTDEF = 10
        
        CFNCITEMS2 = 11
        
        IV2WTAX = 12
        
        PINVOICESTEXT = 13
        
        EXTFILES = 14
        
        IVADDTAXES = 15
        
        CUSTOBLIGO = 16
        
        INTERNALDIALOGTEXT = 17
        
        IVSIGN = 18
    End Enum
    
    <QueryTitle("Invoice Items")>  _
    Public Class QUERY_CINVOICEITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CINVOICEITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CINVOICEITEMS)
            _Parent = nothing
            _Name = "CINVOICEITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Invoice/Memo Total")
            .add(1, "Budgeted vs. Actual")
            .add(2, "Inventory for Part")
            .add(3, "Latest Part Sales to Customer")
            .add(4, "Invoice Item - Remarks")
            .add(5, "Projects/Accounts")
            .add(6, "Internal Accounting")
            .add(7, "Calls to Cust for Clarification")
            .add(8, "Split Among Profit/Cost Centers")
            .add(9, "Invoice Data for Intrastat Rep")
            .add(10, "Linkage Calculations")
            .add(11, "Link to Previous Invoice Line")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CINVOICEITEMS)
            _Parent = Parent
            _name = "CINVOICEITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Invoice/Memo Total")
            .add(1, "Budgeted vs. Actual")
            .add(2, "Inventory for Part")
            .add(3, "Latest Part Sales to Customer")
            .add(4, "Invoice Item - Remarks")
            .add(5, "Projects/Accounts")
            .add(6, "Internal Accounting")
            .add(7, "Calls to Cust for Clarification")
            .add(8, "Split Among Profit/Cost Centers")
            .add(9, "Invoice Data for Intrastat Rep")
            .add(10, "Linkage Calculations")
            .add(11, "Link to Previous Invoice Line")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CINVOICEITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CINVOICEITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CINVOICEITEMS As CINVOICEITEMS In JsonConvert.DeserializeObject(Of QUERY_CINVOICEITEMS)(stream.ReadToEnd).Value
              With _CINVOICEITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CINVOICEITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICEITEMS = JsonConvert.DeserializeObject(Of CINVOICEITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CINVOICEITEMS)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .QPRICE = obj.QPRICE
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TOTPERCENT = obj.TOTPERCENT
                  .VATFLAG = obj.VATFLAG
                  .ORDNAME = obj.ORDNAME
                  .ORDLINE = obj.ORDLINE
                  .ORDREFERENCE = obj.ORDREFERENCE
                  .YOURORDLINE = obj.YOURORDLINE
                  .DOCNO = obj.DOCNO
                  .DOCDES = obj.DOCDES
                  .BOOKNUM = obj.BOOKNUM
                  .TCURDATE = obj.TCURDATE
                  .BUDCODE = obj.BUDCODE
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCNAME2 = obj.COSTCNAME2
                  .COSTCNAME3 = obj.COSTCNAME3
                  .COSTCNAME4 = obj.COSTCNAME4
                  .COSTCNAME5 = obj.COSTCNAME5
                  .BRANCHNAME = obj.BRANCHNAME
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .CREDITFLAG = obj.CREDITFLAG
                  .AGENTCODE = obj.AGENTCODE
                  .COMMISSION = obj.COMMISSION
                  .EXCH = obj.EXCH
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .PDACCNAME = obj.PDACCNAME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .FNCICODE = obj.FNCICODE
                  .FNCIDES = obj.FNCIDES
                  .TRANSREFERENCE = obj.TRANSREFERENCE
                  .TAXCODE = obj.TAXCODE
                  .TAXCODE3 = obj.TAXCODE3
                  .MPARTNAME = obj.MPARTNAME
                  .MPARTDES = obj.MPARTDES
                  .MMPARTNAME = obj.MMPARTNAME
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CINVOICEITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CINVOICEITEMS as CINVOICEITEMS in value
              If _CINVOICEITEMS.Equals(trycast(obj,CINVOICEITEMS)) Then
                  value.remove(_CINVOICEITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CINVOICEITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _IsSetTOTPERCENT As Boolean = Boolean.FalseString
        
        Private _TOTPERCENT As Decimal
        
        Private _IsSetVATFLAG As Boolean = Boolean.FalseString
        
        Private _VATFLAG As String
        
        Private _ORDNAME As String
        
        Private _IsSetORDLINE As Boolean = Boolean.FalseString
        
        Private _ORDLINE As Long
        
        Private _ORDREFERENCE As String
        
        Private _YOURORDLINE As Long
        
        Private _DOCNO As String
        
        Private _DOCDES As String
        
        Private _BOOKNUM As String
        
        Private _TCURDATE As System.DateTimeOffset
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetCOSTCNAME2 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME2 As String
        
        Private _IsSetCOSTCNAME3 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME3 As String
        
        Private _IsSetCOSTCNAME4 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME4 As String
        
        Private _IsSetCOSTCNAME5 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME5 As String
        
        Private _BRANCHNAME As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetCREDITFLAG As Boolean = Boolean.FalseString
        
        Private _CREDITFLAG As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _IsSetCOMMISSION As Boolean = Boolean.FalseString
        
        Private _COMMISSION As Decimal
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _IsSetPDACCNAME As Boolean = Boolean.FalseString
        
        Private _PDACCNAME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetFNCICODE As Boolean = Boolean.FalseString
        
        Private _FNCICODE As String
        
        Private _FNCIDES As String
        
        Private _TRANSREFERENCE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetTAXCODE3 As Boolean = Boolean.FalseString
        
        Private _TAXCODE3 As String
        
        Private _IsSetMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MPARTNAME As String
        
        Private _MPARTDES As String
        
        Private _IsSetMMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MMPARTNAME As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _INVOICESTOTAL_SUBFORM As QUERY_INVOICESTOTAL
        
        Private _BUDGETREP_SUBFORM As QUERY_BUDGETREP
        
        Private _PARTBALANCE_SUBFORM As QUERY_PARTBALANCE
        
        Private _LASTCUSTPARTSALES_SUBFORM As QUERY_LASTCUSTPARTSALES
        
        Private _AINVOICEITEMSTEXT_SUBFORM As QUERY_AINVOICEITEMSTEXT
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _PROJLINK_PIV_SUBFORM As QUERY_PROJLINK_PIV
        
        Private _TRANSCONTACTS_SUBFORM As QUERY_TRANSCONTACTS
        
        Private _SPLITCOSTCENTERS_SUBFORM As QUERY_SPLITCOSTCENTERS
        
        Private _INVOICEITEMSINTRASTA_SUBFORM As QUERY_INVOICEITEMSINTRASTA
        
        Private _LINKINGDETAILS_SUBFORM As QUERY_LINKINGDETAILS
        
        Private _PIVLINELINK_SUBFORM As QUERY_PIVLINELINK
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Invoice/Memo Total"))
            ChildQuery.add(1, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(2, new oNavigation("Inventory for Part"))
            ChildQuery.add(3, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(4, new oNavigation("Invoice Item - Remarks"))
            ChildQuery.add(5, new oNavigation("Projects/Accounts"))
            ChildQuery.add(6, new oNavigation("Internal Accounting"))
            ChildQuery.add(7, new oNavigation("Calls to Cust for Clarification"))
            ChildQuery.add(8, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(9, new oNavigation("Invoice Data for Intrastat Rep"))
            ChildQuery.add(10, new oNavigation("Linkage Calculations"))
            ChildQuery.add(11, new oNavigation("Link to Previous Invoice Line"))
            _INVOICESTOTAL_SUBFORM = new QUERY_INVOICESTOTAL(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _AINVOICEITEMSTEXT_SUBFORM = new QUERY_AINVOICEITEMSTEXT(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PROJLINK_PIV_SUBFORM = new QUERY_PROJLINK_PIV(me)
            _TRANSCONTACTS_SUBFORM = new QUERY_TRANSCONTACTS(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _INVOICEITEMSINTRASTA_SUBFORM = new QUERY_INVOICEITEMSINTRASTA(me)
            _LINKINGDETAILS_SUBFORM = new QUERY_LINKINGDETAILS(me)
            _PIVLINELINK_SUBFORM = new QUERY_PIVLINELINK(me)
            WITH ChildQuery(0)
               .setoDataQuery(_INVOICESTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_AINVOICEITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_PIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_TRANSCONTACTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_INVOICEITEMSINTRASTA_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINKINGDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PIVLINELINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Invoice/Memo Total"))
            ChildQuery.add(1, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(2, new oNavigation("Inventory for Part"))
            ChildQuery.add(3, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(4, new oNavigation("Invoice Item - Remarks"))
            ChildQuery.add(5, new oNavigation("Projects/Accounts"))
            ChildQuery.add(6, new oNavigation("Internal Accounting"))
            ChildQuery.add(7, new oNavigation("Calls to Cust for Clarification"))
            ChildQuery.add(8, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(9, new oNavigation("Invoice Data for Intrastat Rep"))
            ChildQuery.add(10, new oNavigation("Linkage Calculations"))
            ChildQuery.add(11, new oNavigation("Link to Previous Invoice Line"))
            _INVOICESTOTAL_SUBFORM = new QUERY_INVOICESTOTAL(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _AINVOICEITEMSTEXT_SUBFORM = new QUERY_AINVOICEITEMSTEXT(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PROJLINK_PIV_SUBFORM = new QUERY_PROJLINK_PIV(me)
            _TRANSCONTACTS_SUBFORM = new QUERY_TRANSCONTACTS(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _INVOICEITEMSINTRASTA_SUBFORM = new QUERY_INVOICEITEMSINTRASTA(me)
            _LINKINGDETAILS_SUBFORM = new QUERY_LINKINGDETAILS(me)
            _PIVLINELINK_SUBFORM = new QUERY_PIVLINELINK(me)
            WITH ChildQuery(0)
               .setoDataQuery(_INVOICESTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_AINVOICEITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PROJLINK_PIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_TRANSCONTACTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_INVOICEITEMSINTRASTA_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINKINGDETAILS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PIVLINELINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Invoice/Memo Total", _INVOICESTOTAL_SUBFORM))
                   .add(1, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(2, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(3, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(4, new oNavigation("Invoice Item - Remarks", _AINVOICEITEMSTEXT_SUBFORM))
                   .add(5, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(6, new oNavigation("Internal Accounting", _PROJLINK_PIV_SUBFORM))
                   .add(7, new oNavigation("Calls to Cust for Clarification", _TRANSCONTACTS_SUBFORM))
                   .add(8, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(9, new oNavigation("Invoice Data for Intrastat Rep", _INVOICEITEMSINTRASTA_SUBFORM))
                   .add(10, new oNavigation("Linkage Calculations", _LINKINGDETAILS_SUBFORM))
                   .add(11, new oNavigation("Link to Previous Invoice Line", _PIVLINELINK_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CINVOICEITEMS"
                else
                    return "CINVOICEITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(2),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(3),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(8),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(9),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Price Source"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Price Source"),  _
         Pos(11),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Item Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Prc After Disc"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Source"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Source"),  _
         Pos(13),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Incl. Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Source"),  _
         Pos(14),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Incl. Tax", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Price Source"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Source"),  _
         Pos(20),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPERCENT = True
                If loading Then
                  _TOTPERCENT = Value
                Else
                    if not _TOTPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Taxable?"),  _
         nType("Edm.String"),  _
         tab("Price Source"),  _
         Pos(35),  _
         twodBarcode("VATFLAG")>  _
        Public Property VATFLAG() As String
            Get
                return _VATFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Taxable?", value, "^.{0,1}$") then Exit Property
                _IsSetVATFLAG = True
                If loading Then
                  _VATFLAG = Value
                Else
                    if not _VATFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VATFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VATFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("ORDLINE"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(0),  _
         twodBarcode("ORDLINE")>  _
        Public Property ORDLINE() As nullable (of int64)
            Get
                return _ORDLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("ORDLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDLINE = True
                If loading Then
                  _ORDLINE = Value
                Else
                    if not _ORDLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("ORDREFERENCE")>  _
        Public Property ORDREFERENCE() As String
            Get
                return _ORDREFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _ORDREFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Order Ln"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(43),  _
         [ReadOnly](true),  _
         twodBarcode("YOURORDLINE")>  _
        Public Property YOURORDLINE() As nullable (of int64)
            Get
                return _YOURORDLINE
            End Get
            Set
                if not(value is nothing) then
                  _YOURORDLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc. Description"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Doc. No."),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("BOOKNUM")>  _
        Public Property BOOKNUM() As String
            Get
                return _BOOKNUM
            End Get
            Set
                if not(value is nothing) then
                  _BOOKNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(48),  _
         [ReadOnly](true),  _
         twodBarcode("TCURDATE")>  _
        Public Property TCURDATE() As nullable (of DateTimeOffset)
            Get
                return _TCURDATE
            End Get
            Set
                if not(value is nothing) then
                  _TCURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(60),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(62),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre 2"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(64),  _
         twodBarcode("COSTCNAME2")>  _
        Public Property COSTCNAME2() As String
            Get
                return _COSTCNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre 2", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME2 = True
                If loading Then
                  _COSTCNAME2 = Value
                Else
                    if not _COSTCNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre 3"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(66),  _
         twodBarcode("COSTCNAME3")>  _
        Public Property COSTCNAME3() As String
            Get
                return _COSTCNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre 3", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME3 = True
                If loading Then
                  _COSTCNAME3 = Value
                Else
                    if not _COSTCNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre 4"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(68),  _
         twodBarcode("COSTCNAME4")>  _
        Public Property COSTCNAME4() As String
            Get
                return _COSTCNAME4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre 4", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME4 = True
                If loading Then
                  _COSTCNAME4 = Value
                Else
                    if not _COSTCNAME4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit Centre 5"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(70),  _
         twodBarcode("COSTCNAME5")>  _
        Public Property COSTCNAME5() As String
            Get
                return _COSTCNAME5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit Centre 5", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME5 = True
                If loading Then
                  _COSTCNAME5 = Value
                Else
                    if not _COSTCNAME5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch"),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Income Account No."),  _
         nType("Edm.String"),  _
         tab("Budget Item"),  _
         Pos(75),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Income Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account Description"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Only?"),  _
         nType("Edm.String"),  _
         tab("Account Description"),  _
         Pos(80),  _
         twodBarcode("CREDITFLAG")>  _
        Public Property CREDITFLAG() As String
            Get
                return _CREDITFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Credit Only?", value, "^.{0,1}$") then Exit Property
                _IsSetCREDITFLAG = True
                If loading Then
                  _CREDITFLAG = Value
                Else
                    if not _CREDITFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CREDITFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CREDITFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Account Description"),  _
         Pos(82),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Rep's Commission (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Account Description"),  _
         Pos(85),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rep's Commission (%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCOMMISSION = True
                If loading Then
                  _COMMISSION = Value
                Else
                    if not _COMMISSION = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COMMISSION", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COMMISSION = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Account Description"),  _
         Pos(90),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("From Income Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Account Description"),  _
         Pos(94),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("From Income Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Income Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Account Description"),  _
         Pos(96),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Income Date", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Target-DeferredInc"),  _
         nType("Edm.String"),  _
         tab("Account Description"),  _
         Pos(98),  _
         twodBarcode("PDACCNAME")>  _
        Public Property PDACCNAME() As String
            Get
                return _PDACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Target-DeferredInc", value, "^.{0,16}$") then Exit Property
                _IsSetPDACCNAME = True
                If loading Then
                  _PDACCNAME = Value
                Else
                    if not _PDACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(101),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(170),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Entry Item Group", value, "^.{0,8}$") then Exit Property
                _IsSetFNCICODE = True
                If loading Then
                  _FNCICODE = Value
                Else
                    if not _FNCICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FNCICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FNCICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Item Group)"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(175),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIDES")>  _
        Public Property FNCIDES() As String
            Get
                return _FNCIDES
            End Get
            Set
                if not(value is nothing) then
                  _FNCIDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Line Reference"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("TRANSREFERENCE")>  _
        Public Property TRANSREFERENCE() As String
            Get
                return _TRANSREFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _TRANSREFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Withholding Code"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(190),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Withholding Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Withholding Code 3"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(192),  _
         twodBarcode("TAXCODE3")>  _
        Public Property TAXCODE3() As String
            Get
                return _TAXCODE3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Withholding Code 3", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE3 = True
                If loading Then
                  _TAXCODE3 = Value
                Else
                    if not _TAXCODE3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(400),  _
         twodBarcode("MPARTNAME")>  _
        Public Property MPARTNAME() As String
            Get
                return _MPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetMPARTNAME = True
                If loading Then
                  _MPARTNAME = Value
                Else
                    if not _MPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product Desc."),  _
         Pos(401),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTDES")>  _
        Public Property MPARTDES() As String
            Get
                return _MPARTDES
            End Get
            Set
                if not(value is nothing) then
                  _MPARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part by Base Product"),  _
         nType("Edm.String"),  _
         tab("Base Product Desc."),  _
         Pos(402),  _
         twodBarcode("MMPARTNAME")>  _
        Public Property MMPARTNAME() As String
            Get
                return _MMPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part by Base Product", value, "^.{0,15}$") then Exit Property
                _IsSetMMPARTNAME = True
                If loading Then
                  _MMPARTNAME = Value
                Else
                    if not _MMPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MMPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MMPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Base Product Desc."),  _
         Pos(5),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INVOICESTOTAL_SUBFORM() As QUERY_INVOICESTOTAL
            Get
                return _INVOICESTOTAL_SUBFORM
            End Get
            Set
                _INVOICESTOTAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property BUDGETREP_SUBFORM() As QUERY_BUDGETREP
            Get
                return _BUDGETREP_SUBFORM
            End Get
            Set
                _BUDGETREP_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTBALANCE_SUBFORM() As QUERY_PARTBALANCE
            Get
                return _PARTBALANCE_SUBFORM
            End Get
            Set
                _PARTBALANCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTCUSTPARTSALES_SUBFORM() As QUERY_LASTCUSTPARTSALES
            Get
                return _LASTCUSTPARTSALES_SUBFORM
            End Get
            Set
                _LASTCUSTPARTSALES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property AINVOICEITEMSTEXT_SUBFORM() As QUERY_AINVOICEITEMSTEXT
            Get
                return _AINVOICEITEMSTEXT_SUBFORM
            End Get
            Set
                _AINVOICEITEMSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_PIV_SUBFORM() As QUERY_PROJLINK_PIV
            Get
                return _PROJLINK_PIV_SUBFORM
            End Get
            Set
                _PROJLINK_PIV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSCONTACTS_SUBFORM() As QUERY_TRANSCONTACTS
            Get
                return _TRANSCONTACTS_SUBFORM
            End Get
            Set
                _TRANSCONTACTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SPLITCOSTCENTERS_SUBFORM() As QUERY_SPLITCOSTCENTERS
            Get
                return _SPLITCOSTCENTERS_SUBFORM
            End Get
            Set
                _SPLITCOSTCENTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INVOICEITEMSINTRASTA_SUBFORM() As QUERY_INVOICEITEMSINTRASTA
            Get
                return _INVOICEITEMSINTRASTA_SUBFORM
            End Get
            Set
                _INVOICEITEMSINTRASTA_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKINGDETAILS_SUBFORM() As QUERY_LINKINGDETAILS
            Get
                return _LINKINGDETAILS_SUBFORM
            End Get
            Set
                _LINKINGDETAILS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PIVLINELINK_SUBFORM() As QUERY_PIVLINELINK
            Get
                return _PIVLINELINK_SUBFORM
            End Get
            Set
                _PIVLINELINK_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetTOTPERCENT then
              if f then
                  jw.WriteRaw(", ""TOTPERCENT"": ")
              else
                  jw.WriteRaw("""TOTPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPERCENT)
            end if
            if _IsSetVATFLAG then
              if f then
                  jw.WriteRaw(", ""VATFLAG"": ")
              else
                  jw.WriteRaw("""VATFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.VATFLAG)
            end if
            if _IsSetORDLINE then
              if f then
                  jw.WriteRaw(", ""ORDLINE"": ")
              else
                  jw.WriteRaw("""ORDLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDLINE)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetCOSTCNAME2 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME2"": ")
              else
                  jw.WriteRaw("""COSTCNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME2)
            end if
            if _IsSetCOSTCNAME3 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME3"": ")
              else
                  jw.WriteRaw("""COSTCNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME3)
            end if
            if _IsSetCOSTCNAME4 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME4"": ")
              else
                  jw.WriteRaw("""COSTCNAME4"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME4)
            end if
            if _IsSetCOSTCNAME5 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME5"": ")
              else
                  jw.WriteRaw("""COSTCNAME5"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME5)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetCREDITFLAG then
              if f then
                  jw.WriteRaw(", ""CREDITFLAG"": ")
              else
                  jw.WriteRaw("""CREDITFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.CREDITFLAG)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetCOMMISSION then
              if f then
                  jw.WriteRaw(", ""COMMISSION"": ")
              else
                  jw.WriteRaw("""COMMISSION"": ")
                  f = true
              end if
              jw.WriteValue(me.COMMISSION)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetPDACCNAME then
              if f then
                  jw.WriteRaw(", ""PDACCNAME"": ")
              else
                  jw.WriteRaw("""PDACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PDACCNAME)
            end if
            if _IsSetFNCICODE then
              if f then
                  jw.WriteRaw(", ""FNCICODE"": ")
              else
                  jw.WriteRaw("""FNCICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.FNCICODE)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetTAXCODE3 then
              if f then
                  jw.WriteRaw(", ""TAXCODE3"": ")
              else
                  jw.WriteRaw("""TAXCODE3"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE3)
            end if
            if _IsSetMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MPARTNAME"": ")
              else
                  jw.WriteRaw("""MPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MPARTNAME)
            end if
            if _IsSetMMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MMPARTNAME"": ")
              else
                  jw.WriteRaw("""MMPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MMPARTNAME)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _INVOICESTOTAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INVOICESTOTAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INVOICESTOTAL in _INVOICESTOTAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INVOICESTOTAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              jw.WriteRaw(", BUDGETREP_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _BUDGETREP_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTBALANCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTBALANCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTCUSTPARTSALES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTCUSTPARTSALES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _AINVOICEITEMSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", AINVOICEITEMSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as AINVOICEITEMSTEXT in _AINVOICEITEMSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _AINVOICEITEMSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_PIV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_PIV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK_PIV in _PROJLINK_PIV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_PIV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _TRANSCONTACTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSCONTACTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSCONTACTS in _TRANSCONTACTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSCONTACTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SPLITCOSTCENTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SPLITCOSTCENTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INVOICEITEMSINTRASTA_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INVOICEITEMSINTRASTA_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INVOICEITEMSINTRASTA in _INVOICEITEMSINTRASTA_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INVOICEITEMSINTRASTA_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKINGDETAILS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKINGDETAILS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKINGDETAILS in _LINKINGDETAILS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKINGDETAILS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PIVLINELINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PIVLINELINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PIVLINELINK in _PIVLINELINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PIVLINELINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CINVOICEITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetTOTPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPERCENT")
              .WriteAttributeString("value", me.TOTPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetVATFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VATFLAG")
              .WriteAttributeString("value", me.VATFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetORDLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDLINE")
              .WriteAttributeString("value", me.ORDLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME2")
              .WriteAttributeString("value", me.COSTCNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME3")
              .WriteAttributeString("value", me.COSTCNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME4")
              .WriteAttributeString("value", me.COSTCNAME4)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME5")
              .WriteAttributeString("value", me.COSTCNAME5)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCREDITFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CREDITFLAG")
              .WriteAttributeString("value", me.CREDITFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCOMMISSION then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COMMISSION")
              .WriteAttributeString("value", me.COMMISSION)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPDACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDACCNAME")
              .WriteAttributeString("value", me.PDACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetFNCICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FNCICODE")
              .WriteAttributeString("value", me.FNCICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetTAXCODE3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE3")
              .WriteAttributeString("value", me.TAXCODE3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MPARTNAME")
              .WriteAttributeString("value", me.MPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetMMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MMPARTNAME")
              .WriteAttributeString("value", me.MMPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _INVOICESTOTAL_SUBFORM.value.count > 0 then
              for each itm as INVOICESTOTAL in _INVOICESTOTAL_SUBFORM.Value
                itm.toXML(xw,"INVOICESTOTAL_SUBFORM")
              next
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.Value
                itm.toXML(xw,"BUDGETREP_SUBFORM")
              next
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.Value
                itm.toXML(xw,"PARTBALANCE_SUBFORM")
              next
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.Value
                itm.toXML(xw,"LASTCUSTPARTSALES_SUBFORM")
              next
            end if
            if _AINVOICEITEMSTEXT_SUBFORM.value.count > 0 then
              for each itm as AINVOICEITEMSTEXT in _AINVOICEITEMSTEXT_SUBFORM.Value
                itm.toXML(xw,"AINVOICEITEMSTEXT_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _PROJLINK_PIV_SUBFORM.value.count > 0 then
              for each itm as PROJLINK_PIV in _PROJLINK_PIV_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_PIV_SUBFORM")
              next
            end if
            if _TRANSCONTACTS_SUBFORM.value.count > 0 then
              for each itm as TRANSCONTACTS in _TRANSCONTACTS_SUBFORM.Value
                itm.toXML(xw,"TRANSCONTACTS_SUBFORM")
              next
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.Value
                itm.toXML(xw,"SPLITCOSTCENTERS_SUBFORM")
              next
            end if
            if _INVOICEITEMSINTRASTA_SUBFORM.value.count > 0 then
              for each itm as INVOICEITEMSINTRASTA in _INVOICEITEMSINTRASTA_SUBFORM.Value
                itm.toXML(xw,"INVOICEITEMSINTRASTA_SUBFORM")
              next
            end if
            if _LINKINGDETAILS_SUBFORM.value.count > 0 then
              for each itm as LINKINGDETAILS in _LINKINGDETAILS_SUBFORM.Value
                itm.toXML(xw,"LINKINGDETAILS_SUBFORM")
              next
            end if
            if _PIVLINELINK_SUBFORM.value.count > 0 then
              for each itm as PIVLINELINK in _PIVLINELINK_SUBFORM.Value
                itm.toXML(xw,"PIVLINELINK_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICEITEMS = JsonConvert.DeserializeObject(Of CINVOICEITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _QPRICE = .QPRICE
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TOTPERCENT = .TOTPERCENT
                  _VATFLAG = .VATFLAG
                  _ORDNAME = .ORDNAME
                  _ORDLINE = .ORDLINE
                  _ORDREFERENCE = .ORDREFERENCE
                  _YOURORDLINE = .YOURORDLINE
                  _DOCNO = .DOCNO
                  _DOCDES = .DOCDES
                  _BOOKNUM = .BOOKNUM
                  _TCURDATE = .TCURDATE
                  _BUDCODE = .BUDCODE
                  _COSTCNAME = .COSTCNAME
                  _COSTCNAME2 = .COSTCNAME2
                  _COSTCNAME3 = .COSTCNAME3
                  _COSTCNAME4 = .COSTCNAME4
                  _COSTCNAME5 = .COSTCNAME5
                  _BRANCHNAME = .BRANCHNAME
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _CREDITFLAG = .CREDITFLAG
                  _AGENTCODE = .AGENTCODE
                  _COMMISSION = .COMMISSION
                  _EXCH = .EXCH
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _PDACCNAME = .PDACCNAME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _FNCICODE = .FNCICODE
                  _FNCIDES = .FNCIDES
                  _TRANSREFERENCE = .TRANSREFERENCE
                  _TAXCODE = .TAXCODE
                  _TAXCODE3 = .TAXCODE3
                  _MPARTNAME = .MPARTNAME
                  _MPARTDES = .MPARTDES
                  _MMPARTNAME = .MMPARTNAME
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CINVOICEITEMS
        
        INVOICESTOTAL = 0
        
        BUDGETREP = 1
        
        PARTBALANCE = 2
        
        LASTCUSTPARTSALES = 3
        
        AINVOICEITEMSTEXT = 4
        
        PROJLINK = 5
        
        PROJLINK_PIV = 6
        
        TRANSCONTACTS = 7
        
        SPLITCOSTCENTERS = 8
        
        INVOICEITEMSINTRASTA = 9
        
        LINKINGDETAILS = 10
        
        PIVLINELINK = 11
    End Enum
    
    <QueryTitle("Invoice/Memo Total")>  _
    Public Class QUERY_INVOICESTOTAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INVOICESTOTAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INVOICESTOTAL)
            _Parent = nothing
            _Name = "INVOICESTOTAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INVOICESTOTAL)
            _Parent = Parent
            _name = "INVOICESTOTAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INVOICESTOTAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INVOICESTOTAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INVOICESTOTAL As INVOICESTOTAL In JsonConvert.DeserializeObject(Of QUERY_INVOICESTOTAL)(stream.ReadToEnd).Value
              With _INVOICESTOTAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INVOICESTOTAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INVOICESTOTAL = JsonConvert.DeserializeObject(Of INVOICESTOTAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INVOICESTOTAL)
                  .STATDES = obj.STATDES
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .DISCOUNT = obj.DISCOUNT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TAXSUM = obj.TAXSUM
                  .CHARTOTPRICE = obj.CHARTOTPRICE
                  .DEBIT = obj.DEBIT
                  .IVNUM = obj.IVNUM
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INVOICESTOTAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INVOICESTOTAL as INVOICESTOTAL in value
              If _INVOICESTOTAL.Equals(trycast(obj,INVOICESTOTAL)) Then
                  value.remove(_INVOICESTOTAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INVOICESTOTAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _STATDES As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _DISCOUNT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TAXSUM As Decimal
        
        Private _CHARTOTPRICE As String
        
        Private _DEBIT As String
        
        Private _IVNUM As String
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INVOICESTOTAL"
                else
                    return "INVOICESTOTAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DEBIT={0},IVNUM={1},TYPE={2}", _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DISCOUNT")>  _
        Public Property DISCOUNT() As nullable(of decimal)
            Get
                return _DISCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _DISCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Additional Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("TAXSUM")>  _
        Public Property TAXSUM() As nullable(of decimal)
            Get
                return _TAXSUM
            End Get
            Set
                if not(value is nothing) then
                  _TAXSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount Owing"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CHARTOTPRICE")>  _
        Public Property CHARTOTPRICE() As String
            Get
                return _CHARTOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _CHARTOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Debit/Credit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Debit/Credit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Debit/Credit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INVOICESTOTAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INVOICESTOTAL = JsonConvert.DeserializeObject(Of INVOICESTOTAL)(e.StreamReader.ReadToEnd)
                With obj
                  _STATDES = .STATDES
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _DISCOUNT = .DISCOUNT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TAXSUM = .TAXSUM
                  _CHARTOTPRICE = .CHARTOTPRICE
                  _DEBIT = .DEBIT
                  _IVNUM = .IVNUM
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Budgeted vs. Actual")>  _
    Public Class QUERY_BUDGETREP
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of BUDGETREP)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = nothing
            _Name = "BUDGETREP"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = Parent
            _name = "BUDGETREP_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of BUDGETREP)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(BUDGETREP)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _BUDGETREP As BUDGETREP In JsonConvert.DeserializeObject(Of QUERY_BUDGETREP)(stream.ReadToEnd).Value
              With _BUDGETREP
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_BUDGETREP)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, BUDGETREP)
                  .AMOUNT = obj.AMOUNT
                  .TOTCOST = obj.TOTCOST
                  .BAL = obj.BAL
                  .FNCCOST = obj.FNCCOST
                  .TRANSCOST = obj.TRANSCOST
                  .ORDCOST = obj.ORDCOST
                  .PRDCOST = obj.PRDCOST
                  .CODE = obj.CODE
                  .AMOUNT_YTD = obj.AMOUNT_YTD
                  .TOTALCOST_YTD = obj.TOTALCOST_YTD
                  .BAL_YTD = obj.BAL_YTD
                  .AMOUNT_PERIOD = obj.AMOUNT_PERIOD
                  .TOTALCOST_PERIOD = obj.TOTALCOST_PERIOD
                  .BAL_PERIOD = obj.BAL_PERIOD
                  .DATESTR = obj.DATESTR
                  .BCEHCKSTR = obj.BCEHCKSTR
                  .BUDGETDATE = obj.BUDGETDATE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new BUDGETREP(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _BUDGETREP as BUDGETREP in value
              If _BUDGETREP.Equals(trycast(obj,BUDGETREP)) Then
                  value.remove(_BUDGETREP)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class BUDGETREP
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _AMOUNT As Decimal
        
        Private _TOTCOST As Decimal
        
        Private _BAL As Decimal
        
        Private _FNCCOST As Decimal
        
        Private _TRANSCOST As Decimal
        
        Private _ORDCOST As Decimal
        
        Private _PRDCOST As Decimal
        
        Private _CODE As String
        
        Private _AMOUNT_YTD As Decimal
        
        Private _TOTALCOST_YTD As Decimal
        
        Private _BAL_YTD As Decimal
        
        Private _AMOUNT_PERIOD As Decimal
        
        Private _TOTALCOST_PERIOD As Decimal
        
        Private _BAL_PERIOD As Decimal
        
        Private _DATESTR As String
        
        Private _BCEHCKSTR As String
        
        Private _BUDGETDATE As System.DateTimeOffset
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "BUDGETREP"
                else
                    return "BUDGETREP_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0}", _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Annual Appropriation"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Annual Budget Usage"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Annual Appropriation"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TOTCOST")>  _
        Public Property TOTCOST() As nullable(of decimal)
            Get
                return _TOTCOST
            End Get
            Set
                if not(value is nothing) then
                  _TOTCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Budget"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(15),  _
         tab("Annual Appropriation"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("BAL")>  _
        Public Property BAL() As nullable(of decimal)
            Get
                return _BAL
            End Get
            Set
                if not(value is nothing) then
                  _BAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billed Transactions"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCCOST")>  _
        Public Property FNCCOST() As nullable(of decimal)
            Get
                return _FNCCOST
            End Get
            Set
                if not(value is nothing) then
                  _FNCCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Transact."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TRANSCOST")>  _
        Public Property TRANSCOST() As nullable(of decimal)
            Get
                return _TRANSCOST
            End Get
            Set
                if not(value is nothing) then
                  _TRANSCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ORDCOST")>  _
        Public Property ORDCOST() As nullable(of decimal)
            Get
                return _ORDCOST
            End Get
            Set
                if not(value is nothing) then
                  _ORDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open PRs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRDCOST")>  _
        Public Property PRDCOST() As nullable(of decimal)
            Get
                return _PRDCOST
            End Get
            Set
                if not(value is nothing) then
                  _PRDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Annual Appropriation"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Appropriation-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_YTD")>  _
        Public Property AMOUNT_YTD() As nullable(of decimal)
            Get
                return _AMOUNT_YTD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_YTD")>  _
        Public Property TOTALCOST_YTD() As nullable(of decimal)
            Get
                return _TOTALCOST_YTD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_YTD")>  _
        Public Property BAL_YTD() As nullable(of decimal)
            Get
                return _BAL_YTD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approp.-Current Per."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_PERIOD")>  _
        Public Property AMOUNT_PERIOD() As nullable(of decimal)
            Get
                return _AMOUNT_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_PERIOD")>  _
        Public Property TOTALCOST_PERIOD() As nullable(of decimal)
            Get
                return _TOTALCOST_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_PERIOD")>  _
        Public Property BAL_PERIOD() As nullable(of decimal)
            Get
                return _BAL_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Period"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("DATESTR")>  _
        Public Property DATESTR() As String
            Get
                return _DATESTR
            End Get
            Set
                if not(value is nothing) then
                  _DATESTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Deviation Check"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("BCEHCKSTR")>  _
        Public Property BCEHCKSTR() As String
            Get
                return _BCEHCKSTR
            End Get
            Set
                if not(value is nothing) then
                  _BCEHCKSTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Usage Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Budget Usage Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("BUDGETDATE")>  _
        Public Property BUDGETDATE() As nullable (of DateTimeOffset)
            Get
                return _BUDGETDATE
            End Get
            Set
                if not(value is nothing) then
                  _BUDGETDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Budget Usage Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "BUDGETREP")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With obj
                  _AMOUNT = .AMOUNT
                  _TOTCOST = .TOTCOST
                  _BAL = .BAL
                  _FNCCOST = .FNCCOST
                  _TRANSCOST = .TRANSCOST
                  _ORDCOST = .ORDCOST
                  _PRDCOST = .PRDCOST
                  _CODE = .CODE
                  _AMOUNT_YTD = .AMOUNT_YTD
                  _TOTALCOST_YTD = .TOTALCOST_YTD
                  _BAL_YTD = .BAL_YTD
                  _AMOUNT_PERIOD = .AMOUNT_PERIOD
                  _TOTALCOST_PERIOD = .TOTALCOST_PERIOD
                  _BAL_PERIOD = .BAL_PERIOD
                  _DATESTR = .DATESTR
                  _BCEHCKSTR = .BCEHCKSTR
                  _BUDGETDATE = .BUDGETDATE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Inventory for Part")>  _
    Public Class QUERY_PARTBALANCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTBALANCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = nothing
            _Name = "PARTBALANCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = Parent
            _name = "PARTBALANCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTBALANCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTBALANCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTBALANCE As PARTBALANCE In JsonConvert.DeserializeObject(Of QUERY_PARTBALANCE)(stream.ReadToEnd).Value
              With _PARTBALANCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTBALANCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTBALANCE)
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .VELOCITY = obj.VELOCITY
                  .TYPE = obj.TYPE
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .CUSTNAME = obj.CUSTNAME
                  .ACTNAME = obj.ACTNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .LASTDATE = obj.LASTDATE
                  .NUMPACK = obj.NUMPACK
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTBALANCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTBALANCE as PARTBALANCE in value
              If _PARTBALANCE.Equals(trycast(obj,PARTBALANCE)) Then
                  value.remove(_PARTBALANCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTBALANCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _VELOCITY As String
        
        Private _TYPE As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _CUSTNAME As String
        
        Private _ACTNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _LASTDATE As System.DateTimeOffset
        
        Private _NUMPACK As Long
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTBALANCE"
                else
                    return "PARTBALANCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Velocity"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("VELOCITY")>  _
        Public Property VELOCITY() As String
            Get
                return _VELOCITY
            End Get
            Set
                if not(value is nothing) then
                  _VELOCITY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (D/F/W)"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Buy/Sell)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Warehouse"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Buy/Sell Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. No."),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. Name"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation/Pallet"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Expir. Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Factory Unit"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Last Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Factory Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("LASTDATE")>  _
        Public Property LASTDATE() As nullable (of DateTimeOffset)
            Get
                return _LASTDATE
            End Get
            Set
                if not(value is nothing) then
                  _LASTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTBALANCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With obj
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _VELOCITY = .VELOCITY
                  _TYPE = .TYPE
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _CUSTNAME = .CUSTNAME
                  _ACTNAME = .ACTNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _LASTDATE = .LASTDATE
                  _NUMPACK = .NUMPACK
                  _ACT = .ACT
                  _CUST = .CUST
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Latest Part Sales to Customer")>  _
    Public Class QUERY_LASTCUSTPARTSALES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTCUSTPARTSALES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = nothing
            _Name = "LASTCUSTPARTSALES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = Parent
            _name = "LASTCUSTPARTSALES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTCUSTPARTSALES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTCUSTPARTSALES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTCUSTPARTSALES As LASTCUSTPARTSALES In JsonConvert.DeserializeObject(Of QUERY_LASTCUSTPARTSALES)(stream.ReadToEnd).Value
              With _LASTCUSTPARTSALES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTCUSTPARTSALES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTCUSTPARTSALES)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTCUSTPARTSALES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTCUSTPARTSALES as LASTCUSTPARTSALES in value
              If _LASTCUSTPARTSALES.Equals(trycast(obj,LASTCUSTPARTSALES)) Then
                  value.remove(_LASTCUSTPARTSALES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTCUSTPARTSALES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTCUSTPARTSALES"
                else
                    return "LASTCUSTPARTSALES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Overall Discount"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Overall Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Overall Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTCUSTPARTSALES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoice Item - Remarks")>  _
    Public Class QUERY_AINVOICEITEMSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of AINVOICEITEMSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of AINVOICEITEMSTEXT)
            _Parent = nothing
            _Name = "AINVOICEITEMSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of AINVOICEITEMSTEXT)
            _Parent = Parent
            _name = "AINVOICEITEMSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of AINVOICEITEMSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(AINVOICEITEMSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _AINVOICEITEMSTEXT As AINVOICEITEMSTEXT In JsonConvert.DeserializeObject(Of QUERY_AINVOICEITEMSTEXT)(stream.ReadToEnd).Value
              With _AINVOICEITEMSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_AINVOICEITEMSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as AINVOICEITEMSTEXT = JsonConvert.DeserializeObject(Of AINVOICEITEMSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, AINVOICEITEMSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new AINVOICEITEMSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _AINVOICEITEMSTEXT as AINVOICEITEMSTEXT in value
              If _AINVOICEITEMSTEXT.Equals(trycast(obj,AINVOICEITEMSTEXT)) Then
                  value.remove(_AINVOICEITEMSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class AINVOICEITEMSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "AINVOICEITEMSTEXT"
                else
                    return "AINVOICEITEMSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "AINVOICEITEMSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as AINVOICEITEMSTEXT = JsonConvert.DeserializeObject(Of AINVOICEITEMSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Accounting")>  _
    Public Class QUERY_PROJLINK_PIV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK_PIV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK_PIV)
            _Parent = nothing
            _Name = "PROJLINK_PIV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK_PIV)
            _Parent = Parent
            _name = "PROJLINK_PIV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK_PIV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK_PIV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK_PIV As PROJLINK_PIV In JsonConvert.DeserializeObject(Of QUERY_PROJLINK_PIV)(stream.ReadToEnd).Value
              With _PROJLINK_PIV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK_PIV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK_PIV = JsonConvert.DeserializeObject(Of PROJLINK_PIV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK_PIV)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BUDCODE = obj.BUDCODE
                  .BUDNAME = obj.BUDNAME
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCDES = obj.COSTCDES
                  .COSTCNAME2 = obj.COSTCNAME2
                  .COSTCDES2 = obj.COSTCDES2
                  .COSTCNAME3 = obj.COSTCNAME3
                  .COSTCDES3 = obj.COSTCDES3
                  .COSTCNAME4 = obj.COSTCNAME4
                  .COSTCDES4 = obj.COSTCDES4
                  .COSTCNAME5 = obj.COSTCNAME5
                  .COSTCDES5 = obj.COSTCDES5
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK_PIV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK_PIV as PROJLINK_PIV in value
              If _PROJLINK_PIV.Equals(trycast(obj,PROJLINK_PIV)) Then
                  value.remove(_PROJLINK_PIV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK_PIV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _BUDNAME As String
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _COSTCDES As String
        
        Private _IsSetCOSTCNAME2 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME2 As String
        
        Private _COSTCDES2 As String
        
        Private _IsSetCOSTCNAME3 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME3 As String
        
        Private _COSTCDES3 As String
        
        Private _IsSetCOSTCNAME4 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME4 As String
        
        Private _COSTCDES4 As String
        
        Private _IsSetCOSTCNAME5 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME5 As String
        
        Private _COSTCDES5 As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK_PIV"
                else
                    return "PROJLINK_PIV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(10),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(30),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Budget)"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BUDNAME")>  _
        Public Property BUDNAME() As String
            Get
                return _BUDNAME
            End Get
            Set
                if not(value is nothing) then
                  _BUDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES")>  _
        Public Property COSTCDES() As String
            Get
                return _COSTCDES
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre 2"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(70),  _
         twodBarcode("COSTCNAME2")>  _
        Public Property COSTCNAME2() As String
            Get
                return _COSTCNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre 2", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME2 = True
                If loading Then
                  _COSTCNAME2 = Value
                Else
                    if not _COSTCNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES2")>  _
        Public Property COSTCDES2() As String
            Get
                return _COSTCDES2
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre 3"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(90),  _
         twodBarcode("COSTCNAME3")>  _
        Public Property COSTCNAME3() As String
            Get
                return _COSTCNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre 3", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME3 = True
                If loading Then
                  _COSTCNAME3 = Value
                Else
                    if not _COSTCNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES3")>  _
        Public Property COSTCDES3() As String
            Get
                return _COSTCDES3
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre 4"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(110),  _
         twodBarcode("COSTCNAME4")>  _
        Public Property COSTCNAME4() As String
            Get
                return _COSTCNAME4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre 4", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME4 = True
                If loading Then
                  _COSTCNAME4 = Value
                Else
                    if not _COSTCNAME4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES4")>  _
        Public Property COSTCDES4() As String
            Get
                return _COSTCDES4
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre 5"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(130),  _
         twodBarcode("COSTCNAME5")>  _
        Public Property COSTCNAME5() As String
            Get
                return _COSTCNAME5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre 5", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME5 = True
                If loading Then
                  _COSTCNAME5 = Value
                Else
                    if not _COSTCNAME5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES5")>  _
        Public Property COSTCDES5() As String
            Get
                return _COSTCDES5
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Profit/Cost Centre 3"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetCOSTCNAME2 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME2"": ")
              else
                  jw.WriteRaw("""COSTCNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME2)
            end if
            if _IsSetCOSTCNAME3 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME3"": ")
              else
                  jw.WriteRaw("""COSTCNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME3)
            end if
            if _IsSetCOSTCNAME4 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME4"": ")
              else
                  jw.WriteRaw("""COSTCNAME4"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME4)
            end if
            if _IsSetCOSTCNAME5 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME5"": ")
              else
                  jw.WriteRaw("""COSTCNAME5"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME5)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK_PIV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME2")
              .WriteAttributeString("value", me.COSTCNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME3")
              .WriteAttributeString("value", me.COSTCNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME4")
              .WriteAttributeString("value", me.COSTCNAME4)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME5")
              .WriteAttributeString("value", me.COSTCNAME5)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK_PIV = JsonConvert.DeserializeObject(Of PROJLINK_PIV)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BUDCODE = .BUDCODE
                  _BUDNAME = .BUDNAME
                  _COSTCNAME = .COSTCNAME
                  _COSTCDES = .COSTCDES
                  _COSTCNAME2 = .COSTCNAME2
                  _COSTCDES2 = .COSTCDES2
                  _COSTCNAME3 = .COSTCNAME3
                  _COSTCDES3 = .COSTCDES3
                  _COSTCNAME4 = .COSTCNAME4
                  _COSTCDES4 = .COSTCDES4
                  _COSTCNAME5 = .COSTCNAME5
                  _COSTCDES5 = .COSTCDES5
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Calls to Cust for Clarification")>  _
    Public Class QUERY_TRANSCONTACTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSCONTACTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSCONTACTS)
            _Parent = nothing
            _Name = "TRANSCONTACTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSCONTACTS)
            _Parent = Parent
            _name = "TRANSCONTACTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSCONTACTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSCONTACTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSCONTACTS As TRANSCONTACTS In JsonConvert.DeserializeObject(Of QUERY_TRANSCONTACTS)(stream.ReadToEnd).Value
              With _TRANSCONTACTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSCONTACTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTS = JsonConvert.DeserializeObject(Of TRANSCONTACTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSCONTACTS)
                  .CURDATE = obj.CURDATE
                  .CALLERLOGIN = obj.CALLERLOGIN
                  .CLIENTNAME = obj.CLIENTNAME
                  .TEXT = obj.TEXT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSCONTACTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSCONTACTS as TRANSCONTACTS in value
              If _TRANSCONTACTS.Equals(trycast(obj,TRANSCONTACTS)) Then
                  value.remove(_TRANSCONTACTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSCONTACTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetCALLERLOGIN As Boolean = Boolean.FalseString
        
        Private _CALLERLOGIN As String
        
        Private _IsSetCLIENTNAME As Boolean = Boolean.FalseString
        
        Private _CLIENTNAME As String
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _TRANSCONTACTSIGN_SUBFORM As QUERY_TRANSCONTACTSIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Electronic Signature"))
            _TRANSCONTACTSIGN_SUBFORM = new QUERY_TRANSCONTACTSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSCONTACTSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Electronic Signature", _TRANSCONTACTSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Electronic Signature"))
            _TRANSCONTACTSIGN_SUBFORM = new QUERY_TRANSCONTACTSIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_TRANSCONTACTSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Electronic Signature", _TRANSCONTACTSIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSCONTACTS"
                else
                    return "TRANSCONTACTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Initiator (Usr)"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         twodBarcode("CALLERLOGIN")>  _
        Public Property CALLERLOGIN() As String
            Get
                return _CALLERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Initiator (Usr)", value, "^.{0,20}$") then Exit Property
                _IsSetCALLERLOGIN = True
                If loading Then
                  _CALLERLOGIN = Value
                Else
                    if not _CALLERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CALLERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CALLERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Call Taker"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         twodBarcode("CLIENTNAME")>  _
        Public Property CLIENTNAME() As String
            Get
                return _CLIENTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Call Taker", value, "^.{0,12}$") then Exit Property
                _IsSetCLIENTNAME = True
                If loading Then
                  _CLIENTNAME = Value
                Else
                    if not _CLIENTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLIENTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLIENTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,44}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property TRANSCONTACTSIGN_SUBFORM() As QUERY_TRANSCONTACTSIGN
            Get
                return _TRANSCONTACTSIGN_SUBFORM
            End Get
            Set
                _TRANSCONTACTSIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetCALLERLOGIN then
              if f then
                  jw.WriteRaw(", ""CALLERLOGIN"": ")
              else
                  jw.WriteRaw("""CALLERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.CALLERLOGIN)
            end if
            if _IsSetCLIENTNAME then
              if f then
                  jw.WriteRaw(", ""CLIENTNAME"": ")
              else
                  jw.WriteRaw("""CLIENTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CLIENTNAME)
            end if
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _TRANSCONTACTSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", TRANSCONTACTSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as TRANSCONTACTSIGN in _TRANSCONTACTSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _TRANSCONTACTSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSCONTACTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCALLERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CALLERLOGIN")
              .WriteAttributeString("value", me.CALLERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCLIENTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLIENTNAME")
              .WriteAttributeString("value", me.CLIENTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "44")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _TRANSCONTACTSIGN_SUBFORM.value.count > 0 then
              for each itm as TRANSCONTACTSIGN in _TRANSCONTACTSIGN_SUBFORM.Value
                itm.toXML(xw,"TRANSCONTACTSIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTS = JsonConvert.DeserializeObject(Of TRANSCONTACTS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _CALLERLOGIN = .CALLERLOGIN
                  _CLIENTNAME = .CLIENTNAME
                  _TEXT = .TEXT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_TRANSCONTACTS
        
        TRANSCONTACTSIGN = 0
    End Enum
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_TRANSCONTACTSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of TRANSCONTACTSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of TRANSCONTACTSIGN)
            _Parent = nothing
            _Name = "TRANSCONTACTSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of TRANSCONTACTSIGN)
            _Parent = Parent
            _name = "TRANSCONTACTSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of TRANSCONTACTSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(TRANSCONTACTSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _TRANSCONTACTSIGN As TRANSCONTACTSIGN In JsonConvert.DeserializeObject(Of QUERY_TRANSCONTACTSIGN)(stream.ReadToEnd).Value
              With _TRANSCONTACTSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_TRANSCONTACTSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTSIGN = JsonConvert.DeserializeObject(Of TRANSCONTACTSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, TRANSCONTACTSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .TRANS = obj.TRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new TRANSCONTACTSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _TRANSCONTACTSIGN as TRANSCONTACTSIGN in value
              If _TRANSCONTACTSIGN.Equals(trycast(obj,TRANSCONTACTSIGN)) Then
                  value.remove(_TRANSCONTACTSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class TRANSCONTACTSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _TRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "TRANSCONTACTSIGN"
                else
                    return "TRANSCONTACTSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TRANS={0},KLINE={1}", _
                  string.format("{0}",TRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "TRANSCONTACTSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as TRANSCONTACTSIGN = JsonConvert.DeserializeObject(Of TRANSCONTACTSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _TRANS = .TRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Split Among Profit/Cost Centers")>  _
    Public Class QUERY_SPLITCOSTCENTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SPLITCOSTCENTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = nothing
            _Name = "SPLITCOSTCENTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = Parent
            _name = "SPLITCOSTCENTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SPLITCOSTCENTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SPLITCOSTCENTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SPLITCOSTCENTERS As SPLITCOSTCENTERS In JsonConvert.DeserializeObject(Of QUERY_SPLITCOSTCENTERS)(stream.ReadToEnd).Value
              With _SPLITCOSTCENTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SPLITCOSTCENTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SPLITCOSTCENTERS)
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCDES = obj.COSTCDES
                  .COSTCNAME2 = obj.COSTCNAME2
                  .COSTCDES2 = obj.COSTCDES2
                  .COSTCNAME3 = obj.COSTCNAME3
                  .COSTCDES3 = obj.COSTCDES3
                  .COSTCNAME4 = obj.COSTCNAME4
                  .COSTCDES4 = obj.COSTCDES4
                  .COSTCNAME5 = obj.COSTCNAME5
                  .COSTCDES5 = obj.COSTCDES5
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .AMOUNT = obj.AMOUNT
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SPLITCOSTCENTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SPLITCOSTCENTERS as SPLITCOSTCENTERS in value
              If _SPLITCOSTCENTERS.Equals(trycast(obj,SPLITCOSTCENTERS)) Then
                  value.remove(_SPLITCOSTCENTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SPLITCOSTCENTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _COSTCDES As String
        
        Private _IsSetCOSTCNAME2 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME2 As String
        
        Private _COSTCDES2 As String
        
        Private _IsSetCOSTCNAME3 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME3 As String
        
        Private _COSTCDES3 As String
        
        Private _IsSetCOSTCNAME4 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME4 As String
        
        Private _COSTCDES4 As String
        
        Private _IsSetCOSTCNAME5 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME5 As String
        
        Private _COSTCDES5 As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetAMOUNT As Boolean = Boolean.FalseString
        
        Private _AMOUNT As Decimal
        
        Private _IsSetKLINE2 As Boolean = Boolean.FalseString
        
        Private _KLINE2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SPLITCOSTCENTERS"
                else
                    return "SPLITCOSTCENTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(10),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES")>  _
        Public Property COSTCDES() As String
            Get
                return _COSTCDES
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 2"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(30),  _
         twodBarcode("COSTCNAME2")>  _
        Public Property COSTCNAME2() As String
            Get
                return _COSTCNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 2", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME2 = True
                If loading Then
                  _COSTCNAME2 = Value
                Else
                    if not _COSTCNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost2)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES2")>  _
        Public Property COSTCDES2() As String
            Get
                return _COSTCDES2
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 3"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(50),  _
         twodBarcode("COSTCNAME3")>  _
        Public Property COSTCNAME3() As String
            Get
                return _COSTCNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 3", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME3 = True
                If loading Then
                  _COSTCNAME3 = Value
                Else
                    if not _COSTCNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost3)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES3")>  _
        Public Property COSTCDES3() As String
            Get
                return _COSTCDES3
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 4"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(70),  _
         twodBarcode("COSTCNAME4")>  _
        Public Property COSTCNAME4() As String
            Get
                return _COSTCNAME4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 4", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME4 = True
                If loading Then
                  _COSTCNAME4 = Value
                Else
                    if not _COSTCNAME4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost4)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES4")>  _
        Public Property COSTCDES4() As String
            Get
                return _COSTCDES4
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 5"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(90),  _
         twodBarcode("COSTCNAME5")>  _
        Public Property COSTCNAME5() As String
            Get
                return _COSTCNAME5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 5", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME5 = True
                If loading Then
                  _COSTCNAME5 = Value
                Else
                    if not _COSTCNAME5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost5)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES5")>  _
        Public Property COSTCDES5() As String
            Get
                return _COSTCDES5
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(110),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Profit/Cost Center 5"),  _
         Pos(130),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Weight", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetAMOUNT = True
                If loading Then
                  _AMOUNT = Value
                Else
                    if not _AMOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AMOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AMOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line 2"),  _
         nType("Edm.Int64"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line 2", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE2 = True
                If loading Then
                  _KLINE2 = Value
                Else
                    if not _KLINE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetCOSTCNAME2 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME2"": ")
              else
                  jw.WriteRaw("""COSTCNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME2)
            end if
            if _IsSetCOSTCNAME3 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME3"": ")
              else
                  jw.WriteRaw("""COSTCNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME3)
            end if
            if _IsSetCOSTCNAME4 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME4"": ")
              else
                  jw.WriteRaw("""COSTCNAME4"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME4)
            end if
            if _IsSetCOSTCNAME5 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME5"": ")
              else
                  jw.WriteRaw("""COSTCNAME5"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME5)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetAMOUNT then
              if f then
                  jw.WriteRaw(", ""AMOUNT"": ")
              else
                  jw.WriteRaw("""AMOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.AMOUNT)
            end if
            if _IsSetKLINE2 then
              if f then
                  jw.WriteRaw(", ""KLINE2"": ")
              else
                  jw.WriteRaw("""KLINE2"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE2)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SPLITCOSTCENTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME2")
              .WriteAttributeString("value", me.COSTCNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME3")
              .WriteAttributeString("value", me.COSTCNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME4")
              .WriteAttributeString("value", me.COSTCNAME4)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME5")
              .WriteAttributeString("value", me.COSTCNAME5)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetAMOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AMOUNT")
              .WriteAttributeString("value", me.AMOUNT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", me.KLINE2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _COSTCNAME = .COSTCNAME
                  _COSTCDES = .COSTCDES
                  _COSTCNAME2 = .COSTCNAME2
                  _COSTCDES2 = .COSTCDES2
                  _COSTCNAME3 = .COSTCNAME3
                  _COSTCDES3 = .COSTCDES3
                  _COSTCNAME4 = .COSTCNAME4
                  _COSTCDES4 = .COSTCDES4
                  _COSTCNAME5 = .COSTCNAME5
                  _COSTCDES5 = .COSTCDES5
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _AMOUNT = .AMOUNT
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoice Data for Intrastat Rep")>  _
    Public Class QUERY_INVOICEITEMSINTRASTA
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INVOICEITEMSINTRASTA)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INVOICEITEMSINTRASTA)
            _Parent = nothing
            _Name = "INVOICEITEMSINTRASTA"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INVOICEITEMSINTRASTA)
            _Parent = Parent
            _name = "INVOICEITEMSINTRASTA_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INVOICEITEMSINTRASTA)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INVOICEITEMSINTRASTA)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INVOICEITEMSINTRASTA As INVOICEITEMSINTRASTA In JsonConvert.DeserializeObject(Of QUERY_INVOICEITEMSINTRASTA)(stream.ReadToEnd).Value
              With _INVOICEITEMSINTRASTA
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INVOICEITEMSINTRASTA)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INVOICEITEMSINTRASTA = JsonConvert.DeserializeObject(Of INVOICEITEMSINTRASTA)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INVOICEITEMSINTRASTA)
                  .TRANSTYPE1 = obj.TRANSTYPE1
                  .TRANSTYPE2 = obj.TRANSTYPE2
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .INDICATOR = obj.INDICATOR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INVOICEITEMSINTRASTA(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INVOICEITEMSINTRASTA as INVOICEITEMSINTRASTA in value
              If _INVOICEITEMSINTRASTA.Equals(trycast(obj,INVOICEITEMSINTRASTA)) Then
                  value.remove(_INVOICEITEMSINTRASTA)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INVOICEITEMSINTRASTA
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTRANSTYPE1 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE1 As String
        
        Private _IsSetTRANSTYPE2 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE2 As String
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetINDICATOR As Boolean = Boolean.FalseString
        
        Private _INDICATOR As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INVOICEITEMSINTRASTA"
                else
                    return "INVOICEITEMSINTRASTA_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Nature of Trans-1st"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(10),  _
         twodBarcode("TRANSTYPE1")>  _
        Public Property TRANSTYPE1() As String
            Get
                return _TRANSTYPE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-1st", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE1 = True
                If loading Then
                  _TRANSTYPE1 = Value
                Else
                    if not _TRANSTYPE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-2nd"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(20),  _
         twodBarcode("TRANSTYPE2")>  _
        Public Property TRANSTYPE2() As String
            Get
                return _TRANSTYPE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-2nd", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE2 = True
                If loading Then
                  _TRANSTYPE2 = Value
                Else
                    if not _TRANSTYPE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Terms of Delivery"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(60),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Terms of Delivery", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(70),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("EC Sales List Flag"),  _
         nType("Edm.String"),  _
         tab("Nature of Trans-1st"),  _
         Pos(80),  _
         twodBarcode("INDICATOR")>  _
        Public Property INDICATOR() As String
            Get
                return _INDICATOR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("EC Sales List Flag", value, "^.{0,1}$") then Exit Property
                _IsSetINDICATOR = True
                If loading Then
                  _INDICATOR = Value
                Else
                    if not _INDICATOR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INDICATOR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INDICATOR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTRANSTYPE1 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE1"": ")
              else
                  jw.WriteRaw("""TRANSTYPE1"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE1)
            end if
            if _IsSetTRANSTYPE2 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE2"": ")
              else
                  jw.WriteRaw("""TRANSTYPE2"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE2)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetINDICATOR then
              if f then
                  jw.WriteRaw(", ""INDICATOR"": ")
              else
                  jw.WriteRaw("""INDICATOR"": ")
                  f = true
              end if
              jw.WriteValue(me.INDICATOR)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INVOICEITEMSINTRASTA")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetTRANSTYPE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE1")
              .WriteAttributeString("value", me.TRANSTYPE1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE2")
              .WriteAttributeString("value", me.TRANSTYPE2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetINDICATOR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INDICATOR")
              .WriteAttributeString("value", me.INDICATOR)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INVOICEITEMSINTRASTA = JsonConvert.DeserializeObject(Of INVOICEITEMSINTRASTA)(e.StreamReader.ReadToEnd)
                With obj
                  _TRANSTYPE1 = .TRANSTYPE1
                  _TRANSTYPE2 = .TRANSTYPE2
                  _IMPTERMNAME = .IMPTERMNAME
                  _COUNTRYNAME = .COUNTRYNAME
                  _INDICATOR = .INDICATOR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Linkage Calculations")>  _
    Public Class QUERY_LINKINGDETAILS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKINGDETAILS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKINGDETAILS)
            _Parent = nothing
            _Name = "LINKINGDETAILS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKINGDETAILS)
            _Parent = Parent
            _name = "LINKINGDETAILS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKINGDETAILS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKINGDETAILS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKINGDETAILS As LINKINGDETAILS In JsonConvert.DeserializeObject(Of QUERY_LINKINGDETAILS)(stream.ReadToEnd).Value
              With _LINKINGDETAILS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKINGDETAILS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKINGDETAILS = JsonConvert.DeserializeObject(Of LINKINGDETAILS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKINGDETAILS)
                  .CODE = obj.CODE
                  .BASEDATE = obj.BASEDATE
                  .BVALUE = obj.BVALUE
                  .CURDATE = obj.CURDATE
                  .CVALUE = obj.CVALUE
                  .SHARE = obj.SHARE
                  .DIFF = obj.DIFF
                  .LINKAGEVALUE = obj.LINKAGEVALUE
                  .CURRENCY = obj.CURRENCY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKINGDETAILS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKINGDETAILS as LINKINGDETAILS in value
              If _LINKINGDETAILS.Equals(trycast(obj,LINKINGDETAILS)) Then
                  value.remove(_LINKINGDETAILS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKINGDETAILS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CODE As String
        
        Private _BASEDATE As System.DateTimeOffset
        
        Private _BVALUE As Decimal
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _CVALUE As Decimal
        
        Private _SHARE As Decimal
        
        Private _DIFF As Decimal
        
        Private _LINKAGEVALUE As Decimal
        
        Private _CURRENCY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKINGDETAILS"
                else
                    return "LINKINGDETAILS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURRENCY={0}", _
                  string.format("{0}",CURRENCY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BASEDATE")>  _
        Public Property BASEDATE() As nullable (of DateTimeOffset)
            Get
                return _BASEDATE
            End Get
            Set
                if not(value is nothing) then
                  _BASEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BVALUE")>  _
        Public Property BVALUE() As nullable(of decimal)
            Get
                return _BVALUE
            End Get
            Set
                if not(value is nothing) then
                  _BVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linkage Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linkage Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("CVALUE")>  _
        Public Property CVALUE() As nullable(of decimal)
            Get
                return _CVALUE
            End Get
            Set
                if not(value is nothing) then
                  _CVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent of Composite"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("SHARE")>  _
        Public Property SHARE() As nullable(of decimal)
            Get
                return _SHARE
            End Get
            Set
                if not(value is nothing) then
                  _SHARE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Change (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount of Adjustment"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("LINKAGEVALUE")>  _
        Public Property LINKAGEVALUE() As nullable(of decimal)
            Get
                return _LINKAGEVALUE
            End Get
            Set
                if not(value is nothing) then
                  _LINKAGEVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Currency (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY")>  _
        Public Property CURRENCY() As nullable (of int64)
            Get
                return _CURRENCY
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKINGDETAILS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKINGDETAILS = JsonConvert.DeserializeObject(Of LINKINGDETAILS)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _BASEDATE = .BASEDATE
                  _BVALUE = .BVALUE
                  _CURDATE = .CURDATE
                  _CVALUE = .CVALUE
                  _SHARE = .SHARE
                  _DIFF = .DIFF
                  _LINKAGEVALUE = .LINKAGEVALUE
                  _CURRENCY = .CURRENCY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Link to Previous Invoice Line")>  _
    Public Class QUERY_PIVLINELINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PIVLINELINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PIVLINELINK)
            _Parent = nothing
            _Name = "PIVLINELINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PIVLINELINK)
            _Parent = Parent
            _name = "PIVLINELINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PIVLINELINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PIVLINELINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PIVLINELINK As PIVLINELINK In JsonConvert.DeserializeObject(Of QUERY_PIVLINELINK)(stream.ReadToEnd).Value
              With _PIVLINELINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PIVLINELINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PIVLINELINK = JsonConvert.DeserializeObject(Of PIVLINELINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PIVLINELINK)
                  .PIVCODE = obj.PIVCODE
                  .PIVNUM = obj.PIVNUM
                  .PLINE = obj.PLINE
                  .PARTNAME = obj.PARTNAME
                  .TQUANT = obj.TQUANT
                  .PRICE = obj.PRICE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PIVLINELINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PIVLINELINK as PIVLINELINK in value
              If _PIVLINELINK.Equals(trycast(obj,PIVLINELINK)) Then
                  value.remove(_PIVLINELINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PIVLINELINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PIVCODE As String
        
        Private _PIVNUM As String
        
        Private _IsSetPLINE As Boolean = Boolean.FalseString
        
        Private _PLINE As Long
        
        Private _PARTNAME As String
        
        Private _TQUANT As Decimal
        
        Private _PRICE As Decimal
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PIVLINELINK"
                else
                    return "PIVLINELINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Prev Inv/Rec't Code"),  _
         nType("Edm.String"),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PIVCODE")>  _
        Public Property PIVCODE() As String
            Get
                return _PIVCODE
            End Get
            Set
                if not(value is nothing) then
                  _PIVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Inv/Receipt"),  _
         nType("Edm.String"),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PIVNUM")>  _
        Public Property PIVNUM() As String
            Get
                return _PIVNUM
            End Get
            Set
                if not(value is nothing) then
                  _PIVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Prev. Invoice Line"),  _
         nType("Edm.Int64"),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(30),  _
         twodBarcode("PLINE")>  _
        Public Property PLINE() As nullable (of int64)
            Get
                return _PLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Prev. Invoice Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLINE = True
                If loading Then
                  _PLINE = Value
                Else
                    if not _PLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Prev. Invoice Part"),  _
         nType("Edm.String"),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Prev. Invoice Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Prev Inv. Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Prev Inv/Rec't Code"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPLINE then
              if f then
                  jw.WriteRaw(", ""PLINE"": ")
              else
                  jw.WriteRaw("""PLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.PLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PIVLINELINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetPLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLINE")
              .WriteAttributeString("value", me.PLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PIVLINELINK = JsonConvert.DeserializeObject(Of PIVLINELINK)(e.StreamReader.ReadToEnd)
                With obj
                  _PIVCODE = .PIVCODE
                  _PIVNUM = .PIVNUM
                  _PLINE = .PLINE
                  _PARTNAME = .PARTNAME
                  _TQUANT = .TQUANT
                  _PRICE = .PRICE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Documents for Invoice")>  _
    Public Class QUERY_CIVDOC
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CIVDOC)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CIVDOC)
            _Parent = nothing
            _Name = "CIVDOC"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CIVDOC)
            _Parent = Parent
            _name = "CIVDOC_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CIVDOC)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CIVDOC)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CIVDOC As CIVDOC In JsonConvert.DeserializeObject(Of QUERY_CIVDOC)(stream.ReadToEnd).Value
              With _CIVDOC
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CIVDOC)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CIVDOC = JsonConvert.DeserializeObject(Of CIVDOC)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CIVDOC)
                  .DOCCODE = obj.DOCCODE
                  .DOCNO = obj.DOCNO
                  .CURDATE = obj.CURDATE
                  .CUSTNAME = obj.CUSTNAME
                  .DETAILS = obj.DETAILS
                  .CODE = obj.CODE
                  .CODEDES = obj.CODEDES
                  .DOC = obj.DOC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CIVDOC(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CIVDOC as CIVDOC in value
              If _CIVDOC.Equals(trycast(obj,CIVDOC)) Then
                  value.remove(_CIVDOC)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CIVDOC
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCCODE As Boolean = Boolean.FalseString
        
        Private _DOCCODE As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _CUSTNAME As String
        
        Private _DETAILS As String
        
        Private _CODE As String
        
        Private _CODEDES As String
        
        Private _IsSetDOC As Boolean = Boolean.FalseString
        
        Private _DOC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CIVDOC"
                else
                    return "CIVDOC_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0}", _
                  string.format("{0}",DOC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(5),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Code", value, "^.{0,4}$") then Exit Property
                _IsSetDOCCODE = True
                If loading Then
                  _DOCCODE = Value
                Else
                    if not _DOCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Document Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Document Code"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Code"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetDOC = True
                If loading Then
                  _DOC = Value
                Else
                    if not _DOC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCCODE then
              if f then
                  jw.WriteRaw(", ""DOCCODE"": ")
              else
                  jw.WriteRaw("""DOCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCCODE)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetDOC then
              if f then
                  jw.WriteRaw(", ""DOC"": ")
              else
                  jw.WriteRaw("""DOC"": ")
                  f = true
              end if
              jw.WriteValue(me.DOC)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CIVDOC")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDOCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCCODE")
              .WriteAttributeString("value", me.DOCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", me.DOC)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CIVDOC = JsonConvert.DeserializeObject(Of CIVDOC)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCCODE = .DOCCODE
                  _DOCNO = .DOCNO
                  _CURDATE = .CURDATE
                  _CUSTNAME = .CUSTNAME
                  _DETAILS = .DETAILS
                  _CODE = .CODE
                  _CODEDES = .CODEDES
                  _DOC = .DOC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoice - Add'l Details")>  _
    Public Class QUERY_CINVOICESCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CINVOICESCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CINVOICESCONT)
            _Parent = nothing
            _Name = "CINVOICESCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CINVOICESCONT)
            _Parent = Parent
            _name = "CINVOICESCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CINVOICESCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CINVOICESCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CINVOICESCONT As CINVOICESCONT In JsonConvert.DeserializeObject(Of QUERY_CINVOICESCONT)(stream.ReadToEnd).Value
              With _CINVOICESCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CINVOICESCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICESCONT = JsonConvert.DeserializeObject(Of CINVOICESCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CINVOICESCONT)
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .PAYMENTCODE = obj.PAYMENTCODE
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .PAYDATE = obj.PAYDATE
                  .BALDATE = obj.BALDATE
                  .FNCPATNAME = obj.FNCPATNAME
                  .FNCPATDES2 = obj.FNCPATDES2
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .ACCNAME = obj.ACCNAME
                  .ACC_CODE = obj.ACC_CODE
                  .ACC_EXCH = obj.ACC_EXCH
                  .PIVCODE = obj.PIVCODE
                  .PIVNUM = obj.PIVNUM
                  .ADVANCESUM = obj.ADVANCESUM
                  .BALANCETOPAY = obj.BALANCETOPAY
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .TRANSTYPE1 = obj.TRANSTYPE1
                  .TRANSTYPE2 = obj.TRANSTYPE2
                  .INDICATOR = obj.INDICATOR
                  .INTRASTATDATE = obj.INTRASTATDATE
                  .IVREF = obj.IVREF
                  .OBFLAG = obj.OBFLAG
                  .APPROVALCODE = obj.APPROVALCODE
                  .AFIPDATE = obj.AFIPDATE
                  .REASONCODE = obj.REASONCODE
                  .TAXCODE = obj.TAXCODE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .DEBIT = obj.DEBIT
                  .ISIV = obj.ISIV
                  .IVNUM = obj.IVNUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CINVOICESCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CINVOICESCONT as CINVOICESCONT in value
              If _CINVOICESCONT.Equals(trycast(obj,CINVOICESCONT)) Then
                  value.remove(_CINVOICESCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CINVOICESCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _PAYMENTCODE As String
        
        Private _PAYMENTNAME As String
        
        Private _IsSetPAYDATE As Boolean = Boolean.FalseString
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _IsSetBALDATE As Boolean = Boolean.FalseString
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _IsSetFNCPATNAME As Boolean = Boolean.FalseString
        
        Private _FNCPATNAME As String
        
        Private _FNCPATDES2 As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetLCODE As Boolean = Boolean.FalseString
        
        Private _LCODE As String
        
        Private _IsSetLEXCH As Boolean = Boolean.FalseString
        
        Private _LEXCH As Decimal
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _IsSetACC_CODE As Boolean = Boolean.FalseString
        
        Private _ACC_CODE As String
        
        Private _IsSetACC_EXCH As Boolean = Boolean.FalseString
        
        Private _ACC_EXCH As Decimal
        
        Private _IsSetPIVCODE As Boolean = Boolean.FalseString
        
        Private _PIVCODE As String
        
        Private _IsSetPIVNUM As Boolean = Boolean.FalseString
        
        Private _PIVNUM As String
        
        Private _ADVANCESUM As Decimal
        
        Private _BALANCETOPAY As Decimal
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetTRANSTYPE1 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE1 As String
        
        Private _IsSetTRANSTYPE2 As Boolean = Boolean.FalseString
        
        Private _TRANSTYPE2 As String
        
        Private _IsSetINDICATOR As Boolean = Boolean.FalseString
        
        Private _INDICATOR As String
        
        Private _IsSetINTRASTATDATE As Boolean = Boolean.FalseString
        
        Private _INTRASTATDATE As System.DateTimeOffset
        
        Private _IsSetIVREF As Boolean = Boolean.FalseString
        
        Private _IVREF As String
        
        Private _IsSetOBFLAG As Boolean = Boolean.FalseString
        
        Private _OBFLAG As String
        
        Private _APPROVALCODE As String
        
        Private _AFIPDATE As System.DateTimeOffset
        
        Private _REASONCODE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetDEBIT As Boolean = Boolean.FalseString
        
        Private _DEBIT As String
        
        Private _IsSetISIV As Boolean = Boolean.FalseString
        
        Private _ISIV As Long
        
        Private _IsSetIVNUM As Boolean = Boolean.FalseString
        
        Private _IVNUM As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CINVOICESCONT"
                else
                    return "CINVOICESCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DEBIT={0},IVNUM={1}", _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",IVNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(1),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(2),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(3),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(4),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(5),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City/State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(6),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City/State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(7),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(8),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(9),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(10),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(18),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTCODE")>  _
        Public Property PAYMENTCODE() As String
            Get
                return _PAYMENTCODE
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Phone Number"),  _
         Pos(30),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Date", value, "^.*$") then Exit Property
                _IsSetPAYDATE = True
                If loading Then
                  _PAYDATE = Value
                Else
                    if not _PAYDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Phone Number"),  _
         Pos(35),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Transaction Date", value, "^.*$") then Exit Property
                _IsSetBALDATE = True
                If loading Then
                  _BALDATE = Value
                Else
                    if not _BALDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BALDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BALDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Entry Code", value, "^.{0,5}$") then Exit Property
                _IsSetFNCPATNAME = True
                If loading Then
                  _FNCPATNAME = Value
                Else
                    if not _FNCPATNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FNCPATNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FNCPATNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATDES2")>  _
        Public Property FNCPATDES2() As String
            Get
                return _FNCPATDES2
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(60),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(67),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked/Exch Currency"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(70),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linked/Exch Currency", value, "^.{0,3}$") then Exit Property
                _IsSetLCODE = True
                If loading Then
                  _LCODE = Value
                Else
                    if not _LCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Exchange/Linked Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Entry Code"),  _
         Pos(80),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange/Linked Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCH = True
                If loading Then
                  _LEXCH = Value
                Else
                    if not _LEXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("A/R Acc't to Charge"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(85),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("A/R Acc't to Charge", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Currency"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(88),  _
         twodBarcode("ACC_CODE")>  _
        Public Property ACC_CODE() As String
            Get
                return _ACC_CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Currency", value, "^.{0,3}$") then Exit Property
                _IsSetACC_CODE = True
                If loading Then
                  _ACC_CODE = Value
                Else
                    if not _ACC_CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACC_CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACC_CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("ExchRate-BillingCurr"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(90),  _
         twodBarcode("ACC_EXCH")>  _
        Public Property ACC_EXCH() As nullable(of decimal)
            Get
                return _ACC_EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("ExchRate-BillingCurr", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetACC_EXCH = True
                If loading Then
                  _ACC_EXCH = Value
                Else
                    if not _ACC_EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACC_EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACC_EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Code-Orig Inv/Rec't"),  _
         nType("Edm.String"),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(94),  _
         twodBarcode("PIVCODE")>  _
        Public Property PIVCODE() As String
            Get
                return _PIVCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Code-Orig Inv/Rec't", value, "^.{0,3}$") then Exit Property
                _IsSetPIVCODE = True
                If loading Then
                  _PIVCODE = Value
                Else
                    if not _PIVCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PIVCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PIVCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Orig Invoice/Receipt"),  _
         nType("Edm.String"),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(96),  _
         twodBarcode("PIVNUM")>  _
        Public Property PIVNUM() As String
            Get
                return _PIVNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Orig Invoice/Receipt", value, "^.{0,16}$") then Exit Property
                _IsSetPIVNUM = True
                If loading Then
                  _PIVNUM = Value
                Else
                    if not _PIVNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PIVNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PIVNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Advance Payment Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(98),  _
         [ReadOnly](true),  _
         twodBarcode("ADVANCESUM")>  _
        Public Property ADVANCESUM() As nullable(of decimal)
            Get
                return _ADVANCESUM
            End Get
            Set
                if not(value is nothing) then
                  _ADVANCESUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance to Pay"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCETOPAY")>  _
        Public Property BALANCETOPAY() As nullable(of decimal)
            Get
                return _BALANCETOPAY
            End Get
            Set
                if not(value is nothing) then
                  _BALANCETOPAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Delivery Terms"),  _
         nType("Edm.String"),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(100),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Delivery Terms", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-1st"),  _
         nType("Edm.String"),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(130),  _
         twodBarcode("TRANSTYPE1")>  _
        Public Property TRANSTYPE1() As String
            Get
                return _TRANSTYPE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-1st", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE1 = True
                If loading Then
                  _TRANSTYPE1 = Value
                Else
                    if not _TRANSTYPE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Nature of Trans-2nd"),  _
         nType("Edm.String"),  _
         tab("ExchRate-BillingCurr"),  _
         Pos(140),  _
         twodBarcode("TRANSTYPE2")>  _
        Public Property TRANSTYPE2() As String
            Get
                return _TRANSTYPE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Nature of Trans-2nd", value, "^.{0,1}$") then Exit Property
                _IsSetTRANSTYPE2 = True
                If loading Then
                  _TRANSTYPE2 = Value
                Else
                    if not _TRANSTYPE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TRANSTYPE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TRANSTYPE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("EC Sales List Flag"),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(160),  _
         twodBarcode("INDICATOR")>  _
        Public Property INDICATOR() As String
            Get
                return _INDICATOR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("EC Sales List Flag", value, "^.{0,1}$") then Exit Property
                _IsSetINDICATOR = True
                If loading Then
                  _INDICATOR = Value
                Else
                    if not _INDICATOR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INDICATOR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INDICATOR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Intrastat Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("EC Sales List Flag"),  _
         Pos(170),  _
         twodBarcode("INTRASTATDATE")>  _
        Public Property INTRASTATDATE() As nullable (of DateTimeOffset)
            Get
                return _INTRASTATDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Intrastat Date", value, "^.*$") then Exit Property
                _IsSetINTRASTATDATE = True
                If loading Then
                  _INTRASTATDATE = Value
                Else
                    if not _INTRASTATDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INTRASTATDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INTRASTATDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Export Manif/VAT No."),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(175),  _
         twodBarcode("IVREF")>  _
        Public Property IVREF() As String
            Get
                return _IVREF
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Export Manif/VAT No.", value, "^.{0,16}$") then Exit Property
                _IsSetIVREF = True
                If loading Then
                  _IVREF = Value
                Else
                    if not _IVREF = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVREF", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVREF = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Consider Credit?"),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(188),  _
         twodBarcode("OBFLAG")>  _
        Public Property OBFLAG() As String
            Get
                return _OBFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Consider Credit?", value, "^.{0,1}$") then Exit Property
                _IsSetOBFLAG = True
                If loading Then
                  _OBFLAG = Value
                Else
                    if not _OBFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OBFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OBFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("AFIP Authoriz. No."),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("APPROVALCODE")>  _
        Public Property APPROVALCODE() As String
            Get
                return _APPROVALCODE
            End Get
            Set
                if not(value is nothing) then
                  _APPROVALCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approve/Reject Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("EC Sales List Flag"),  _
         Pos(192),  _
         [ReadOnly](true),  _
         twodBarcode("AFIPDATE")>  _
        Public Property AFIPDATE() As nullable (of DateTimeOffset)
            Get
                return _AFIPDATE
            End Get
            Set
                if not(value is nothing) then
                  _AFIPDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reason Rejected"),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(194),  _
         [ReadOnly](true),  _
         twodBarcode("REASONCODE")>  _
        Public Property REASONCODE() As String
            Get
                return _REASONCODE
            End Get
            Set
                if not(value is nothing) then
                  _REASONCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("EC Sales List Flag"),  _
         Pos(196),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(198),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Debit/Credit", value, "^.{0,1}$") then Exit Property
                _IsSetDEBIT = True
                If loading Then
                  _DEBIT = Value
                Else
                    if not _DEBIT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEBIT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEBIT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ISIV")>  _
        Public Property ISIV() As nullable (of int64)
            Get
                return _ISIV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Invoice (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetISIV = True
                If loading Then
                  _ISIV = Value
                Else
                    if not _ISIV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ISIV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ISIV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Invoice", value, "^.{0,16}$") then Exit Property
                _IsSetIVNUM = True
                If loading Then
                  _IVNUM = Value
                Else
                    if not _IVNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IVNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IVNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetPAYDATE then
              if f then
                  jw.WriteRaw(", ""PAYDATE"": ")
              else
                  jw.WriteRaw("""PAYDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYDATE)
            end if
            if _IsSetBALDATE then
              if f then
                  jw.WriteRaw(", ""BALDATE"": ")
              else
                  jw.WriteRaw("""BALDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.BALDATE)
            end if
            if _IsSetFNCPATNAME then
              if f then
                  jw.WriteRaw(", ""FNCPATNAME"": ")
              else
                  jw.WriteRaw("""FNCPATNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.FNCPATNAME)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetLCODE then
              if f then
                  jw.WriteRaw(", ""LCODE"": ")
              else
                  jw.WriteRaw("""LCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.LCODE)
            end if
            if _IsSetLEXCH then
              if f then
                  jw.WriteRaw(", ""LEXCH"": ")
              else
                  jw.WriteRaw("""LEXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCH)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetACC_CODE then
              if f then
                  jw.WriteRaw(", ""ACC_CODE"": ")
              else
                  jw.WriteRaw("""ACC_CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ACC_CODE)
            end if
            if _IsSetACC_EXCH then
              if f then
                  jw.WriteRaw(", ""ACC_EXCH"": ")
              else
                  jw.WriteRaw("""ACC_EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.ACC_EXCH)
            end if
            if _IsSetPIVCODE then
              if f then
                  jw.WriteRaw(", ""PIVCODE"": ")
              else
                  jw.WriteRaw("""PIVCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PIVCODE)
            end if
            if _IsSetPIVNUM then
              if f then
                  jw.WriteRaw(", ""PIVNUM"": ")
              else
                  jw.WriteRaw("""PIVNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PIVNUM)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetTRANSTYPE1 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE1"": ")
              else
                  jw.WriteRaw("""TRANSTYPE1"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE1)
            end if
            if _IsSetTRANSTYPE2 then
              if f then
                  jw.WriteRaw(", ""TRANSTYPE2"": ")
              else
                  jw.WriteRaw("""TRANSTYPE2"": ")
                  f = true
              end if
              jw.WriteValue(me.TRANSTYPE2)
            end if
            if _IsSetINDICATOR then
              if f then
                  jw.WriteRaw(", ""INDICATOR"": ")
              else
                  jw.WriteRaw("""INDICATOR"": ")
                  f = true
              end if
              jw.WriteValue(me.INDICATOR)
            end if
            if _IsSetINTRASTATDATE then
              if f then
                  jw.WriteRaw(", ""INTRASTATDATE"": ")
              else
                  jw.WriteRaw("""INTRASTATDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.INTRASTATDATE)
            end if
            if _IsSetIVREF then
              if f then
                  jw.WriteRaw(", ""IVREF"": ")
              else
                  jw.WriteRaw("""IVREF"": ")
                  f = true
              end if
              jw.WriteValue(me.IVREF)
            end if
            if _IsSetOBFLAG then
              if f then
                  jw.WriteRaw(", ""OBFLAG"": ")
              else
                  jw.WriteRaw("""OBFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.OBFLAG)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetDEBIT then
              if f then
                  jw.WriteRaw(", ""DEBIT"": ")
              else
                  jw.WriteRaw("""DEBIT"": ")
                  f = true
              end if
              jw.WriteValue(me.DEBIT)
            end if
            if _IsSetISIV then
              if f then
                  jw.WriteRaw(", ""ISIV"": ")
              else
                  jw.WriteRaw("""ISIV"": ")
                  f = true
              end if
              jw.WriteValue(me.ISIV)
            end if
            if _IsSetIVNUM then
              if f then
                  jw.WriteRaw(", ""IVNUM"": ")
              else
                  jw.WriteRaw("""IVNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.IVNUM)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CINVOICESCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPAYDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYDATE")
              .WriteAttributeString("value", me.PAYDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetBALDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BALDATE")
              .WriteAttributeString("value", me.BALDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFNCPATNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FNCPATNAME")
              .WriteAttributeString("value", me.FNCPATNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetLCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LCODE")
              .WriteAttributeString("value", me.LCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCH")
              .WriteAttributeString("value", me.LEXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACC_CODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACC_CODE")
              .WriteAttributeString("value", me.ACC_CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetACC_EXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACC_EXCH")
              .WriteAttributeString("value", me.ACC_EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPIVCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PIVCODE")
              .WriteAttributeString("value", me.PIVCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPIVNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PIVNUM")
              .WriteAttributeString("value", me.PIVNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE1")
              .WriteAttributeString("value", me.TRANSTYPE1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTRANSTYPE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TRANSTYPE2")
              .WriteAttributeString("value", me.TRANSTYPE2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetINDICATOR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INDICATOR")
              .WriteAttributeString("value", me.INDICATOR)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetINTRASTATDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INTRASTATDATE")
              .WriteAttributeString("value", me.INTRASTATDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetIVREF then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVREF")
              .WriteAttributeString("value", me.IVREF)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOBFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OBFLAG")
              .WriteAttributeString("value", me.OBFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDEBIT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", me.DEBIT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetISIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ISIV")
              .WriteAttributeString("value", me.ISIV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetIVNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", me.IVNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CINVOICESCONT = JsonConvert.DeserializeObject(Of CINVOICESCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _PAYMENTCODE = .PAYMENTCODE
                  _PAYMENTNAME = .PAYMENTNAME
                  _PAYDATE = .PAYDATE
                  _BALDATE = .BALDATE
                  _FNCPATNAME = .FNCPATNAME
                  _FNCPATDES2 = .FNCPATDES2
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _ACCNAME = .ACCNAME
                  _ACC_CODE = .ACC_CODE
                  _ACC_EXCH = .ACC_EXCH
                  _PIVCODE = .PIVCODE
                  _PIVNUM = .PIVNUM
                  _ADVANCESUM = .ADVANCESUM
                  _BALANCETOPAY = .BALANCETOPAY
                  _IMPTERMNAME = .IMPTERMNAME
                  _TRANSTYPE1 = .TRANSTYPE1
                  _TRANSTYPE2 = .TRANSTYPE2
                  _INDICATOR = .INDICATOR
                  _INTRASTATDATE = .INTRASTATDATE
                  _IVREF = .IVREF
                  _OBFLAG = .OBFLAG
                  _APPROVALCODE = .APPROVALCODE
                  _AFIPDATE = .AFIPDATE
                  _REASONCODE = .REASONCODE
                  _TAXCODE = .TAXCODE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _DEBIT = .DEBIT
                  _ISIV = .ISIV
                  _IVNUM = .IVNUM
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = nothing
            _Name = "SHIPTO2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = Parent
            _name = "SHIPTO2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO2 As SHIPTO2 In JsonConvert.DeserializeObject(Of QUERY_SHIPTO2)(stream.ReadToEnd).Value
              With _SHIPTO2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO2)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .TAXCODE = obj.TAXCODE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO2 as SHIPTO2 in value
              If _SHIPTO2.Equals(trycast(obj,SHIPTO2)) Then
                  value.remove(_SHIPTO2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO2"
                else
                    return "SHIPTO2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(160),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                  _TAXCODE = .TAXCODE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Payment Installments")>  _
    Public Class QUERY_IVPAY
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVPAY)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVPAY)
            _Parent = nothing
            _Name = "IVPAY"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVPAY)
            _Parent = Parent
            _name = "IVPAY_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVPAY)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVPAY)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVPAY As IVPAY In JsonConvert.DeserializeObject(Of QUERY_IVPAY)(stream.ReadToEnd).Value
              With _IVPAY
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVPAY)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVPAY = JsonConvert.DeserializeObject(Of IVPAY)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVPAY)
                  .PAYDATE = obj.PAYDATE
                  .PERCENT = obj.PERCENT
                  .TOTPRICE = obj.TOTPRICE
                  .TOTAL = obj.TOTAL
                  .CODE = obj.CODE
                  .PERCENT2 = obj.PERCENT2
                  .DETAILS = obj.DETAILS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVPAY(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVPAY as IVPAY in value
              If _IVPAY.Equals(trycast(obj,IVPAY)) Then
                  value.remove(_IVPAY)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVPAY
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPAYDATE As Boolean = Boolean.FalseString
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetTOTAL As Boolean = Boolean.FalseString
        
        Private _TOTAL As Decimal
        
        Private _CODE As String
        
        Private _IsSetPERCENT2 As Boolean = Boolean.FalseString
        
        Private _PERCENT2 As Decimal
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVPAY"
                else
                    return "IVPAY_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PAYDATE={0}", _
                  string.format("{0}",PAYDATE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Date", value, "^.*$") then Exit Property
                _IsSetPAYDATE = True
                If loading Then
                  _PAYDATE = Value
                Else
                    if not _PAYDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("% of Tot. Before Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Payment Date"),  _
         Pos(25),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% of Tot. Before Tax", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Amount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(35),  _
         twodBarcode("TOTAL")>  _
        Public Property TOTAL() As nullable(of decimal)
            Get
                return _TOTAL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cumulative Sum", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTAL = True
                If loading Then
                  _TOTAL = Value
                Else
                    if not _TOTAL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTAL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTAL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% of Total"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Payment Date"),  _
         Pos(50),  _
         twodBarcode("PERCENT2")>  _
        Public Property PERCENT2() As nullable(of decimal)
            Get
                return _PERCENT2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% of Total", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT2 = True
                If loading Then
                  _PERCENT2 = Value
                Else
                    if not _PERCENT2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(60),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPAYDATE then
              if f then
                  jw.WriteRaw(", ""PAYDATE"": ")
              else
                  jw.WriteRaw("""PAYDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYDATE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetTOTAL then
              if f then
                  jw.WriteRaw(", ""TOTAL"": ")
              else
                  jw.WriteRaw("""TOTAL"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTAL)
            end if
            if _IsSetPERCENT2 then
              if f then
                  jw.WriteRaw(", ""PERCENT2"": ")
              else
                  jw.WriteRaw("""PERCENT2"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT2)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVPAY")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PAYDATE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            if _IsSetPAYDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYDATE")
              .WriteAttributeString("value", me.PAYDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetTOTAL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTAL")
              .WriteAttributeString("value", me.TOTAL)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetPERCENT2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT2")
              .WriteAttributeString("value", me.PERCENT2)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVPAY = JsonConvert.DeserializeObject(Of IVPAY)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _PERCENT = .PERCENT
                  _TOTPRICE = .TOTPRICE
                  _TOTAL = .TOTAL
                  _CODE = .CODE
                  _PERCENT2 = .PERCENT2
                  _DETAILS = .DETAILS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Payments on Invoice")>  _
    Public Class QUERY_IVCFNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVCFNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVCFNCITEMS)
            _Parent = nothing
            _Name = "IVCFNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVCFNCITEMS)
            _Parent = Parent
            _name = "IVCFNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVCFNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVCFNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVCFNCITEMS As IVCFNCITEMS In JsonConvert.DeserializeObject(Of QUERY_IVCFNCITEMS)(stream.ReadToEnd).Value
              With _IVCFNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVCFNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCFNCITEMS = JsonConvert.DeserializeObject(Of IVCFNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVCFNCITEMS)
                  .BALDATE = obj.BALDATE
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .DEBIT = obj.DEBIT
                  .CREDIT = obj.CREDIT
                  .CODE = obj.CODE
                  .FNCNUM = obj.FNCNUM
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVCFNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVCFNCITEMS as IVCFNCITEMS in value
              If _IVCFNCITEMS.Equals(trycast(obj,IVCFNCITEMS)) Then
                  value.remove(_IVCFNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVCFNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _DEBIT As Decimal
        
        Private _CREDIT As Decimal
        
        Private _CODE As String
        
        Private _FNCNUM As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVCFNCITEMS"
                else
                    return "IVCFNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transaction Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transaction Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Number"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Transaction Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As nullable(of decimal)
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Transaction Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transaction Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Refer. 2"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Refer. 2"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Refer. 2"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Refer. 2"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVCFNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCFNCITEMS = JsonConvert.DeserializeObject(Of IVCFNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _DEBIT = .DEBIT
                  _CREDIT = .CREDIT
                  _CODE = .CODE
                  _FNCNUM = .FNCNUM
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Rep Commiss'n for Document")>  _
    Public Class QUERY_IVCOMITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVCOMITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVCOMITEMS)
            _Parent = nothing
            _Name = "IVCOMITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVCOMITEMS)
            _Parent = Parent
            _name = "IVCOMITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVCOMITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVCOMITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVCOMITEMS As IVCOMITEMS In JsonConvert.DeserializeObject(Of QUERY_IVCOMITEMS)(stream.ReadToEnd).Value
              With _IVCOMITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVCOMITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCOMITEMS = JsonConvert.DeserializeObject(Of IVCOMITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVCOMITEMS)
                  .CURDATE = obj.CURDATE
                  .COMNUM = obj.COMNUM
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .COMMISSION = obj.COMMISSION
                  .CODE = obj.CODE
                  .DETAILS = obj.DETAILS
                  .COM = obj.COM
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVCOMITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVCOMITEMS as IVCOMITEMS in value
              If _IVCOMITEMS.Equals(trycast(obj,IVCOMITEMS)) Then
                  value.remove(_IVCOMITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVCOMITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _COMNUM As String
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _COMMISSION As Decimal
        
        Private _CODE As String
        
        Private _DETAILS As String
        
        Private _COM As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVCOMITEMS"
                else
                    return "IVCOMITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "COM={0},KLINE={1}", _
                  string.format("{0}",COM), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Commission Doc. No."),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("COMNUM")>  _
        Public Property COMNUM() As String
            Get
                return _COMNUM
            End Get
            Set
                if not(value is nothing) then
                  _COMNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if not(value is nothing) then
                  _AGENTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount of Commission"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if not(value is nothing) then
                  _COMMISSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Commission (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("COM")>  _
        Public Property COM() As nullable (of int64)
            Get
                return _COM
            End Get
            Set
                if not(value is nothing) then
                  _COM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVCOMITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "COM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVCOMITEMS = JsonConvert.DeserializeObject(Of IVCOMITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _COMNUM = .COMNUM
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _COMMISSION = .COMMISSION
                  _CODE = .CODE
                  _DETAILS = .DETAILS
                  _COM = .COM
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit Card to Charge")>  _
    Public Class QUERY_PAYMENTDEF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PAYMENTDEF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PAYMENTDEF)
            _Parent = nothing
            _Name = "PAYMENTDEF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PAYMENTDEF)
            _Parent = Parent
            _name = "PAYMENTDEF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PAYMENTDEF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PAYMENTDEF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PAYMENTDEF As PAYMENTDEF In JsonConvert.DeserializeObject(Of QUERY_PAYMENTDEF)(stream.ReadToEnd).Value
              With _PAYMENTDEF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PAYMENTDEF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PAYMENTDEF = JsonConvert.DeserializeObject(Of PAYMENTDEF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PAYMENTDEF)
                  .PAYMENTCODE = obj.PAYMENTCODE
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .VALIDMONTH = obj.VALIDMONTH
                  .BANKCODE = obj.BANKCODE
                  .BANKNAME = obj.BANKNAME
                  .BRANCH = obj.BRANCH
                  .IDNUM = obj.IDNUM
                  .CUSTDES = obj.CUSTDES
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .BIC = obj.BIC
                  .SHVA_TERMINALNAME = obj.SHVA_TERMINALNAME
                  .CCUID = obj.CCUID
                  .SHVAFLAG = obj.SHVAFLAG
                  .CONFNUM = obj.CONFNUM
                  .UNVALIDFLAG = obj.UNVALIDFLAG
                  .CONFDATE = obj.CONFDATE
                  .SEPADIRDEBNUM = obj.SEPADIRDEBNUM
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .EEAFLAG = obj.EEAFLAG
                  .IBAN = obj.IBAN
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PAYMENTDEF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PAYMENTDEF as PAYMENTDEF in value
              If _PAYMENTDEF.Equals(trycast(obj,PAYMENTDEF)) Then
                  value.remove(_PAYMENTDEF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PAYMENTDEF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPAYMENTCODE As Boolean = Boolean.FalseString
        
        Private _PAYMENTCODE As String
        
        Private _PAYMENTNAME As String
        
        Private _IsSetPAYACCOUNT As Boolean = Boolean.FalseString
        
        Private _PAYACCOUNT As String
        
        Private _IsSetVALIDMONTH As Boolean = Boolean.FalseString
        
        Private _VALIDMONTH As String
        
        Private _IsSetBANKCODE As Boolean = Boolean.FalseString
        
        Private _BANKCODE As String
        
        Private _BANKNAME As String
        
        Private _IsSetBRANCH As Boolean = Boolean.FalseString
        
        Private _BRANCH As String
        
        Private _IsSetIDNUM As Boolean = Boolean.FalseString
        
        Private _IDNUM As String
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _IsSetBIC As Boolean = Boolean.FalseString
        
        Private _BIC As String
        
        Private _IsSetSHVA_TERMINALNAME As Boolean = Boolean.FalseString
        
        Private _SHVA_TERMINALNAME As String
        
        Private _IsSetCCUID As Boolean = Boolean.FalseString
        
        Private _CCUID As String
        
        Private _SHVAFLAG As String
        
        Private _IsSetCONFNUM As Boolean = Boolean.FalseString
        
        Private _CONFNUM As String
        
        Private _IsSetUNVALIDFLAG As Boolean = Boolean.FalseString
        
        Private _UNVALIDFLAG As String
        
        Private _CONFDATE As System.DateTimeOffset
        
        Private _SEPADIRDEBNUM As Long
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetEEAFLAG As Boolean = Boolean.FalseString
        
        Private _EEAFLAG As String
        
        Private _IsSetIBAN As Boolean = Boolean.FalseString
        
        Private _IBAN As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _CHANGES_LOG_SUBFORM As QUERY_CHANGES_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("History of Changes"))
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("History of Changes"))
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PAYMENTDEF"
                else
                    return "PAYMENTDEF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Code"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PAYMENTCODE")>  _
        Public Property PAYMENTCODE() As String
            Get
                return _PAYMENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYMENTCODE = True
                If loading Then
                  _PAYMENTCODE = Value
                Else
                    if not _PAYMENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYMENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYMENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Card Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(30),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Credit Card Number", value, "^.{0,34}$") then Exit Property
                _IsSetPAYACCOUNT = True
                If loading Then
                  _PAYACCOUNT = Value
                Else
                    if not _PAYACCOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYACCOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYACCOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Card's Expir. Date"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(35),  _
         twodBarcode("VALIDMONTH")>  _
        Public Property VALIDMONTH() As String
            Get
                return _VALIDMONTH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Card's Expir. Date", value, "^.{0,5}$") then Exit Property
                _IsSetVALIDMONTH = True
                If loading Then
                  _VALIDMONTH = Value
                Else
                    if not _VALIDMONTH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALIDMONTH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALIDMONTH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(40),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bank Code", value, "^.{0,8}$") then Exit Property
                _IsSetBANKCODE = True
                If loading Then
                  _BANKCODE = Value
                Else
                    if not _BANKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BANKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BANKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bank Name"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BANKNAME")>  _
        Public Property BANKNAME() As String
            Get
                return _BANKNAME
            End Get
            Set
                if not(value is nothing) then
                  _BANKNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(60),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Routing Number", value, "^.{0,20}$") then Exit Property
                _IsSetBRANCH = True
                If loading Then
                  _BRANCH = Value
                Else
                    if not _BRANCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("ID/VAT Number"),  _
         nType("Edm.String"),  _
         tab("Payment Code"),  _
         Pos(70),  _
         twodBarcode("IDNUM")>  _
        Public Property IDNUM() As String
            Get
                return _IDNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("ID/VAT Number", value, "^.{0,12}$") then Exit Property
                _IsSetIDNUM = True
                If loading Then
                  _IDNUM = Value
                Else
                    if not _IDNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IDNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IDNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cardholder Name"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(90),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cardholder Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(100),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("BIC - Bank ID Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(120),  _
         twodBarcode("BIC")>  _
        Public Property BIC() As String
            Get
                return _BIC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("BIC - Bank ID Code", value, "^.{0,12}$") then Exit Property
                _IsSetBIC = True
                If loading Then
                  _BIC = Value
                Else
                    if not _BIC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BIC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BIC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Installation Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(130),  _
         twodBarcode("SHVA_TERMINALNAME")>  _
        Public Property SHVA_TERMINALNAME() As String
            Get
                return _SHVA_TERMINALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Installation Code", value, "^.{0,3}$") then Exit Property
                _IsSetSHVA_TERMINALNAME = True
                If loading Then
                  _SHVA_TERMINALNAME = Value
                Else
                    if not _SHVA_TERMINALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHVA_TERMINALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHVA_TERMINALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Token ID"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(155),  _
         twodBarcode("CCUID")>  _
        Public Property CCUID() As String
            Get
                return _CCUID
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Token ID", value, "^.{0,40}$") then Exit Property
                _IsSetCCUID = True
                If loading Then
                  _CCUID = Value
                Else
                    if not _CCUID = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CCUID", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CCUID = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Approved"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("SHVAFLAG")>  _
        Public Property SHVAFLAG() As String
            Get
                return _SHVAFLAG
            End Get
            Set
                if not(value is nothing) then
                  _SHVAFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorization Code"),  _
         nType("Edm.String"),  _
         tab("Cardholder Name"),  _
         Pos(170),  _
         twodBarcode("CONFNUM")>  _
        Public Property CONFNUM() As String
            Get
                return _CONFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Authorization Code", value, "^.{0,7}$") then Exit Property
                _IsSetCONFNUM = True
                If loading Then
                  _CONFNUM = Value
                Else
                    if not _CONFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CONFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CONFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Expired?"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(180),  _
         twodBarcode("UNVALIDFLAG")>  _
        Public Property UNVALIDFLAG() As String
            Get
                return _UNVALIDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Expired?", value, "^.{0,1}$") then Exit Property
                _IsSetUNVALIDFLAG = True
                If loading Then
                  _UNVALIDFLAG = Value
                Else
                    if not _UNVALIDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UNVALIDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UNVALIDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Mandate Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expired?"),  _
         Pos(191),  _
         [ReadOnly](true),  _
         twodBarcode("CONFDATE")>  _
        Public Property CONFDATE() As nullable (of DateTimeOffset)
            Get
                return _CONFDATE
            End Get
            Set
                if not(value is nothing) then
                  _CONFDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("SDD Mandate Number"),  _
         nType("Edm.Int64"),  _
         tab("Expired?"),  _
         Pos(192),  _
         [ReadOnly](true),  _
         twodBarcode("SEPADIRDEBNUM")>  _
        Public Property SEPADIRDEBNUM() As nullable (of int64)
            Get
                return _SEPADIRDEBNUM
            End Get
            Set
                if not(value is nothing) then
                  _SEPADIRDEBNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(193),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("EEA"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(194),  _
         twodBarcode("EEAFLAG")>  _
        Public Property EEAFLAG() As String
            Get
                return _EEAFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("EEA", value, "^.{0,1}$") then Exit Property
                _IsSetEEAFLAG = True
                If loading Then
                  _EEAFLAG = Value
                Else
                    if not _EEAFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EEAFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EEAFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("IBAN"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(195),  _
         twodBarcode("IBAN")>  _
        Public Property IBAN() As String
            Get
                return _IBAN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("IBAN", value, "^.{0,34}$") then Exit Property
                _IsSetIBAN = True
                If loading Then
                  _IBAN = Value
                Else
                    if not _IBAN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IBAN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IBAN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Expired?"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expired?"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGES_LOG_SUBFORM() As QUERY_CHANGES_LOG
            Get
                return _CHANGES_LOG_SUBFORM
            End Get
            Set
                _CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPAYMENTCODE then
              if f then
                  jw.WriteRaw(", ""PAYMENTCODE"": ")
              else
                  jw.WriteRaw("""PAYMENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYMENTCODE)
            end if
            if _IsSetPAYACCOUNT then
              if f then
                  jw.WriteRaw(", ""PAYACCOUNT"": ")
              else
                  jw.WriteRaw("""PAYACCOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYACCOUNT)
            end if
            if _IsSetVALIDMONTH then
              if f then
                  jw.WriteRaw(", ""VALIDMONTH"": ")
              else
                  jw.WriteRaw("""VALIDMONTH"": ")
                  f = true
              end if
              jw.WriteValue(me.VALIDMONTH)
            end if
            if _IsSetBANKCODE then
              if f then
                  jw.WriteRaw(", ""BANKCODE"": ")
              else
                  jw.WriteRaw("""BANKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BANKCODE)
            end if
            if _IsSetBRANCH then
              if f then
                  jw.WriteRaw(", ""BRANCH"": ")
              else
                  jw.WriteRaw("""BRANCH"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCH)
            end if
            if _IsSetIDNUM then
              if f then
                  jw.WriteRaw(", ""IDNUM"": ")
              else
                  jw.WriteRaw("""IDNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.IDNUM)
            end if
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetBIC then
              if f then
                  jw.WriteRaw(", ""BIC"": ")
              else
                  jw.WriteRaw("""BIC"": ")
                  f = true
              end if
              jw.WriteValue(me.BIC)
            end if
            if _IsSetSHVA_TERMINALNAME then
              if f then
                  jw.WriteRaw(", ""SHVA_TERMINALNAME"": ")
              else
                  jw.WriteRaw("""SHVA_TERMINALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SHVA_TERMINALNAME)
            end if
            if _IsSetCCUID then
              if f then
                  jw.WriteRaw(", ""CCUID"": ")
              else
                  jw.WriteRaw("""CCUID"": ")
                  f = true
              end if
              jw.WriteValue(me.CCUID)
            end if
            if _IsSetCONFNUM then
              if f then
                  jw.WriteRaw(", ""CONFNUM"": ")
              else
                  jw.WriteRaw("""CONFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CONFNUM)
            end if
            if _IsSetUNVALIDFLAG then
              if f then
                  jw.WriteRaw(", ""UNVALIDFLAG"": ")
              else
                  jw.WriteRaw("""UNVALIDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.UNVALIDFLAG)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetEEAFLAG then
              if f then
                  jw.WriteRaw(", ""EEAFLAG"": ")
              else
                  jw.WriteRaw("""EEAFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.EEAFLAG)
            end if
            if _IsSetIBAN then
              if f then
                  jw.WriteRaw(", ""IBAN"": ")
              else
                  jw.WriteRaw("""IBAN"": ")
                  f = true
              end if
              jw.WriteValue(me.IBAN)
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PAYMENTDEF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetPAYMENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYMENTCODE")
              .WriteAttributeString("value", me.PAYMENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPAYACCOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYACCOUNT")
              .WriteAttributeString("value", me.PAYACCOUNT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "34")
              .WriteEndElement
            end if
            if _IsSetVALIDMONTH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALIDMONTH")
              .WriteAttributeString("value", me.VALIDMONTH)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetBANKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BANKCODE")
              .WriteAttributeString("value", me.BANKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetBRANCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCH")
              .WriteAttributeString("value", me.BRANCH)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetIDNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IDNUM")
              .WriteAttributeString("value", me.IDNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBIC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BIC")
              .WriteAttributeString("value", me.BIC)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetSHVA_TERMINALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHVA_TERMINALNAME")
              .WriteAttributeString("value", me.SHVA_TERMINALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCCUID then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CCUID")
              .WriteAttributeString("value", me.CCUID)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCONFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CONFNUM")
              .WriteAttributeString("value", me.CONFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "7")
              .WriteEndElement
            end if
            if _IsSetUNVALIDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UNVALIDFLAG")
              .WriteAttributeString("value", me.UNVALIDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetEEAFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EEAFLAG")
              .WriteAttributeString("value", me.EEAFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetIBAN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IBAN")
              .WriteAttributeString("value", me.IBAN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "34")
              .WriteEndElement
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGES_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PAYMENTDEF = JsonConvert.DeserializeObject(Of PAYMENTDEF)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYMENTCODE = .PAYMENTCODE
                  _PAYMENTNAME = .PAYMENTNAME
                  _PAYACCOUNT = .PAYACCOUNT
                  _VALIDMONTH = .VALIDMONTH
                  _BANKCODE = .BANKCODE
                  _BANKNAME = .BANKNAME
                  _BRANCH = .BRANCH
                  _IDNUM = .IDNUM
                  _CUSTDES = .CUSTDES
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _BIC = .BIC
                  _SHVA_TERMINALNAME = .SHVA_TERMINALNAME
                  _CCUID = .CCUID
                  _SHVAFLAG = .SHVAFLAG
                  _CONFNUM = .CONFNUM
                  _UNVALIDFLAG = .UNVALIDFLAG
                  _CONFDATE = .CONFDATE
                  _SEPADIRDEBNUM = .SEPADIRDEBNUM
                  _COUNTRYNAME = .COUNTRYNAME
                  _EEAFLAG = .EEAFLAG
                  _IBAN = .IBAN
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PAYMENTDEF
        
        CHANGES_LOG = 0
    End Enum
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = nothing
            _Name = "CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = Parent
            _name = "CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGES_LOG As CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGES_LOG)(stream.ReadToEnd).Value
              With _CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGES_LOG as CHANGES_LOG in value
              If _CHANGES_LOG.Equals(trycast(obj,CHANGES_LOG)) Then
                  value.remove(_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGES_LOG"
                else
                    return "CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Form"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Log (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Link Receipts to Invoice")>  _
    Public Class QUERY_CFNCITEMS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CFNCITEMS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CFNCITEMS2)
            _Parent = nothing
            _Name = "CFNCITEMS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CFNCITEMS2)
            _Parent = Parent
            _name = "CFNCITEMS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CFNCITEMS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CFNCITEMS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CFNCITEMS2 As CFNCITEMS2 In JsonConvert.DeserializeObject(Of QUERY_CFNCITEMS2)(stream.ReadToEnd).Value
              With _CFNCITEMS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CFNCITEMS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CFNCITEMS2 = JsonConvert.DeserializeObject(Of CFNCITEMS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CFNCITEMS2)
                  .BALDATE = obj.BALDATE
                  .IVNUM = obj.IVNUM
                  .FNCDATE = obj.FNCDATE
                  .PAYFLAG = obj.PAYFLAG
                  .SUM = obj.SUM
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .DOCNO = obj.DOCNO
                  .FNCPATNAME = obj.FNCPATNAME
                  .FNCNUM = obj.FNCNUM
                  .DETAILS = obj.DETAILS
                  .SUM3 = obj.SUM3
                  .CODE3 = obj.CODE3
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CFNCITEMS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CFNCITEMS2 as CFNCITEMS2 in value
              If _CFNCITEMS2.Equals(trycast(obj,CFNCITEMS2)) Then
                  value.remove(_CFNCITEMS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CFNCITEMS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _IsSetPAYFLAG As Boolean = Boolean.FalseString
        
        Private _PAYFLAG As String
        
        Private _SUM As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _DOCNO As String
        
        Private _FNCPATNAME As String
        
        Private _FNCNUM As String
        
        Private _DETAILS As String
        
        Private _SUM3 As Decimal
        
        Private _CODE3 As String
        
        Private _IsSetFNCTRANS As Boolean = Boolean.FalseString
        
        Private _FNCTRANS As Long
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CFNCITEMS2"
                else
                    return "CFNCITEMS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Receipt Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Receipt Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Receipt Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Receipt Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Link?"),  _
         nType("Edm.String"),  _
         tab("Receipt Date"),  _
         Pos(20),  _
         twodBarcode("PAYFLAG")>  _
        Public Property PAYFLAG() As String
            Get
                return _PAYFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Link?", value, "^.{0,1}$") then Exit Property
                _IsSetPAYFLAG = True
                If loading Then
                  _PAYFLAG = Value
                Else
                    if not _PAYFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Receipt Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SUM")>  _
        Public Property SUM() As nullable(of decimal)
            Get
                return _SUM
            End Get
            Set
                if not(value is nothing) then
                  _SUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Receipt Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Doc. No."),  _
         nType("Edm.String"),  _
         tab("Receipt Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Receipt Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum (Transact. Curr)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Entry Code"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("SUM3")>  _
        Public Property SUM3() As nullable(of decimal)
            Get
                return _SUM3
            End Get
            Set
                if not(value is nothing) then
                  _SUM3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Entry Code"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Entry Code"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Journal Entry (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFNCTRANS = True
                If loading Then
                  _FNCTRANS = Value
                Else
                    if not _FNCTRANS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FNCTRANS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FNCTRANS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Entry Code"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPAYFLAG then
              if f then
                  jw.WriteRaw(", ""PAYFLAG"": ")
              else
                  jw.WriteRaw("""PAYFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYFLAG)
            end if
            if _IsSetFNCTRANS then
              if f then
                  jw.WriteRaw(", ""FNCTRANS"": ")
              else
                  jw.WriteRaw("""FNCTRANS"": ")
                  f = true
              end if
              jw.WriteValue(me.FNCTRANS)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CFNCITEMS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPAYFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYFLAG")
              .WriteAttributeString("value", me.PAYFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetFNCTRANS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", me.FNCTRANS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CFNCITEMS2 = JsonConvert.DeserializeObject(Of CFNCITEMS2)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _IVNUM = .IVNUM
                  _FNCDATE = .FNCDATE
                  _PAYFLAG = .PAYFLAG
                  _SUM = .SUM
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _DOCNO = .DOCNO
                  _FNCPATNAME = .FNCPATNAME
                  _FNCNUM = .FNCNUM
                  _DETAILS = .DETAILS
                  _SUM3 = .SUM3
                  _CODE3 = .CODE3
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Withholding Tax")>  _
    Public Class QUERY_IV2WTAX
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IV2WTAX)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IV2WTAX)
            _Parent = nothing
            _Name = "IV2WTAX"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IV2WTAX)
            _Parent = Parent
            _name = "IV2WTAX_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IV2WTAX)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IV2WTAX)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IV2WTAX As IV2WTAX In JsonConvert.DeserializeObject(Of QUERY_IV2WTAX)(stream.ReadToEnd).Value
              With _IV2WTAX
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IV2WTAX)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IV2WTAX = JsonConvert.DeserializeObject(Of IV2WTAX)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IV2WTAX)
                  .TAXCODE = obj.TAXCODE
                  .TAXDES = obj.TAXDES
                  .AMOUNT = obj.AMOUNT
                  .TAXFREESUM = obj.TAXFREESUM
                  .WTAXPERCENT = obj.WTAXPERCENT
                  .WTAX = obj.WTAX
                  .WTAX5 = obj.WTAX5
                  .CODE = obj.CODE
                  .EXCH5 = obj.EXCH5
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IV2WTAX(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IV2WTAX as IV2WTAX in value
              If _IV2WTAX.Equals(trycast(obj,IV2WTAX)) Then
                  value.remove(_IV2WTAX)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IV2WTAX
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _TAXDES As String
        
        Private _AMOUNT As Decimal
        
        Private _TAXFREESUM As Decimal
        
        Private _WTAXPERCENT As Decimal
        
        Private _IsSetWTAX As Boolean = Boolean.FalseString
        
        Private _WTAX As Decimal
        
        Private _IsSetWTAX5 As Boolean = Boolean.FalseString
        
        Private _WTAX5 As Decimal
        
        Private _CODE As String
        
        Private _IsSetEXCH5 As Boolean = Boolean.FalseString
        
        Private _EXCH5 As Decimal
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IV2WTAX"
                else
                    return "IV2WTAX_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Description"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TAXDES")>  _
        Public Property TAXDES() As String
            Get
                return _TAXDES
            End Get
            Set
                if not(value is nothing) then
                  _TAXDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum of Invoice"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Withholding"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TAXFREESUM")>  _
        Public Property TAXFREESUM() As nullable(of decimal)
            Get
                return _TAXFREESUM
            End Get
            Set
                if not(value is nothing) then
                  _TAXFREESUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Withheld %"),  _
         nType("Edm.Decimal"),  _
         Scale(7),  _
         Precision(10),  _
         tab("Tax Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("WTAXPERCENT")>  _
        Public Property WTAXPERCENT() As nullable(of decimal)
            Get
                return _WTAXPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _WTAXPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Withheld Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(60),  _
         twodBarcode("WTAX")>  _
        Public Property WTAX() As nullable(of decimal)
            Get
                return _WTAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Withheld Sum", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetWTAX = True
                If loading Then
                  _WTAX = Value
                Else
                    if not _WTAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WTAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WTAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Withheld-ForeignCurr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(170),  _
         twodBarcode("WTAX5")>  _
        Public Property WTAX5() As nullable(of decimal)
            Get
                return _WTAX5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Withheld-ForeignCurr", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetWTAX5 = True
                If loading Then
                  _WTAX5 = Value
                Else
                    if not _WTAX5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WTAX5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WTAX5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Foreign Currency"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Exchange Rate"),  _
         Pos(190),  _
         twodBarcode("EXCH5")>  _
        Public Property EXCH5() As nullable(of decimal)
            Get
                return _EXCH5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH5 = True
                If loading Then
                  _EXCH5 = Value
                Else
                    if not _EXCH5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ln"),  _
         nType("Edm.Int64"),  _
         tab("Exchange Rate"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ln", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetWTAX then
              if f then
                  jw.WriteRaw(", ""WTAX"": ")
              else
                  jw.WriteRaw("""WTAX"": ")
                  f = true
              end if
              jw.WriteValue(me.WTAX)
            end if
            if _IsSetWTAX5 then
              if f then
                  jw.WriteRaw(", ""WTAX5"": ")
              else
                  jw.WriteRaw("""WTAX5"": ")
                  f = true
              end if
              jw.WriteValue(me.WTAX5)
            end if
            if _IsSetEXCH5 then
              if f then
                  jw.WriteRaw(", ""EXCH5"": ")
              else
                  jw.WriteRaw("""EXCH5"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH5)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IV2WTAX")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetWTAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WTAX")
              .WriteAttributeString("value", me.WTAX)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetWTAX5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WTAX5")
              .WriteAttributeString("value", me.WTAX5)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetEXCH5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH5")
              .WriteAttributeString("value", me.EXCH5)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IV2WTAX = JsonConvert.DeserializeObject(Of IV2WTAX)(e.StreamReader.ReadToEnd)
                With obj
                  _TAXCODE = .TAXCODE
                  _TAXDES = .TAXDES
                  _AMOUNT = .AMOUNT
                  _TAXFREESUM = .TAXFREESUM
                  _WTAXPERCENT = .WTAXPERCENT
                  _WTAX = .WTAX
                  _WTAX5 = .WTAX5
                  _CODE = .CODE
                  _EXCH5 = .EXCH5
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoice/Memo - Remarks")>  _
    Public Class QUERY_PINVOICESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PINVOICESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PINVOICESTEXT)
            _Parent = nothing
            _Name = "PINVOICESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PINVOICESTEXT)
            _Parent = Parent
            _name = "PINVOICESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PINVOICESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PINVOICESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PINVOICESTEXT As PINVOICESTEXT In JsonConvert.DeserializeObject(Of QUERY_PINVOICESTEXT)(stream.ReadToEnd).Value
              With _PINVOICESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PINVOICESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PINVOICESTEXT = JsonConvert.DeserializeObject(Of PINVOICESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PINVOICESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PINVOICESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PINVOICESTEXT as PINVOICESTEXT in value
              If _PINVOICESTEXT.Equals(trycast(obj,PINVOICESTEXT)) Then
                  value.remove(_PINVOICESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PINVOICESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PINVOICESTEXT"
                else
                    return "PINVOICESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PINVOICESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PINVOICESTEXT = JsonConvert.DeserializeObject(Of PINVOICESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Additional Taxes for Invoice")>  _
    Public Class QUERY_IVADDTAXES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVADDTAXES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVADDTAXES)
            _Parent = nothing
            _Name = "IVADDTAXES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVADDTAXES)
            _Parent = Parent
            _name = "IVADDTAXES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVADDTAXES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVADDTAXES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVADDTAXES As IVADDTAXES In JsonConvert.DeserializeObject(Of QUERY_IVADDTAXES)(stream.ReadToEnd).Value
              With _IVADDTAXES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVADDTAXES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVADDTAXES = JsonConvert.DeserializeObject(Of IVADDTAXES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVADDTAXES)
                  .TAXCODE = obj.TAXCODE
                  .TAXDES = obj.TAXDES
                  .TAXPERCENT = obj.TAXPERCENT
                  .TAXABLESUM = obj.TAXABLESUM
                  .TAXSUM = obj.TAXSUM
                  .VALIDFLAG = obj.VALIDFLAG
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .TAX = obj.TAX
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVADDTAXES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVADDTAXES as IVADDTAXES in value
              If _IVADDTAXES.Equals(trycast(obj,IVADDTAXES)) Then
                  value.remove(_IVADDTAXES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVADDTAXES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TAXCODE As String
        
        Private _TAXDES As String
        
        Private _TAXPERCENT As Decimal
        
        Private _TAXABLESUM As Decimal
        
        Private _TAXSUM As Decimal
        
        Private _VALIDFLAG As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _TAX As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVADDTAXES"
                else
                    return "IVADDTAXES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TAX={0},TYPE={1}", _
                  string.format("{0}",TAX), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if not(value is nothing) then
                  _TAXCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Description"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TAXDES")>  _
        Public Property TAXDES() As String
            Get
                return _TAXDES
            End Get
            Set
                if not(value is nothing) then
                  _TAXDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(6),  _
         tab("Tax Code"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TAXPERCENT")>  _
        Public Property TAXPERCENT() As nullable(of decimal)
            Get
                return _TAXPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TAXPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Taxable Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TAXABLESUM")>  _
        Public Property TAXABLESUM() As nullable(of decimal)
            Get
                return _TAXABLESUM
            End Get
            Set
                if not(value is nothing) then
                  _TAXABLESUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("TAXSUM")>  _
        Public Property TAXSUM() As nullable(of decimal)
            Get
                return _TAXSUM
            End Get
            Set
                if not(value is nothing) then
                  _TAXSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use?"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("VALIDFLAG")>  _
        Public Property VALIDFLAG() As String
            Get
                return _VALIDFLAG
            End Get
            Set
                if not(value is nothing) then
                  _VALIDFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Tax Code"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Tax (ID)"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TAX")>  _
        Public Property TAX() As nullable (of int64)
            Get
                return _TAX
            End Get
            Set
                if not(value is nothing) then
                  _TAX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Tax (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVADDTAXES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TAX")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVADDTAXES = JsonConvert.DeserializeObject(Of IVADDTAXES)(e.StreamReader.ReadToEnd)
                With obj
                  _TAXCODE = .TAXCODE
                  _TAXDES = .TAXDES
                  _TAXPERCENT = .TAXPERCENT
                  _TAXABLESUM = .TAXABLESUM
                  _TAXSUM = .TAXSUM
                  _VALIDFLAG = .VALIDFLAG
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _TAX = .TAX
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Credit")>  _
    Public Class QUERY_CUSTOBLIGO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = nothing
            _Name = "CUSTOBLIGO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = Parent
            _name = "CUSTOBLIGO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGO As CUSTOBLIGO In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGO)(stream.ReadToEnd).Value
              With _CUSTOBLIGO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGO)
                  .ORD_DEBIT = obj.ORD_DEBIT
                  .DOC_DEBIT = obj.DOC_DEBIT
                  .PROJ_DEBIT = obj.PROJ_DEBIT
                  .IV_DEBIT = obj.IV_DEBIT
                  .ACC_DEBIT = obj.ACC_DEBIT
                  .CHEQUE_DEBIT = obj.CHEQUE_DEBIT
                  .CODE = obj.CODE
                  .OLD = obj.OLD
                  .UPTO90 = obj.UPTO90
                  .UPTO60 = obj.UPTO60
                  .UPTO30 = obj.UPTO30
                  .FUTURE = obj.FUTURE
                  .TOTOLD = obj.TOTOLD
                  .CREDIT = obj.CREDIT
                  .MAX_CREDIT = obj.MAX_CREDIT
                  .CREDIT_DIFF = obj.CREDIT_DIFF
                  .CRCODE = obj.CRCODE
                  .OBLIGO = obj.OBLIGO
                  .MAX_OBLIGO = obj.MAX_OBLIGO
                  .OBLIGO_DIFF = obj.OBLIGO_DIFF
                  .OBCODE = obj.OBCODE
                  .STATDES = obj.STATDES
                  .RESTRICTDATE = obj.RESTRICTDATE
                  .WAITING = obj.WAITING
                  .THISMONTH = obj.THISMONTH
                  .NEXTMONTH = obj.NEXTMONTH
                  .TWOMONTHS = obj.TWOMONTHS
                  .FUTURECHEQUES = obj.FUTURECHEQUES
                  .SECURECHECKS = obj.SECURECHECKS
                  .CREDITCARDS = obj.CREDITCARDS
                  .MAX_CREDIT_ENV = obj.MAX_CREDIT_ENV
                  .CREDIT_ENV = obj.CREDIT_ENV
                  .CREDIT_ENV_DIFF = obj.CREDIT_ENV_DIFF
                  .CR_CODE_ENV = obj.CR_CODE_ENV
                  .MAX_OBLIGO_ENV = obj.MAX_OBLIGO_ENV
                  .OBLIGO_ENV = obj.OBLIGO_ENV
                  .OBLIGO_ENV_DIFF = obj.OBLIGO_ENV_DIFF
                  .OB_CODE_ENV = obj.OB_CODE_ENV
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGO as CUSTOBLIGO in value
              If _CUSTOBLIGO.Equals(trycast(obj,CUSTOBLIGO)) Then
                  value.remove(_CUSTOBLIGO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORD_DEBIT As Decimal
        
        Private _DOC_DEBIT As Decimal
        
        Private _PROJ_DEBIT As Decimal
        
        Private _IV_DEBIT As Decimal
        
        Private _ACC_DEBIT As Decimal
        
        Private _CHEQUE_DEBIT As Decimal
        
        Private _CODE As String
        
        Private _OLD As Decimal
        
        Private _UPTO90 As Decimal
        
        Private _UPTO60 As Decimal
        
        Private _UPTO30 As Decimal
        
        Private _FUTURE As Decimal
        
        Private _TOTOLD As Decimal
        
        Private _CREDIT As Decimal
        
        Private _MAX_CREDIT As Decimal
        
        Private _CREDIT_DIFF As Decimal
        
        Private _CRCODE As String
        
        Private _OBLIGO As Decimal
        
        Private _MAX_OBLIGO As Decimal
        
        Private _OBLIGO_DIFF As Decimal
        
        Private _OBCODE As String
        
        Private _STATDES As String
        
        Private _RESTRICTDATE As System.DateTimeOffset
        
        Private _WAITING As Decimal
        
        Private _THISMONTH As Decimal
        
        Private _NEXTMONTH As Decimal
        
        Private _TWOMONTHS As Decimal
        
        Private _FUTURECHEQUES As Decimal
        
        Private _SECURECHECKS As Decimal
        
        Private _CREDITCARDS As Decimal
        
        Private _MAX_CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV_DIFF As Decimal
        
        Private _CR_CODE_ENV As String
        
        Private _MAX_OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV_DIFF As Decimal
        
        Private _OB_CODE_ENV As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _CUST As Long
        
        Private _OBLIGO_ORDERS_SUBFORM As QUERY_OBLIGO_ORDERS
        
        Private _OBLIGO_TRANS_SUBFORM As QUERY_OBLIGO_TRANS
        
        Private _OBLIGO_PROJ_SUBFORM As QUERY_OBLIGO_PROJ
        
        Private _OBLIGO_IV_SUBFORM As QUERY_OBLIGO_IV
        
        Private _OBLIGO_FNCITEMS_SUBFORM As QUERY_OBLIGO_FNCITEMS
        
        Private _OBLIGO_CHECKS_SUBFORM As QUERY_OBLIGO_CHECKS
        
        Private _OBLIGO_CHECKS2_SUBFORM As QUERY_OBLIGO_CHECKS2
        
        Private _SECURE_CHECKS_SUBFORM As QUERY_SECURE_CHECKS
        
        Private _OBLIGO_FNCBAL5_SUBFORM As QUERY_OBLIGO_FNCBAL5
        
        Private _CUSTOBLIGOENV_SUBFORM As QUERY_CUSTOBLIGOENV
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGO"
                else
                    return "CUSTOBLIGO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORD_DEBIT")>  _
        Public Property ORD_DEBIT() As nullable(of decimal)
            Get
                return _ORD_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ORD_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Documents"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOC_DEBIT")>  _
        Public Property DOC_DEBIT() As nullable(of decimal)
            Get
                return _DOC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DOC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Project Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PROJ_DEBIT")>  _
        Public Property PROJ_DEBIT() As nullable(of decimal)
            Get
                return _PROJ_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _PROJ_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Pending Sales Invs."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IV_DEBIT")>  _
        Public Property IV_DEBIT() As nullable(of decimal)
            Get
                return _IV_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _IV_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unpaid Bills"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ACC_DEBIT")>  _
        Public Property ACC_DEBIT() As nullable(of decimal)
            Get
                return _ACC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ACC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CHEQUE_DEBIT")>  _
        Public Property CHEQUE_DEBIT() As nullable(of decimal)
            Get
                return _CHEQUE_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _CHEQUE_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Open Orders"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("> 90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLD")>  _
        Public Property OLD() As nullable(of decimal)
            Get
                return _OLD
            End Get
            Set
                if not(value is nothing) then
                  _OLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("61-90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO90")>  _
        Public Property UPTO90() As nullable(of decimal)
            Get
                return _UPTO90
            End Get
            Set
                if not(value is nothing) then
                  _UPTO90 = Value
                end if
            End Set
        End Property
        
        <DisplayName("31-60"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO60")>  _
        Public Property UPTO60() As nullable(of decimal)
            Get
                return _UPTO60
            End Get
            Set
                if not(value is nothing) then
                  _UPTO60 = Value
                end if
            End Set
        End Property
        
        <DisplayName("1-30"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO30")>  _
        Public Property UPTO30() As nullable(of decimal)
            Get
                return _UPTO30
            End Get
            Set
                if not(value is nothing) then
                  _UPTO30 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURE")>  _
        Public Property FUTURE() As nullable(of decimal)
            Get
                return _FUTURE
            End Get
            Set
                if not(value is nothing) then
                  _FUTURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total for Aging"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TOTOLD")>  _
        Public Property TOTOLD() As nullable(of decimal)
            Get
                return _TOTOLD
            End Get
            Set
                if not(value is nothing) then
                  _TOTOLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT")>  _
        Public Property MAX_CREDIT() As nullable(of decimal)
            Get
                return _MAX_CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("61-90"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_DIFF")>  _
        Public Property CREDIT_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if not(value is nothing) then
                  _CRCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO")>  _
        Public Property MAX_OBLIGO() As nullable(of decimal)
            Get
                return _MAX_OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Credit Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_DIFF")>  _
        Public Property OBLIGO_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liab. Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("OBCODE")>  _
        Public Property OBCODE() As String
            Get
                return _OBCODE
            End Get
            Set
                if not(value is nothing) then
                  _OBCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Status"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Restricted"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Credit Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("RESTRICTDATE")>  _
        Public Property RESTRICTDATE() As nullable (of DateTimeOffset)
            Get
                return _RESTRICTDATE
            End Get
            Set
                if not(value is nothing) then
                  _RESTRICTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Awaiting Clearance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WAITING")>  _
        Public Property WAITING() As nullable(of decimal)
            Get
                return _WAITING
            End Get
            Set
                if not(value is nothing) then
                  _WAITING = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated This Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("THISMONTH")>  _
        Public Property THISMONTH() As nullable(of decimal)
            Get
                return _THISMONTH
            End Get
            Set
                if not(value is nothing) then
                  _THISMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Next Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("NEXTMONTH")>  _
        Public Property NEXTMONTH() As nullable(of decimal)
            Get
                return _NEXTMONTH
            End Get
            Set
                if not(value is nothing) then
                  _NEXTMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2 Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("TWOMONTHS")>  _
        Public Property TWOMONTHS() As nullable(of decimal)
            Get
                return _TWOMONTHS
            End Get
            Set
                if not(value is nothing) then
                  _TWOMONTHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2+ Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURECHEQUES")>  _
        Public Property FUTURECHEQUES() As nullable(of decimal)
            Get
                return _FUTURECHEQUES
            End Get
            Set
                if not(value is nothing) then
                  _FUTURECHEQUES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Secure Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SECURECHECKS")>  _
        Public Property SECURECHECKS() As nullable(of decimal)
            Get
                return _SECURECHECKS
            End Get
            Set
                if not(value is nothing) then
                  _SECURECHECKS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Cards"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(234),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITCARDS")>  _
        Public Property CREDITCARDS() As nullable(of decimal)
            Get
                return _CREDITCARDS
            End Get
            Set
                if not(value is nothing) then
                  _CREDITCARDS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Cred Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT_ENV")>  _
        Public Property MAX_CREDIT_ENV() As nullable(of decimal)
            Get
                return _MAX_CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV")>  _
        Public Property CREDIT_ENV() As nullable(of decimal)
            Get
                return _CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV_DIFF")>  _
        Public Property CREDIT_ENV_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CR_CODE_ENV")>  _
        Public Property CR_CODE_ENV() As String
            Get
                return _CR_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CR_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liab Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO_ENV")>  _
        Public Property MAX_OBLIGO_ENV() As nullable(of decimal)
            Get
                return _MAX_OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV")>  _
        Public Property OBLIGO_ENV() As nullable(of decimal)
            Get
                return _OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liabil Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV_DIFF")>  _
        Public Property OBLIGO_ENV_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("OB_CODE_ENV")>  _
        Public Property OB_CODE_ENV() As String
            Get
                return _OB_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OB_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (No.)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(315),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (Name)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_ORDERS_SUBFORM() As QUERY_OBLIGO_ORDERS
            Get
                return _OBLIGO_ORDERS_SUBFORM
            End Get
            Set
                _OBLIGO_ORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_TRANS_SUBFORM() As QUERY_OBLIGO_TRANS
            Get
                return _OBLIGO_TRANS_SUBFORM
            End Get
            Set
                _OBLIGO_TRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_PROJ_SUBFORM() As QUERY_OBLIGO_PROJ
            Get
                return _OBLIGO_PROJ_SUBFORM
            End Get
            Set
                _OBLIGO_PROJ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_IV_SUBFORM() As QUERY_OBLIGO_IV
            Get
                return _OBLIGO_IV_SUBFORM
            End Get
            Set
                _OBLIGO_IV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCITEMS_SUBFORM() As QUERY_OBLIGO_FNCITEMS
            Get
                return _OBLIGO_FNCITEMS_SUBFORM
            End Get
            Set
                _OBLIGO_FNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS_SUBFORM() As QUERY_OBLIGO_CHECKS
            Get
                return _OBLIGO_CHECKS_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS2_SUBFORM() As QUERY_OBLIGO_CHECKS2
            Get
                return _OBLIGO_CHECKS2_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SECURE_CHECKS_SUBFORM() As QUERY_SECURE_CHECKS
            Get
                return _SECURE_CHECKS_SUBFORM
            End Get
            Set
                _SECURE_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCBAL5_SUBFORM() As QUERY_OBLIGO_FNCBAL5
            Get
                return _OBLIGO_FNCBAL5_SUBFORM
            End Get
            Set
                _OBLIGO_FNCBAL5_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGOENV_SUBFORM() As QUERY_CUSTOBLIGOENV
            Get
                return _CUSTOBLIGOENV_SUBFORM
            End Get
            Set
                _CUSTOBLIGOENV_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_ORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_ORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_TRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_TRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_PROJ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_PROJ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_IV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_IV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SECURE_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SECURE_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCBAL5_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCBAL5_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGOENV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGOENV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_ORDERS_SUBFORM")
              next
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_TRANS_SUBFORM")
              next
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_PROJ_SUBFORM")
              next
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_IV_SUBFORM")
              next
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCITEMS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS2_SUBFORM")
              next
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.Value
                itm.toXML(xw,"SECURE_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCBAL5_SUBFORM")
              next
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGOENV_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD_DEBIT = .ORD_DEBIT
                  _DOC_DEBIT = .DOC_DEBIT
                  _PROJ_DEBIT = .PROJ_DEBIT
                  _IV_DEBIT = .IV_DEBIT
                  _ACC_DEBIT = .ACC_DEBIT
                  _CHEQUE_DEBIT = .CHEQUE_DEBIT
                  _CODE = .CODE
                  _OLD = .OLD
                  _UPTO90 = .UPTO90
                  _UPTO60 = .UPTO60
                  _UPTO30 = .UPTO30
                  _FUTURE = .FUTURE
                  _TOTOLD = .TOTOLD
                  _CREDIT = .CREDIT
                  _MAX_CREDIT = .MAX_CREDIT
                  _CREDIT_DIFF = .CREDIT_DIFF
                  _CRCODE = .CRCODE
                  _OBLIGO = .OBLIGO
                  _MAX_OBLIGO = .MAX_OBLIGO
                  _OBLIGO_DIFF = .OBLIGO_DIFF
                  _OBCODE = .OBCODE
                  _STATDES = .STATDES
                  _RESTRICTDATE = .RESTRICTDATE
                  _WAITING = .WAITING
                  _THISMONTH = .THISMONTH
                  _NEXTMONTH = .NEXTMONTH
                  _TWOMONTHS = .TWOMONTHS
                  _FUTURECHEQUES = .FUTURECHEQUES
                  _SECURECHECKS = .SECURECHECKS
                  _CREDITCARDS = .CREDITCARDS
                  _MAX_CREDIT_ENV = .MAX_CREDIT_ENV
                  _CREDIT_ENV = .CREDIT_ENV
                  _CREDIT_ENV_DIFF = .CREDIT_ENV_DIFF
                  _CR_CODE_ENV = .CR_CODE_ENV
                  _MAX_OBLIGO_ENV = .MAX_OBLIGO_ENV
                  _OBLIGO_ENV = .OBLIGO_ENV
                  _OBLIGO_ENV_DIFF = .OBLIGO_ENV_DIFF
                  _OB_CODE_ENV = .OB_CODE_ENV
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTOBLIGO
        
        OBLIGO_ORDERS = 0
        
        OBLIGO_TRANS = 1
        
        OBLIGO_PROJ = 2
        
        OBLIGO_IV = 3
        
        OBLIGO_FNCITEMS = 4
        
        OBLIGO_CHECKS = 5
        
        OBLIGO_CHECKS2 = 6
        
        SECURE_CHECKS = 7
        
        OBLIGO_FNCBAL5 = 8
        
        CUSTOBLIGOENV = 9
    End Enum
    
    <QueryTitle("Open Orders")>  _
    Public Class QUERY_OBLIGO_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = nothing
            _Name = "OBLIGO_ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = Parent
            _name = "OBLIGO_ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_ORDERS As OBLIGO_ORDERS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_ORDERS)(stream.ReadToEnd).Value
              With _OBLIGO_ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_ORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .PRICEBAL1 = obj.PRICEBAL1
                  .CODE = obj.CODE
                  .PRICEBAL2 = obj.PRICEBAL2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .ORD2 = obj.ORD2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_ORDERS as OBLIGO_ORDERS in value
              If _OBLIGO_ORDERS.Equals(trycast(obj,OBLIGO_ORDERS)) Then
                  value.remove(_OBLIGO_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICEBAL1 As Decimal
        
        Private _CODE As String
        
        Private _PRICEBAL2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _ORD2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_ORDERS"
                else
                    return "OBLIGO_ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL1")>  _
        Public Property PRICEBAL1() As nullable(of decimal)
            Get
                return _PRICEBAL1
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Value"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL2")>  _
        Public Property PRICEBAL2() As nullable(of decimal)
            Get
                return _PRICEBAL2
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Value"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD2")>  _
        Public Property ORD2() As nullable (of int64)
            Get
                return _ORD2
            End Get
            Set
                if not(value is nothing) then
                  _ORD2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _PRICEBAL1 = .PRICEBAL1
                  _CODE = .CODE
                  _PRICEBAL2 = .PRICEBAL2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _ORD2 = .ORD2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Documents")>  _
    Public Class QUERY_OBLIGO_TRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_TRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = nothing
            _Name = "OBLIGO_TRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = Parent
            _name = "OBLIGO_TRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_TRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_TRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_TRANS As OBLIGO_TRANS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_TRANS)(stream.ReadToEnd).Value
              With _OBLIGO_TRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_TRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_TRANS)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_TRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_TRANS as OBLIGO_TRANS in value
              If _OBLIGO_TRANS.Equals(trycast(obj,OBLIGO_TRANS)) Then
                  value.remove(_OBLIGO_TRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_TRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DOCCODE As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_TRANS"
                else
                    return "OBLIGO_TRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if not(value is nothing) then
                  _DOCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Amount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_TRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Project Hours")>  _
    Public Class QUERY_OBLIGO_PROJ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_PROJ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = nothing
            _Name = "OBLIGO_PROJ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = Parent
            _name = "OBLIGO_PROJ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_PROJ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_PROJ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_PROJ As OBLIGO_PROJ In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_PROJ)(stream.ReadToEnd).Value
              With _OBLIGO_PROJ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_PROJ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_PROJ)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .USERLOGIN = obj.USERLOGIN
                  .TRANS = obj.TRANS
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_PROJ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_PROJ as OBLIGO_PROJ in value
              If _OBLIGO_PROJ.Equals(trycast(obj,OBLIGO_PROJ)) Then
                  value.remove(_OBLIGO_PROJ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_PROJ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _USERLOGIN As String
        
        Private _TRANS As Long
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_PROJ"
                else
                    return "OBLIGO_PROJ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_PROJ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _USERLOGIN = .USERLOGIN
                  _TRANS = .TRANS
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pending Sales Invoices")>  _
    Public Class QUERY_OBLIGO_IV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_IV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = nothing
            _Name = "OBLIGO_IV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = Parent
            _name = "OBLIGO_IV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_IV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_IV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_IV As OBLIGO_IV In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_IV)(stream.ReadToEnd).Value
              With _OBLIGO_IV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_IV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_IV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .DEBIT = obj.DEBIT
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_IV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_IV as OBLIGO_IV in value
              If _OBLIGO_IV.Equals(trycast(obj,OBLIGO_IV)) Then
                  value.remove(_OBLIGO_IV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_IV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _DEBIT As String
        
        Private _IV As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_IV"
                else
                    return "OBLIGO_IV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},TYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_IV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _DEBIT = .DEBIT
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unpaid Bills")>  _
    Public Class QUERY_OBLIGO_FNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = nothing
            _Name = "OBLIGO_FNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = Parent
            _name = "OBLIGO_FNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCITEMS As OBLIGO_FNCITEMS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCITEMS)(stream.ReadToEnd).Value
              With _OBLIGO_FNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCITEMS)
                  .BALDATE = obj.BALDATE
                  .FNCNUM = obj.FNCNUM
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .SUM1 = obj.SUM1
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCIREF1 = obj.FNCIREF1
                  .FNCIREF2 = obj.FNCIREF2
                  .ORDNAME = obj.ORDNAME
                  .FNCICODE = obj.FNCICODE
                  .ACCNAME = obj.ACCNAME
                  .SUM5 = obj.SUM5
                  .CODE5 = obj.CODE5
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCITEMS as OBLIGO_FNCITEMS in value
              If _OBLIGO_FNCITEMS.Equals(trycast(obj,OBLIGO_FNCITEMS)) Then
                  value.remove(_OBLIGO_FNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _FNCNUM As String
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _SUM1 As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCIREF1 As String
        
        Private _FNCIREF2 As String
        
        Private _ORDNAME As String
        
        Private _FNCICODE As String
        
        Private _ACCNAME As String
        
        Private _SUM5 As Decimal
        
        Private _CODE5 As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCITEMS"
                else
                    return "OBLIGO_FNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(20),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUM1")>  _
        Public Property SUM1() As nullable(of decimal)
            Get
                return _SUM1
            End Get
            Set
                if not(value is nothing) then
                  _SUM1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Due Date"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 1 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF1")>  _
        Public Property FNCIREF1() As String
            Get
                return _FNCIREF1
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 2 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF2")>  _
        Public Property FNCIREF2() As String
            Get
                return _FNCIREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if not(value is nothing) then
                  _FNCICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Due Date"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("SUM5")>  _
        Public Property SUM5() As nullable(of decimal)
            Get
                return _SUM5
            End Get
            Set
                if not(value is nothing) then
                  _SUM5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _FNCNUM = .FNCNUM
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _SUM1 = .SUM1
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCIREF1 = .FNCIREF1
                  _FNCIREF2 = .FNCIREF2
                  _ORDNAME = .ORDNAME
                  _FNCICODE = .FNCICODE
                  _ACCNAME = .ACCNAME
                  _SUM5 = .SUM5
                  _CODE5 = .CODE5
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Post-dated Cheques")>  _
    Public Class QUERY_OBLIGO_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = Parent
            _name = "OBLIGO_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS As OBLIGO_CHECKS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS as OBLIGO_CHECKS in value
              If _OBLIGO_CHECKS.Equals(trycast(obj,OBLIGO_CHECKS)) Then
                  value.remove(_OBLIGO_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS"
                else
                    return "OBLIGO_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Cheques Past Due Date")>  _
    Public Class QUERY_OBLIGO_CHECKS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = Parent
            _name = "OBLIGO_CHECKS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS2 As OBLIGO_CHECKS2 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS2)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS2)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENTA = obj.PAYMENTA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS2 as OBLIGO_CHECKS2 in value
              If _OBLIGO_CHECKS2.Equals(trycast(obj,OBLIGO_CHECKS2)) Then
                  value.remove(_OBLIGO_CHECKS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENTA As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS2"
                else
                    return "OBLIGO_CHECKS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENTA")>  _
        Public Property PAYMENTA() As nullable (of int64)
            Get
                return _PAYMENTA
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTA = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENTA = .PAYMENTA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Secure Post-dated Cheques")>  _
    Public Class QUERY_SECURE_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SECURE_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = nothing
            _Name = "SECURE_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = Parent
            _name = "SECURE_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SECURE_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SECURE_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SECURE_CHECKS As SECURE_CHECKS In JsonConvert.DeserializeObject(Of QUERY_SECURE_CHECKS)(stream.ReadToEnd).Value
              With _SECURE_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SECURE_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SECURE_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SECURE_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SECURE_CHECKS as SECURE_CHECKS in value
              If _SECURE_CHECKS.Equals(trycast(obj,SECURE_CHECKS)) Then
                  value.remove(_SECURE_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SECURE_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SECURE_CHECKS"
                else
                    return "SECURE_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date of Receipt"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SECURE_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Balances in Transaction Currency")>  _
    Public Class QUERY_OBLIGO_FNCBAL5
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCBAL5)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = nothing
            _Name = "OBLIGO_FNCBAL5"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = Parent
            _name = "OBLIGO_FNCBAL5_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCBAL5)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCBAL5)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCBAL5 As OBLIGO_FNCBAL5 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCBAL5)(stream.ReadToEnd).Value
              With _OBLIGO_FNCBAL5
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCBAL5)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCBAL5)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BALANCE5 = obj.BALANCE5
                  .CODE5 = obj.CODE5
                  .BALANCE3 = obj.BALANCE3
                  .BAL3 = obj.BAL3
                  .CODE3 = obj.CODE3
                  .ACCOUNT = obj.ACCOUNT
                  .CURRENCY5 = obj.CURRENCY5
                  .UCUST = obj.UCUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCBAL5(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCBAL5 as OBLIGO_FNCBAL5 in value
              If _OBLIGO_FNCBAL5.Equals(trycast(obj,OBLIGO_FNCBAL5)) Then
                  value.remove(_OBLIGO_FNCBAL5)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCBAL5
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _BALANCE5 As Decimal
        
        Private _CODE5 As String
        
        Private _BALANCE3 As Decimal
        
        Private _BAL3 As Decimal
        
        Private _CODE3 As String
        
        Private _ACCOUNT As Long
        
        Private _CURRENCY5 As Long
        
        Private _UCUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCBAL5"
                else
                    return "OBLIGO_FNCBAL5_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACCOUNT={0},CURRENCY5={1},UCUST={2}", _
                  string.format("{0}",ACCOUNT), _
                  string.format("{0}",CURRENCY5), _
                  string.format("{0}",UCUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE5")>  _
        Public Property BALANCE5() As nullable(of decimal)
            Get
                return _BALANCE5
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Acct Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE3")>  _
        Public Property BALANCE3() As nullable(of decimal)
            Get
                return _BALANCE3
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BAL3")>  _
        Public Property BAL3() As nullable(of decimal)
            Get
                return _BAL3
            End Get
            Set
                if not(value is nothing) then
                  _BAL3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Account No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACCOUNT")>  _
        Public Property ACCOUNT() As nullable (of int64)
            Get
                return _ACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _ACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transact. Curr (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY5")>  _
        Public Property CURRENCY5() As nullable (of int64)
            Get
                return _CURRENCY5
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("UCUST")>  _
        Public Property UCUST() As nullable (of int64)
            Get
                return _UCUST
            End Get
            Set
                if not(value is nothing) then
                  _UCUST = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCBAL5")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACCOUNT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY5")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "UCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BALANCE5 = .BALANCE5
                  _CODE5 = .CODE5
                  _BALANCE3 = .BALANCE3
                  _BAL3 = .BAL3
                  _CODE3 = .CODE3
                  _ACCOUNT = .ACCOUNT
                  _CURRENCY5 = .CURRENCY5
                  _UCUST = .UCUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit per Company")>  _
    Public Class QUERY_CUSTOBLIGOENV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGOENV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = nothing
            _Name = "CUSTOBLIGOENV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = Parent
            _name = "CUSTOBLIGOENV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGOENV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGOENV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGOENV As CUSTOBLIGOENV In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGOENV)(stream.ReadToEnd).Value
              With _CUSTOBLIGOENV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGOENV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGOENV)
                  .TITLE = obj.TITLE
                  .CREDIT = obj.CREDIT
                  .OBLIGO = obj.OBLIGO
                  .CODE = obj.CODE
                  .DNAME = obj.DNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGOENV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGOENV as CUSTOBLIGOENV in value
              If _CUSTOBLIGOENV.Equals(trycast(obj,CUSTOBLIGOENV)) Then
                  value.remove(_CUSTOBLIGOENV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGOENV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _CREDIT As Decimal
        
        Private _OBLIGO As Decimal
        
        Private _CODE As String
        
        Private _DNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGOENV"
                else
                    return "CUSTOBLIGOENV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DNAME={0}", _
                  string.format("'{0}'",DNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Company Name"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DNAME")>  _
        Public Property DNAME() As String
            Get
                return _DNAME
            End Get
            Set
                if not(value is nothing) then
                  _DNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGOENV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _CREDIT = .CREDIT
                  _OBLIGO = .OBLIGO
                  _CODE = .CODE
                  _DNAME = .DNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Dialogue")>  _
    Public Class QUERY_INTERNALDIALOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INTERNALDIALOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = nothing
            _Name = "INTERNALDIALOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = Parent
            _name = "INTERNALDIALOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INTERNALDIALOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INTERNALDIALOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INTERNALDIALOGTEXT As INTERNALDIALOGTEXT In JsonConvert.DeserializeObject(Of QUERY_INTERNALDIALOGTEXT)(stream.ReadToEnd).Value
              With _INTERNALDIALOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INTERNALDIALOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INTERNALDIALOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INTERNALDIALOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INTERNALDIALOGTEXT as INTERNALDIALOGTEXT in value
              If _INTERNALDIALOGTEXT.Equals(trycast(obj,INTERNALDIALOGTEXT)) Then
                  value.remove(_INTERNALDIALOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INTERNALDIALOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INTERNALDIALOGTEXT"
                else
                    return "INTERNALDIALOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Comment"),  _
         nType("Edm.String"),  _
         tab("Comment"),  _
         Pos(30),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Comment", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Comment"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INTERNALDIALOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Digital Signature")>  _
    Public Class QUERY_IVSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of IVSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of IVSIGN)
            _Parent = nothing
            _Name = "IVSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of IVSIGN)
            _Parent = Parent
            _name = "IVSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of IVSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(IVSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _IVSIGN As IVSIGN In JsonConvert.DeserializeObject(Of QUERY_IVSIGN)(stream.ReadToEnd).Value
              With _IVSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_IVSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVSIGN = JsonConvert.DeserializeObject(Of IVSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, IVSIGN)
                  .SIGNEDSTR = obj.SIGNEDSTR
                  .SIGNEDSTRB = obj.SIGNEDSTRB
                  .SIGNEDSTR2 = obj.SIGNEDSTR2
                  .SIGNEDSTR2B = obj.SIGNEDSTR2B
                  .SIGNATURE = obj.SIGNATURE
                  .SIGNATUREB = obj.SIGNATUREB
                  .SIGNATURE2 = obj.SIGNATURE2
                  .SHORTSIGN = obj.SHORTSIGN
                  .CERTIFICATENUM = obj.CERTIFICATENUM
                  .VERSION = obj.VERSION
                  .UUID = obj.UUID
                  .FETCHATIMBRADO = obj.FETCHATIMBRADO
                  .NOCERTIFICADOSAT = obj.NOCERTIFICADOSAT
                  .SELLOCFD = obj.SELLOCFD
                  .SELLOCFDCONT = obj.SELLOCFDCONT
                  .SELLOSAT = obj.SELLOSAT
                  .SELLOSATCONT = obj.SELLOSATCONT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new IVSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _IVSIGN as IVSIGN in value
              If _IVSIGN.Equals(trycast(obj,IVSIGN)) Then
                  value.remove(_IVSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class IVSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SIGNEDSTR As String
        
        Private _SIGNEDSTRB As String
        
        Private _SIGNEDSTR2 As String
        
        Private _SIGNEDSTR2B As String
        
        Private _SIGNATURE As String
        
        Private _SIGNATUREB As String
        
        Private _SIGNATURE2 As String
        
        Private _SHORTSIGN As String
        
        Private _CERTIFICATENUM As String
        
        Private _VERSION As String
        
        Private _UUID As String
        
        Private _FETCHATIMBRADO As String
        
        Private _NOCERTIFICADOSAT As String
        
        Private _SELLOCFD As String
        
        Private _SELLOCFDCONT As String
        
        Private _SELLOSAT As String
        
        Private _SELLOSATCONT As String
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "IVSIGN"
                else
                    return "IVSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature String"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR")>  _
        Public Property SIGNEDSTR() As String
            Get
                return _SIGNEDSTR
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 2"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTRB")>  _
        Public Property SIGNEDSTRB() As String
            Get
                return _SIGNEDSTRB
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTRB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 3"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR2")>  _
        Public Property SIGNEDSTR2() As String
            Get
                return _SIGNEDSTR2
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature String 4"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNEDSTR2B")>  _
        Public Property SIGNEDSTR2B() As String
            Get
                return _SIGNEDSTR2B
            End Get
            Set
                if not(value is nothing) then
                  _SIGNEDSTR2B = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATURE")>  _
        Public Property SIGNATURE() As String
            Get
                return _SIGNATURE
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature 2"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATUREB")>  _
        Public Property SIGNATUREB() As String
            Get
                return _SIGNATUREB
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATUREB = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature 3"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("SIGNATURE2")>  _
        Public Property SIGNATURE2() As String
            Get
                return _SIGNATURE2
            End Get
            Set
                if not(value is nothing) then
                  _SIGNATURE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Display Signature"),  _
         nType("Edm.String"),  _
         tab("Signature String"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("SHORTSIGN")>  _
        Public Property SHORTSIGN() As String
            Get
                return _SHORTSIGN
            End Get
            Set
                if not(value is nothing) then
                  _SHORTSIGN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorization Code"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CERTIFICATENUM")>  _
        Public Property CERTIFICATENUM() As String
            Get
                return _CERTIFICATENUM
            End Get
            Set
                if not(value is nothing) then
                  _CERTIFICATENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Version"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("VERSION")>  _
        Public Property VERSION() As String
            Get
                return _VERSION
            End Get
            Set
                if not(value is nothing) then
                  _VERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unique ID"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("UUID")>  _
        Public Property UUID() As String
            Get
                return _UUID
            End Get
            Set
                if not(value is nothing) then
                  _UUID = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature Date"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("FETCHATIMBRADO")>  _
        Public Property FETCHATIMBRADO() As String
            Get
                return _FETCHATIMBRADO
            End Get
            Set
                if not(value is nothing) then
                  _FETCHATIMBRADO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc SAT Number"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(330),  _
         [ReadOnly](true),  _
         twodBarcode("NOCERTIFICADOSAT")>  _
        Public Property NOCERTIFICADOSAT() As String
            Get
                return _NOCERTIFICADOSAT
            End Get
            Set
                if not(value is nothing) then
                  _NOCERTIFICADOSAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("CDF Signature"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(340),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOCFD")>  _
        Public Property SELLOCFD() As String
            Get
                return _SELLOCFD
            End Get
            Set
                if not(value is nothing) then
                  _SELLOCFD = Value
                end if
            End Set
        End Property
        
        <DisplayName("CDF Signature Cont."),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(350),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOCFDCONT")>  _
        Public Property SELLOCFDCONT() As String
            Get
                return _SELLOCFDCONT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOCFDCONT = Value
                end if
            End Set
        End Property
        
        <DisplayName("SAT Signature"),  _
         nType("Edm.String"),  _
         tab("Authorization Code"),  _
         Pos(360),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOSAT")>  _
        Public Property SELLOSAT() As String
            Get
                return _SELLOSAT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOSAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("SAT Signature Cont."),  _
         nType("Edm.String"),  _
         tab("SAT Signature Cont."),  _
         Pos(370),  _
         [ReadOnly](true),  _
         twodBarcode("SELLOSATCONT")>  _
        Public Property SELLOSATCONT() As String
            Get
                return _SELLOSATCONT
            End Get
            Set
                if not(value is nothing) then
                  _SELLOSATCONT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("SAT Signature Cont."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "IVSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as IVSIGN = JsonConvert.DeserializeObject(Of IVSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _SIGNEDSTR = .SIGNEDSTR
                  _SIGNEDSTRB = .SIGNEDSTRB
                  _SIGNEDSTR2 = .SIGNEDSTR2
                  _SIGNEDSTR2B = .SIGNEDSTR2B
                  _SIGNATURE = .SIGNATURE
                  _SIGNATUREB = .SIGNATUREB
                  _SIGNATURE2 = .SIGNATURE2
                  _SHORTSIGN = .SHORTSIGN
                  _CERTIFICATENUM = .CERTIFICATENUM
                  _VERSION = .VERSION
                  _UUID = .UUID
                  _FETCHATIMBRADO = .FETCHATIMBRADO
                  _NOCERTIFICADOSAT = .NOCERTIFICADOSAT
                  _SELLOCFD = .SELLOCFD
                  _SELLOCFDCONT = .SELLOCFDCONT
                  _SELLOSAT = .SELLOSAT
                  _SELLOSATCONT = .SELLOSATCONT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
End Namespace
