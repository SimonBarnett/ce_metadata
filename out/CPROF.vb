Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Price Quotations for Customers")>  _
    Public Class QUERY_CPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROF)
            _Parent = nothing
            _Name = "CPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Itemised Quotation")
            .add(1, "Price Quote Versions")
            .add(2, "Shipping Address")
            .add(3, "Attachments")
            .add(4, "Orders Based on Quote")
            .add(5, "Costs Specific to This Job")
            .add(6, "Active Price Quotations")
            .add(7, "Price Quotations - Remarks")
            .add(8, "Product Bundles")
            .add(9, "Distribution Criteria")
            .add(10, "Price Quote - Customer Details")
            .add(11, "Projects/Accounts")
            .add(12, "Customer Credit")
            .add(13, "Tasks for Document")
            .add(14, "To Do Item")
            .add(15, "History of Statuses")
            .add(16, "Internal Dialogue")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROF)
            _Parent = Parent
            _name = "CPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Itemised Quotation")
            .add(1, "Price Quote Versions")
            .add(2, "Shipping Address")
            .add(3, "Attachments")
            .add(4, "Orders Based on Quote")
            .add(5, "Costs Specific to This Job")
            .add(6, "Active Price Quotations")
            .add(7, "Price Quotations - Remarks")
            .add(8, "Product Bundles")
            .add(9, "Distribution Criteria")
            .add(10, "Price Quote - Customer Details")
            .add(11, "Projects/Accounts")
            .add(12, "Customer Credit")
            .add(13, "Tasks for Document")
            .add(14, "To Do Item")
            .add(15, "History of Statuses")
            .add(16, "Internal Dialogue")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROF As CPROF In JsonConvert.DeserializeObject(Of QUERY_CPROF)(stream.ReadToEnd).Value
              With _CPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROF = JsonConvert.DeserializeObject(Of CPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROF)
                  .CUSTNAME = obj.CUSTNAME
                  .CDES = obj.CDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .NAME = obj.NAME
                  .POSITIONDES = obj.POSITIONDES
                  .PDATE = obj.PDATE
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .CPROFNUM = obj.CPROFNUM
                  .REFERENCE = obj.REFERENCE
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .MUSERLOGIN = obj.MUSERLOGIN
                  .CELLPHONE = obj.CELLPHONE
                  .STATDES = obj.STATDES
                  .ACTIVEFLAG = obj.ACTIVEFLAG
                  .COPYFLAG = obj.COPYFLAG
                  .MODELNAME = obj.MODELNAME
                  .STATUSDATE = obj.STATUSDATE
                  .QUANT = obj.QUANT
                  .BYPROFNUM = obj.BYPROFNUM
                  .PLNAME = obj.PLNAME
                  .DETAILS = obj.DETAILS
                  .EXPIRYDATE2 = obj.EXPIRYDATE2
                  .DOERLOGIN = obj.DOERLOGIN
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .EXTFILEFLAG = obj.EXTFILEFLAG
                  .TYPECODE = obj.TYPECODE
                  .TYPEDES = obj.TYPEDES
                  .ESTIMATEDPRICE = obj.ESTIMATEDPRICE
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TAXCODE = obj.TAXCODE
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .CPAYCODE = obj.CPAYCODE
                  .CPAYDES = obj.CPAYDES
                  .TOTPURCHASEPRICE = obj.TOTPURCHASEPRICE
                  .PROFIT = obj.PROFIT
                  .QPROFIT = obj.QPROFIT
                  .PROFITPERCENT = obj.PROFITPERCENT
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .CCNUM = obj.CCNUM
                  .NOCOPY = obj.NOCOPY
                  .CURVERSION = obj.CURVERSION
                  .FOLLOWUPIV = obj.FOLLOWUPIV
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROF as CPROF in value
              If _CPROF.Equals(trycast(obj,CPROF)) Then
                  value.remove(_CPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _POSITIONDES As String
        
        Private _IsSetPDATE As Boolean = Boolean.FalseString
        
        Private _PDATE As System.DateTimeOffset
        
        Private _IsSetEXPIRYDATE As Boolean = Boolean.FalseString
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _IsSetCPROFNUM As Boolean = Boolean.FalseString
        
        Private _CPROFNUM As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _MUSERLOGIN As String
        
        Private _CELLPHONE As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _ACTIVEFLAG As String
        
        Private _IsSetCOPYFLAG As Boolean = Boolean.FalseString
        
        Private _COPYFLAG As String
        
        Private _IsSetMODELNAME As Boolean = Boolean.FalseString
        
        Private _MODELNAME As String
        
        Private _STATUSDATE As System.DateTimeOffset
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _IsSetBYPROFNUM As Boolean = Boolean.FalseString
        
        Private _BYPROFNUM As String
        
        Private _IsSetPLNAME As Boolean = Boolean.FalseString
        
        Private _PLNAME As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetEXPIRYDATE2 As Boolean = Boolean.FalseString
        
        Private _EXPIRYDATE2 As System.DateTimeOffset
        
        Private _IsSetDOERLOGIN As Boolean = Boolean.FalseString
        
        Private _DOERLOGIN As String
        
        Private _IsSetAGENTCODE As Boolean = Boolean.FalseString
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetSUPNAME As Boolean = Boolean.FalseString
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _EXTFILEFLAG As String
        
        Private _IsSetTYPECODE As Boolean = Boolean.FalseString
        
        Private _TYPECODE As String
        
        Private _TYPEDES As String
        
        Private _IsSetESTIMATEDPRICE As Boolean = Boolean.FalseString
        
        Private _ESTIMATEDPRICE As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetLCODE As Boolean = Boolean.FalseString
        
        Private _LCODE As String
        
        Private _IsSetLEXCH As Boolean = Boolean.FalseString
        
        Private _LEXCH As Decimal
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _IsSetCPAYCODE As Boolean = Boolean.FalseString
        
        Private _CPAYCODE As String
        
        Private _CPAYDES As String
        
        Private _TOTPURCHASEPRICE As Decimal
        
        Private _IsSetPROFIT As Boolean = Boolean.FalseString
        
        Private _PROFIT As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _PROFITPERCENT As Decimal
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _IsSetCCNUM As Boolean = Boolean.FalseString
        
        Private _CCNUM As String
        
        Private _IsSetNOCOPY As Boolean = Boolean.FalseString
        
        Private _NOCOPY As String
        
        Private _CURVERSION As Long
        
        Private _IsSetFOLLOWUPIV As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPIV As Long
        
        Private _CPROFITEMS_SUBFORM As QUERY_CPROFITEMS
        
        Private _CPROFVER_SUBFORM As QUERY_CPROFVER
        
        Private _SHIPTO2_SUBFORM As QUERY_SHIPTO2
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _CPROFORD_SUBFORM As QUERY_CPROFORD
        
        Private _CPROFONCE_SUBFORM As QUERY_CPROFONCE
        
        Private _ORDCPROF_SUBFORM As QUERY_ORDCPROF
        
        Private _CPROFTEXT_SUBFORM As QUERY_CPROFTEXT
        
        Private _CPROFMODEL_SUBFORM As QUERY_CPROFMODEL
        
        Private _MAILINTERDISTRIBUTE_SUBFORM As QUERY_MAILINTERDISTRIBUTE
        
        Private _CPROFCONT_SUBFORM As QUERY_CPROFCONT
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _CUSTOBLIGO_SUBFORM As QUERY_CUSTOBLIGO
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _INTERNALDIALOGTEXT_SUBFORM As QUERY_INTERNALDIALOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Itemised Quotation"))
            ChildQuery.add(1, new oNavigation("Price Quote Versions"))
            ChildQuery.add(2, new oNavigation("Shipping Address"))
            ChildQuery.add(3, new oNavigation("Attachments"))
            ChildQuery.add(4, new oNavigation("Orders Based on Quote"))
            ChildQuery.add(5, new oNavigation("Costs Specific to This Job"))
            ChildQuery.add(6, new oNavigation("Active Price Quotations"))
            ChildQuery.add(7, new oNavigation("Price Quotations - Remarks"))
            ChildQuery.add(8, new oNavigation("Product Bundles"))
            ChildQuery.add(9, new oNavigation("Distribution Criteria"))
            ChildQuery.add(10, new oNavigation("Price Quote - Customer Details"))
            ChildQuery.add(11, new oNavigation("Projects/Accounts"))
            ChildQuery.add(12, new oNavigation("Customer Credit"))
            ChildQuery.add(13, new oNavigation("Tasks for Document"))
            ChildQuery.add(14, new oNavigation("To Do Item"))
            ChildQuery.add(15, new oNavigation("History of Statuses"))
            ChildQuery.add(16, new oNavigation("Internal Dialogue"))
            _CPROFITEMS_SUBFORM = new QUERY_CPROFITEMS(me)
            _CPROFVER_SUBFORM = new QUERY_CPROFVER(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _CPROFORD_SUBFORM = new QUERY_CPROFORD(me)
            _CPROFONCE_SUBFORM = new QUERY_CPROFONCE(me)
            _ORDCPROF_SUBFORM = new QUERY_ORDCPROF(me)
            _CPROFTEXT_SUBFORM = new QUERY_CPROFTEXT(me)
            _CPROFMODEL_SUBFORM = new QUERY_CPROFMODEL(me)
            _MAILINTERDISTRIBUTE_SUBFORM = new QUERY_MAILINTERDISTRIBUTE(me)
            _CPROFCONT_SUBFORM = new QUERY_CPROFCONT(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_CPROFORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_CPROFONCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_ORDCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CPROFTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_CPROFMODEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_MAILINTERDISTRIBUTE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_CPROFCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Itemised Quotation"))
            ChildQuery.add(1, new oNavigation("Price Quote Versions"))
            ChildQuery.add(2, new oNavigation("Shipping Address"))
            ChildQuery.add(3, new oNavigation("Attachments"))
            ChildQuery.add(4, new oNavigation("Orders Based on Quote"))
            ChildQuery.add(5, new oNavigation("Costs Specific to This Job"))
            ChildQuery.add(6, new oNavigation("Active Price Quotations"))
            ChildQuery.add(7, new oNavigation("Price Quotations - Remarks"))
            ChildQuery.add(8, new oNavigation("Product Bundles"))
            ChildQuery.add(9, new oNavigation("Distribution Criteria"))
            ChildQuery.add(10, new oNavigation("Price Quote - Customer Details"))
            ChildQuery.add(11, new oNavigation("Projects/Accounts"))
            ChildQuery.add(12, new oNavigation("Customer Credit"))
            ChildQuery.add(13, new oNavigation("Tasks for Document"))
            ChildQuery.add(14, new oNavigation("To Do Item"))
            ChildQuery.add(15, new oNavigation("History of Statuses"))
            ChildQuery.add(16, new oNavigation("Internal Dialogue"))
            _CPROFITEMS_SUBFORM = new QUERY_CPROFITEMS(me)
            _CPROFVER_SUBFORM = new QUERY_CPROFVER(me)
            _SHIPTO2_SUBFORM = new QUERY_SHIPTO2(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _CPROFORD_SUBFORM = new QUERY_CPROFORD(me)
            _CPROFONCE_SUBFORM = new QUERY_CPROFONCE(me)
            _ORDCPROF_SUBFORM = new QUERY_ORDCPROF(me)
            _CPROFTEXT_SUBFORM = new QUERY_CPROFTEXT(me)
            _CPROFMODEL_SUBFORM = new QUERY_CPROFMODEL(me)
            _MAILINTERDISTRIBUTE_SUBFORM = new QUERY_MAILINTERDISTRIBUTE(me)
            _CPROFCONT_SUBFORM = new QUERY_CPROFCONT(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _CUSTOBLIGO_SUBFORM = new QUERY_CUSTOBLIGO(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_SHIPTO2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_CPROFORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_CPROFONCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_ORDCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CPROFTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_CPROFMODEL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_MAILINTERDISTRIBUTE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_CPROFCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_CUSTOBLIGO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMS_SUBFORM))
                   .add(1, new oNavigation("Price Quote Versions", _CPROFVER_SUBFORM))
                   .add(2, new oNavigation("Shipping Address", _SHIPTO2_SUBFORM))
                   .add(3, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(4, new oNavigation("Orders Based on Quote", _CPROFORD_SUBFORM))
                   .add(5, new oNavigation("Costs Specific to This Job", _CPROFONCE_SUBFORM))
                   .add(6, new oNavigation("Active Price Quotations", _ORDCPROF_SUBFORM))
                   .add(7, new oNavigation("Price Quotations - Remarks", _CPROFTEXT_SUBFORM))
                   .add(8, new oNavigation("Product Bundles", _CPROFMODEL_SUBFORM))
                   .add(9, new oNavigation("Distribution Criteria", _MAILINTERDISTRIBUTE_SUBFORM))
                   .add(10, new oNavigation("Price Quote - Customer Details", _CPROFCONT_SUBFORM))
                   .add(11, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(12, new oNavigation("Customer Credit", _CUSTOBLIGO_SUBFORM))
                   .add(13, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(14, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(15, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(16, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROF"
                else
                    return "CPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CPROFNUM={0}", _
                  string.format("'{0}'",CPROFNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(5),  _
         Mandatory(true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(10),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(11),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(13),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Job Title"),  _
         nType("Edm.String"),  _
         tab("Customer Number"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("POSITIONDES")>  _
        Public Property POSITIONDES() As String
            Get
                return _POSITIONDES
            End Get
            Set
                if not(value is nothing) then
                  _POSITIONDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote Date", value, "^.*$") then Exit Property
                _IsSetPDATE = True
                If loading Then
                  _PDATE = Value
                Else
                    if not _PDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Customer Number"),  _
         Pos(22),  _
         Mandatory(true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Expir. Date", value, "^.*$") then Exit Property
                _IsSetEXPIRYDATE = True
                If loading Then
                  _EXPIRYDATE = Value
                Else
                    if not _EXPIRYDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXPIRYDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXPIRYDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(23),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quotation", value, "^.{0,16}$") then Exit Property
                _IsSetCPROFNUM = True
                If loading Then
                  _CPROFNUM = Value
                Else
                    if not _CPROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust's Request No."),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(24),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust's Request No.", value, "^.{0,16}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(25),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Manager"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("MUSERLOGIN")>  _
        Public Property MUSERLOGIN() As String
            Get
                return _MUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _MUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,24}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Active Quote"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVEFLAG")>  _
        Public Property ACTIVEFLAG() As String
            Get
                return _ACTIVEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Copy All to Order?"),  _
         nType("Edm.String"),  _
         tab("Copy All to Order?"),  _
         Pos(34),  _
         twodBarcode("COPYFLAG")>  _
        Public Property COPYFLAG() As String
            Get
                return _COPYFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Copy All to Order?", value, "^.{0,1}$") then Exit Property
                _IsSetCOPYFLAG = True
                If loading Then
                  _COPYFLAG = Value
                Else
                    if not _COPYFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COPYFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COPYFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Copy All to Order?"),  _
         Pos(36),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Product Bundle", value, "^.{0,6}$") then Exit Property
                _IsSetMODELNAME = True
                If loading Then
                  _MODELNAME = Value
                Else
                    if not _MODELNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODELNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODELNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status Update Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Copy All to Order?"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("STATUSDATE")>  _
        Public Property STATUSDATE() As nullable (of DateTimeOffset)
            Get
                return _STATUSDATE
            End Get
            Set
                if not(value is nothing) then
                  _STATUSDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Copy All to Order?"),  _
         Pos(38),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quote to Copy"),  _
         nType("Edm.String"),  _
         tab("Copy All to Order?"),  _
         Pos(40),  _
         twodBarcode("BYPROFNUM")>  _
        Public Property BYPROFNUM() As String
            Get
                return _BYPROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote to Copy", value, "^.{0,16}$") then Exit Property
                _IsSetBYPROFNUM = True
                If loading Then
                  _BYPROFNUM = Value
                Else
                    if not _BYPROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BYPROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BYPROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price List"),  _
         nType("Edm.String"),  _
         tab("Copy All to Order?"),  _
         Pos(42),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price List", value, "^.{0,6}$") then Exit Property
                _IsSetPLNAME = True
                If loading Then
                  _PLNAME = Value
                Else
                    if not _PLNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Copy All to Order?"),  _
         Pos(44),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Send Quote Before"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Copy All to Order?"),  _
         Pos(46),  _
         twodBarcode("EXPIRYDATE2")>  _
        Public Property EXPIRYDATE2() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send Quote Before", value, "^.*$") then Exit Property
                _IsSetEXPIRYDATE2 = True
                If loading Then
                  _EXPIRYDATE2 = Value
                Else
                    if not _EXPIRYDATE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXPIRYDATE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXPIRYDATE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(48),  _
         Mandatory(true),  _
         twodBarcode("DOERLOGIN")>  _
        Public Property DOERLOGIN() As String
            Get
                return _DOERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetDOERLOGIN = True
                If loading Then
                  _DOERLOGIN = Value
                Else
                    if not _DOERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(50),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Rep Number", value, "^.{0,16}$") then Exit Property
                _IsSetAGENTCODE = True
                If loading Then
                  _AGENTCODE = Value
                Else
                    if not _AGENTCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AGENTCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AGENTCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(51),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(52),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(53),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Number"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(54),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Number", value, "^.{0,16}$") then Exit Property
                _IsSetSUPNAME = True
                If loading Then
                  _SUPNAME = Value
                Else
                    if not _SUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Name"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(56),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAG")>  _
        Public Property EXTFILEFLAG() As String
            Get
                return _EXTFILEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type of Sale"),  _
         nType("Edm.String"),  _
         tab("Type of Sale"),  _
         Pos(58),  _
         twodBarcode("TYPECODE")>  _
        Public Property TYPECODE() As String
            Get
                return _TYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type of Sale", value, "^.{0,3}$") then Exit Property
                _IsSetTYPECODE = True
                If loading Then
                  _TYPECODE = Value
                Else
                    if not _TYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type of Sale-Descrip"),  _
         nType("Edm.String"),  _
         tab("Type of Sale"),  _
         Pos(59),  _
         [ReadOnly](true),  _
         twodBarcode("TYPEDES")>  _
        Public Property TYPEDES() As String
            Get
                return _TYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _TYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approximate Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Type of Sale"),  _
         Pos(60),  _
         twodBarcode("ESTIMATEDPRICE")>  _
        Public Property ESTIMATEDPRICE() As nullable(of decimal)
            Get
                return _ESTIMATEDPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Approximate Value", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetESTIMATEDPRICE = True
                If loading Then
                  _ESTIMATEDPRICE = Value
                Else
                    if not _ESTIMATEDPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ESTIMATEDPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ESTIMATEDPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Type of Sale"),  _
         Pos(61),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Type of Sale"),  _
         Pos(62),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Type of Sale"),  _
         Pos(63),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Type of Sale"),  _
         Pos(64),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Type of Sale"),  _
         Pos(65),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Final Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(66),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(68),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(70),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linked Currency", value, "^.{0,3}$") then Exit Property
                _IsSetLCODE = True
                If loading Then
                  _LCODE = Value
                Else
                    if not _LCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(71),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCH = True
                If loading Then
                  _LEXCH = Value
                Else
                    if not _LEXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(73),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Requested Terms-Code"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(76),  _
         twodBarcode("CPAYCODE")>  _
        Public Property CPAYCODE() As String
            Get
                return _CPAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Requested Terms-Code", value, "^.{0,3}$") then Exit Property
                _IsSetCPAYCODE = True
                If loading Then
                  _CPAYCODE = Value
                Else
                    if not _CPAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Requested Terms"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("CPAYDES")>  _
        Public Property CPAYDES() As String
            Get
                return _CPAYDES
            End Get
            Set
                if not(value is nothing) then
                  _CPAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Purchase Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Purchase Price"),  _
         Pos(79),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPURCHASEPRICE")>  _
        Public Property TOTPURCHASEPRICE() As nullable(of decimal)
            Get
                return _TOTPURCHASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPURCHASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Markup (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Purchase Price"),  _
         Pos(80),  _
         twodBarcode("PROFIT")>  _
        Public Property PROFIT() As nullable(of decimal)
            Get
                return _PROFIT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Markup (%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPROFIT = True
                If loading Then
                  _PROFIT = Value
                Else
                    if not _PROFIT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROFIT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROFIT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Purchase Price"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Purchase Price"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("PROFITPERCENT")>  _
        Public Property PROFITPERCENT() As nullable(of decimal)
            Get
                return _PROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Purchase Price"),  _
         Pos(90),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Purchase Price"),  _
         Pos(92),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Oppor. Number"),  _
         nType("Edm.String"),  _
         tab("Purchase Price"),  _
         Pos(95),  _
         twodBarcode("CCNUM")>  _
        Public Property CCNUM() As String
            Get
                return _CCNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Oppor. Number", value, "^.{0,24}$") then Exit Property
                _IsSetCCNUM = True
                If loading Then
                  _CCNUM = Value
                Else
                    if not _CCNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CCNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CCNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("No Auto Copy"),  _
         nType("Edm.String"),  _
         tab("Purchase Price"),  _
         Pos(97),  _
         twodBarcode("NOCOPY")>  _
        Public Property NOCOPY() As String
            Get
                return _NOCOPY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No Auto Copy", value, "^.{0,1}$") then Exit Property
                _IsSetNOCOPY = True
                If loading Then
                  _NOCOPY = Value
                Else
                    if not _NOCOPY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOCOPY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOCOPY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Current Version"),  _
         nType("Edm.Int64"),  _
         tab("Current Version"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CURVERSION")>  _
        Public Property CURVERSION() As nullable (of int64)
            Get
                return _CURVERSION
            End Get
            Set
                if not(value is nothing) then
                  _CURVERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Current Version"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("FOLLOWUPIV")>  _
        Public Property FOLLOWUPIV() As nullable (of int64)
            Get
                return _FOLLOWUPIV
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quotation (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPIV = True
                If loading Then
                  _FOLLOWUPIV = Value
                Else
                    if not _FOLLOWUPIV = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPIV", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPIV = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFITEMS_SUBFORM() As QUERY_CPROFITEMS
            Get
                return _CPROFITEMS_SUBFORM
            End Get
            Set
                _CPROFITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFVER_SUBFORM() As QUERY_CPROFVER
            Get
                return _CPROFVER_SUBFORM
            End Get
            Set
                _CPROFVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO2_SUBFORM() As QUERY_SHIPTO2
            Get
                return _SHIPTO2_SUBFORM
            End Get
            Set
                _SHIPTO2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFORD_SUBFORM() As QUERY_CPROFORD
            Get
                return _CPROFORD_SUBFORM
            End Get
            Set
                _CPROFORD_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFONCE_SUBFORM() As QUERY_CPROFONCE
            Get
                return _CPROFONCE_SUBFORM
            End Get
            Set
                _CPROFONCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property ORDCPROF_SUBFORM() As QUERY_ORDCPROF
            Get
                return _ORDCPROF_SUBFORM
            End Get
            Set
                _ORDCPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFTEXT_SUBFORM() As QUERY_CPROFTEXT
            Get
                return _CPROFTEXT_SUBFORM
            End Get
            Set
                _CPROFTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFMODEL_SUBFORM() As QUERY_CPROFMODEL
            Get
                return _CPROFMODEL_SUBFORM
            End Get
            Set
                _CPROFMODEL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MAILINTERDISTRIBUTE_SUBFORM() As QUERY_MAILINTERDISTRIBUTE
            Get
                return _MAILINTERDISTRIBUTE_SUBFORM
            End Get
            Set
                _MAILINTERDISTRIBUTE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFCONT_SUBFORM() As QUERY_CPROFCONT
            Get
                return _CPROFCONT_SUBFORM
            End Get
            Set
                _CPROFCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGO_SUBFORM() As QUERY_CUSTOBLIGO
            Get
                return _CUSTOBLIGO_SUBFORM
            End Get
            Set
                _CUSTOBLIGO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INTERNALDIALOGTEXT_SUBFORM() As QUERY_INTERNALDIALOGTEXT
            Get
                return _INTERNALDIALOGTEXT_SUBFORM
            End Get
            Set
                _INTERNALDIALOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPDATE then
              if f then
                  jw.WriteRaw(", ""PDATE"": ")
              else
                  jw.WriteRaw("""PDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PDATE)
            end if
            if _IsSetEXPIRYDATE then
              if f then
                  jw.WriteRaw(", ""EXPIRYDATE"": ")
              else
                  jw.WriteRaw("""EXPIRYDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.EXPIRYDATE)
            end if
            if _IsSetCPROFNUM then
              if f then
                  jw.WriteRaw(", ""CPROFNUM"": ")
              else
                  jw.WriteRaw("""CPROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CPROFNUM)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCOPYFLAG then
              if f then
                  jw.WriteRaw(", ""COPYFLAG"": ")
              else
                  jw.WriteRaw("""COPYFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.COPYFLAG)
            end if
            if _IsSetMODELNAME then
              if f then
                  jw.WriteRaw(", ""MODELNAME"": ")
              else
                  jw.WriteRaw("""MODELNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MODELNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetBYPROFNUM then
              if f then
                  jw.WriteRaw(", ""BYPROFNUM"": ")
              else
                  jw.WriteRaw("""BYPROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.BYPROFNUM)
            end if
            if _IsSetPLNAME then
              if f then
                  jw.WriteRaw(", ""PLNAME"": ")
              else
                  jw.WriteRaw("""PLNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLNAME)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetEXPIRYDATE2 then
              if f then
                  jw.WriteRaw(", ""EXPIRYDATE2"": ")
              else
                  jw.WriteRaw("""EXPIRYDATE2"": ")
                  f = true
              end if
              jw.WriteValue(me.EXPIRYDATE2)
            end if
            if _IsSetDOERLOGIN then
              if f then
                  jw.WriteRaw(", ""DOERLOGIN"": ")
              else
                  jw.WriteRaw("""DOERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.DOERLOGIN)
            end if
            if _IsSetAGENTCODE then
              if f then
                  jw.WriteRaw(", ""AGENTCODE"": ")
              else
                  jw.WriteRaw("""AGENTCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.AGENTCODE)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetSUPNAME then
              if f then
                  jw.WriteRaw(", ""SUPNAME"": ")
              else
                  jw.WriteRaw("""SUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPNAME)
            end if
            if _IsSetTYPECODE then
              if f then
                  jw.WriteRaw(", ""TYPECODE"": ")
              else
                  jw.WriteRaw("""TYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPECODE)
            end if
            if _IsSetESTIMATEDPRICE then
              if f then
                  jw.WriteRaw(", ""ESTIMATEDPRICE"": ")
              else
                  jw.WriteRaw("""ESTIMATEDPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.ESTIMATEDPRICE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetLCODE then
              if f then
                  jw.WriteRaw(", ""LCODE"": ")
              else
                  jw.WriteRaw("""LCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.LCODE)
            end if
            if _IsSetLEXCH then
              if f then
                  jw.WriteRaw(", ""LEXCH"": ")
              else
                  jw.WriteRaw("""LEXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCH)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetCPAYCODE then
              if f then
                  jw.WriteRaw(", ""CPAYCODE"": ")
              else
                  jw.WriteRaw("""CPAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CPAYCODE)
            end if
            if _IsSetPROFIT then
              if f then
                  jw.WriteRaw(", ""PROFIT"": ")
              else
                  jw.WriteRaw("""PROFIT"": ")
                  f = true
              end if
              jw.WriteValue(me.PROFIT)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetCCNUM then
              if f then
                  jw.WriteRaw(", ""CCNUM"": ")
              else
                  jw.WriteRaw("""CCNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CCNUM)
            end if
            if _IsSetNOCOPY then
              if f then
                  jw.WriteRaw(", ""NOCOPY"": ")
              else
                  jw.WriteRaw("""NOCOPY"": ")
                  f = true
              end if
              jw.WriteValue(me.NOCOPY)
            end if
            if _IsSetFOLLOWUPIV then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPIV"": ")
              else
                  jw.WriteRaw("""FOLLOWUPIV"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPIV)
            end if
            if _CPROFITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFITEMS in _CPROFITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFVER in _CPROFVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFORD_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFORD_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFORD in _CPROFORD_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFORD_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFONCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFONCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFONCE in _CPROFONCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFONCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _ORDCPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", ORDCPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as ORDCPROF in _ORDCPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _ORDCPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFTEXT in _CPROFTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFMODEL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFMODEL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFMODEL in _CPROFMODEL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFMODEL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MAILINTERDISTRIBUTE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MAILINTERDISTRIBUTE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MAILINTERDISTRIBUTE in _MAILINTERDISTRIBUTE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MAILINTERDISTRIBUTE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFCONT in _CPROFCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INTERNALDIALOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INTERNALDIALOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetPDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDATE")
              .WriteAttributeString("value", me.PDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXPIRYDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXPIRYDATE")
              .WriteAttributeString("value", me.EXPIRYDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", me.CPROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetCOPYFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COPYFLAG")
              .WriteAttributeString("value", me.COPYFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetMODELNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODELNAME")
              .WriteAttributeString("value", me.MODELNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetBYPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BYPROFNUM")
              .WriteAttributeString("value", me.BYPROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPLNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLNAME")
              .WriteAttributeString("value", me.PLNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXPIRYDATE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXPIRYDATE2")
              .WriteAttributeString("value", me.EXPIRYDATE2)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDOERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOERLOGIN")
              .WriteAttributeString("value", me.DOERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetAGENTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AGENTCODE")
              .WriteAttributeString("value", me.AGENTCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetSUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPNAME")
              .WriteAttributeString("value", me.SUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPECODE")
              .WriteAttributeString("value", me.TYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetESTIMATEDPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ESTIMATEDPRICE")
              .WriteAttributeString("value", me.ESTIMATEDPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetLCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LCODE")
              .WriteAttributeString("value", me.LCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCH")
              .WriteAttributeString("value", me.LEXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPAYCODE")
              .WriteAttributeString("value", me.CPAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPROFIT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROFIT")
              .WriteAttributeString("value", me.PROFIT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetCCNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CCNUM")
              .WriteAttributeString("value", me.CCNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetNOCOPY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOCOPY")
              .WriteAttributeString("value", me.NOCOPY)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPIV then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPIV")
              .WriteAttributeString("value", me.FOLLOWUPIV)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _CPROFITEMS_SUBFORM.value.count > 0 then
              for each itm as CPROFITEMS in _CPROFITEMS_SUBFORM.Value
                itm.toXML(xw,"CPROFITEMS_SUBFORM")
              next
            end if
            if _CPROFVER_SUBFORM.value.count > 0 then
              for each itm as CPROFVER in _CPROFVER_SUBFORM.Value
                itm.toXML(xw,"CPROFVER_SUBFORM")
              next
            end if
            if _SHIPTO2_SUBFORM.value.count > 0 then
              for each itm as SHIPTO2 in _SHIPTO2_SUBFORM.Value
                itm.toXML(xw,"SHIPTO2_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _CPROFORD_SUBFORM.value.count > 0 then
              for each itm as CPROFORD in _CPROFORD_SUBFORM.Value
                itm.toXML(xw,"CPROFORD_SUBFORM")
              next
            end if
            if _CPROFONCE_SUBFORM.value.count > 0 then
              for each itm as CPROFONCE in _CPROFONCE_SUBFORM.Value
                itm.toXML(xw,"CPROFONCE_SUBFORM")
              next
            end if
            if _ORDCPROF_SUBFORM.value.count > 0 then
              for each itm as ORDCPROF in _ORDCPROF_SUBFORM.Value
                itm.toXML(xw,"ORDCPROF_SUBFORM")
              next
            end if
            if _CPROFTEXT_SUBFORM.value.count > 0 then
              for each itm as CPROFTEXT in _CPROFTEXT_SUBFORM.Value
                itm.toXML(xw,"CPROFTEXT_SUBFORM")
              next
            end if
            if _CPROFMODEL_SUBFORM.value.count > 0 then
              for each itm as CPROFMODEL in _CPROFMODEL_SUBFORM.Value
                itm.toXML(xw,"CPROFMODEL_SUBFORM")
              next
            end if
            if _MAILINTERDISTRIBUTE_SUBFORM.value.count > 0 then
              for each itm as MAILINTERDISTRIBUTE in _MAILINTERDISTRIBUTE_SUBFORM.Value
                itm.toXML(xw,"MAILINTERDISTRIBUTE_SUBFORM")
              next
            end if
            if _CPROFCONT_SUBFORM.value.count > 0 then
              for each itm as CPROFCONT in _CPROFCONT_SUBFORM.Value
                itm.toXML(xw,"CPROFCONT_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _CUSTOBLIGO_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGO in _CUSTOBLIGO_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGO_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.Value
                itm.toXML(xw,"INTERNALDIALOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROF = JsonConvert.DeserializeObject(Of CPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTNAME = .CUSTNAME
                  _CDES = .CDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _NAME = .NAME
                  _POSITIONDES = .POSITIONDES
                  _PDATE = .PDATE
                  _EXPIRYDATE = .EXPIRYDATE
                  _CPROFNUM = .CPROFNUM
                  _REFERENCE = .REFERENCE
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _MUSERLOGIN = .MUSERLOGIN
                  _CELLPHONE = .CELLPHONE
                  _STATDES = .STATDES
                  _ACTIVEFLAG = .ACTIVEFLAG
                  _COPYFLAG = .COPYFLAG
                  _MODELNAME = .MODELNAME
                  _STATUSDATE = .STATUSDATE
                  _QUANT = .QUANT
                  _BYPROFNUM = .BYPROFNUM
                  _PLNAME = .PLNAME
                  _DETAILS = .DETAILS
                  _EXPIRYDATE2 = .EXPIRYDATE2
                  _DOERLOGIN = .DOERLOGIN
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _EXTFILEFLAG = .EXTFILEFLAG
                  _TYPECODE = .TYPECODE
                  _TYPEDES = .TYPEDES
                  _ESTIMATEDPRICE = .ESTIMATEDPRICE
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TAXCODE = .TAXCODE
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _CPAYCODE = .CPAYCODE
                  _CPAYDES = .CPAYDES
                  _TOTPURCHASEPRICE = .TOTPURCHASEPRICE
                  _PROFIT = .PROFIT
                  _QPROFIT = .QPROFIT
                  _PROFITPERCENT = .PROFITPERCENT
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                  _CCNUM = .CCNUM
                  _NOCOPY = .NOCOPY
                  _CURVERSION = .CURVERSION
                  _FOLLOWUPIV = .FOLLOWUPIV
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CPROF
        
        CPROFITEMS = 0
        
        CPROFVER = 1
        
        SHIPTO2 = 2
        
        EXTFILES = 3
        
        CPROFORD = 4
        
        CPROFONCE = 5
        
        ORDCPROF = 6
        
        CPROFTEXT = 7
        
        CPROFMODEL = 8
        
        MAILINTERDISTRIBUTE = 9
        
        CPROFCONT = 10
        
        PROJLINK = 11
        
        CUSTOBLIGO = 12
        
        GENCUSTNOTES = 13
        
        DOCTODOLIST = 14
        
        DOCTODOLISTLOG = 15
        
        INTERNALDIALOGTEXT = 16
    End Enum
    
    <QueryTitle("Itemised Quotation")>  _
    Public Class QUERY_CPROFITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFITEMS)
            _Parent = nothing
            _Name = "CPROFITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Quote Total")
            .add(1, "Quoted Item - Remarks")
            .add(2, "Part Price Options")
            .add(3, "Base Product Availability")
            .add(4, "Part Availability")
            .add(5, "BOM for Quoted Item")
            .add(6, "Latest Part Sales to Customer")
            .add(7, "Additional Quotes for Part")
            .add(8, "Orders for Part")
            .add(9, "Projects/Accounts")
            .add(10, "Attributes in Set")
            .add(11, "Parts Compatible w/Set Attribs")
            .add(12, "Parts With Same Attribute Set")
            .add(13, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFITEMS)
            _Parent = Parent
            _name = "CPROFITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Quote Total")
            .add(1, "Quoted Item - Remarks")
            .add(2, "Part Price Options")
            .add(3, "Base Product Availability")
            .add(4, "Part Availability")
            .add(5, "BOM for Quoted Item")
            .add(6, "Latest Part Sales to Customer")
            .add(7, "Additional Quotes for Part")
            .add(8, "Orders for Part")
            .add(9, "Projects/Accounts")
            .add(10, "Attributes in Set")
            .add(11, "Parts Compatible w/Set Attribs")
            .add(12, "Parts With Same Attribute Set")
            .add(13, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFITEMS As CPROFITEMS In JsonConvert.DeserializeObject(Of QUERY_CPROFITEMS)(stream.ReadToEnd).Value
              With _CPROFITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMS = JsonConvert.DeserializeObject(Of CPROFITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFITEMS)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .FLAG = obj.FLAG
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .ICODE = obj.ICODE
                  .RECPRICE = obj.RECPRICE
                  .SETFLAG = obj.SETFLAG
                  .PCODE = obj.PCODE
                  .MODELNAME = obj.MODELNAME
                  .VATFLAG = obj.VATFLAG
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PURSOURCENAME = obj.PURSOURCENAME
                  .NUMPACK = obj.NUMPACK
                  .PACKCODE = obj.PACKCODE
                  .PERCENT = obj.PERCENT
                  .PERCENTPRICE = obj.PERCENTPRICE
                  .QPRICE = obj.QPRICE
                  .TOTPRICE = obj.TOTPRICE
                  .QPROFIT = obj.QPROFIT
                  .QPROFITPERCENT = obj.QPROFITPERCENT
                  .CODE = obj.CODE
                  .EXCH = obj.EXCH
                  .PLANHOURSD = obj.PLANHOURSD
                  .PLANHOURSSUM = obj.PLANHOURSSUM
                  .COMMISSION = obj.COMMISSION
                  .SUPTIME = obj.SUPTIME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .REVNAME = obj.REVNAME
                  .BARCODE = obj.BARCODE
                  .CUSTPARTNAME = obj.CUSTPARTNAME
                  .CUSTPARTBARCODE = obj.CUSTPARTBARCODE
                  .UNSPSCCODE = obj.UNSPSCCODE
                  .UNSPSCDES = obj.UNSPSCDES
                  .EXTFILENAME = obj.EXTFILENAME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .MPARTNAME = obj.MPARTNAME
                  .MPARTDES = obj.MPARTDES
                  .MMPARTNAME = obj.MMPARTNAME
                  .REMARK1 = obj.REMARK1
                  .REMARK2 = obj.REMARK2
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFITEMS as CPROFITEMS in value
              If _CPROFITEMS.Equals(trycast(obj,CPROFITEMS)) Then
                  value.remove(_CPROFITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _IsSetFLAG As Boolean = Boolean.FalseString
        
        Private _FLAG As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetPURCHASEPRICE As Boolean = Boolean.FalseString
        
        Private _PURCHASEPRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _RECPRICE As Decimal
        
        Private _IsSetSETFLAG As Boolean = Boolean.FalseString
        
        Private _SETFLAG As String
        
        Private _PCODE As String
        
        Private _MODELNAME As String
        
        Private _VATFLAG As String
        
        Private _PRSOURCENAME As String
        
        Private _PURSOURCENAME As String
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _IsSetPACKCODE As Boolean = Boolean.FalseString
        
        Private _PACKCODE As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _PERCENTPRICE As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _QPROFITPERCENT As Decimal
        
        Private _CODE As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _IsSetPLANHOURSD As Boolean = Boolean.FalseString
        
        Private _PLANHOURSD As Decimal
        
        Private _PLANHOURSSUM As Decimal
        
        Private _IsSetCOMMISSION As Boolean = Boolean.FalseString
        
        Private _COMMISSION As Decimal
        
        Private _IsSetSUPTIME As Boolean = Boolean.FalseString
        
        Private _SUPTIME As Long
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetREVNAME As Boolean = Boolean.FalseString
        
        Private _REVNAME As String
        
        Private _IsSetBARCODE As Boolean = Boolean.FalseString
        
        Private _BARCODE As String
        
        Private _IsSetCUSTPARTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTPARTNAME As String
        
        Private _IsSetCUSTPARTBARCODE As Boolean = Boolean.FalseString
        
        Private _CUSTPARTBARCODE As String
        
        Private _IsSetUNSPSCCODE As Boolean = Boolean.FalseString
        
        Private _UNSPSCCODE As String
        
        Private _UNSPSCDES As String
        
        Private _EXTFILENAME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MPARTNAME As String
        
        Private _MPARTDES As String
        
        Private _IsSetMMPARTNAME As Boolean = Boolean.FalseString
        
        Private _MMPARTNAME As String
        
        Private _IsSetREMARK1 As Boolean = Boolean.FalseString
        
        Private _REMARK1 As String
        
        Private _IsSetREMARK2 As Boolean = Boolean.FalseString
        
        Private _REMARK2 As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _CPROFTOTAL_SUBFORM As QUERY_CPROFTOTAL
        
        Private _CPROFITEMSTEXT_SUBFORM As QUERY_CPROFITEMSTEXT
        
        Private _CPROFPRICEOPTIONS_SUBFORM As QUERY_CPROFPRICEOPTIONS
        
        Private _LOGCOUNTERSMPART_SUBFORM As QUERY_LOGCOUNTERSMPART
        
        Private _LOGCOUNTERS_SUBFORM As QUERY_LOGCOUNTERS
        
        Private _PROFITREE_SUBFORM As QUERY_PROFITREE
        
        Private _LASTCUSTPARTSALES_SUBFORM As QUERY_LASTCUSTPARTSALES
        
        Private _PARTCPROF_SUBFORM As QUERY_PARTCPROF
        
        Private _PARTORDERS_SUBFORM As QUERY_PARTORDERS
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _LINEUNSPECS_SUBFORM As QUERY_LINEUNSPECS
        
        Private _LINEUNPARTS_SUBFORM As QUERY_LINEUNPARTS
        
        Private _LINEUNSPSCPARTS_SUBFORM As QUERY_LINEUNSPSCPARTS
        
        Private _CHANGES_LOG_SUBFORM As QUERY_CHANGES_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Quote Total"))
            ChildQuery.add(1, new oNavigation("Quoted Item - Remarks"))
            ChildQuery.add(2, new oNavigation("Part Price Options"))
            ChildQuery.add(3, new oNavigation("Base Product Availability"))
            ChildQuery.add(4, new oNavigation("Part Availability"))
            ChildQuery.add(5, new oNavigation("BOM for Quoted Item"))
            ChildQuery.add(6, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(7, new oNavigation("Additional Quotes for Part"))
            ChildQuery.add(8, new oNavigation("Orders for Part"))
            ChildQuery.add(9, new oNavigation("Projects/Accounts"))
            ChildQuery.add(10, new oNavigation("Attributes in Set"))
            ChildQuery.add(11, new oNavigation("Parts Compatible w/Set Attribs"))
            ChildQuery.add(12, new oNavigation("Parts With Same Attribute Set"))
            ChildQuery.add(13, new oNavigation("History of Changes"))
            _CPROFTOTAL_SUBFORM = new QUERY_CPROFTOTAL(me)
            _CPROFITEMSTEXT_SUBFORM = new QUERY_CPROFITEMSTEXT(me)
            _CPROFPRICEOPTIONS_SUBFORM = new QUERY_CPROFPRICEOPTIONS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _PROFITREE_SUBFORM = new QUERY_PROFITREE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _PARTCPROF_SUBFORM = new QUERY_PARTCPROF(me)
            _PARTORDERS_SUBFORM = new QUERY_PARTORDERS(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _LINEUNSPECS_SUBFORM = new QUERY_LINEUNSPECS(me)
            _LINEUNPARTS_SUBFORM = new QUERY_LINEUNPARTS(me)
            _LINEUNSPSCPARTS_SUBFORM = new QUERY_LINEUNSPSCPARTS(me)
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CPROFPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PROFITREE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PARTCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PARTORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINEUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_LINEUNPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_LINEUNSPSCPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Quote Total"))
            ChildQuery.add(1, new oNavigation("Quoted Item - Remarks"))
            ChildQuery.add(2, new oNavigation("Part Price Options"))
            ChildQuery.add(3, new oNavigation("Base Product Availability"))
            ChildQuery.add(4, new oNavigation("Part Availability"))
            ChildQuery.add(5, new oNavigation("BOM for Quoted Item"))
            ChildQuery.add(6, new oNavigation("Latest Part Sales to Customer"))
            ChildQuery.add(7, new oNavigation("Additional Quotes for Part"))
            ChildQuery.add(8, new oNavigation("Orders for Part"))
            ChildQuery.add(9, new oNavigation("Projects/Accounts"))
            ChildQuery.add(10, new oNavigation("Attributes in Set"))
            ChildQuery.add(11, new oNavigation("Parts Compatible w/Set Attribs"))
            ChildQuery.add(12, new oNavigation("Parts With Same Attribute Set"))
            ChildQuery.add(13, new oNavigation("History of Changes"))
            _CPROFTOTAL_SUBFORM = new QUERY_CPROFTOTAL(me)
            _CPROFITEMSTEXT_SUBFORM = new QUERY_CPROFITEMSTEXT(me)
            _CPROFPRICEOPTIONS_SUBFORM = new QUERY_CPROFPRICEOPTIONS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _PROFITREE_SUBFORM = new QUERY_PROFITREE(me)
            _LASTCUSTPARTSALES_SUBFORM = new QUERY_LASTCUSTPARTSALES(me)
            _PARTCPROF_SUBFORM = new QUERY_PARTCPROF(me)
            _PARTORDERS_SUBFORM = new QUERY_PARTORDERS(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _LINEUNSPECS_SUBFORM = new QUERY_LINEUNSPECS(me)
            _LINEUNPARTS_SUBFORM = new QUERY_LINEUNPARTS(me)
            _LINEUNSPSCPARTS_SUBFORM = new QUERY_LINEUNSPSCPARTS(me)
            _CHANGES_LOG_SUBFORM = new QUERY_CHANGES_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CPROFPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PROFITREE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_LASTCUSTPARTSALES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PARTCPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PARTORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINEUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_LINEUNPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_LINEUNSPSCPARTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Quote Total", _CPROFTOTAL_SUBFORM))
                   .add(1, new oNavigation("Quoted Item - Remarks", _CPROFITEMSTEXT_SUBFORM))
                   .add(2, new oNavigation("Part Price Options", _CPROFPRICEOPTIONS_SUBFORM))
                   .add(3, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("BOM for Quoted Item", _PROFITREE_SUBFORM))
                   .add(6, new oNavigation("Latest Part Sales to Customer", _LASTCUSTPARTSALES_SUBFORM))
                   .add(7, new oNavigation("Additional Quotes for Part", _PARTCPROF_SUBFORM))
                   .add(8, new oNavigation("Orders for Part", _PARTORDERS_SUBFORM))
                   .add(9, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(10, new oNavigation("Attributes in Set", _LINEUNSPECS_SUBFORM))
                   .add(11, new oNavigation("Parts Compatible w/Set Attribs", _LINEUNPARTS_SUBFORM))
                   .add(12, new oNavigation("Parts With Same Attribute Set", _LINEUNSPSCPARTS_SUBFORM))
                   .add(13, new oNavigation("History of Changes", _CHANGES_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFITEMS"
                else
                    return "CPROFITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(10),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Qty", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(14),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billable?", value, "^.{0,1}$") then Exit Property
                _IsSetFLAG = True
                If loading Then
                  _FLAG = Value
                Else
                    if not _FLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(20),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(22),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPURCHASEPRICE = True
                If loading Then
                  _PURCHASEPRICE = Value
                Else
                    if not _PURCHASEPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PURCHASEPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PURCHASEPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(23),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Estim'd/Rec'd Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("RECPRICE")>  _
        Public Property RECPRICE() As nullable(of decimal)
            Get
                return _RECPRICE
            End Get
            Set
                if not(value is nothing) then
                  _RECPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approve Estimate/Rec"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(25),  _
         twodBarcode("SETFLAG")>  _
        Public Property SETFLAG() As String
            Get
                return _SETFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Approve Estimate/Rec", value, "^.{0,1}$") then Exit Property
                _IsSetSETFLAG = True
                If loading Then
                  _SETFLAG = Value
                Else
                    if not _SETFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SETFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SETFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Currency (Est/Rec)"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("PCODE")>  _
        Public Property PCODE() As String
            Get
                return _PCODE
            End Get
            Set
                if not(value is nothing) then
                  _PCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if not(value is nothing) then
                  _MODELNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Taxable?"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("VATFLAG")>  _
        Public Property VATFLAG() As String
            Get
                return _VATFLAG
            End Get
            Set
                if not(value is nothing) then
                  _VATFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(161),  _
         [ReadOnly](true),  _
         twodBarcode("PURSOURCENAME")>  _
        Public Property PURSOURCENAME() As String
            Get
                return _PURSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PURSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(168),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Packing Crates (No.)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(169),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Type Code", value, "^.{0,2}$") then Exit Property
                _IsSetPACKCODE = True
                If loading Then
                  _PACKCODE = Value
                Else
                    if not _PACKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Crate Type Code"),  _
         Pos(170),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Prc After Disc"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(175),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENTPRICE")>  _
        Public Property PERCENTPRICE() As nullable(of decimal)
            Get
                return _PERCENTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _PERCENTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Incl. Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(185),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Incl. Tax", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Actual Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Crate Type Code"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(7),  _
         tab("Crate Type Code"),  _
         Pos(195),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFITPERCENT")>  _
        Public Property QPROFITPERCENT() As nullable(of decimal)
            Get
                return _QPROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Crate Type Code"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Exchange Rate"),  _
         Pos(210),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hrs/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Exchange Rate"),  _
         Pos(215),  _
         twodBarcode("PLANHOURSD")>  _
        Public Property PLANHOURSD() As nullable(of decimal)
            Get
                return _PLANHOURSD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hrs/Unit", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPLANHOURSD = True
                If loading Then
                  _PLANHOURSD = Value
                Else
                    if not _PLANHOURSD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANHOURSD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANHOURSD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Planned Hours"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Exchange Rate"),  _
         Pos(216),  _
         [ReadOnly](true),  _
         twodBarcode("PLANHOURSSUM")>  _
        Public Property PLANHOURSSUM() As nullable(of decimal)
            Get
                return _PLANHOURSSUM
            End Get
            Set
                if not(value is nothing) then
                  _PLANHOURSSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Rep's Commission (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Exchange Rate"),  _
         Pos(220),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rep's Commission (%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCOMMISSION = True
                If loading Then
                  _COMMISSION = Value
                Else
                    if not _COMMISSION = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COMMISSION", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COMMISSION = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Supply Days"),  _
         nType("Edm.Int64"),  _
         tab("Exchange Rate"),  _
         Pos(230),  _
         twodBarcode("SUPTIME")>  _
        Public Property SUPTIME() As nullable (of int64)
            Get
                return _SUPTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Supply Days", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUPTIME = True
                If loading Then
                  _SUPTIME = Value
                Else
                    if not _SUPTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Exchange Rate"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Exchange Rate"),  _
         Pos(252),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Revision No.", value, "^.{0,10}$") then Exit Property
                _IsSetREVNAME = True
                If loading Then
                  _REVNAME = Value
                Else
                    if not _REVNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REVNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REVNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(255),  _
         twodBarcode("BARCODE")>  _
        Public Property BARCODE() As String
            Get
                return _BARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetBARCODE = True
                If loading Then
                  _BARCODE = Value
                Else
                    if not _BARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cust. Part Number"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(260),  _
         twodBarcode("CUSTPARTNAME")>  _
        Public Property CUSTPARTNAME() As String
            Get
                return _CUSTPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cust. Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetCUSTPARTNAME = True
                If loading Then
                  _CUSTPARTNAME = Value
                Else
                    if not _CUSTPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Bar Code"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(261),  _
         twodBarcode("CUSTPARTBARCODE")>  _
        Public Property CUSTPARTBARCODE() As String
            Get
                return _CUSTPARTBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTPARTBARCODE = True
                If loading Then
                  _CUSTPARTBARCODE = Value
                Else
                    if not _CUSTPARTBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTPARTBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTPARTBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Code"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(262),  _
         twodBarcode("UNSPSCCODE")>  _
        Public Property UNSPSCCODE() As String
            Get
                return _UNSPSCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute Set Code", value, "^.{0,8}$") then Exit Property
                _IsSetUNSPSCCODE = True
                If loading Then
                  _UNSPSCCODE = Value
                Else
                    if not _UNSPSCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UNSPSCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UNSPSCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Desc."),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(264),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCDES")>  _
        Public Property UNSPSCDES() As String
            Get
                return _UNSPSCDES
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Picture"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(268),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Bar Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Bar Code"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(300),  _
         twodBarcode("MPARTNAME")>  _
        Public Property MPARTNAME() As String
            Get
                return _MPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetMPARTNAME = True
                If loading Then
                  _MPARTNAME = Value
                Else
                    if not _MPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(301),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTDES")>  _
        Public Property MPARTDES() As String
            Get
                return _MPARTDES
            End Get
            Set
                if not(value is nothing) then
                  _MPARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part by Base Product"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(302),  _
         twodBarcode("MMPARTNAME")>  _
        Public Property MMPARTNAME() As String
            Get
                return _MMPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part by Base Product", value, "^.{0,15}$") then Exit Property
                _IsSetMMPARTNAME = True
                If loading Then
                  _MMPARTNAME = Value
                Else
                    if not _MMPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MMPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MMPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(400),  _
         twodBarcode("REMARK1")>  _
        Public Property REMARK1() As String
            Get
                return _REMARK1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,12}$") then Exit Property
                _IsSetREMARK1 = True
                If loading Then
                  _REMARK1 = Value
                Else
                    if not _REMARK1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark 2"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(405),  _
         twodBarcode("REMARK2")>  _
        Public Property REMARK2() As String
            Get
                return _REMARK2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark 2", value, "^.{0,12}$") then Exit Property
                _IsSetREMARK2 = True
                If loading Then
                  _REMARK2 = Value
                Else
                    if not _REMARK2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Base Product No."),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFTOTAL_SUBFORM() As QUERY_CPROFTOTAL
            Get
                return _CPROFTOTAL_SUBFORM
            End Get
            Set
                _CPROFTOTAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFITEMSTEXT_SUBFORM() As QUERY_CPROFITEMSTEXT
            Get
                return _CPROFITEMSTEXT_SUBFORM
            End Get
            Set
                _CPROFITEMSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFPRICEOPTIONS_SUBFORM() As QUERY_CPROFPRICEOPTIONS
            Get
                return _CPROFPRICEOPTIONS_SUBFORM
            End Get
            Set
                _CPROFPRICEOPTIONS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERSMPART_SUBFORM() As QUERY_LOGCOUNTERSMPART
            Get
                return _LOGCOUNTERSMPART_SUBFORM
            End Get
            Set
                _LOGCOUNTERSMPART_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERS_SUBFORM() As QUERY_LOGCOUNTERS
            Get
                return _LOGCOUNTERS_SUBFORM
            End Get
            Set
                _LOGCOUNTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROFITREE_SUBFORM() As QUERY_PROFITREE
            Get
                return _PROFITREE_SUBFORM
            End Get
            Set
                _PROFITREE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTCUSTPARTSALES_SUBFORM() As QUERY_LASTCUSTPARTSALES
            Get
                return _LASTCUSTPARTSALES_SUBFORM
            End Get
            Set
                _LASTCUSTPARTSALES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTCPROF_SUBFORM() As QUERY_PARTCPROF
            Get
                return _PARTCPROF_SUBFORM
            End Get
            Set
                _PARTCPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTORDERS_SUBFORM() As QUERY_PARTORDERS
            Get
                return _PARTORDERS_SUBFORM
            End Get
            Set
                _PARTORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNSPECS_SUBFORM() As QUERY_LINEUNSPECS
            Get
                return _LINEUNSPECS_SUBFORM
            End Get
            Set
                _LINEUNSPECS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNPARTS_SUBFORM() As QUERY_LINEUNPARTS
            Get
                return _LINEUNPARTS_SUBFORM
            End Get
            Set
                _LINEUNPARTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINEUNSPSCPARTS_SUBFORM() As QUERY_LINEUNSPSCPARTS
            Get
                return _LINEUNSPSCPARTS_SUBFORM
            End Get
            Set
                _LINEUNSPSCPARTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGES_LOG_SUBFORM() As QUERY_CHANGES_LOG
            Get
                return _CHANGES_LOG_SUBFORM
            End Get
            Set
                _CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetFLAG then
              if f then
                  jw.WriteRaw(", ""FLAG"": ")
              else
                  jw.WriteRaw("""FLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.FLAG)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetPURCHASEPRICE then
              if f then
                  jw.WriteRaw(", ""PURCHASEPRICE"": ")
              else
                  jw.WriteRaw("""PURCHASEPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PURCHASEPRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetSETFLAG then
              if f then
                  jw.WriteRaw(", ""SETFLAG"": ")
              else
                  jw.WriteRaw("""SETFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.SETFLAG)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetPACKCODE then
              if f then
                  jw.WriteRaw(", ""PACKCODE"": ")
              else
                  jw.WriteRaw("""PACKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKCODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetPLANHOURSD then
              if f then
                  jw.WriteRaw(", ""PLANHOURSD"": ")
              else
                  jw.WriteRaw("""PLANHOURSD"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANHOURSD)
            end if
            if _IsSetCOMMISSION then
              if f then
                  jw.WriteRaw(", ""COMMISSION"": ")
              else
                  jw.WriteRaw("""COMMISSION"": ")
                  f = true
              end if
              jw.WriteValue(me.COMMISSION)
            end if
            if _IsSetSUPTIME then
              if f then
                  jw.WriteRaw(", ""SUPTIME"": ")
              else
                  jw.WriteRaw("""SUPTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPTIME)
            end if
            if _IsSetREVNAME then
              if f then
                  jw.WriteRaw(", ""REVNAME"": ")
              else
                  jw.WriteRaw("""REVNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.REVNAME)
            end if
            if _IsSetBARCODE then
              if f then
                  jw.WriteRaw(", ""BARCODE"": ")
              else
                  jw.WriteRaw("""BARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BARCODE)
            end if
            if _IsSetCUSTPARTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTPARTNAME"": ")
              else
                  jw.WriteRaw("""CUSTPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTNAME)
            end if
            if _IsSetCUSTPARTBARCODE then
              if f then
                  jw.WriteRaw(", ""CUSTPARTBARCODE"": ")
              else
                  jw.WriteRaw("""CUSTPARTBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTPARTBARCODE)
            end if
            if _IsSetUNSPSCCODE then
              if f then
                  jw.WriteRaw(", ""UNSPSCCODE"": ")
              else
                  jw.WriteRaw("""UNSPSCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.UNSPSCCODE)
            end if
            if _IsSetMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MPARTNAME"": ")
              else
                  jw.WriteRaw("""MPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MPARTNAME)
            end if
            if _IsSetMMPARTNAME then
              if f then
                  jw.WriteRaw(", ""MMPARTNAME"": ")
              else
                  jw.WriteRaw("""MMPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MMPARTNAME)
            end if
            if _IsSetREMARK1 then
              if f then
                  jw.WriteRaw(", ""REMARK1"": ")
              else
                  jw.WriteRaw("""REMARK1"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK1)
            end if
            if _IsSetREMARK2 then
              if f then
                  jw.WriteRaw(", ""REMARK2"": ")
              else
                  jw.WriteRaw("""REMARK2"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK2)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _CPROFTOTAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFTOTAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFTOTAL in _CPROFTOTAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFTOTAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFITEMSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFITEMSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFITEMSTEXT in _CPROFITEMSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFITEMSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFPRICEOPTIONS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFPRICEOPTIONS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFPRICEOPTIONS in _CPROFPRICEOPTIONS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFPRICEOPTIONS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERSMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERSMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROFITREE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROFITREE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROFITREE in _PROFITREE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROFITREE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTCUSTPARTSALES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTCUSTPARTSALES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTCPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTCPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTCPROF in _PARTCPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTCPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTORDERS in _PARTORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNSPECS in _LINEUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNPARTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNPARTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNPARTS in _LINEUNPARTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNPARTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINEUNSPSCPARTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINEUNSPSCPARTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINEUNSPSCPARTS in _LINEUNSPSCPARTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINEUNSPSCPARTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FLAG")
              .WriteAttributeString("value", me.FLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPURCHASEPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PURCHASEPRICE")
              .WriteAttributeString("value", me.PURCHASEPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSETFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SETFLAG")
              .WriteAttributeString("value", me.SETFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPACKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKCODE")
              .WriteAttributeString("value", me.PACKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPLANHOURSD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANHOURSD")
              .WriteAttributeString("value", me.PLANHOURSD)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCOMMISSION then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COMMISSION")
              .WriteAttributeString("value", me.COMMISSION)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetSUPTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPTIME")
              .WriteAttributeString("value", me.SUPTIME)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREVNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REVNAME")
              .WriteAttributeString("value", me.REVNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BARCODE")
              .WriteAttributeString("value", me.BARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTNAME")
              .WriteAttributeString("value", me.CUSTPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetCUSTPARTBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTPARTBARCODE")
              .WriteAttributeString("value", me.CUSTPARTBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetUNSPSCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UNSPSCCODE")
              .WriteAttributeString("value", me.UNSPSCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MPARTNAME")
              .WriteAttributeString("value", me.MPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetMMPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MMPARTNAME")
              .WriteAttributeString("value", me.MMPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetREMARK1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK1")
              .WriteAttributeString("value", me.REMARK1)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetREMARK2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK2")
              .WriteAttributeString("value", me.REMARK2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _CPROFTOTAL_SUBFORM.value.count > 0 then
              for each itm as CPROFTOTAL in _CPROFTOTAL_SUBFORM.Value
                itm.toXML(xw,"CPROFTOTAL_SUBFORM")
              next
            end if
            if _CPROFITEMSTEXT_SUBFORM.value.count > 0 then
              for each itm as CPROFITEMSTEXT in _CPROFITEMSTEXT_SUBFORM.Value
                itm.toXML(xw,"CPROFITEMSTEXT_SUBFORM")
              next
            end if
            if _CPROFPRICEOPTIONS_SUBFORM.value.count > 0 then
              for each itm as CPROFPRICEOPTIONS in _CPROFPRICEOPTIONS_SUBFORM.Value
                itm.toXML(xw,"CPROFPRICEOPTIONS_SUBFORM")
              next
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERSMPART_SUBFORM")
              next
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERS_SUBFORM")
              next
            end if
            if _PROFITREE_SUBFORM.value.count > 0 then
              for each itm as PROFITREE in _PROFITREE_SUBFORM.Value
                itm.toXML(xw,"PROFITREE_SUBFORM")
              next
            end if
            if _LASTCUSTPARTSALES_SUBFORM.value.count > 0 then
              for each itm as LASTCUSTPARTSALES in _LASTCUSTPARTSALES_SUBFORM.Value
                itm.toXML(xw,"LASTCUSTPARTSALES_SUBFORM")
              next
            end if
            if _PARTCPROF_SUBFORM.value.count > 0 then
              for each itm as PARTCPROF in _PARTCPROF_SUBFORM.Value
                itm.toXML(xw,"PARTCPROF_SUBFORM")
              next
            end if
            if _PARTORDERS_SUBFORM.value.count > 0 then
              for each itm as PARTORDERS in _PARTORDERS_SUBFORM.Value
                itm.toXML(xw,"PARTORDERS_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _LINEUNSPECS_SUBFORM.value.count > 0 then
              for each itm as LINEUNSPECS in _LINEUNSPECS_SUBFORM.Value
                itm.toXML(xw,"LINEUNSPECS_SUBFORM")
              next
            end if
            if _LINEUNPARTS_SUBFORM.value.count > 0 then
              for each itm as LINEUNPARTS in _LINEUNPARTS_SUBFORM.Value
                itm.toXML(xw,"LINEUNPARTS_SUBFORM")
              next
            end if
            if _LINEUNSPSCPARTS_SUBFORM.value.count > 0 then
              for each itm as LINEUNSPSCPARTS in _LINEUNSPSCPARTS_SUBFORM.Value
                itm.toXML(xw,"LINEUNSPSCPARTS_SUBFORM")
              next
            end if
            if _CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGES_LOG in _CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGES_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMS = JsonConvert.DeserializeObject(Of CPROFITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _FLAG = .FLAG
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _ICODE = .ICODE
                  _RECPRICE = .RECPRICE
                  _SETFLAG = .SETFLAG
                  _PCODE = .PCODE
                  _MODELNAME = .MODELNAME
                  _VATFLAG = .VATFLAG
                  _PRSOURCENAME = .PRSOURCENAME
                  _PURSOURCENAME = .PURSOURCENAME
                  _NUMPACK = .NUMPACK
                  _PACKCODE = .PACKCODE
                  _PERCENT = .PERCENT
                  _PERCENTPRICE = .PERCENTPRICE
                  _QPRICE = .QPRICE
                  _TOTPRICE = .TOTPRICE
                  _QPROFIT = .QPROFIT
                  _QPROFITPERCENT = .QPROFITPERCENT
                  _CODE = .CODE
                  _EXCH = .EXCH
                  _PLANHOURSD = .PLANHOURSD
                  _PLANHOURSSUM = .PLANHOURSSUM
                  _COMMISSION = .COMMISSION
                  _SUPTIME = .SUPTIME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _REVNAME = .REVNAME
                  _BARCODE = .BARCODE
                  _CUSTPARTNAME = .CUSTPARTNAME
                  _CUSTPARTBARCODE = .CUSTPARTBARCODE
                  _UNSPSCCODE = .UNSPSCCODE
                  _UNSPSCDES = .UNSPSCDES
                  _EXTFILENAME = .EXTFILENAME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _MPARTNAME = .MPARTNAME
                  _MPARTDES = .MPARTDES
                  _MMPARTNAME = .MMPARTNAME
                  _REMARK1 = .REMARK1
                  _REMARK2 = .REMARK2
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CPROFITEMS
        
        CPROFTOTAL = 0
        
        CPROFITEMSTEXT = 1
        
        CPROFPRICEOPTIONS = 2
        
        LOGCOUNTERSMPART = 3
        
        LOGCOUNTERS = 4
        
        PROFITREE = 5
        
        LASTCUSTPARTSALES = 6
        
        PARTCPROF = 7
        
        PARTORDERS = 8
        
        PROJLINK = 9
        
        LINEUNSPECS = 10
        
        LINEUNPARTS = 11
        
        LINEUNSPSCPARTS = 12
        
        CHANGES_LOG = 13
    End Enum
    
    <QueryTitle("Quote Total")>  _
    Public Class QUERY_CPROFTOTAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFTOTAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFTOTAL)
            _Parent = nothing
            _Name = "CPROFTOTAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFTOTAL)
            _Parent = Parent
            _name = "CPROFTOTAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFTOTAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFTOTAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFTOTAL As CPROFTOTAL In JsonConvert.DeserializeObject(Of QUERY_CPROFTOTAL)(stream.ReadToEnd).Value
              With _CPROFTOTAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFTOTAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFTOTAL = JsonConvert.DeserializeObject(Of CPROFTOTAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFTOTAL)
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .CHARTOTPRICE = obj.CHARTOTPRICE
                  .DETAILS = obj.DETAILS
                  .STATDES = obj.STATDES
                  .CPROFNUM = obj.CPROFNUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFTOTAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFTOTAL as CPROFTOTAL in value
              If _CPROFTOTAL.Equals(trycast(obj,CPROFTOTAL)) Then
                  value.remove(_CPROFTOTAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFTOTAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _CHARTOTPRICE As String
        
        Private _DETAILS As String
        
        Private _STATDES As String
        
        Private _CPROFNUM As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFTOTAL"
                else
                    return "CPROFTOTAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CPROFNUM={0}", _
                  string.format("'{0}'",CPROFNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Bef. Disc."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CHARTOTPRICE")>  _
        Public Property CHARTOTPRICE() As String
            Get
                return _CHARTOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _CHARTOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Status"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _CPROFNUM = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFTOTAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFTOTAL = JsonConvert.DeserializeObject(Of CPROFTOTAL)(e.StreamReader.ReadToEnd)
                With obj
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _CHARTOTPRICE = .CHARTOTPRICE
                  _DETAILS = .DETAILS
                  _STATDES = .STATDES
                  _CPROFNUM = .CPROFNUM
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Quoted Item - Remarks")>  _
    Public Class QUERY_CPROFITEMSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFITEMSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFITEMSTEXT)
            _Parent = nothing
            _Name = "CPROFITEMSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFITEMSTEXT)
            _Parent = Parent
            _name = "CPROFITEMSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFITEMSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFITEMSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFITEMSTEXT As CPROFITEMSTEXT In JsonConvert.DeserializeObject(Of QUERY_CPROFITEMSTEXT)(stream.ReadToEnd).Value
              With _CPROFITEMSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFITEMSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSTEXT = JsonConvert.DeserializeObject(Of CPROFITEMSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFITEMSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFITEMSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFITEMSTEXT as CPROFITEMSTEXT in value
              If _CPROFITEMSTEXT.Equals(trycast(obj,CPROFITEMSTEXT)) Then
                  value.remove(_CPROFITEMSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFITEMSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFITEMSTEXT"
                else
                    return "CPROFITEMSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFITEMSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSTEXT = JsonConvert.DeserializeObject(Of CPROFITEMSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Price Options")>  _
    Public Class QUERY_CPROFPRICEOPTIONS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFPRICEOPTIONS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFPRICEOPTIONS)
            _Parent = nothing
            _Name = "CPROFPRICEOPTIONS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFPRICEOPTIONS)
            _Parent = Parent
            _name = "CPROFPRICEOPTIONS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFPRICEOPTIONS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFPRICEOPTIONS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFPRICEOPTIONS As CPROFPRICEOPTIONS In JsonConvert.DeserializeObject(Of QUERY_CPROFPRICEOPTIONS)(stream.ReadToEnd).Value
              With _CPROFPRICEOPTIONS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFPRICEOPTIONS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFPRICEOPTIONS = JsonConvert.DeserializeObject(Of CPROFPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFPRICEOPTIONS)
                  .CPODOCNO = obj.CPODOCNO
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .CODE = obj.CODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .BASEPRICE = obj.BASEPRICE
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFPRICEOPTIONS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFPRICEOPTIONS as CPROFPRICEOPTIONS in value
              If _CPROFPRICEOPTIONS.Equals(trycast(obj,CPROFPRICEOPTIONS)) Then
                  value.remove(_CPROFPRICEOPTIONS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFPRICEOPTIONS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CPODOCNO As String
        
        Private _PRSOURCENAME As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _CODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _BASEPRICE As Decimal
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFPRICEOPTIONS"
                else
                    return "CPROFPRICEOPTIONS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2},USER={3}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CPODOCNO")>  _
        Public Property CPODOCNO() As String
            Get
                return _CPODOCNO
            End Get
            Set
                if not(value is nothing) then
                  _CPODOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc. Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Document Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Document Number"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Document Number"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Document Number"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("BASEPRICE")>  _
        Public Property BASEPRICE() As nullable(of decimal)
            Get
                return _BASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _BASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFPRICEOPTIONS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFPRICEOPTIONS = JsonConvert.DeserializeObject(Of CPROFPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With obj
                  _CPODOCNO = .CPODOCNO
                  _PRSOURCENAME = .PRSOURCENAME
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _CODE = .CODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _BASEPRICE = .BASEPRICE
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Base Product Availability")>  _
    Public Class QUERY_LOGCOUNTERSMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERSMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = nothing
            _Name = "LOGCOUNTERSMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = Parent
            _name = "LOGCOUNTERSMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERSMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERSMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERSMPART As LOGCOUNTERSMPART In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERSMPART)(stream.ReadToEnd).Value
              With _LOGCOUNTERSMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERSMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERSMPART)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERSMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERSMPART as LOGCOUNTERSMPART in value
              If _LOGCOUNTERSMPART.Equals(trycast(obj,LOGCOUNTERSMPART)) Then
                  value.remove(_LOGCOUNTERSMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERSMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAILMPART_SUBFORM As QUERY_PARTAVAILMPART
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERSMPART"
                else
                    return "LOGCOUNTERSMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAILMPART_SUBFORM() As QUERY_PARTAVAILMPART
            Get
                return _PARTAVAILMPART_SUBFORM
            End Get
            Set
                _PARTAVAILMPART_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAILMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAILMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERSMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.Value
                itm.toXML(xw,"PARTAVAILMPART_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERSMPART
        
        PARTAVAILMPART = 0
    End Enum
    
    <QueryTitle("Product Availability - Details")>  _
    Public Class QUERY_PARTAVAILMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAILMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = nothing
            _Name = "PARTAVAILMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = Parent
            _name = "PARTAVAILMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAILMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAILMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAILMPART As PARTAVAILMPART In JsonConvert.DeserializeObject(Of QUERY_PARTAVAILMPART)(stream.ReadToEnd).Value
              With _PARTAVAILMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAILMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAILMPART)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAILMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAILMPART as PARTAVAILMPART in value
              If _PARTAVAILMPART.Equals(trycast(obj,PARTAVAILMPART)) Then
                  value.remove(_PARTAVAILMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAILMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAILMPART"
                else
                    return "PARTAVAILMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAILMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Availability")>  _
    Public Class QUERY_LOGCOUNTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = nothing
            _Name = "LOGCOUNTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = Parent
            _name = "LOGCOUNTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERS As LOGCOUNTERS In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERS)(stream.ReadToEnd).Value
              With _LOGCOUNTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERS)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERS as LOGCOUNTERS in value
              If _LOGCOUNTERS.Equals(trycast(obj,LOGCOUNTERS)) Then
                  value.remove(_LOGCOUNTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAIL_SUBFORM As QUERY_PARTAVAIL
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERS"
                else
                    return "LOGCOUNTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAIL_SUBFORM() As QUERY_PARTAVAIL
            Get
                return _PARTAVAIL_SUBFORM
            End Get
            Set
                _PARTAVAIL_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAIL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAIL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.Value
                itm.toXML(xw,"PARTAVAIL_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERS
        
        PARTAVAIL = 0
    End Enum
    
    <QueryTitle("Part Availability - Details")>  _
    Public Class QUERY_PARTAVAIL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAIL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = nothing
            _Name = "PARTAVAIL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = Parent
            _name = "PARTAVAIL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAIL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAIL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAIL As PARTAVAIL In JsonConvert.DeserializeObject(Of QUERY_PARTAVAIL)(stream.ReadToEnd).Value
              With _PARTAVAIL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAIL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAIL)
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAIL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAIL as PARTAVAIL in value
              If _PARTAVAIL.Equals(trycast(obj,PARTAVAIL)) Then
                  value.remove(_PARTAVAIL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAIL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAIL"
                else
                    return "PARTAVAIL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("DueDate/On-Hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Part (ID)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAIL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("BOM for Quoted Item")>  _
    Public Class QUERY_PROFITREE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROFITREE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROFITREE)
            _Parent = nothing
            _Name = "PROFITREE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROFITREE)
            _Parent = Parent
            _name = "PROFITREE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROFITREE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROFITREE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROFITREE As PROFITREE In JsonConvert.DeserializeObject(Of QUERY_PROFITREE)(stream.ReadToEnd).Value
              With _PROFITREE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROFITREE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROFITREE = JsonConvert.DeserializeObject(Of PROFITREE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROFITREE)
                  .SONPARTNAME = obj.SONPARTNAME
                  .SONTYPE = obj.SONTYPE
                  .PDES = obj.PDES
                  .SQUANT = obj.SQUANT
                  .TOTQUANT = obj.TOTQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .CODE = obj.CODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PURSOURCENAME = obj.PURSOURCENAME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROFITREE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROFITREE as PROFITREE in value
              If _PROFITREE.Equals(trycast(obj,PROFITREE)) Then
                  value.remove(_PROFITREE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROFITREE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSONPARTNAME As Boolean = Boolean.FalseString
        
        Private _SONPARTNAME As String
        
        Private _SONTYPE As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetSQUANT As Boolean = Boolean.FalseString
        
        Private _SQUANT As Decimal
        
        Private _TOTQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetPURCHASEPRICE As Boolean = Boolean.FalseString
        
        Private _PURCHASEPRICE As Decimal
        
        Private _CODE As String
        
        Private _PRSOURCENAME As String
        
        Private _PURSOURCENAME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetKLINE2 As Boolean = Boolean.FalseString
        
        Private _KLINE2 As Long
        
        Private _LOGCOUNTERS_SUBFORM As QUERY_LOGCOUNTERS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability"))
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability"))
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROFITREE"
                else
                    return "PROFITREE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Child Part Number"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("SONPARTNAME")>  _
        Public Property SONPARTNAME() As String
            Get
                return _SONPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetSONPARTNAME = True
                If loading Then
                  _SONPARTNAME = Value
                Else
                    if not _SONPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SONPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SONPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type (P/R/O)"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SONTYPE")>  _
        Public Property SONTYPE() As String
            Get
                return _SONTYPE
            End Get
            Set
                if not(value is nothing) then
                  _SONTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Child Part Desc."),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(30),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Part Desc.", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Child Qty per Parent"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(32),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable(of decimal)
            Get
                return _SQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Child Qty per Parent", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSQUANT = True
                If loading Then
                  _SQUANT = Value
                Else
                    if not _SQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(40),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(42),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost/Unit", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPURCHASEPRICE = True
                If loading Then
                  _PURCHASEPRICE = Value
                Else
                    if not _PURCHASEPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PURCHASEPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PURCHASEPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("PURSOURCENAME")>  _
        Public Property PURSOURCENAME() As String
            Get
                return _PURSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PURSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line-BOM"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(200),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line-BOM", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE2 = True
                If loading Then
                  _KLINE2 = Value
                Else
                    if not _KLINE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERS_SUBFORM() As QUERY_LOGCOUNTERS
            Get
                return _LOGCOUNTERS_SUBFORM
            End Get
            Set
                _LOGCOUNTERS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSONPARTNAME then
              if f then
                  jw.WriteRaw(", ""SONPARTNAME"": ")
              else
                  jw.WriteRaw("""SONPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SONPARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetSQUANT then
              if f then
                  jw.WriteRaw(", ""SQUANT"": ")
              else
                  jw.WriteRaw("""SQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.SQUANT)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetPURCHASEPRICE then
              if f then
                  jw.WriteRaw(", ""PURCHASEPRICE"": ")
              else
                  jw.WriteRaw("""PURCHASEPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PURCHASEPRICE)
            end if
            if _IsSetKLINE2 then
              if f then
                  jw.WriteRaw(", ""KLINE2"": ")
              else
                  jw.WriteRaw("""KLINE2"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE2)
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROFITREE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSONPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SONPARTNAME")
              .WriteAttributeString("value", me.SONPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetSQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SQUANT")
              .WriteAttributeString("value", me.SQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetPURCHASEPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PURCHASEPRICE")
              .WriteAttributeString("value", me.PURCHASEPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetKLINE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", me.KLINE2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROFITREE = JsonConvert.DeserializeObject(Of PROFITREE)(e.StreamReader.ReadToEnd)
                With obj
                  _SONPARTNAME = .SONPARTNAME
                  _SONTYPE = .SONTYPE
                  _PDES = .PDES
                  _SQUANT = .SQUANT
                  _TOTQUANT = .TOTQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _CODE = .CODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PURSOURCENAME = .PURSOURCENAME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PROFITREE
        
        LOGCOUNTERS = 0
    End Enum
    
    <QueryTitle("Part Availability")>  _
    Public Class QUERY_LOGCOUNTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = nothing
            _Name = "LOGCOUNTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = Parent
            _name = "LOGCOUNTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERS As LOGCOUNTERS In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERS)(stream.ReadToEnd).Value
              With _LOGCOUNTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERS)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERS as LOGCOUNTERS in value
              If _LOGCOUNTERS.Equals(trycast(obj,LOGCOUNTERS)) Then
                  value.remove(_LOGCOUNTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAIL_SUBFORM As QUERY_PARTAVAIL
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERS"
                else
                    return "LOGCOUNTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAIL_SUBFORM() As QUERY_PARTAVAIL
            Get
                return _PARTAVAIL_SUBFORM
            End Get
            Set
                _PARTAVAIL_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAIL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAIL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.Value
                itm.toXML(xw,"PARTAVAIL_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERS
        
        PARTAVAIL = 0
    End Enum
    
    <QueryTitle("Part Availability - Details")>  _
    Public Class QUERY_PARTAVAIL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAIL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = nothing
            _Name = "PARTAVAIL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = Parent
            _name = "PARTAVAIL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAIL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAIL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAIL As PARTAVAIL In JsonConvert.DeserializeObject(Of QUERY_PARTAVAIL)(stream.ReadToEnd).Value
              With _PARTAVAIL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAIL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAIL)
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAIL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAIL as PARTAVAIL in value
              If _PARTAVAIL.Equals(trycast(obj,PARTAVAIL)) Then
                  value.remove(_PARTAVAIL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAIL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAIL"
                else
                    return "PARTAVAIL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("DueDate/On-Hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Part (ID)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAIL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Latest Part Sales to Customer")>  _
    Public Class QUERY_LASTCUSTPARTSALES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTCUSTPARTSALES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = nothing
            _Name = "LASTCUSTPARTSALES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTCUSTPARTSALES)
            _Parent = Parent
            _name = "LASTCUSTPARTSALES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTCUSTPARTSALES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTCUSTPARTSALES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTCUSTPARTSALES As LASTCUSTPARTSALES In JsonConvert.DeserializeObject(Of QUERY_LASTCUSTPARTSALES)(stream.ReadToEnd).Value
              With _LASTCUSTPARTSALES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTCUSTPARTSALES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTCUSTPARTSALES)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTCUSTPARTSALES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTCUSTPARTSALES as LASTCUSTPARTSALES in value
              If _LASTCUSTPARTSALES.Equals(trycast(obj,LASTCUSTPARTSALES)) Then
                  value.remove(_LASTCUSTPARTSALES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTCUSTPARTSALES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTCUSTPARTSALES"
                else
                    return "LASTCUSTPARTSALES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Overall Discount"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Overall Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Overall Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTCUSTPARTSALES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTCUSTPARTSALES = JsonConvert.DeserializeObject(Of LASTCUSTPARTSALES)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Additional Quotes for Part")>  _
    Public Class QUERY_PARTCPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTCPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTCPROF)
            _Parent = nothing
            _Name = "PARTCPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTCPROF)
            _Parent = Parent
            _name = "PARTCPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTCPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTCPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTCPROF As PARTCPROF In JsonConvert.DeserializeObject(Of QUERY_PARTCPROF)(stream.ReadToEnd).Value
              With _PARTCPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTCPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTCPROF = JsonConvert.DeserializeObject(Of PARTCPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTCPROF)
                  .CPROFNUM = obj.CPROFNUM
                  .PDATE = obj.PDATE
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .CUSTNAME = obj.CUSTNAME
                  .IPRICE = obj.IPRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .PPERCENT = obj.PPERCENT
                  .DISPRICE = obj.DISPRICE
                  .PCODE = obj.PCODE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .TOTALPRICE = obj.TOTALPRICE
                  .PTCODE = obj.PTCODE
                  .KLINE = obj.KLINE
                  .PROF = obj.PROF
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTCPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTCPROF as PARTCPROF in value
              If _PARTCPROF.Equals(trycast(obj,PARTCPROF)) Then
                  value.remove(_PARTCPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTCPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CPROFNUM As String
        
        Private _PDATE As System.DateTimeOffset
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _CUSTNAME As String
        
        Private _IPRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _PPERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _PCODE As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _TOTALPRICE As Decimal
        
        Private _PTCODE As String
        
        Private _KLINE As Long
        
        Private _PROF As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTCPROF"
                else
                    return "PARTCPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},PROF={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",PROF) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _CPROFNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Price Quotation"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Price Quotation"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(17),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price Quotation"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("IPRICE")>  _
        Public Property IPRICE() As nullable(of decimal)
            Get
                return _IPRICE
            End Get
            Set
                if not(value is nothing) then
                  _IPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Price Quotation"),  _
         Pos(47),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Quotation"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Quotation"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("PPERCENT")>  _
        Public Property PPERCENT() As nullable(of decimal)
            Get
                return _PPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Price After Discount"),  _
         Pos(56),  _
         [ReadOnly](true),  _
         twodBarcode("PCODE")>  _
        Public Property PCODE() As String
            Get
                return _PCODE
            End Get
            Set
                if not(value is nothing) then
                  _PCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Price After Discount"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Price After Discount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price of Min. Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Price After Discount"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALPRICE")>  _
        Public Property TOTALPRICE() As nullable(of decimal)
            Get
                return _TOTALPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTALPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Price After Discount"),  _
         Pos(84),  _
         [ReadOnly](true),  _
         twodBarcode("PTCODE")>  _
        Public Property PTCODE() As String
            Get
                return _PTCODE
            End Get
            Set
                if not(value is nothing) then
                  _PTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Price After Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PROF")>  _
        Public Property PROF() As nullable (of int64)
            Get
                return _PROF
            End Get
            Set
                if not(value is nothing) then
                  _PROF = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTCPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PROF")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTCPROF = JsonConvert.DeserializeObject(Of PARTCPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _CPROFNUM = .CPROFNUM
                  _PDATE = .PDATE
                  _EXPIRYDATE = .EXPIRYDATE
                  _CUSTNAME = .CUSTNAME
                  _IPRICE = .IPRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _PPERCENT = .PPERCENT
                  _DISPRICE = .DISPRICE
                  _PCODE = .PCODE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _TOTALPRICE = .TOTALPRICE
                  _PTCODE = .PTCODE
                  _KLINE = .KLINE
                  _PROF = .PROF
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Orders for Part")>  _
    Public Class QUERY_PARTORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTORDERS)
            _Parent = nothing
            _Name = "PARTORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTORDERS)
            _Parent = Parent
            _name = "PARTORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTORDERS As PARTORDERS In JsonConvert.DeserializeObject(Of QUERY_PARTORDERS)(stream.ReadToEnd).Value
              With _PARTORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTORDERS = JsonConvert.DeserializeObject(Of PARTORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .DUEDATE = obj.DUEDATE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .PPERCENT = obj.PPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .REFERENCE = obj.REFERENCE
                  .CPROFNUM = obj.CPROFNUM
                  .KLINE = obj.KLINE
                  .ORD = obj.ORD
                  .ORDI = obj.ORDI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTORDERS as PARTORDERS in value
              If _PARTORDERS.Equals(trycast(obj,PARTORDERS)) Then
                  value.remove(_PARTORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _PPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _REFERENCE As String
        
        Private _CPROFNUM As String
        
        Private _KLINE As Long
        
        Private _ORD As Long
        
        Private _ORDI As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTORDERS"
                else
                    return "PARTORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},ORD={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",ORD) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Order Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Order Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Order Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Order Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Order Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Item Currency"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Item Currency"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("PPERCENT")>  _
        Public Property PPERCENT() As nullable(of decimal)
            Get
                return _PPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Item Currency"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _REFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quote for Ord"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _CPROFNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Item Currency"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if not(value is nothing) then
                  _ORD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Line Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTORDERS = JsonConvert.DeserializeObject(Of PARTORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _DUEDATE = .DUEDATE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _PPERCENT = .PPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _REFERENCE = .REFERENCE
                  _CPROFNUM = .CPROFNUM
                  _KLINE = .KLINE
                  _ORD = .ORD
                  _ORDI = .ORDI
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attributes in Set")>  _
    Public Class QUERY_LINEUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNSPECS)
            _Parent = nothing
            _Name = "LINEUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNSPECS)
            _Parent = Parent
            _name = "LINEUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNSPECS As LINEUNSPECS In JsonConvert.DeserializeObject(Of QUERY_LINEUNSPECS)(stream.ReadToEnd).Value
              With _LINEUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPECS = JsonConvert.DeserializeObject(Of LINEUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNSPECS as LINEUNSPECS in value
              If _LINEUNSPECS.Equals(trycast(obj,LINEUNSPECS)) Then
                  value.remove(_LINEUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSPECDES As Boolean = Boolean.FalseString
        
        Private _SPECDES As String
        
        Private _IsSetVALUE As Boolean = Boolean.FalseString
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _IsSetSPEC As Boolean = Boolean.FalseString
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNSPECS"
                else
                    return "LINEUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute", value, "^.{0,38}$") then Exit Property
                _IsSetSPECDES = True
                If loading Then
                  _SPECDES = Value
                Else
                    if not _SPECDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPECDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPECDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(50),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Value", value, "^.{0,36}$") then Exit Property
                _IsSetVALUE = True
                If loading Then
                  _VALUE = Value
                Else
                    if not _VALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Spec (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSPEC = True
                If loading Then
                  _SPEC = Value
                Else
                    if not _SPEC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPEC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPEC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSPECDES then
              if f then
                  jw.WriteRaw(", ""SPECDES"": ")
              else
                  jw.WriteRaw("""SPECDES"": ")
                  f = true
              end if
              jw.WriteValue(me.SPECDES)
            end if
            if _IsSetVALUE then
              if f then
                  jw.WriteRaw(", ""VALUE"": ")
              else
                  jw.WriteRaw("""VALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.VALUE)
            end if
            if _IsSetSPEC then
              if f then
                  jw.WriteRaw(", ""SPEC"": ")
              else
                  jw.WriteRaw("""SPEC"": ")
                  f = true
              end if
              jw.WriteValue(me.SPEC)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSPECDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPECDES")
              .WriteAttributeString("value", me.SPECDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "38")
              .WriteEndElement
            end if
            if _IsSetVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALUE")
              .WriteAttributeString("value", me.VALUE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "36")
              .WriteEndElement
            end if
            if _IsSetSPEC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", me.SPEC)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPECS = JsonConvert.DeserializeObject(Of LINEUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Parts Compatible w/Set Attribs")>  _
    Public Class QUERY_LINEUNPARTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNPARTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNPARTS)
            _Parent = nothing
            _Name = "LINEUNPARTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNPARTS)
            _Parent = Parent
            _name = "LINEUNPARTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNPARTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNPARTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNPARTS As LINEUNPARTS In JsonConvert.DeserializeObject(Of QUERY_LINEUNPARTS)(stream.ReadToEnd).Value
              With _LINEUNPARTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNPARTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNPARTS = JsonConvert.DeserializeObject(Of LINEUNPARTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNPARTS)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .PART = obj.PART
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNPARTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNPARTS as LINEUNPARTS in value
              If _LINEUNPARTS.Equals(trycast(obj,LINEUNPARTS)) Then
                  value.remove(_LINEUNPARTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNPARTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetPART As Boolean = Boolean.FalseString
        
        Private _PART As Long
        
        Private _COMPAREUNSPECS_SUBFORM As QUERY_COMPAREUNSPECS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNPARTS"
                else
                    return "LINEUNPARTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PART={0}", _
                  string.format("{0}",PART) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(30),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetPART = True
                If loading Then
                  _PART = Value
                Else
                    if not _PART = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PART", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PART = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property COMPAREUNSPECS_SUBFORM() As QUERY_COMPAREUNSPECS
            Get
                return _COMPAREUNSPECS_SUBFORM
            End Get
            Set
                _COMPAREUNSPECS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPART then
              if f then
                  jw.WriteRaw(", ""PART"": ")
              else
                  jw.WriteRaw("""PART"": ")
                  f = true
              end if
              jw.WriteValue(me.PART)
            end if
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", COMPAREUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _COMPAREUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNPARTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPART then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", me.PART)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.Value
                itm.toXML(xw,"COMPAREUNSPECS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNPARTS = JsonConvert.DeserializeObject(Of LINEUNPARTS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _PART = .PART
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LINEUNPARTS
        
        COMPAREUNSPECS = 0
    End Enum
    
    <QueryTitle("Your Part Specs & Cust's Request")>  _
    Public Class QUERY_COMPAREUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of COMPAREUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = nothing
            _Name = "COMPAREUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = Parent
            _name = "COMPAREUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of COMPAREUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(COMPAREUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _COMPAREUNSPECS As COMPAREUNSPECS In JsonConvert.DeserializeObject(Of QUERY_COMPAREUNSPECS)(stream.ReadToEnd).Value
              With _COMPAREUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_COMPAREUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, COMPAREUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new COMPAREUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _COMPAREUNSPECS as COMPAREUNSPECS in value
              If _COMPAREUNSPECS.Equals(trycast(obj,COMPAREUNSPECS)) Then
                  value.remove(_COMPAREUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class COMPAREUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SPECDES As String
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "COMPAREUNSPECS"
                else
                    return "COMPAREUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if not(value is nothing) then
                  _SPECDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if not(value is nothing) then
                  _VALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if not(value is nothing) then
                  _SPEC = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "COMPAREUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Parts With Same Attribute Set")>  _
    Public Class QUERY_LINEUNSPSCPARTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINEUNSPSCPARTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINEUNSPSCPARTS)
            _Parent = nothing
            _Name = "LINEUNSPSCPARTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINEUNSPSCPARTS)
            _Parent = Parent
            _name = "LINEUNSPSCPARTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Your Part Specs & Cust's Request")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINEUNSPSCPARTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINEUNSPSCPARTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINEUNSPSCPARTS As LINEUNSPSCPARTS In JsonConvert.DeserializeObject(Of QUERY_LINEUNSPSCPARTS)(stream.ReadToEnd).Value
              With _LINEUNSPSCPARTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINEUNSPSCPARTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPSCPARTS = JsonConvert.DeserializeObject(Of LINEUNSPSCPARTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINEUNSPSCPARTS)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .STATDES = obj.STATDES
                  .PART = obj.PART
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINEUNSPSCPARTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINEUNSPSCPARTS as LINEUNSPSCPARTS in value
              If _LINEUNSPSCPARTS.Equals(trycast(obj,LINEUNSPSCPARTS)) Then
                  value.remove(_LINEUNSPSCPARTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINEUNSPSCPARTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _STATDES As String
        
        Private _PART As Long
        
        Private _COMPAREUNSPECS_SUBFORM As QUERY_COMPAREUNSPECS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Your Part Specs & Cust's Request"))
            _COMPAREUNSPECS_SUBFORM = new QUERY_COMPAREUNSPECS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_COMPAREUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Your Part Specs & Cust's Request", _COMPAREUNSPECS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINEUNSPSCPARTS"
                else
                    return "LINEUNSPSCPARTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PARTNAME={0}", _
                  string.format("'{0}'",PARTNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Status"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property COMPAREUNSPECS_SUBFORM() As QUERY_COMPAREUNSPECS
            Get
                return _COMPAREUNSPECS_SUBFORM
            End Get
            Set
                _COMPAREUNSPECS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", COMPAREUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _COMPAREUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINEUNSPSCPARTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            if _COMPAREUNSPECS_SUBFORM.value.count > 0 then
              for each itm as COMPAREUNSPECS in _COMPAREUNSPECS_SUBFORM.Value
                itm.toXML(xw,"COMPAREUNSPECS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINEUNSPSCPARTS = JsonConvert.DeserializeObject(Of LINEUNSPSCPARTS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _STATDES = .STATDES
                  _PART = .PART
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LINEUNSPSCPARTS
        
        COMPAREUNSPECS = 0
    End Enum
    
    <QueryTitle("Your Part Specs & Cust's Request")>  _
    Public Class QUERY_COMPAREUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of COMPAREUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = nothing
            _Name = "COMPAREUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of COMPAREUNSPECS)
            _Parent = Parent
            _name = "COMPAREUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of COMPAREUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(COMPAREUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _COMPAREUNSPECS As COMPAREUNSPECS In JsonConvert.DeserializeObject(Of QUERY_COMPAREUNSPECS)(stream.ReadToEnd).Value
              With _COMPAREUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_COMPAREUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, COMPAREUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .VALUE2 = obj.VALUE2
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new COMPAREUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _COMPAREUNSPECS as COMPAREUNSPECS in value
              If _COMPAREUNSPECS.Equals(trycast(obj,COMPAREUNSPECS)) Then
                  value.remove(_COMPAREUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class COMPAREUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SPECDES As String
        
        Private _VALUE As String
        
        Private _VALUE2 As String
        
        Private _MANDATORY As String
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "COMPAREUNSPECS"
                else
                    return "COMPAREUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if not(value is nothing) then
                  _SPECDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if not(value is nothing) then
                  _VALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Request"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("VALUE2")>  _
        Public Property VALUE2() As String
            Get
                return _VALUE2
            End Get
            Set
                if not(value is nothing) then
                  _VALUE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if not(value is nothing) then
                  _SPEC = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "COMPAREUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as COMPAREUNSPECS = JsonConvert.DeserializeObject(Of COMPAREUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _VALUE2 = .VALUE2
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = nothing
            _Name = "CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGES_LOG)
            _Parent = Parent
            _name = "CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGES_LOG As CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGES_LOG)(stream.ReadToEnd).Value
              With _CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGES_LOG as CHANGES_LOG in value
              If _CHANGES_LOG.Equals(trycast(obj,CHANGES_LOG)) Then
                  value.remove(_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGES_LOG"
                else
                    return "CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Form"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Log (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGES_LOG = JsonConvert.DeserializeObject(Of CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Price Quote Versions")>  _
    Public Class QUERY_CPROFVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFVER)
            _Parent = nothing
            _Name = "CPROFVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Itemised Quotation")
            .add(1, "Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFVER)
            _Parent = Parent
            _name = "CPROFVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Itemised Quotation")
            .add(1, "Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFVER As CPROFVER In JsonConvert.DeserializeObject(Of QUERY_CPROFVER)(stream.ReadToEnd).Value
              With _CPROFVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFVER = JsonConvert.DeserializeObject(Of CPROFVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFVER)
                  .VERSION = obj.VERSION
                  .DETAILS = obj.DETAILS
                  .ESTIMATEDPRICE = obj.ESTIMATEDPRICE
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TOTPURCHASEPRICE = obj.TOTPURCHASEPRICE
                  .PROFIT = obj.PROFIT
                  .QPROFIT = obj.QPROFIT
                  .PROFITPERCENT = obj.PROFITPERCENT
                  .AGENTCODE = obj.AGENTCODE
                  .AGENTNAME = obj.AGENTNAME
                  .PLNAME = obj.PLNAME
                  .TAXCODE = obj.TAXCODE
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .CPAYCODE = obj.CPAYCODE
                  .CPAYDES = obj.CPAYDES
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFVER as CPROFVER in value
              If _CPROFVER.Equals(trycast(obj,CPROFVER)) Then
                  value.remove(_CPROFVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _VERSION As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _ESTIMATEDPRICE As Decimal
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _TOTPURCHASEPRICE As Decimal
        
        Private _PROFIT As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _PROFITPERCENT As Decimal
        
        Private _AGENTCODE As String
        
        Private _AGENTNAME As String
        
        Private _PLNAME As String
        
        Private _TAXCODE As String
        
        Private _LCODE As String
        
        Private _LEXCH As Decimal
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _CPAYCODE As String
        
        Private _CPAYDES As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _CPROFITEMSVER_SUBFORM As QUERY_CPROFITEMSVER
        
        Private _CPROFVERTEXT_SUBFORM As QUERY_CPROFVERTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Itemised Quotation"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _CPROFITEMSVER_SUBFORM = new QUERY_CPROFITEMSVER(me)
            _CPROFVERTEXT_SUBFORM = new QUERY_CPROFVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFITEMSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFVERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Itemised Quotation"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _CPROFITEMSVER_SUBFORM = new QUERY_CPROFITEMSVER(me)
            _CPROFVERTEXT_SUBFORM = new QUERY_CPROFVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CPROFITEMSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFVERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Itemised Quotation", _CPROFITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFVER"
                else
                    return "CPROFVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "VERSION={0}", _
                  string.format("{0}",VERSION) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Version"),  _
         nType("Edm.Int64"),  _
         tab("Version"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("VERSION")>  _
        Public Property VERSION() As nullable (of int64)
            Get
                return _VERSION
            End Get
            Set
                if not(value is nothing) then
                  _VERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Version"),  _
         Pos(15),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,32}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Approximate Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("ESTIMATEDPRICE")>  _
        Public Property ESTIMATEDPRICE() As nullable(of decimal)
            Get
                return _ESTIMATEDPRICE
            End Get
            Set
                if not(value is nothing) then
                  _ESTIMATEDPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Version"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Curr"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPURCHASEPRICE")>  _
        Public Property TOTPURCHASEPRICE() As nullable(of decimal)
            Get
                return _TOTPURCHASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPURCHASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Markup (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("PROFIT")>  _
        Public Property PROFIT() As nullable(of decimal)
            Get
                return _PROFIT
            End Get
            Set
                if not(value is nothing) then
                  _PROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Curr"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Curr"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PROFITPERCENT")>  _
        Public Property PROFITPERCENT() As nullable(of decimal)
            Get
                return _PROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Number"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTCODE")>  _
        Public Property AGENTCODE() As String
            Get
                return _AGENTCODE
            End Get
            Set
                if not(value is nothing) then
                  _AGENTCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Rep Name"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("AGENTNAME")>  _
        Public Property AGENTNAME() As String
            Get
                return _AGENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _AGENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price List"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(135),  _
         [ReadOnly](true),  _
         twodBarcode("PLNAME")>  _
        Public Property PLNAME() As String
            Get
                return _PLNAME
            End Get
            Set
                if not(value is nothing) then
                  _PLNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(135),  _
         [ReadOnly](true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if not(value is nothing) then
                  _TAXCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if not(value is nothing) then
                  _LCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Tax Code"),  _
         Pos(145),  _
         [ReadOnly](true),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if not(value is nothing) then
                  _LEXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if not(value is nothing) then
                  _PAYCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Requested Terms Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("CPAYCODE")>  _
        Public Property CPAYCODE() As String
            Get
                return _CPAYCODE
            End Get
            Set
                if not(value is nothing) then
                  _CPAYCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Requested Terms"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("CPAYDES")>  _
        Public Property CPAYDES() As String
            Get
                return _CPAYDES
            End Get
            Set
                if not(value is nothing) then
                  _CPAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("User Name"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFITEMSVER_SUBFORM() As QUERY_CPROFITEMSVER
            Get
                return _CPROFITEMSVER_SUBFORM
            End Get
            Set
                _CPROFITEMSVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFVERTEXT_SUBFORM() As QUERY_CPROFVERTEXT
            Get
                return _CPROFVERTEXT_SUBFORM
            End Get
            Set
                _CPROFVERTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _CPROFITEMSVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFITEMSVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFITEMSVER in _CPROFITEMSVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFITEMSVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFVERTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFVERTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFVERTEXT in _CPROFVERTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFVERTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "VERSION")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _CPROFITEMSVER_SUBFORM.value.count > 0 then
              for each itm as CPROFITEMSVER in _CPROFITEMSVER_SUBFORM.Value
                itm.toXML(xw,"CPROFITEMSVER_SUBFORM")
              next
            end if
            if _CPROFVERTEXT_SUBFORM.value.count > 0 then
              for each itm as CPROFVERTEXT in _CPROFVERTEXT_SUBFORM.Value
                itm.toXML(xw,"CPROFVERTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFVER = JsonConvert.DeserializeObject(Of CPROFVER)(e.StreamReader.ReadToEnd)
                With obj
                  _VERSION = .VERSION
                  _DETAILS = .DETAILS
                  _ESTIMATEDPRICE = .ESTIMATEDPRICE
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TOTPURCHASEPRICE = .TOTPURCHASEPRICE
                  _PROFIT = .PROFIT
                  _QPROFIT = .QPROFIT
                  _PROFITPERCENT = .PROFITPERCENT
                  _AGENTCODE = .AGENTCODE
                  _AGENTNAME = .AGENTNAME
                  _PLNAME = .PLNAME
                  _TAXCODE = .TAXCODE
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _CPAYCODE = .CPAYCODE
                  _CPAYDES = .CPAYDES
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CPROFVER
        
        CPROFITEMSVER = 0
        
        CPROFVERTEXT = 1
    End Enum
    
    <QueryTitle("Itemised Quotation")>  _
    Public Class QUERY_CPROFITEMSVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFITEMSVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFITEMSVER)
            _Parent = nothing
            _Name = "CPROFITEMSVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "BOM for Quote Version Item")
            .add(1, "Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFITEMSVER)
            _Parent = Parent
            _name = "CPROFITEMSVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "BOM for Quote Version Item")
            .add(1, "Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFITEMSVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFITEMSVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFITEMSVER As CPROFITEMSVER In JsonConvert.DeserializeObject(Of QUERY_CPROFITEMSVER)(stream.ReadToEnd).Value
              With _CPROFITEMSVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFITEMSVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSVER = JsonConvert.DeserializeObject(Of CPROFITEMSVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFITEMSVER)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .FLAG = obj.FLAG
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .ICODE = obj.ICODE
                  .RECPRICE = obj.RECPRICE
                  .SETFLAG = obj.SETFLAG
                  .PCODE = obj.PCODE
                  .MODELNAME = obj.MODELNAME
                  .VATFLAG = obj.VATFLAG
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PURSOURCENAME = obj.PURSOURCENAME
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .QPROFIT = obj.QPROFIT
                  .QPROFITPERCENT = obj.QPROFITPERCENT
                  .CODE = obj.CODE
                  .EXCH = obj.EXCH
                  .PLANHOURSD = obj.PLANHOURSD
                  .PLANHOURSSUM = obj.PLANHOURSSUM
                  .COMMISSION = obj.COMMISSION
                  .SUPTIME = obj.SUPTIME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .REVNAME = obj.REVNAME
                  .BARCODE = obj.BARCODE
                  .CUSTPARTNAME = obj.CUSTPARTNAME
                  .CUSTPARTBARCODE = obj.CUSTPARTBARCODE
                  .UNSPSCCODE = obj.UNSPSCCODE
                  .UNSPSCDES = obj.UNSPSCDES
                  .EXTFILENAME = obj.EXTFILENAME
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .MPARTNAME = obj.MPARTNAME
                  .MPARTDES = obj.MPARTDES
                  .MMPARTNAME = obj.MMPARTNAME
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFITEMSVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFITEMSVER as CPROFITEMSVER in value
              If _CPROFITEMSVER.Equals(trycast(obj,CPROFITEMSVER)) Then
                  value.remove(_CPROFITEMSVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFITEMSVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _FLAG As String
        
        Private _PRICE As Decimal
        
        Private _PURCHASEPRICE As Decimal
        
        Private _ICODE As String
        
        Private _RECPRICE As Decimal
        
        Private _SETFLAG As String
        
        Private _PCODE As String
        
        Private _MODELNAME As String
        
        Private _VATFLAG As String
        
        Private _PRSOURCENAME As String
        
        Private _PURSOURCENAME As String
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _QPROFIT As Decimal
        
        Private _QPROFITPERCENT As Decimal
        
        Private _CODE As String
        
        Private _EXCH As Decimal
        
        Private _PLANHOURSD As Decimal
        
        Private _PLANHOURSSUM As Decimal
        
        Private _COMMISSION As Decimal
        
        Private _SUPTIME As Long
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _REVNAME As String
        
        Private _BARCODE As String
        
        Private _CUSTPARTNAME As String
        
        Private _CUSTPARTBARCODE As String
        
        Private _UNSPSCCODE As String
        
        Private _UNSPSCDES As String
        
        Private _EXTFILENAME As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _MPARTNAME As String
        
        Private _MPARTDES As String
        
        Private _MMPARTNAME As String
        
        Private _KLINE As Long
        
        Private _PROFITREEVER_SUBFORM As QUERY_PROFITREEVER
        
        Private _CPROFITEMSVERTEXT_SUBFORM As QUERY_CPROFITEMSVERTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("BOM for Quote Version Item"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _PROFITREEVER_SUBFORM = new QUERY_PROFITREEVER(me)
            _CPROFITEMSVERTEXT_SUBFORM = new QUERY_CPROFITEMSVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROFITREEVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("BOM for Quote Version Item", _PROFITREEVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFITEMSVERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFITEMSVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("BOM for Quote Version Item", _PROFITREEVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFITEMSVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("BOM for Quote Version Item"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _PROFITREEVER_SUBFORM = new QUERY_PROFITREEVER(me)
            _CPROFITEMSVERTEXT_SUBFORM = new QUERY_CPROFITEMSVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PROFITREEVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("BOM for Quote Version Item", _PROFITREEVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFITEMSVERTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CPROFITEMSVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("BOM for Quote Version Item", _PROFITREEVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _CPROFITEMSVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFITEMSVER"
                else
                    return "CPROFITEMSVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billable?"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("FLAG")>  _
        Public Property FLAG() As String
            Get
                return _FLAG
            End Get
            Set
                if not(value is nothing) then
                  _FLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _PURCHASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(23),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Estim'd/Rec'd Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("RECPRICE")>  _
        Public Property RECPRICE() As nullable(of decimal)
            Get
                return _RECPRICE
            End Get
            Set
                if not(value is nothing) then
                  _RECPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approve Estimate/Rec"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SETFLAG")>  _
        Public Property SETFLAG() As String
            Get
                return _SETFLAG
            End Get
            Set
                if not(value is nothing) then
                  _SETFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("PCODE")>  _
        Public Property PCODE() As String
            Get
                return _PCODE
            End Get
            Set
                if not(value is nothing) then
                  _PCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if not(value is nothing) then
                  _MODELNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Taxable?"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("VATFLAG")>  _
        Public Property VATFLAG() As String
            Get
                return _VATFLAG
            End Get
            Set
                if not(value is nothing) then
                  _VATFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(161),  _
         [ReadOnly](true),  _
         twodBarcode("PURSOURCENAME")>  _
        Public Property PURSOURCENAME() As String
            Get
                return _PURSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PURSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Estim'd/Rec'd Price"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Extended Price"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Actual Profit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Extended Price"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFIT")>  _
        Public Property QPROFIT() As nullable(of decimal)
            Get
                return _QPROFIT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(7),  _
         tab("Extended Price"),  _
         Pos(195),  _
         [ReadOnly](true),  _
         twodBarcode("QPROFITPERCENT")>  _
        Public Property QPROFITPERCENT() As nullable(of decimal)
            Get
                return _QPROFITPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _QPROFITPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Extended Price"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Extended Price"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if not(value is nothing) then
                  _EXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hrs/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Extended Price"),  _
         Pos(215),  _
         [ReadOnly](true),  _
         twodBarcode("PLANHOURSD")>  _
        Public Property PLANHOURSD() As nullable(of decimal)
            Get
                return _PLANHOURSD
            End Get
            Set
                if not(value is nothing) then
                  _PLANHOURSD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Planned Hours"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Extended Price"),  _
         Pos(216),  _
         [ReadOnly](true),  _
         twodBarcode("PLANHOURSSUM")>  _
        Public Property PLANHOURSSUM() As nullable(of decimal)
            Get
                return _PLANHOURSSUM
            End Get
            Set
                if not(value is nothing) then
                  _PLANHOURSSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Rep's Commission (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Extended Price"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("COMMISSION")>  _
        Public Property COMMISSION() As nullable(of decimal)
            Get
                return _COMMISSION
            End Get
            Set
                if not(value is nothing) then
                  _COMMISSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Supply Days"),  _
         nType("Edm.Int64"),  _
         tab("Supply Days"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("SUPTIME")>  _
        Public Property SUPTIME() As nullable (of int64)
            Get
                return _SUPTIME
            End Get
            Set
                if not(value is nothing) then
                  _SUPTIME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Supply Days"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(252),  _
         [ReadOnly](true),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if not(value is nothing) then
                  _REVNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code"),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(255),  _
         [ReadOnly](true),  _
         twodBarcode("BARCODE")>  _
        Public Property BARCODE() As String
            Get
                return _BARCODE
            End Get
            Set
                if not(value is nothing) then
                  _BARCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust. Part Number"),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTPARTNAME")>  _
        Public Property CUSTPARTNAME() As String
            Get
                return _CUSTPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Bar Code"),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(261),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTPARTBARCODE")>  _
        Public Property CUSTPARTBARCODE() As String
            Get
                return _CUSTPARTBARCODE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTPARTBARCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Code"),  _
         nType("Edm.String"),  _
         tab("Supply Days"),  _
         Pos(262),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCCODE")>  _
        Public Property UNSPSCCODE() As String
            Get
                return _UNSPSCCODE
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Desc."),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(264),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCDES")>  _
        Public Property UNSPSCDES() As String
            Get
                return _UNSPSCDES
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Picture"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(268),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Attribute Set Desc."),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTNAME")>  _
        Public Property MPARTNAME() As String
            Get
                return _MPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _MPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(301),  _
         [ReadOnly](true),  _
         twodBarcode("MPARTDES")>  _
        Public Property MPARTDES() As String
            Get
                return _MPARTDES
            End Get
            Set
                if not(value is nothing) then
                  _MPARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part by Base Product"),  _
         nType("Edm.String"),  _
         tab("Attribute Set Desc."),  _
         Pos(302),  _
         [ReadOnly](true),  _
         twodBarcode("MMPARTNAME")>  _
        Public Property MMPARTNAME() As String
            Get
                return _MMPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _MMPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Attribute Set Desc."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROFITREEVER_SUBFORM() As QUERY_PROFITREEVER
            Get
                return _PROFITREEVER_SUBFORM
            End Get
            Set
                _PROFITREEVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CPROFITEMSVERTEXT_SUBFORM() As QUERY_CPROFITEMSVERTEXT
            Get
                return _CPROFITEMSVERTEXT_SUBFORM
            End Get
            Set
                _CPROFITEMSVERTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _PROFITREEVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROFITREEVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROFITREEVER in _PROFITREEVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROFITREEVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CPROFITEMSVERTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CPROFITEMSVERTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CPROFITEMSVERTEXT in _CPROFITEMSVERTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CPROFITEMSVERTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFITEMSVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _PROFITREEVER_SUBFORM.value.count > 0 then
              for each itm as PROFITREEVER in _PROFITREEVER_SUBFORM.Value
                itm.toXML(xw,"PROFITREEVER_SUBFORM")
              next
            end if
            if _CPROFITEMSVERTEXT_SUBFORM.value.count > 0 then
              for each itm as CPROFITEMSVERTEXT in _CPROFITEMSVERTEXT_SUBFORM.Value
                itm.toXML(xw,"CPROFITEMSVERTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSVER = JsonConvert.DeserializeObject(Of CPROFITEMSVER)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _FLAG = .FLAG
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _ICODE = .ICODE
                  _RECPRICE = .RECPRICE
                  _SETFLAG = .SETFLAG
                  _PCODE = .PCODE
                  _MODELNAME = .MODELNAME
                  _VATFLAG = .VATFLAG
                  _PRSOURCENAME = .PRSOURCENAME
                  _PURSOURCENAME = .PURSOURCENAME
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _QPROFIT = .QPROFIT
                  _QPROFITPERCENT = .QPROFITPERCENT
                  _CODE = .CODE
                  _EXCH = .EXCH
                  _PLANHOURSD = .PLANHOURSD
                  _PLANHOURSSUM = .PLANHOURSSUM
                  _COMMISSION = .COMMISSION
                  _SUPTIME = .SUPTIME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _REVNAME = .REVNAME
                  _BARCODE = .BARCODE
                  _CUSTPARTNAME = .CUSTPARTNAME
                  _CUSTPARTBARCODE = .CUSTPARTBARCODE
                  _UNSPSCCODE = .UNSPSCCODE
                  _UNSPSCDES = .UNSPSCDES
                  _EXTFILENAME = .EXTFILENAME
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _MPARTNAME = .MPARTNAME
                  _MPARTDES = .MPARTDES
                  _MMPARTNAME = .MMPARTNAME
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CPROFITEMSVER
        
        PROFITREEVER = 0
        
        CPROFITEMSVERTEXT = 1
    End Enum
    
    <QueryTitle("BOM for Quote Version Item")>  _
    Public Class QUERY_PROFITREEVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROFITREEVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROFITREEVER)
            _Parent = nothing
            _Name = "PROFITREEVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROFITREEVER)
            _Parent = Parent
            _name = "PROFITREEVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROFITREEVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROFITREEVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROFITREEVER As PROFITREEVER In JsonConvert.DeserializeObject(Of QUERY_PROFITREEVER)(stream.ReadToEnd).Value
              With _PROFITREEVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROFITREEVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROFITREEVER = JsonConvert.DeserializeObject(Of PROFITREEVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROFITREEVER)
                  .SONPARTNAME = obj.SONPARTNAME
                  .SONTYPE = obj.SONTYPE
                  .PDES = obj.PDES
                  .SQUANT = obj.SQUANT
                  .TOTQUANT = obj.TOTQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .PURCHASEPRICE = obj.PURCHASEPRICE
                  .CODE = obj.CODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PURSOURCENAME = obj.PURSOURCENAME
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROFITREEVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROFITREEVER as PROFITREEVER in value
              If _PROFITREEVER.Equals(trycast(obj,PROFITREEVER)) Then
                  value.remove(_PROFITREEVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROFITREEVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _SONPARTNAME As String
        
        Private _SONTYPE As String
        
        Private _PDES As String
        
        Private _SQUANT As Decimal
        
        Private _TOTQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PURCHASEPRICE As Decimal
        
        Private _CODE As String
        
        Private _PRSOURCENAME As String
        
        Private _PURSOURCENAME As String
        
        Private _KLINE2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROFITREEVER"
                else
                    return "PROFITREEVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Child Part Number"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Mandatory(true),  _
         twodBarcode("SONPARTNAME")>  _
        Public Property SONPARTNAME() As String
            Get
                return _SONPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _SONPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (P/R/O)"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SONTYPE")>  _
        Public Property SONTYPE() As String
            Get
                return _SONTYPE
            End Get
            Set
                if not(value is nothing) then
                  _SONTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Child Qty per Parent"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable(of decimal)
            Get
                return _SQUANT
            End Get
            Set
                if not(value is nothing) then
                  _SQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Child Part Number"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost/Unit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Child Part Number"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("PURCHASEPRICE")>  _
        Public Property PURCHASEPRICE() As nullable(of decimal)
            Get
                return _PURCHASEPRICE
            End Get
            Set
                if not(value is nothing) then
                  _PURCHASEPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cost Source"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("PURSOURCENAME")>  _
        Public Property PURSOURCENAME() As String
            Get
                return _PURSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PURSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line-BOM"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if not(value is nothing) then
                  _KLINE2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROFITREEVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROFITREEVER = JsonConvert.DeserializeObject(Of PROFITREEVER)(e.StreamReader.ReadToEnd)
                With obj
                  _SONPARTNAME = .SONPARTNAME
                  _SONTYPE = .SONTYPE
                  _PDES = .PDES
                  _SQUANT = .SQUANT
                  _TOTQUANT = .TOTQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _PURCHASEPRICE = .PURCHASEPRICE
                  _CODE = .CODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PURSOURCENAME = .PURSOURCENAME
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_CPROFITEMSVERTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFITEMSVERTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFITEMSVERTEXT)
            _Parent = nothing
            _Name = "CPROFITEMSVERTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFITEMSVERTEXT)
            _Parent = Parent
            _name = "CPROFITEMSVERTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFITEMSVERTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFITEMSVERTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFITEMSVERTEXT As CPROFITEMSVERTEXT In JsonConvert.DeserializeObject(Of QUERY_CPROFITEMSVERTEXT)(stream.ReadToEnd).Value
              With _CPROFITEMSVERTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFITEMSVERTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSVERTEXT = JsonConvert.DeserializeObject(Of CPROFITEMSVERTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFITEMSVERTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFITEMSVERTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFITEMSVERTEXT as CPROFITEMSVERTEXT in value
              If _CPROFITEMSVERTEXT.Equals(trycast(obj,CPROFITEMSVERTEXT)) Then
                  value.remove(_CPROFITEMSVERTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFITEMSVERTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TEXT As String
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFITEMSVERTEXT"
                else
                    return "CPROFITEMSVERTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if not(value is nothing) then
                  _TEXTLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFITEMSVERTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFITEMSVERTEXT = JsonConvert.DeserializeObject(Of CPROFITEMSVERTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_CPROFVERTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFVERTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFVERTEXT)
            _Parent = nothing
            _Name = "CPROFVERTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFVERTEXT)
            _Parent = Parent
            _name = "CPROFVERTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFVERTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFVERTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFVERTEXT As CPROFVERTEXT In JsonConvert.DeserializeObject(Of QUERY_CPROFVERTEXT)(stream.ReadToEnd).Value
              With _CPROFVERTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFVERTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFVERTEXT = JsonConvert.DeserializeObject(Of CPROFVERTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFVERTEXT)
                  .TEXT = obj.TEXT
                  .KLINE = obj.KLINE
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFVERTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFVERTEXT as CPROFVERTEXT in value
              If _CPROFVERTEXT.Equals(trycast(obj,CPROFVERTEXT)) Then
                  value.remove(_CPROFVERTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFVERTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TEXT As String
        
        Private _KLINE As Long
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFVERTEXT"
                else
                    return "CPROFVERTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},TEXTLINE={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if not(value is nothing) then
                  _TEXTLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFVERTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFVERTEXT = JsonConvert.DeserializeObject(Of CPROFVERTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _KLINE = .KLINE
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = nothing
            _Name = "SHIPTO2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO2)
            _Parent = Parent
            _name = "SHIPTO2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO2 As SHIPTO2 In JsonConvert.DeserializeObject(Of QUERY_SHIPTO2)(stream.ReadToEnd).Value
              With _SHIPTO2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO2)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .TAXCODE = obj.TAXCODE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO2 as SHIPTO2 in value
              If _SHIPTO2.Equals(trycast(obj,SHIPTO2)) Then
                  value.remove(_SHIPTO2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO2"
                else
                    return "SHIPTO2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(160),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO2 = JsonConvert.DeserializeObject(Of SHIPTO2)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                  _TAXCODE = .TAXCODE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Orders Based on Quote")>  _
    Public Class QUERY_CPROFORD
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFORD)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFORD)
            _Parent = nothing
            _Name = "CPROFORD"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFORD)
            _Parent = Parent
            _name = "CPROFORD_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFORD)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFORD)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFORD As CPROFORD In JsonConvert.DeserializeObject(Of QUERY_CPROFORD)(stream.ReadToEnd).Value
              With _CPROFORD
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFORD)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFORD = JsonConvert.DeserializeObject(Of CPROFORD)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFORD)
                  .ORDNAME = obj.ORDNAME
                  .CURDATE = obj.CURDATE
                  .REFERENCE = obj.REFERENCE
                  .DETAILS = obj.DETAILS
                  .USERLOGIN = obj.USERLOGIN
                  .ORDSTATUSDES = obj.ORDSTATUSDES
                  .ORD = obj.ORD
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFORD(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFORD as CPROFORD in value
              If _CPROFORD.Equals(trycast(obj,CPROFORD)) Then
                  value.remove(_CPROFORD)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFORD
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORDNAME As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _REFERENCE As String
        
        Private _DETAILS As String
        
        Private _USERLOGIN As String
        
        Private _ORDSTATUSDES As String
        
        Private _ORD As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFORD"
                else
                    return "CPROFORD_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if not(value is nothing) then
                  _REFERENCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Status"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("ORDSTATUSDES")>  _
        Public Property ORDSTATUSDES() As String
            Get
                return _ORDSTATUSDES
            End Get
            Set
                if not(value is nothing) then
                  _ORDSTATUSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if not(value is nothing) then
                  _ORD = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFORD")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFORD = JsonConvert.DeserializeObject(Of CPROFORD)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _CURDATE = .CURDATE
                  _REFERENCE = .REFERENCE
                  _DETAILS = .DETAILS
                  _USERLOGIN = .USERLOGIN
                  _ORDSTATUSDES = .ORDSTATUSDES
                  _ORD = .ORD
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Costs Specific to This Job")>  _
    Public Class QUERY_CPROFONCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFONCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFONCE)
            _Parent = nothing
            _Name = "CPROFONCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFONCE)
            _Parent = Parent
            _name = "CPROFONCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFONCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFONCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFONCE As CPROFONCE In JsonConvert.DeserializeObject(Of QUERY_CPROFONCE)(stream.ReadToEnd).Value
              With _CPROFONCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFONCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFONCE = JsonConvert.DeserializeObject(Of CPROFONCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFONCE)
                  .FORPARTNAME = obj.FORPARTNAME
                  .PARTNAME = obj.PARTNAME
                  .ACTNAME = obj.ACTNAME
                  .COSTDES = obj.COSTDES
                  .COST = obj.COST
                  .CODE = obj.CODE
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFONCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFONCE as CPROFONCE in value
              If _CPROFONCE.Equals(trycast(obj,CPROFONCE)) Then
                  value.remove(_CPROFONCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFONCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetFORPARTNAME As Boolean = Boolean.FalseString
        
        Private _FORPARTNAME As String
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetACTNAME As Boolean = Boolean.FalseString
        
        Private _ACTNAME As String
        
        Private _IsSetCOSTDES As Boolean = Boolean.FalseString
        
        Private _COSTDES As String
        
        Private _IsSetCOST As Boolean = Boolean.FalseString
        
        Private _COST As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFONCE"
                else
                    return "CPROFONCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("For Part"),  _
         nType("Edm.String"),  _
         tab("For Part"),  _
         Pos(10),  _
         twodBarcode("FORPARTNAME")>  _
        Public Property FORPARTNAME() As String
            Get
                return _FORPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("For Part", value, "^.{0,15}$") then Exit Property
                _IsSetFORPARTNAME = True
                If loading Then
                  _FORPARTNAME = Value
                Else
                    if not _FORPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FORPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FORPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Part"),  _
         nType("Edm.String"),  _
         tab("For Part"),  _
         Pos(20),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Part", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Operation"),  _
         nType("Edm.String"),  _
         tab("For Part"),  _
         Pos(30),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Operation", value, "^.{0,16}$") then Exit Property
                _IsSetACTNAME = True
                If loading Then
                  _ACTNAME = Value
                Else
                    if not _ACTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type of Cost"),  _
         nType("Edm.String"),  _
         tab("For Part"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("COSTDES")>  _
        Public Property COSTDES() As String
            Get
                return _COSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Type of Cost", value, "^.{0,32}$") then Exit Property
                _IsSetCOSTDES = True
                If loading Then
                  _COSTDES = Value
                Else
                    if not _COSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cost"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("For Part"),  _
         Pos(50),  _
         Mandatory(true),  _
         twodBarcode("COST")>  _
        Public Property COST() As nullable(of decimal)
            Get
                return _COST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cost", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetCOST = True
                If loading Then
                  _COST = Value
                Else
                    if not _COST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("For Part"),  _
         Pos(60),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("For Part"),  _
         Pos(90),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetFORPARTNAME then
              if f then
                  jw.WriteRaw(", ""FORPARTNAME"": ")
              else
                  jw.WriteRaw("""FORPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.FORPARTNAME)
            end if
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetACTNAME then
              if f then
                  jw.WriteRaw(", ""ACTNAME"": ")
              else
                  jw.WriteRaw("""ACTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACTNAME)
            end if
            if _IsSetCOSTDES then
              if f then
                  jw.WriteRaw(", ""COSTDES"": ")
              else
                  jw.WriteRaw("""COSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTDES)
            end if
            if _IsSetCOST then
              if f then
                  jw.WriteRaw(", ""COST"": ")
              else
                  jw.WriteRaw("""COST"": ")
                  f = true
              end if
              jw.WriteValue(me.COST)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFONCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetFORPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FORPARTNAME")
              .WriteAttributeString("value", me.FORPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetACTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACTNAME")
              .WriteAttributeString("value", me.ACTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCOSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTDES")
              .WriteAttributeString("value", me.COSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetCOST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COST")
              .WriteAttributeString("value", me.COST)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFONCE = JsonConvert.DeserializeObject(Of CPROFONCE)(e.StreamReader.ReadToEnd)
                With obj
                  _FORPARTNAME = .FORPARTNAME
                  _PARTNAME = .PARTNAME
                  _ACTNAME = .ACTNAME
                  _COSTDES = .COSTDES
                  _COST = .COST
                  _CODE = .CODE
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Active Price Quotations")>  _
    Public Class QUERY_ORDCPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of ORDCPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of ORDCPROF)
            _Parent = nothing
            _Name = "ORDCPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of ORDCPROF)
            _Parent = Parent
            _name = "ORDCPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of ORDCPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(ORDCPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _ORDCPROF As ORDCPROF In JsonConvert.DeserializeObject(Of QUERY_ORDCPROF)(stream.ReadToEnd).Value
              With _ORDCPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_ORDCPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCPROF = JsonConvert.DeserializeObject(Of ORDCPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, ORDCPROF)
                  .PDATE = obj.PDATE
                  .CPROFNUM = obj.CPROFNUM
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .COPYFLAG = obj.COPYFLAG
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .STATDES = obj.STATDES
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PROF = obj.PROF
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new ORDCPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _ORDCPROF as ORDCPROF in value
              If _ORDCPROF.Equals(trycast(obj,ORDCPROF)) Then
                  value.remove(_ORDCPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class ORDCPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PDATE As System.DateTimeOffset
        
        Private _CPROFNUM As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _COPYFLAG As String
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _STATDES As String
        
        Private _LCODE As String
        
        Private _LEXCH As Decimal
        
        Private _PROF As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "ORDCPROF"
                else
                    return "ORDCPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CPROFNUM={0}", _
                  string.format("'{0}'",CPROFNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Quote Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Quote Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _CPROFNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Quote Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Copy All to Order?"),  _
         nType("Edm.String"),  _
         tab("Quote Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("COPYFLAG")>  _
        Public Property COPYFLAG() As String
            Get
                return _COPYFLAG
            End Get
            Set
                if not(value is nothing) then
                  _COPYFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Quote Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Quote Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if not(value is nothing) then
                  _LCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if not(value is nothing) then
                  _LEXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PROF")>  _
        Public Property PROF() As nullable (of int64)
            Get
                return _PROF
            End Get
            Set
                if not(value is nothing) then
                  _PROF = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "ORDCPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as ORDCPROF = JsonConvert.DeserializeObject(Of ORDCPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _PDATE = .PDATE
                  _CPROFNUM = .CPROFNUM
                  _EXPIRYDATE = .EXPIRYDATE
                  _COPYFLAG = .COPYFLAG
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _STATDES = .STATDES
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PROF = .PROF
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Price Quotations - Remarks")>  _
    Public Class QUERY_CPROFTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFTEXT)
            _Parent = nothing
            _Name = "CPROFTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFTEXT)
            _Parent = Parent
            _name = "CPROFTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFTEXT As CPROFTEXT In JsonConvert.DeserializeObject(Of QUERY_CPROFTEXT)(stream.ReadToEnd).Value
              With _CPROFTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFTEXT = JsonConvert.DeserializeObject(Of CPROFTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFTEXT as CPROFTEXT in value
              If _CPROFTEXT.Equals(trycast(obj,CPROFTEXT)) Then
                  value.remove(_CPROFTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFTEXT"
                else
                    return "CPROFTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFTEXT = JsonConvert.DeserializeObject(Of CPROFTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Product Bundles")>  _
    Public Class QUERY_CPROFMODEL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFMODEL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFMODEL)
            _Parent = nothing
            _Name = "CPROFMODEL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFMODEL)
            _Parent = Parent
            _name = "CPROFMODEL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFMODEL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFMODEL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFMODEL As CPROFMODEL In JsonConvert.DeserializeObject(Of QUERY_CPROFMODEL)(stream.ReadToEnd).Value
              With _CPROFMODEL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFMODEL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFMODEL = JsonConvert.DeserializeObject(Of CPROFMODEL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFMODEL)
                  .MODELNAME = obj.MODELNAME
                  .MODELDES = obj.MODELDES
                  .QUANT = obj.QUANT
                  .DUEDATE = obj.DUEDATE
                  .MODEL = obj.MODEL
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFMODEL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFMODEL as CPROFMODEL in value
              If _CPROFMODEL.Equals(trycast(obj,CPROFMODEL)) Then
                  value.remove(_CPROFMODEL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFMODEL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetMODELNAME As Boolean = Boolean.FalseString
        
        Private _MODELNAME As String
        
        Private _MODELDES As String
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetMODEL As Boolean = Boolean.FalseString
        
        Private _MODEL As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFMODEL"
                else
                    return "CPROFMODEL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "MODEL={0}", _
                  string.format("{0}",MODEL) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Product Bundle"),  _
         nType("Edm.String"),  _
         tab("Product Bundle"),  _
         Pos(10),  _
         twodBarcode("MODELNAME")>  _
        Public Property MODELNAME() As String
            Get
                return _MODELNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Product Bundle", value, "^.{0,6}$") then Exit Property
                _IsSetMODELNAME = True
                If loading Then
                  _MODELNAME = Value
                Else
                    if not _MODELNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODELNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODELNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bundle Description"),  _
         nType("Edm.String"),  _
         tab("Product Bundle"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("MODELDES")>  _
        Public Property MODELDES() As String
            Get
                return _MODELDES
            End Get
            Set
                if not(value is nothing) then
                  _MODELDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Product Bundle"),  _
         Pos(20),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Product Bundle"),  _
         Pos(30),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quote/Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Product Bundle"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("MODEL")>  _
        Public Property MODEL() As nullable (of int64)
            Get
                return _MODEL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote/Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetMODEL = True
                If loading Then
                  _MODEL = Value
                Else
                    if not _MODEL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MODEL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MODEL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetMODELNAME then
              if f then
                  jw.WriteRaw(", ""MODELNAME"": ")
              else
                  jw.WriteRaw("""MODELNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.MODELNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetMODEL then
              if f then
                  jw.WriteRaw(", ""MODEL"": ")
              else
                  jw.WriteRaw("""MODEL"": ")
                  f = true
              end if
              jw.WriteValue(me.MODEL)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFMODEL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "MODEL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetMODELNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODELNAME")
              .WriteAttributeString("value", me.MODELNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetMODEL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MODEL")
              .WriteAttributeString("value", me.MODEL)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFMODEL = JsonConvert.DeserializeObject(Of CPROFMODEL)(e.StreamReader.ReadToEnd)
                With obj
                  _MODELNAME = .MODELNAME
                  _MODELDES = .MODELDES
                  _QUANT = .QUANT
                  _DUEDATE = .DUEDATE
                  _MODEL = .MODEL
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Distribution Criteria")>  _
    Public Class QUERY_MAILINTERDISTRIBUTE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MAILINTERDISTRIBUTE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MAILINTERDISTRIBUTE)
            _Parent = nothing
            _Name = "MAILINTERDISTRIBUTE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MAILINTERDISTRIBUTE)
            _Parent = Parent
            _name = "MAILINTERDISTRIBUTE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MAILINTERDISTRIBUTE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MAILINTERDISTRIBUTE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MAILINTERDISTRIBUTE As MAILINTERDISTRIBUTE In JsonConvert.DeserializeObject(Of QUERY_MAILINTERDISTRIBUTE)(stream.ReadToEnd).Value
              With _MAILINTERDISTRIBUTE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MAILINTERDISTRIBUTE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MAILINTERDISTRIBUTE = JsonConvert.DeserializeObject(Of MAILINTERDISTRIBUTE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MAILINTERDISTRIBUTE)
                  .MAXVALUE = obj.MAXVALUE
                  .EMPNUM = obj.EMPNUM
                  .YEARNUM = obj.YEARNUM
                  .GROUPNAME = obj.GROUPNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MAILINTERDISTRIBUTE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MAILINTERDISTRIBUTE as MAILINTERDISTRIBUTE in value
              If _MAILINTERDISTRIBUTE.Equals(trycast(obj,MAILINTERDISTRIBUTE)) Then
                  value.remove(_MAILINTERDISTRIBUTE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MAILINTERDISTRIBUTE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetMAXVALUE As Boolean = Boolean.FalseString
        
        Private _MAXVALUE As Decimal
        
        Private _IsSetEMPNUM As Boolean = Boolean.FalseString
        
        Private _EMPNUM As Long
        
        Private _IsSetYEARNUM As Boolean = Boolean.FalseString
        
        Private _YEARNUM As Long
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MAILINTERDISTRIBUTE"
                else
                    return "MAILINTERDISTRIBUTE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Max. Acceptable Bid"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Max. Acceptable Bid"),  _
         Pos(60),  _
         twodBarcode("MAXVALUE")>  _
        Public Property MAXVALUE() As nullable(of decimal)
            Get
                return _MAXVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Max. Acceptable Bid", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetMAXVALUE = True
                If loading Then
                  _MAXVALUE = Value
                Else
                    if not _MAXVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MAXVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MAXVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Number of Employees"),  _
         nType("Edm.Int64"),  _
         tab("Max. Acceptable Bid"),  _
         Pos(70),  _
         twodBarcode("EMPNUM")>  _
        Public Property EMPNUM() As nullable (of int64)
            Get
                return _EMPNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Employees", value, "^[0-9\-]+$") then Exit Property
                _IsSetEMPNUM = True
                If loading Then
                  _EMPNUM = Value
                Else
                    if not _EMPNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMPNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMPNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Years in Business"),  _
         nType("Edm.Int64"),  _
         tab("Max. Acceptable Bid"),  _
         Pos(80),  _
         twodBarcode("YEARNUM")>  _
        Public Property YEARNUM() As nullable (of int64)
            Get
                return _YEARNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Years in Business", value, "^[0-9\-]+$") then Exit Property
                _IsSetYEARNUM = True
                If loading Then
                  _YEARNUM = Value
                Else
                    if not _YEARNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("YEARNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _YEARNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Max. Acceptable Bid"),  _
         Pos(100),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetMAXVALUE then
              if f then
                  jw.WriteRaw(", ""MAXVALUE"": ")
              else
                  jw.WriteRaw("""MAXVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.MAXVALUE)
            end if
            if _IsSetEMPNUM then
              if f then
                  jw.WriteRaw(", ""EMPNUM"": ")
              else
                  jw.WriteRaw("""EMPNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EMPNUM)
            end if
            if _IsSetYEARNUM then
              if f then
                  jw.WriteRaw(", ""YEARNUM"": ")
              else
                  jw.WriteRaw("""YEARNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.YEARNUM)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MAILINTERDISTRIBUTE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetMAXVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MAXVALUE")
              .WriteAttributeString("value", me.MAXVALUE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetEMPNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMPNUM")
              .WriteAttributeString("value", me.EMPNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetYEARNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "YEARNUM")
              .WriteAttributeString("value", me.YEARNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MAILINTERDISTRIBUTE = JsonConvert.DeserializeObject(Of MAILINTERDISTRIBUTE)(e.StreamReader.ReadToEnd)
                With obj
                  _MAXVALUE = .MAXVALUE
                  _EMPNUM = .EMPNUM
                  _YEARNUM = .YEARNUM
                  _GROUPNAME = .GROUPNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Price Quote - Customer Details")>  _
    Public Class QUERY_CPROFCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CPROFCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CPROFCONT)
            _Parent = nothing
            _Name = "CPROFCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CPROFCONT)
            _Parent = Parent
            _name = "CPROFCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CPROFCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CPROFCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CPROFCONT As CPROFCONT In JsonConvert.DeserializeObject(Of QUERY_CPROFCONT)(stream.ReadToEnd).Value
              With _CPROFCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CPROFCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFCONT = JsonConvert.DeserializeObject(Of CPROFCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CPROFCONT)
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .BUSINESSTYPE = obj.BUSINESSTYPE
                  .EMPNUM = obj.EMPNUM
                  .ESTABLISHED = obj.ESTABLISHED
                  .TAXCODE = obj.TAXCODE
                  .PAYCUSTNAME = obj.PAYCUSTNAME
                  .PAYCUSTDES = obj.PAYCUSTDES
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .CPROFNUM = obj.CPROFNUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CPROFCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CPROFCONT as CPROFCONT in value
              If _CPROFCONT.Equals(trycast(obj,CPROFCONT)) Then
                  value.remove(_CPROFCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CPROFCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _BUSINESSTYPE As String
        
        Private _EMPNUM As Long
        
        Private _ESTABLISHED As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetPAYCUSTNAME As Boolean = Boolean.FalseString
        
        Private _PAYCUSTNAME As String
        
        Private _PAYCUSTDES As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetCPROFNUM As Boolean = Boolean.FalseString
        
        Private _CPROFNUM As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CPROFCONT"
                else
                    return "CPROFCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CPROFNUM={0}", _
                  string.format("'{0}'",CPROFNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(10),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(11),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(12),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(22),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(24),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City & State"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(25),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City & State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(28),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Street Address"),  _
         Pos(30),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(40),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(50),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(60),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Type of Business"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(62),  _
         [ReadOnly](true),  _
         twodBarcode("BUSINESSTYPE")>  _
        Public Property BUSINESSTYPE() As String
            Get
                return _BUSINESSTYPE
            End Get
            Set
                if not(value is nothing) then
                  _BUSINESSTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Number of Employees"),  _
         nType("Edm.Int64"),  _
         tab("Phone Number"),  _
         Pos(64),  _
         [ReadOnly](true),  _
         twodBarcode("EMPNUM")>  _
        Public Property EMPNUM() As nullable (of int64)
            Get
                return _EMPNUM
            End Get
            Set
                if not(value is nothing) then
                  _EMPNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Year Established"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(66),  _
         [ReadOnly](true),  _
         twodBarcode("ESTABLISHED")>  _
        Public Property ESTABLISHED() As String
            Get
                return _ESTABLISHED
            End Get
            Set
                if not(value is nothing) then
                  _ESTABLISHED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(68),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Customer No."),  _
         nType("Edm.String"),  _
         tab("Phone Number"),  _
         Pos(70),  _
         twodBarcode("PAYCUSTNAME")>  _
        Public Property PAYCUSTNAME() As String
            Get
                return _PAYCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Billing Customer No.", value, "^.{0,16}$") then Exit Property
                _IsSetPAYCUSTNAME = True
                If loading Then
                  _PAYCUSTNAME = Value
                Else
                    if not _PAYCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Billing Cust. Name"),  _
         nType("Edm.String"),  _
         tab("Billing Cust. Name"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCUSTDES")>  _
        Public Property PAYCUSTDES() As String
            Get
                return _PAYCUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYCUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Billing Cust. Name"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Billing Cust. Name"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation"),  _
         nType("Edm.String"),  _
         tab("Billing Cust. Name"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("CPROFNUM")>  _
        Public Property CPROFNUM() As String
            Get
                return _CPROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Quotation", value, "^.{0,16}$") then Exit Property
                _IsSetCPROFNUM = True
                If loading Then
                  _CPROFNUM = Value
                Else
                    if not _CPROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CPROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CPROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetPAYCUSTNAME then
              if f then
                  jw.WriteRaw(", ""PAYCUSTNAME"": ")
              else
                  jw.WriteRaw("""PAYCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCUSTNAME)
            end if
            if _IsSetCPROFNUM then
              if f then
                  jw.WriteRaw(", ""CPROFNUM"": ")
              else
                  jw.WriteRaw("""CPROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.CPROFNUM)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CPROFCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetPAYCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCUSTNAME")
              .WriteAttributeString("value", me.PAYCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CPROFNUM")
              .WriteAttributeString("value", me.CPROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CPROFCONT = JsonConvert.DeserializeObject(Of CPROFCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _BUSINESSTYPE = .BUSINESSTYPE
                  _EMPNUM = .EMPNUM
                  _ESTABLISHED = .ESTABLISHED
                  _TAXCODE = .TAXCODE
                  _PAYCUSTNAME = .PAYCUSTNAME
                  _PAYCUSTDES = .PAYCUSTDES
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _CPROFNUM = .CPROFNUM
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Credit")>  _
    Public Class QUERY_CUSTOBLIGO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = nothing
            _Name = "CUSTOBLIGO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGO)
            _Parent = Parent
            _name = "CUSTOBLIGO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Open Orders")
            .add(1, "Unbilled Documents")
            .add(2, "Unbilled Project Hours")
            .add(3, "Pending Sales Invoices")
            .add(4, "Unpaid Bills")
            .add(5, "Post-dated Cheques")
            .add(6, "Cheques Past Due Date")
            .add(7, "Secure Post-dated Cheques")
            .add(8, "Balances in Transaction Currency")
            .add(9, "Credit per Company")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGO As CUSTOBLIGO In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGO)(stream.ReadToEnd).Value
              With _CUSTOBLIGO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGO)
                  .ORD_DEBIT = obj.ORD_DEBIT
                  .DOC_DEBIT = obj.DOC_DEBIT
                  .PROJ_DEBIT = obj.PROJ_DEBIT
                  .IV_DEBIT = obj.IV_DEBIT
                  .ACC_DEBIT = obj.ACC_DEBIT
                  .CHEQUE_DEBIT = obj.CHEQUE_DEBIT
                  .CODE = obj.CODE
                  .OLD = obj.OLD
                  .UPTO90 = obj.UPTO90
                  .UPTO60 = obj.UPTO60
                  .UPTO30 = obj.UPTO30
                  .FUTURE = obj.FUTURE
                  .TOTOLD = obj.TOTOLD
                  .CREDIT = obj.CREDIT
                  .MAX_CREDIT = obj.MAX_CREDIT
                  .CREDIT_DIFF = obj.CREDIT_DIFF
                  .CRCODE = obj.CRCODE
                  .OBLIGO = obj.OBLIGO
                  .MAX_OBLIGO = obj.MAX_OBLIGO
                  .OBLIGO_DIFF = obj.OBLIGO_DIFF
                  .OBCODE = obj.OBCODE
                  .STATDES = obj.STATDES
                  .RESTRICTDATE = obj.RESTRICTDATE
                  .WAITING = obj.WAITING
                  .THISMONTH = obj.THISMONTH
                  .NEXTMONTH = obj.NEXTMONTH
                  .TWOMONTHS = obj.TWOMONTHS
                  .FUTURECHEQUES = obj.FUTURECHEQUES
                  .SECURECHECKS = obj.SECURECHECKS
                  .CREDITCARDS = obj.CREDITCARDS
                  .MAX_CREDIT_ENV = obj.MAX_CREDIT_ENV
                  .CREDIT_ENV = obj.CREDIT_ENV
                  .CREDIT_ENV_DIFF = obj.CREDIT_ENV_DIFF
                  .CR_CODE_ENV = obj.CR_CODE_ENV
                  .MAX_OBLIGO_ENV = obj.MAX_OBLIGO_ENV
                  .OBLIGO_ENV = obj.OBLIGO_ENV
                  .OBLIGO_ENV_DIFF = obj.OBLIGO_ENV_DIFF
                  .OB_CODE_ENV = obj.OB_CODE_ENV
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .CUST = obj.CUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGO as CUSTOBLIGO in value
              If _CUSTOBLIGO.Equals(trycast(obj,CUSTOBLIGO)) Then
                  value.remove(_CUSTOBLIGO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORD_DEBIT As Decimal
        
        Private _DOC_DEBIT As Decimal
        
        Private _PROJ_DEBIT As Decimal
        
        Private _IV_DEBIT As Decimal
        
        Private _ACC_DEBIT As Decimal
        
        Private _CHEQUE_DEBIT As Decimal
        
        Private _CODE As String
        
        Private _OLD As Decimal
        
        Private _UPTO90 As Decimal
        
        Private _UPTO60 As Decimal
        
        Private _UPTO30 As Decimal
        
        Private _FUTURE As Decimal
        
        Private _TOTOLD As Decimal
        
        Private _CREDIT As Decimal
        
        Private _MAX_CREDIT As Decimal
        
        Private _CREDIT_DIFF As Decimal
        
        Private _CRCODE As String
        
        Private _OBLIGO As Decimal
        
        Private _MAX_OBLIGO As Decimal
        
        Private _OBLIGO_DIFF As Decimal
        
        Private _OBCODE As String
        
        Private _STATDES As String
        
        Private _RESTRICTDATE As System.DateTimeOffset
        
        Private _WAITING As Decimal
        
        Private _THISMONTH As Decimal
        
        Private _NEXTMONTH As Decimal
        
        Private _TWOMONTHS As Decimal
        
        Private _FUTURECHEQUES As Decimal
        
        Private _SECURECHECKS As Decimal
        
        Private _CREDITCARDS As Decimal
        
        Private _MAX_CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV As Decimal
        
        Private _CREDIT_ENV_DIFF As Decimal
        
        Private _CR_CODE_ENV As String
        
        Private _MAX_OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV As Decimal
        
        Private _OBLIGO_ENV_DIFF As Decimal
        
        Private _OB_CODE_ENV As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _CUST As Long
        
        Private _OBLIGO_ORDERS_SUBFORM As QUERY_OBLIGO_ORDERS
        
        Private _OBLIGO_TRANS_SUBFORM As QUERY_OBLIGO_TRANS
        
        Private _OBLIGO_PROJ_SUBFORM As QUERY_OBLIGO_PROJ
        
        Private _OBLIGO_IV_SUBFORM As QUERY_OBLIGO_IV
        
        Private _OBLIGO_FNCITEMS_SUBFORM As QUERY_OBLIGO_FNCITEMS
        
        Private _OBLIGO_CHECKS_SUBFORM As QUERY_OBLIGO_CHECKS
        
        Private _OBLIGO_CHECKS2_SUBFORM As QUERY_OBLIGO_CHECKS2
        
        Private _SECURE_CHECKS_SUBFORM As QUERY_SECURE_CHECKS
        
        Private _OBLIGO_FNCBAL5_SUBFORM As QUERY_OBLIGO_FNCBAL5
        
        Private _CUSTOBLIGOENV_SUBFORM As QUERY_CUSTOBLIGOENV
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Open Orders"))
            ChildQuery.add(1, new oNavigation("Unbilled Documents"))
            ChildQuery.add(2, new oNavigation("Unbilled Project Hours"))
            ChildQuery.add(3, new oNavigation("Pending Sales Invoices"))
            ChildQuery.add(4, new oNavigation("Unpaid Bills"))
            ChildQuery.add(5, new oNavigation("Post-dated Cheques"))
            ChildQuery.add(6, new oNavigation("Cheques Past Due Date"))
            ChildQuery.add(7, new oNavigation("Secure Post-dated Cheques"))
            ChildQuery.add(8, new oNavigation("Balances in Transaction Currency"))
            ChildQuery.add(9, new oNavigation("Credit per Company"))
            _OBLIGO_ORDERS_SUBFORM = new QUERY_OBLIGO_ORDERS(me)
            _OBLIGO_TRANS_SUBFORM = new QUERY_OBLIGO_TRANS(me)
            _OBLIGO_PROJ_SUBFORM = new QUERY_OBLIGO_PROJ(me)
            _OBLIGO_IV_SUBFORM = new QUERY_OBLIGO_IV(me)
            _OBLIGO_FNCITEMS_SUBFORM = new QUERY_OBLIGO_FNCITEMS(me)
            _OBLIGO_CHECKS_SUBFORM = new QUERY_OBLIGO_CHECKS(me)
            _OBLIGO_CHECKS2_SUBFORM = new QUERY_OBLIGO_CHECKS2(me)
            _SECURE_CHECKS_SUBFORM = new QUERY_SECURE_CHECKS(me)
            _OBLIGO_FNCBAL5_SUBFORM = new QUERY_OBLIGO_FNCBAL5(me)
            _CUSTOBLIGOENV_SUBFORM = new QUERY_CUSTOBLIGOENV(me)
            WITH ChildQuery(0)
               .setoDataQuery(_OBLIGO_ORDERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_OBLIGO_TRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_OBLIGO_PROJ_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_OBLIGO_IV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_OBLIGO_FNCITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_OBLIGO_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_OBLIGO_CHECKS2_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_SECURE_CHECKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_OBLIGO_FNCBAL5_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_CUSTOBLIGOENV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Open Orders", _OBLIGO_ORDERS_SUBFORM))
                   .add(1, new oNavigation("Unbilled Documents", _OBLIGO_TRANS_SUBFORM))
                   .add(2, new oNavigation("Unbilled Project Hours", _OBLIGO_PROJ_SUBFORM))
                   .add(3, new oNavigation("Pending Sales Invoices", _OBLIGO_IV_SUBFORM))
                   .add(4, new oNavigation("Unpaid Bills", _OBLIGO_FNCITEMS_SUBFORM))
                   .add(5, new oNavigation("Post-dated Cheques", _OBLIGO_CHECKS_SUBFORM))
                   .add(6, new oNavigation("Cheques Past Due Date", _OBLIGO_CHECKS2_SUBFORM))
                   .add(7, new oNavigation("Secure Post-dated Cheques", _SECURE_CHECKS_SUBFORM))
                   .add(8, new oNavigation("Balances in Transaction Currency", _OBLIGO_FNCBAL5_SUBFORM))
                   .add(9, new oNavigation("Credit per Company", _CUSTOBLIGOENV_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGO"
                else
                    return "CUSTOBLIGO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0}", _
                  string.format("{0}",CUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORD_DEBIT")>  _
        Public Property ORD_DEBIT() As nullable(of decimal)
            Get
                return _ORD_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ORD_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Documents"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOC_DEBIT")>  _
        Public Property DOC_DEBIT() As nullable(of decimal)
            Get
                return _DOC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DOC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Project Hrs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("PROJ_DEBIT")>  _
        Public Property PROJ_DEBIT() As nullable(of decimal)
            Get
                return _PROJ_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _PROJ_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Pending Sales Invs."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("IV_DEBIT")>  _
        Public Property IV_DEBIT() As nullable(of decimal)
            Get
                return _IV_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _IV_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unpaid Bills"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("ACC_DEBIT")>  _
        Public Property ACC_DEBIT() As nullable(of decimal)
            Get
                return _ACC_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _ACC_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CHEQUE_DEBIT")>  _
        Public Property CHEQUE_DEBIT() As nullable(of decimal)
            Get
                return _CHEQUE_DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _CHEQUE_DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Open Orders"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("> 90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Open Orders"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLD")>  _
        Public Property OLD() As nullable(of decimal)
            Get
                return _OLD
            End Get
            Set
                if not(value is nothing) then
                  _OLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("61-90"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO90")>  _
        Public Property UPTO90() As nullable(of decimal)
            Get
                return _UPTO90
            End Get
            Set
                if not(value is nothing) then
                  _UPTO90 = Value
                end if
            End Set
        End Property
        
        <DisplayName("31-60"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO60")>  _
        Public Property UPTO60() As nullable(of decimal)
            Get
                return _UPTO60
            End Get
            Set
                if not(value is nothing) then
                  _UPTO60 = Value
                end if
            End Set
        End Property
        
        <DisplayName("1-30"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UPTO30")>  _
        Public Property UPTO30() As nullable(of decimal)
            Get
                return _UPTO30
            End Get
            Set
                if not(value is nothing) then
                  _UPTO30 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURE")>  _
        Public Property FUTURE() As nullable(of decimal)
            Get
                return _FUTURE
            End Get
            Set
                if not(value is nothing) then
                  _FUTURE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total for Aging"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TOTOLD")>  _
        Public Property TOTOLD() As nullable(of decimal)
            Get
                return _TOTOLD
            End Get
            Set
                if not(value is nothing) then
                  _TOTOLD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("61-90"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT")>  _
        Public Property MAX_CREDIT() As nullable(of decimal)
            Get
                return _MAX_CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("61-90"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_DIFF")>  _
        Public Property CREDIT_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(125),  _
         [ReadOnly](true),  _
         twodBarcode("CRCODE")>  _
        Public Property CRCODE() As String
            Get
                return _CRCODE
            End Get
            Set
                if not(value is nothing) then
                  _CRCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO")>  _
        Public Property MAX_OBLIGO() As nullable(of decimal)
            Get
                return _MAX_OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Credit Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_DIFF")>  _
        Public Property OBLIGO_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liab. Currency"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("OBCODE")>  _
        Public Property OBCODE() As String
            Get
                return _OBCODE
            End Get
            Set
                if not(value is nothing) then
                  _OBCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Status"),  _
         nType("Edm.String"),  _
         tab("Credit Currency"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Restricted"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Credit Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("RESTRICTDATE")>  _
        Public Property RESTRICTDATE() As nullable (of DateTimeOffset)
            Get
                return _RESTRICTDATE
            End Get
            Set
                if not(value is nothing) then
                  _RESTRICTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Awaiting Clearance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Credit Currency"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("WAITING")>  _
        Public Property WAITING() As nullable(of decimal)
            Get
                return _WAITING
            End Get
            Set
                if not(value is nothing) then
                  _WAITING = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated This Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("THISMONTH")>  _
        Public Property THISMONTH() As nullable(of decimal)
            Get
                return _THISMONTH
            End Get
            Set
                if not(value is nothing) then
                  _THISMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated Next Month"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("NEXTMONTH")>  _
        Public Property NEXTMONTH() As nullable(of decimal)
            Get
                return _NEXTMONTH
            End Get
            Set
                if not(value is nothing) then
                  _NEXTMONTH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2 Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("TWOMONTHS")>  _
        Public Property TWOMONTHS() As nullable(of decimal)
            Get
                return _TWOMONTHS
            End Get
            Set
                if not(value is nothing) then
                  _TWOMONTHS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Postdated 2+ Months"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("FUTURECHEQUES")>  _
        Public Property FUTURECHEQUES() As nullable(of decimal)
            Get
                return _FUTURECHEQUES
            End Get
            Set
                if not(value is nothing) then
                  _FUTURECHEQUES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Secure Cheques"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(232),  _
         [ReadOnly](true),  _
         twodBarcode("SECURECHECKS")>  _
        Public Property SECURECHECKS() As nullable(of decimal)
            Get
                return _SECURECHECKS
            End Get
            Set
                if not(value is nothing) then
                  _SECURECHECKS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit Cards"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(234),  _
         [ReadOnly](true),  _
         twodBarcode("CREDITCARDS")>  _
        Public Property CREDITCARDS() As nullable(of decimal)
            Get
                return _CREDITCARDS
            End Get
            Set
                if not(value is nothing) then
                  _CREDITCARDS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Cred Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_CREDIT_ENV")>  _
        Public Property MAX_CREDIT_ENV() As nullable(of decimal)
            Get
                return _MAX_CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Postdated This Month"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV")>  _
        Public Property CREDIT_ENV() As nullable(of decimal)
            Get
                return _CREDIT_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Credit Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT_ENV_DIFF")>  _
        Public Property CREDIT_ENV_DIFF() As nullable(of decimal)
            Get
                return _CREDIT_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CR_CODE_ENV")>  _
        Public Property CR_CODE_ENV() As String
            Get
                return _CR_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _CR_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liab Limit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(280),  _
         [ReadOnly](true),  _
         twodBarcode("MAX_OBLIGO_ENV")>  _
        Public Property MAX_OBLIGO_ENV() As nullable(of decimal)
            Get
                return _MAX_OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _MAX_OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV")>  _
        Public Property OBLIGO_ENV() As nullable(of decimal)
            Get
                return _OBLIGO_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Multi-co. Liabil Bal"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(300),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO_ENV_DIFF")>  _
        Public Property OBLIGO_ENV_DIFF() As nullable(of decimal)
            Get
                return _OBLIGO_ENV_DIFF
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO_ENV_DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(310),  _
         [ReadOnly](true),  _
         twodBarcode("OB_CODE_ENV")>  _
        Public Property OB_CODE_ENV() As String
            Get
                return _OB_CODE_ENV
            End Get
            Set
                if not(value is nothing) then
                  _OB_CODE_ENV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (No.)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(315),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Head Customer (Name)"),  _
         nType("Edm.String"),  _
         tab("Multi-co. Credit Bal"),  _
         Pos(320),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Customer (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_ORDERS_SUBFORM() As QUERY_OBLIGO_ORDERS
            Get
                return _OBLIGO_ORDERS_SUBFORM
            End Get
            Set
                _OBLIGO_ORDERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_TRANS_SUBFORM() As QUERY_OBLIGO_TRANS
            Get
                return _OBLIGO_TRANS_SUBFORM
            End Get
            Set
                _OBLIGO_TRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_PROJ_SUBFORM() As QUERY_OBLIGO_PROJ
            Get
                return _OBLIGO_PROJ_SUBFORM
            End Get
            Set
                _OBLIGO_PROJ_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_IV_SUBFORM() As QUERY_OBLIGO_IV
            Get
                return _OBLIGO_IV_SUBFORM
            End Get
            Set
                _OBLIGO_IV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCITEMS_SUBFORM() As QUERY_OBLIGO_FNCITEMS
            Get
                return _OBLIGO_FNCITEMS_SUBFORM
            End Get
            Set
                _OBLIGO_FNCITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS_SUBFORM() As QUERY_OBLIGO_CHECKS
            Get
                return _OBLIGO_CHECKS_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_CHECKS2_SUBFORM() As QUERY_OBLIGO_CHECKS2
            Get
                return _OBLIGO_CHECKS2_SUBFORM
            End Get
            Set
                _OBLIGO_CHECKS2_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SECURE_CHECKS_SUBFORM() As QUERY_SECURE_CHECKS
            Get
                return _SECURE_CHECKS_SUBFORM
            End Get
            Set
                _SECURE_CHECKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property OBLIGO_FNCBAL5_SUBFORM() As QUERY_OBLIGO_FNCBAL5
            Get
                return _OBLIGO_FNCBAL5_SUBFORM
            End Get
            Set
                _OBLIGO_FNCBAL5_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTOBLIGOENV_SUBFORM() As QUERY_CUSTOBLIGOENV
            Get
                return _CUSTOBLIGOENV_SUBFORM
            End Get
            Set
                _CUSTOBLIGOENV_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_ORDERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_ORDERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_TRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_TRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_PROJ_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_PROJ_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_IV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_IV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_CHECKS2_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_CHECKS2_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SECURE_CHECKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SECURE_CHECKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              jw.WriteRaw(", OBLIGO_FNCBAL5_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _OBLIGO_FNCBAL5_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTOBLIGOENV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTOBLIGOENV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _OBLIGO_ORDERS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_ORDERS in _OBLIGO_ORDERS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_ORDERS_SUBFORM")
              next
            end if
            if _OBLIGO_TRANS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_TRANS in _OBLIGO_TRANS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_TRANS_SUBFORM")
              next
            end if
            if _OBLIGO_PROJ_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_PROJ in _OBLIGO_PROJ_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_PROJ_SUBFORM")
              next
            end if
            if _OBLIGO_IV_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_IV in _OBLIGO_IV_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_IV_SUBFORM")
              next
            end if
            if _OBLIGO_FNCITEMS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCITEMS in _OBLIGO_FNCITEMS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCITEMS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS in _OBLIGO_CHECKS_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_CHECKS2_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_CHECKS2 in _OBLIGO_CHECKS2_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_CHECKS2_SUBFORM")
              next
            end if
            if _SECURE_CHECKS_SUBFORM.value.count > 0 then
              for each itm as SECURE_CHECKS in _SECURE_CHECKS_SUBFORM.Value
                itm.toXML(xw,"SECURE_CHECKS_SUBFORM")
              next
            end if
            if _OBLIGO_FNCBAL5_SUBFORM.value.count > 0 then
              for each itm as OBLIGO_FNCBAL5 in _OBLIGO_FNCBAL5_SUBFORM.Value
                itm.toXML(xw,"OBLIGO_FNCBAL5_SUBFORM")
              next
            end if
            if _CUSTOBLIGOENV_SUBFORM.value.count > 0 then
              for each itm as CUSTOBLIGOENV in _CUSTOBLIGOENV_SUBFORM.Value
                itm.toXML(xw,"CUSTOBLIGOENV_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGO = JsonConvert.DeserializeObject(Of CUSTOBLIGO)(e.StreamReader.ReadToEnd)
                With obj
                  _ORD_DEBIT = .ORD_DEBIT
                  _DOC_DEBIT = .DOC_DEBIT
                  _PROJ_DEBIT = .PROJ_DEBIT
                  _IV_DEBIT = .IV_DEBIT
                  _ACC_DEBIT = .ACC_DEBIT
                  _CHEQUE_DEBIT = .CHEQUE_DEBIT
                  _CODE = .CODE
                  _OLD = .OLD
                  _UPTO90 = .UPTO90
                  _UPTO60 = .UPTO60
                  _UPTO30 = .UPTO30
                  _FUTURE = .FUTURE
                  _TOTOLD = .TOTOLD
                  _CREDIT = .CREDIT
                  _MAX_CREDIT = .MAX_CREDIT
                  _CREDIT_DIFF = .CREDIT_DIFF
                  _CRCODE = .CRCODE
                  _OBLIGO = .OBLIGO
                  _MAX_OBLIGO = .MAX_OBLIGO
                  _OBLIGO_DIFF = .OBLIGO_DIFF
                  _OBCODE = .OBCODE
                  _STATDES = .STATDES
                  _RESTRICTDATE = .RESTRICTDATE
                  _WAITING = .WAITING
                  _THISMONTH = .THISMONTH
                  _NEXTMONTH = .NEXTMONTH
                  _TWOMONTHS = .TWOMONTHS
                  _FUTURECHEQUES = .FUTURECHEQUES
                  _SECURECHECKS = .SECURECHECKS
                  _CREDITCARDS = .CREDITCARDS
                  _MAX_CREDIT_ENV = .MAX_CREDIT_ENV
                  _CREDIT_ENV = .CREDIT_ENV
                  _CREDIT_ENV_DIFF = .CREDIT_ENV_DIFF
                  _CR_CODE_ENV = .CR_CODE_ENV
                  _MAX_OBLIGO_ENV = .MAX_OBLIGO_ENV
                  _OBLIGO_ENV = .OBLIGO_ENV
                  _OBLIGO_ENV_DIFF = .OBLIGO_ENV_DIFF
                  _OB_CODE_ENV = .OB_CODE_ENV
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _CUST = .CUST
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTOBLIGO
        
        OBLIGO_ORDERS = 0
        
        OBLIGO_TRANS = 1
        
        OBLIGO_PROJ = 2
        
        OBLIGO_IV = 3
        
        OBLIGO_FNCITEMS = 4
        
        OBLIGO_CHECKS = 5
        
        OBLIGO_CHECKS2 = 6
        
        SECURE_CHECKS = 7
        
        OBLIGO_FNCBAL5 = 8
        
        CUSTOBLIGOENV = 9
    End Enum
    
    <QueryTitle("Open Orders")>  _
    Public Class QUERY_OBLIGO_ORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_ORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = nothing
            _Name = "OBLIGO_ORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_ORDERS)
            _Parent = Parent
            _name = "OBLIGO_ORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_ORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_ORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_ORDERS As OBLIGO_ORDERS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_ORDERS)(stream.ReadToEnd).Value
              With _OBLIGO_ORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_ORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_ORDERS)
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TBALANCE = obj.TBALANCE
                  .UNITNAME = obj.UNITNAME
                  .PRICEBAL1 = obj.PRICEBAL1
                  .CODE = obj.CODE
                  .PRICEBAL2 = obj.PRICEBAL2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .ORD2 = obj.ORD2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_ORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_ORDERS as OBLIGO_ORDERS in value
              If _OBLIGO_ORDERS.Equals(trycast(obj,OBLIGO_ORDERS)) Then
                  value.remove(_OBLIGO_ORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_ORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _ORDNAME As String
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TBALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICEBAL1 As Decimal
        
        Private _CODE As String
        
        Private _PRICEBAL2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _ORD2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_ORDERS"
                else
                    return "OBLIGO_ORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL1")>  _
        Public Property PRICEBAL1() As nullable(of decimal)
            Get
                return _PRICEBAL1
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Value"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Value"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL2")>  _
        Public Property PRICEBAL2() As nullable(of decimal)
            Get
                return _PRICEBAL2
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Adjusted Value"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Value"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD2")>  _
        Public Property ORD2() As nullable (of int64)
            Get
                return _ORD2
            End Get
            Set
                if not(value is nothing) then
                  _ORD2 = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_ORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_ORDERS = JsonConvert.DeserializeObject(Of OBLIGO_ORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TBALANCE = .TBALANCE
                  _UNITNAME = .UNITNAME
                  _PRICEBAL1 = .PRICEBAL1
                  _CODE = .CODE
                  _PRICEBAL2 = .PRICEBAL2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _ORD2 = .ORD2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Documents")>  _
    Public Class QUERY_OBLIGO_TRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_TRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = nothing
            _Name = "OBLIGO_TRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_TRANS)
            _Parent = Parent
            _name = "OBLIGO_TRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_TRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_TRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_TRANS As OBLIGO_TRANS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_TRANS)(stream.ReadToEnd).Value
              With _OBLIGO_TRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_TRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_TRANS)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .DOCCODE = obj.DOCCODE
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .CUSTNAME = obj.CUSTNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_TRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_TRANS as OBLIGO_TRANS in value
              If _OBLIGO_TRANS.Equals(trycast(obj,OBLIGO_TRANS)) Then
                  value.remove(_OBLIGO_TRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_TRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _DOCCODE As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _CUSTNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_TRANS"
                else
                    return "OBLIGO_TRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("DOCCODE")>  _
        Public Property DOCCODE() As String
            Get
                return _DOCCODE
            End Get
            Set
                if not(value is nothing) then
                  _DOCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Adjusted Amount"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Adjusted Amount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_TRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_TRANS = JsonConvert.DeserializeObject(Of OBLIGO_TRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _DOCCODE = .DOCCODE
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _CUSTNAME = .CUSTNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unbilled Project Hours")>  _
    Public Class QUERY_OBLIGO_PROJ
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_PROJ)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = nothing
            _Name = "OBLIGO_PROJ"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_PROJ)
            _Parent = Parent
            _name = "OBLIGO_PROJ_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_PROJ)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_PROJ)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_PROJ As OBLIGO_PROJ In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_PROJ)(stream.ReadToEnd).Value
              With _OBLIGO_PROJ
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_PROJ)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_PROJ)
                  .CURDATE = obj.CURDATE
                  .DOCNO = obj.DOCNO
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .USERLOGIN = obj.USERLOGIN
                  .TRANS = obj.TRANS
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_PROJ(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_PROJ as OBLIGO_PROJ in value
              If _OBLIGO_PROJ.Equals(trycast(obj,OBLIGO_PROJ)) Then
                  value.remove(_OBLIGO_PROJ)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_PROJ
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _USERLOGIN As String
        
        Private _TRANS As Long
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_PROJ"
                else
                    return "OBLIGO_PROJ_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reported by"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Report No."),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_PROJ")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_PROJ = JsonConvert.DeserializeObject(Of OBLIGO_PROJ)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _DOCNO = .DOCNO
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _USERLOGIN = .USERLOGIN
                  _TRANS = .TRANS
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Pending Sales Invoices")>  _
    Public Class QUERY_OBLIGO_IV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_IV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = nothing
            _Name = "OBLIGO_IV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_IV)
            _Parent = Parent
            _name = "OBLIGO_IV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_IV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_IV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_IV As OBLIGO_IV In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_IV)(stream.ReadToEnd).Value
              With _OBLIGO_IV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_IV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_IV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .DETAILS = obj.DETAILS
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .DEBIT = obj.DEBIT
                  .IV = obj.IV
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_IV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_IV as OBLIGO_IV in value
              If _OBLIGO_IV.Equals(trycast(obj,OBLIGO_IV)) Then
                  value.remove(_OBLIGO_IV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_IV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _DETAILS As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _DEBIT As String
        
        Private _IV As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_IV"
                else
                    return "OBLIGO_IV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IVNUM={0},DEBIT={1},TYPE={2}", _
                  string.format("'{0}'",IVNUM), _
                  string.format("'{0}'",DEBIT), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit/Credit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DEBIT")>  _
        Public Property DEBIT() As String
            Get
                return _DEBIT
            End Get
            Set
                if not(value is nothing) then
                  _DEBIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_IV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IVNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "DEBIT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_IV = JsonConvert.DeserializeObject(Of OBLIGO_IV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _DETAILS = .DETAILS
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _DEBIT = .DEBIT
                  _IV = .IV
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Unpaid Bills")>  _
    Public Class QUERY_OBLIGO_FNCITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = nothing
            _Name = "OBLIGO_FNCITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCITEMS)
            _Parent = Parent
            _name = "OBLIGO_FNCITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCITEMS As OBLIGO_FNCITEMS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCITEMS)(stream.ReadToEnd).Value
              With _OBLIGO_FNCITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCITEMS)
                  .BALDATE = obj.BALDATE
                  .FNCNUM = obj.FNCNUM
                  .IVNUM = obj.IVNUM
                  .FNCPATNAME = obj.FNCPATNAME
                  .DETAILS = obj.DETAILS
                  .SUM1 = obj.SUM1
                  .CODE = obj.CODE
                  .FNCREF2 = obj.FNCREF2
                  .FNCDATE = obj.FNCDATE
                  .FNCIREF1 = obj.FNCIREF1
                  .FNCIREF2 = obj.FNCIREF2
                  .ORDNAME = obj.ORDNAME
                  .FNCICODE = obj.FNCICODE
                  .ACCNAME = obj.ACCNAME
                  .SUM5 = obj.SUM5
                  .CODE5 = obj.CODE5
                  .FNCTRANS = obj.FNCTRANS
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCITEMS as OBLIGO_FNCITEMS in value
              If _OBLIGO_FNCITEMS.Equals(trycast(obj,OBLIGO_FNCITEMS)) Then
                  value.remove(_OBLIGO_FNCITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALDATE As System.DateTimeOffset
        
        Private _FNCNUM As String
        
        Private _IVNUM As String
        
        Private _FNCPATNAME As String
        
        Private _DETAILS As String
        
        Private _SUM1 As Decimal
        
        Private _CODE As String
        
        Private _FNCREF2 As String
        
        Private _FNCDATE As System.DateTimeOffset
        
        Private _FNCIREF1 As String
        
        Private _FNCIREF2 As String
        
        Private _ORDNAME As String
        
        Private _FNCICODE As String
        
        Private _ACCNAME As String
        
        Private _SUM5 As Decimal
        
        Private _CODE5 As String
        
        Private _FNCTRANS As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCITEMS"
                else
                    return "OBLIGO_FNCITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "FNCTRANS={0},KLINE={1}", _
                  string.format("{0}",FNCTRANS), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Transact Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Transact Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALDATE")>  _
        Public Property BALDATE() As nullable (of DateTimeOffset)
            Get
                return _BALDATE
            End Get
            Set
                if not(value is nothing) then
                  _BALDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry No."),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("FNCNUM")>  _
        Public Property FNCNUM() As String
            Get
                return _FNCNUM
            End Get
            Set
                if not(value is nothing) then
                  _FNCNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Reference"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Code"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCPATNAME")>  _
        Public Property FNCPATNAME() As String
            Get
                return _FNCPATNAME
            End Get
            Set
                if not(value is nothing) then
                  _FNCPATNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Debit Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(20),  _
         tab("Transact Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUM1")>  _
        Public Property SUM1() As nullable(of decimal)
            Get
                return _SUM1
            End Get
            Set
                if not(value is nothing) then
                  _SUM1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Refer. 2"),  _
         nType("Edm.String"),  _
         tab("Transact Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("FNCREF2")>  _
        Public Property FNCREF2() As String
            Get
                return _FNCREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Due Date"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("FNCDATE")>  _
        Public Property FNCDATE() As nullable (of DateTimeOffset)
            Get
                return _FNCDATE
            End Get
            Set
                if not(value is nothing) then
                  _FNCDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 1 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(77),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF1")>  _
        Public Property FNCIREF1() As String
            Get
                return _FNCIREF1
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF1 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Ref. 2 - Entry Item"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(78),  _
         [ReadOnly](true),  _
         twodBarcode("FNCIREF2")>  _
        Public Property FNCIREF2() As String
            Get
                return _FNCIREF2
            End Get
            Set
                if not(value is nothing) then
                  _FNCIREF2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Entry Item Group"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("FNCICODE")>  _
        Public Property FNCICODE() As String
            Get
                return _FNCICODE
            End Get
            Set
                if not(value is nothing) then
                  _FNCICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sum in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Due Date"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("SUM5")>  _
        Public Property SUM5() As nullable(of decimal)
            Get
                return _SUM5
            End Get
            Set
                if not(value is nothing) then
                  _SUM5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Due Date"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Journal Entry (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("FNCTRANS")>  _
        Public Property FNCTRANS() As nullable (of int64)
            Get
                return _FNCTRANS
            End Get
            Set
                if not(value is nothing) then
                  _FNCTRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Journal Entry (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "FNCTRANS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCITEMS = JsonConvert.DeserializeObject(Of OBLIGO_FNCITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALDATE = .BALDATE
                  _FNCNUM = .FNCNUM
                  _IVNUM = .IVNUM
                  _FNCPATNAME = .FNCPATNAME
                  _DETAILS = .DETAILS
                  _SUM1 = .SUM1
                  _CODE = .CODE
                  _FNCREF2 = .FNCREF2
                  _FNCDATE = .FNCDATE
                  _FNCIREF1 = .FNCIREF1
                  _FNCIREF2 = .FNCIREF2
                  _ORDNAME = .ORDNAME
                  _FNCICODE = .FNCICODE
                  _ACCNAME = .ACCNAME
                  _SUM5 = .SUM5
                  _CODE5 = .CODE5
                  _FNCTRANS = .FNCTRANS
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Post-dated Cheques")>  _
    Public Class QUERY_OBLIGO_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS)
            _Parent = Parent
            _name = "OBLIGO_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS As OBLIGO_CHECKS In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS as OBLIGO_CHECKS in value
              If _OBLIGO_CHECKS.Equals(trycast(obj,OBLIGO_CHECKS)) Then
                  value.remove(_OBLIGO_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS"
                else
                    return "OBLIGO_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Cheques Past Due Date")>  _
    Public Class QUERY_OBLIGO_CHECKS2
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_CHECKS2)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = nothing
            _Name = "OBLIGO_CHECKS2"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_CHECKS2)
            _Parent = Parent
            _name = "OBLIGO_CHECKS2_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_CHECKS2)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_CHECKS2)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_CHECKS2 As OBLIGO_CHECKS2 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_CHECKS2)(stream.ReadToEnd).Value
              With _OBLIGO_CHECKS2
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_CHECKS2)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_CHECKS2)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .PAYMENTNAME = obj.PAYMENTNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENTA = obj.PAYMENTA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_CHECKS2(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_CHECKS2 as OBLIGO_CHECKS2 in value
              If _OBLIGO_CHECKS2.Equals(trycast(obj,OBLIGO_CHECKS2)) Then
                  value.remove(_OBLIGO_CHECKS2)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_CHECKS2
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _PAYMENTNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENTA As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_CHECKS2"
                else
                    return "OBLIGO_CHECKS2_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Means of Payment"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYMENTNAME")>  _
        Public Property PAYMENTNAME() As String
            Get
                return _PAYMENTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Invoice (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENTA")>  _
        Public Property PAYMENTA() As nullable (of int64)
            Get
                return _PAYMENTA
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENTA = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_CHECKS2")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_CHECKS2 = JsonConvert.DeserializeObject(Of OBLIGO_CHECKS2)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _PAYMENTNAME = .PAYMENTNAME
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENTA = .PAYMENTA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Secure Post-dated Cheques")>  _
    Public Class QUERY_SECURE_CHECKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SECURE_CHECKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = nothing
            _Name = "SECURE_CHECKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SECURE_CHECKS)
            _Parent = Parent
            _name = "SECURE_CHECKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SECURE_CHECKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SECURE_CHECKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SECURE_CHECKS As SECURE_CHECKS In JsonConvert.DeserializeObject(Of QUERY_SECURE_CHECKS)(stream.ReadToEnd).Value
              With _SECURE_CHECKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SECURE_CHECKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SECURE_CHECKS)
                  .PAYDATE = obj.PAYDATE
                  .CARDNUM = obj.CARDNUM
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .QPRICE2 = obj.QPRICE2
                  .CODE2 = obj.CODE2
                  .IVNUM = obj.IVNUM
                  .IVCODE = obj.IVCODE
                  .IVDATE = obj.IVDATE
                  .DETAILS = obj.DETAILS
                  .BANKCODE = obj.BANKCODE
                  .CUSTNAME = obj.CUSTNAME
                  .BRANCH = obj.BRANCH
                  .CUSTDES = obj.CUSTDES
                  .PAYACCOUNT = obj.PAYACCOUNT
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .PAYMENT = obj.PAYMENT
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SECURE_CHECKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SECURE_CHECKS as SECURE_CHECKS in value
              If _SECURE_CHECKS.Equals(trycast(obj,SECURE_CHECKS)) Then
                  value.remove(_SECURE_CHECKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SECURE_CHECKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _CARDNUM As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _QPRICE2 As Decimal
        
        Private _CODE2 As String
        
        Private _IVNUM As String
        
        Private _IVCODE As String
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _DETAILS As String
        
        Private _BANKCODE As String
        
        Private _CUSTNAME As String
        
        Private _BRANCH As String
        
        Private _CUSTDES As String
        
        Private _PAYACCOUNT As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Private _PAYMENT As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SECURE_CHECKS"
                else
                    return "SECURE_CHECKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if not(value is nothing) then
                  _PAYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CARDNUM")>  _
        Public Property CARDNUM() As String
            Get
                return _CARDNUM
            End Get
            Set
                if not(value is nothing) then
                  _CARDNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cheque Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Adjusted Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(27),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE2")>  _
        Public Property QPRICE2() As nullable(of decimal)
            Get
                return _QPRICE2
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("CODE2")>  _
        Public Property CODE2() As String
            Get
                return _CODE2
            End Get
            Set
                if not(value is nothing) then
                  _CODE2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Number"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Code"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("IVCODE")>  _
        Public Property IVCODE() As String
            Get
                return _IVCODE
            End Get
            Set
                if not(value is nothing) then
                  _IVCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date of Receipt"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date of Receipt"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bank Code"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BANKCODE")>  _
        Public Property BANKCODE() As String
            Get
                return _BANKCODE
            End Get
            Set
                if not(value is nothing) then
                  _BANKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Routing Number"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCH")>  _
        Public Property BRANCH() As String
            Get
                return _BRANCH
            End Get
            Set
                if not(value is nothing) then
                  _BRANCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account"),  _
         nType("Edm.String"),  _
         tab("Date of Receipt"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYACCOUNT")>  _
        Public Property PAYACCOUNT() As String
            Get
                return _PAYACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _PAYACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date of Receipt"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PAYMENT")>  _
        Public Property PAYMENT() As nullable (of int64)
            Get
                return _PAYMENT
            End Get
            Set
                if not(value is nothing) then
                  _PAYMENT = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SECURE_CHECKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SECURE_CHECKS = JsonConvert.DeserializeObject(Of SECURE_CHECKS)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _CARDNUM = .CARDNUM
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _QPRICE2 = .QPRICE2
                  _CODE2 = .CODE2
                  _IVNUM = .IVNUM
                  _IVCODE = .IVCODE
                  _IVDATE = .IVDATE
                  _DETAILS = .DETAILS
                  _BANKCODE = .BANKCODE
                  _CUSTNAME = .CUSTNAME
                  _BRANCH = .BRANCH
                  _CUSTDES = .CUSTDES
                  _PAYACCOUNT = .PAYACCOUNT
                  _IV = .IV
                  _KLINE = .KLINE
                  _PAYMENT = .PAYMENT
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Balances in Transaction Currency")>  _
    Public Class QUERY_OBLIGO_FNCBAL5
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of OBLIGO_FNCBAL5)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = nothing
            _Name = "OBLIGO_FNCBAL5"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of OBLIGO_FNCBAL5)
            _Parent = Parent
            _name = "OBLIGO_FNCBAL5_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of OBLIGO_FNCBAL5)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(OBLIGO_FNCBAL5)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _OBLIGO_FNCBAL5 As OBLIGO_FNCBAL5 In JsonConvert.DeserializeObject(Of QUERY_OBLIGO_FNCBAL5)(stream.ReadToEnd).Value
              With _OBLIGO_FNCBAL5
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_OBLIGO_FNCBAL5)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, OBLIGO_FNCBAL5)
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .BALANCE5 = obj.BALANCE5
                  .CODE5 = obj.CODE5
                  .BALANCE3 = obj.BALANCE3
                  .BAL3 = obj.BAL3
                  .CODE3 = obj.CODE3
                  .ACCOUNT = obj.ACCOUNT
                  .CURRENCY5 = obj.CURRENCY5
                  .UCUST = obj.UCUST
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new OBLIGO_FNCBAL5(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _OBLIGO_FNCBAL5 as OBLIGO_FNCBAL5 in value
              If _OBLIGO_FNCBAL5.Equals(trycast(obj,OBLIGO_FNCBAL5)) Then
                  value.remove(_OBLIGO_FNCBAL5)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class OBLIGO_FNCBAL5
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _BALANCE5 As Decimal
        
        Private _CODE5 As String
        
        Private _BALANCE3 As Decimal
        
        Private _BAL3 As Decimal
        
        Private _CODE3 As String
        
        Private _ACCOUNT As Long
        
        Private _CURRENCY5 As Long
        
        Private _UCUST As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "OBLIGO_FNCBAL5"
                else
                    return "OBLIGO_FNCBAL5_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACCOUNT={0},CURRENCY5={1},UCUST={2}", _
                  string.format("{0}",ACCOUNT), _
                  string.format("{0}",CURRENCY5), _
                  string.format("{0}",UCUST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal in Transact Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE5")>  _
        Public Property BALANCE5() As nullable(of decimal)
            Get
                return _BALANCE5
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CODE5")>  _
        Public Property CODE5() As String
            Get
                return _CODE5
            End Get
            Set
                if not(value is nothing) then
                  _CODE5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Acct Curr"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE3")>  _
        Public Property BALANCE3() As nullable(of decimal)
            Get
                return _BALANCE3
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Account No."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BAL3")>  _
        Public Property BAL3() As nullable(of decimal)
            Get
                return _BAL3
            End Get
            Set
                if not(value is nothing) then
                  _BAL3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account Currency"),  _
         nType("Edm.String"),  _
         tab("Account No."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE3")>  _
        Public Property CODE3() As String
            Get
                return _CODE3
            End Get
            Set
                if not(value is nothing) then
                  _CODE3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Account No."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACCOUNT")>  _
        Public Property ACCOUNT() As nullable (of int64)
            Get
                return _ACCOUNT
            End Get
            Set
                if not(value is nothing) then
                  _ACCOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transact. Curr (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY5")>  _
        Public Property CURRENCY5() As nullable (of int64)
            Get
                return _CURRENCY5
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Transact. Curr (ID)"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("UCUST")>  _
        Public Property UCUST() As nullable (of int64)
            Get
                return _UCUST
            End Get
            Set
                if not(value is nothing) then
                  _UCUST = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "OBLIGO_FNCBAL5")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACCOUNT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY5")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "UCUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as OBLIGO_FNCBAL5 = JsonConvert.DeserializeObject(Of OBLIGO_FNCBAL5)(e.StreamReader.ReadToEnd)
                With obj
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _BALANCE5 = .BALANCE5
                  _CODE5 = .CODE5
                  _BALANCE3 = .BALANCE3
                  _BAL3 = .BAL3
                  _CODE3 = .CODE3
                  _ACCOUNT = .ACCOUNT
                  _CURRENCY5 = .CURRENCY5
                  _UCUST = .UCUST
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Credit per Company")>  _
    Public Class QUERY_CUSTOBLIGOENV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTOBLIGOENV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = nothing
            _Name = "CUSTOBLIGOENV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTOBLIGOENV)
            _Parent = Parent
            _name = "CUSTOBLIGOENV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTOBLIGOENV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTOBLIGOENV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTOBLIGOENV As CUSTOBLIGOENV In JsonConvert.DeserializeObject(Of QUERY_CUSTOBLIGOENV)(stream.ReadToEnd).Value
              With _CUSTOBLIGOENV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTOBLIGOENV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTOBLIGOENV)
                  .TITLE = obj.TITLE
                  .CREDIT = obj.CREDIT
                  .OBLIGO = obj.OBLIGO
                  .CODE = obj.CODE
                  .DNAME = obj.DNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTOBLIGOENV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTOBLIGOENV as CUSTOBLIGOENV in value
              If _CUSTOBLIGOENV.Equals(trycast(obj,CUSTOBLIGOENV)) Then
                  value.remove(_CUSTOBLIGOENV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTOBLIGOENV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _CREDIT As Decimal
        
        Private _OBLIGO As Decimal
        
        Private _CODE As String
        
        Private _DNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTOBLIGOENV"
                else
                    return "CUSTOBLIGOENV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DNAME={0}", _
                  string.format("'{0}'",DNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Company Name"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Credit"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CREDIT")>  _
        Public Property CREDIT() As nullable(of decimal)
            Get
                return _CREDIT
            End Get
            Set
                if not(value is nothing) then
                  _CREDIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Liability"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Company Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("OBLIGO")>  _
        Public Property OBLIGO() As nullable(of decimal)
            Get
                return _OBLIGO
            End Get
            Set
                if not(value is nothing) then
                  _OBLIGO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Company"),  _
         nType("Edm.String"),  _
         tab("Company Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DNAME")>  _
        Public Property DNAME() As String
            Get
                return _DNAME
            End Get
            Set
                if not(value is nothing) then
                  _DNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTOBLIGOENV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTOBLIGOENV = JsonConvert.DeserializeObject(Of CUSTOBLIGOENV)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _CREDIT = .CREDIT
                  _OBLIGO = .OBLIGO
                  _CODE = .CODE
                  _DNAME = .DNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Dialogue")>  _
    Public Class QUERY_INTERNALDIALOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INTERNALDIALOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = nothing
            _Name = "INTERNALDIALOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = Parent
            _name = "INTERNALDIALOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INTERNALDIALOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INTERNALDIALOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INTERNALDIALOGTEXT As INTERNALDIALOGTEXT In JsonConvert.DeserializeObject(Of QUERY_INTERNALDIALOGTEXT)(stream.ReadToEnd).Value
              With _INTERNALDIALOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INTERNALDIALOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INTERNALDIALOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INTERNALDIALOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INTERNALDIALOGTEXT as INTERNALDIALOGTEXT in value
              If _INTERNALDIALOGTEXT.Equals(trycast(obj,INTERNALDIALOGTEXT)) Then
                  value.remove(_INTERNALDIALOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INTERNALDIALOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INTERNALDIALOGTEXT"
                else
                    return "INTERNALDIALOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Comment"),  _
         nType("Edm.String"),  _
         tab("Comment"),  _
         Pos(30),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Comment", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Comment"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INTERNALDIALOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
End Namespace
