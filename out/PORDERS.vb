Imports system
Imports system.IO
Imports system.xml
Imports System.Net
Imports System.Windows.Forms
Imports System.ComponentModel
Imports Newtonsoft.Json

Namespace OData
    
    <QueryTitle("Purchase Orders")>  _
    Public Class QUERY_PORDERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERS)
            _Parent = nothing
            _Name = "PORDERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "List of Styles")
            .add(2, "Sales Orders for Order")
            .add(3, "Shipping Address")
            .add(4, "Order Authorisation")
            .add(5, "Purchase Order Versions")
            .add(6, "Linkage Details")
            .add(7, "Attachments")
            .add(8, "Projects/Accounts")
            .add(9, "Purchase Orders - Remarks")
            .add(10, "Purchase Order - Vendor Details")
            .add(11, "Internal Remarks for PO")
            .add(12, "Tasks for Document")
            .add(13, "To Do Item")
            .add(14, "History of Statuses")
            .add(15, "History of Changes")
            .add(16, "Payment Terms for Order")
            .add(17, "Internal Dialogue")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERS)
            _Parent = Parent
            _name = "PORDERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "List of Styles")
            .add(2, "Sales Orders for Order")
            .add(3, "Shipping Address")
            .add(4, "Order Authorisation")
            .add(5, "Purchase Order Versions")
            .add(6, "Linkage Details")
            .add(7, "Attachments")
            .add(8, "Projects/Accounts")
            .add(9, "Purchase Orders - Remarks")
            .add(10, "Purchase Order - Vendor Details")
            .add(11, "Internal Remarks for PO")
            .add(12, "Tasks for Document")
            .add(13, "To Do Item")
            .add(14, "History of Statuses")
            .add(15, "History of Changes")
            .add(16, "Payment Terms for Order")
            .add(17, "Internal Dialogue")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERS As PORDERS In JsonConvert.DeserializeObject(Of QUERY_PORDERS)(stream.ReadToEnd).Value
              With _PORDERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERS = JsonConvert.DeserializeObject(Of PORDERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERS)
                  .SUPNAME = obj.SUPNAME
                  .CDES = obj.CDES
                  .NAME = obj.NAME
                  .POSITIONDES = obj.POSITIONDES
                  .CURDATE = obj.CURDATE
                  .ORDNAME = obj.ORDNAME
                  .SUPORDNUM = obj.SUPORDNUM
                  .PRIVTYPE = obj.PRIVTYPE
                  .DEALNAME = obj.DEALNAME
                  .PRDNO = obj.PRDNO
                  .PROJDOCNO = obj.PROJDOCNO
                  .PROJDES = obj.PROJDES
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .CODENAME = obj.CODENAME
                  .CODEDES = obj.CODEDES
                  .CLOSEDBOOL = obj.CLOSEDBOOL
                  .BOOLPCLOSED = obj.BOOLPCLOSED
                  .CHANGEFLAG = obj.CHANGEFLAG
                  .TYPECODE = obj.TYPECODE
                  .TYPEDES = obj.TYPEDES
                  .UFLAG = obj.UFLAG
                  .USERLOGIN = obj.USERLOGIN
                  .PROFNUM = obj.PROFNUM
                  .CORDNAME = obj.CORDNAME
                  .DOCQNO = obj.DOCQNO
                  .IMPFNUM = obj.IMPFNUM
                  .OTYPE = obj.OTYPE
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TAXCODE = obj.TAXCODE
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .FORUSERLOGIN = obj.FORUSERLOGIN
                  .STCODE = obj.STCODE
                  .STDES = obj.STDES
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .PLAN = obj.PLAN
                  .PRINTEDBOOL = obj.PRINTEDBOOL
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .ADVPERCENT = obj.ADVPERCENT
                  .ADVBAL = obj.ADVBAL
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .DETAILS = obj.DETAILS
                  .TOTQUANT = obj.TOTQUANT
                  .BUYERFLAG = obj.BUYERFLAG
                  .CURVERSION = obj.CURVERSION
                  .EXTFILEFLAG = obj.EXTFILEFLAG
                  .CASHFLOWFLAG = obj.CASHFLOWFLAG
                  .PAYFLAG = obj.PAYFLAG
                  .DEPTNAME = obj.DEPTNAME
                  .DEPTDES = obj.DEPTDES
                  .ORD = obj.ORD
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERS as PORDERS in value
              If _PORDERS.Equals(trycast(obj,PORDERS)) Then
                  value.remove(_PORDERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSUPNAME As Boolean = Boolean.FalseString
        
        Private _SUPNAME As String
        
        Private _IsSetCDES As Boolean = Boolean.FalseString
        
        Private _CDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _POSITIONDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetSUPORDNUM As Boolean = Boolean.FalseString
        
        Private _SUPORDNUM As String
        
        Private _PRIVTYPE As String
        
        Private _IsSetDEALNAME As Boolean = Boolean.FalseString
        
        Private _DEALNAME As String
        
        Private _IsSetPRDNO As Boolean = Boolean.FalseString
        
        Private _PRDNO As String
        
        Private _IsSetPROJDOCNO As Boolean = Boolean.FalseString
        
        Private _PROJDOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetOWNERLOGIN As Boolean = Boolean.FalseString
        
        Private _OWNERLOGIN As String
        
        Private _IsSetCODENAME As Boolean = Boolean.FalseString
        
        Private _CODENAME As String
        
        Private _CODEDES As String
        
        Private _IsSetCLOSEDBOOL As Boolean = Boolean.FalseString
        
        Private _CLOSEDBOOL As String
        
        Private _BOOLPCLOSED As String
        
        Private _CHANGEFLAG As String
        
        Private _IsSetTYPECODE As Boolean = Boolean.FalseString
        
        Private _TYPECODE As String
        
        Private _TYPEDES As String
        
        Private _UFLAG As String
        
        Private _USERLOGIN As String
        
        Private _IsSetPROFNUM As Boolean = Boolean.FalseString
        
        Private _PROFNUM As String
        
        Private _IsSetCORDNAME As Boolean = Boolean.FalseString
        
        Private _CORDNAME As String
        
        Private _IsSetDOCQNO As Boolean = Boolean.FalseString
        
        Private _DOCQNO As String
        
        Private _IsSetIMPFNUM As Boolean = Boolean.FalseString
        
        Private _IMPFNUM As String
        
        Private _IsSetOTYPE As Boolean = Boolean.FalseString
        
        Private _OTYPE As String
        
        Private _QPRICE As Decimal
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetTAXCODE As Boolean = Boolean.FalseString
        
        Private _TAXCODE As String
        
        Private _IsSetWARHSNAME As Boolean = Boolean.FalseString
        
        Private _WARHSNAME As String
        
        Private _IsSetLOCNAME As Boolean = Boolean.FalseString
        
        Private _LOCNAME As String
        
        Private _IsSetFORUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _FORUSERLOGIN As String
        
        Private _IsSetSTCODE As Boolean = Boolean.FalseString
        
        Private _STCODE As String
        
        Private _STDES As String
        
        Private _IsSetPAYCODE As Boolean = Boolean.FalseString
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _IsSetPLAN As Boolean = Boolean.FalseString
        
        Private _PLAN As String
        
        Private _PRINTEDBOOL As String
        
        Private _IsSetLCODE As Boolean = Boolean.FalseString
        
        Private _LCODE As String
        
        Private _IsSetLEXCH As Boolean = Boolean.FalseString
        
        Private _LEXCH As Decimal
        
        Private _IsSetADVPERCENT As Boolean = Boolean.FalseString
        
        Private _ADVPERCENT As Decimal
        
        Private _ADVBAL As Decimal
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetBUYERFLAG As Boolean = Boolean.FalseString
        
        Private _BUYERFLAG As String
        
        Private _CURVERSION As Long
        
        Private _EXTFILEFLAG As String
        
        Private _IsSetCASHFLOWFLAG As Boolean = Boolean.FalseString
        
        Private _CASHFLOWFLAG As String
        
        Private _PAYFLAG As String
        
        Private _IsSetDEPTNAME As Boolean = Boolean.FalseString
        
        Private _DEPTNAME As String
        
        Private _DEPTDES As String
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Private _PORDERITEMS_SUBFORM As QUERY_PORDERITEMS
        
        Private _MATRIXSUM_SUBFORM As QUERY_MATRIXSUM
        
        Private _PORDORD_SUBFORM As QUERY_PORDORD
        
        Private _SHIPTO_SUBFORM As QUERY_SHIPTO
        
        Private _PORDERUSER_SUBFORM As QUERY_PORDERUSER
        
        Private _PORDERSVER_SUBFORM As QUERY_PORDERSVER
        
        Private _LINKING_SUBFORM As QUERY_LINKING
        
        Private _EXTFILES_SUBFORM As QUERY_EXTFILES
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _PORDERSTEXT_SUBFORM As QUERY_PORDERSTEXT
        
        Private _PORDERSCONT_SUBFORM As QUERY_PORDERSCONT
        
        Private _PORDERSREMARKS_SUBFORM As QUERY_PORDERSREMARKS
        
        Private _GENCUSTNOTES_SUBFORM As QUERY_GENCUSTNOTES
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _PORD_CHANGES_LOG_SUBFORM As QUERY_PORD_CHANGES_LOG
        
        Private _PORDPAY_SUBFORM As QUERY_PORDPAY
        
        Private _INTERNALDIALOGTEXT_SUBFORM As QUERY_INTERNALDIALOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("List of Styles"))
            ChildQuery.add(2, new oNavigation("Sales Orders for Order"))
            ChildQuery.add(3, new oNavigation("Shipping Address"))
            ChildQuery.add(4, new oNavigation("Order Authorisation"))
            ChildQuery.add(5, new oNavigation("Purchase Order Versions"))
            ChildQuery.add(6, new oNavigation("Linkage Details"))
            ChildQuery.add(7, new oNavigation("Attachments"))
            ChildQuery.add(8, new oNavigation("Projects/Accounts"))
            ChildQuery.add(9, new oNavigation("Purchase Orders - Remarks"))
            ChildQuery.add(10, new oNavigation("Purchase Order - Vendor Details"))
            ChildQuery.add(11, new oNavigation("Internal Remarks for PO"))
            ChildQuery.add(12, new oNavigation("Tasks for Document"))
            ChildQuery.add(13, new oNavigation("To Do Item"))
            ChildQuery.add(14, new oNavigation("History of Statuses"))
            ChildQuery.add(15, new oNavigation("History of Changes"))
            ChildQuery.add(16, new oNavigation("Payment Terms for Order"))
            ChildQuery.add(17, new oNavigation("Internal Dialogue"))
            _PORDERITEMS_SUBFORM = new QUERY_PORDERITEMS(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _PORDORD_SUBFORM = new QUERY_PORDORD(me)
            _SHIPTO_SUBFORM = new QUERY_SHIPTO(me)
            _PORDERUSER_SUBFORM = new QUERY_PORDERUSER(me)
            _PORDERSVER_SUBFORM = new QUERY_PORDERSVER(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PORDERSTEXT_SUBFORM = new QUERY_PORDERSTEXT(me)
            _PORDERSCONT_SUBFORM = new QUERY_PORDERSCONT(me)
            _PORDERSREMARKS_SUBFORM = new QUERY_PORDERSREMARKS(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PORD_CHANGES_LOG_SUBFORM = new QUERY_PORD_CHANGES_LOG(me)
            _PORDPAY_SUBFORM = new QUERY_PORDPAY(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_SHIPTO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_PORDERUSER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PORDERSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PORDERSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PORDERSCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PORDERSREMARKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_PORD_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_PORDPAY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("List of Styles"))
            ChildQuery.add(2, new oNavigation("Sales Orders for Order"))
            ChildQuery.add(3, new oNavigation("Shipping Address"))
            ChildQuery.add(4, new oNavigation("Order Authorisation"))
            ChildQuery.add(5, new oNavigation("Purchase Order Versions"))
            ChildQuery.add(6, new oNavigation("Linkage Details"))
            ChildQuery.add(7, new oNavigation("Attachments"))
            ChildQuery.add(8, new oNavigation("Projects/Accounts"))
            ChildQuery.add(9, new oNavigation("Purchase Orders - Remarks"))
            ChildQuery.add(10, new oNavigation("Purchase Order - Vendor Details"))
            ChildQuery.add(11, new oNavigation("Internal Remarks for PO"))
            ChildQuery.add(12, new oNavigation("Tasks for Document"))
            ChildQuery.add(13, new oNavigation("To Do Item"))
            ChildQuery.add(14, new oNavigation("History of Statuses"))
            ChildQuery.add(15, new oNavigation("History of Changes"))
            ChildQuery.add(16, new oNavigation("Payment Terms for Order"))
            ChildQuery.add(17, new oNavigation("Internal Dialogue"))
            _PORDERITEMS_SUBFORM = new QUERY_PORDERITEMS(me)
            _MATRIXSUM_SUBFORM = new QUERY_MATRIXSUM(me)
            _PORDORD_SUBFORM = new QUERY_PORDORD(me)
            _SHIPTO_SUBFORM = new QUERY_SHIPTO(me)
            _PORDERUSER_SUBFORM = new QUERY_PORDERUSER(me)
            _PORDERSVER_SUBFORM = new QUERY_PORDERSVER(me)
            _LINKING_SUBFORM = new QUERY_LINKING(me)
            _EXTFILES_SUBFORM = new QUERY_EXTFILES(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PORDERSTEXT_SUBFORM = new QUERY_PORDERSTEXT(me)
            _PORDERSCONT_SUBFORM = new QUERY_PORDERSCONT(me)
            _PORDERSREMARKS_SUBFORM = new QUERY_PORDERSREMARKS(me)
            _GENCUSTNOTES_SUBFORM = new QUERY_GENCUSTNOTES(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _PORD_CHANGES_LOG_SUBFORM = new QUERY_PORD_CHANGES_LOG(me)
            _PORDPAY_SUBFORM = new QUERY_PORDPAY(me)
            _INTERNALDIALOGTEXT_SUBFORM = new QUERY_INTERNALDIALOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERITEMS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUM_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDORD_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_SHIPTO_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_PORDERUSER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_PORDERSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_LINKING_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_EXTFILES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PORDERSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_PORDERSCONT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PORDERSREMARKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_GENCUSTNOTES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_PORD_CHANGES_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_PORDPAY_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_INTERNALDIALOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMS_SUBFORM))
                   .add(1, new oNavigation("List of Styles", _MATRIXSUM_SUBFORM))
                   .add(2, new oNavigation("Sales Orders for Order", _PORDORD_SUBFORM))
                   .add(3, new oNavigation("Shipping Address", _SHIPTO_SUBFORM))
                   .add(4, new oNavigation("Order Authorisation", _PORDERUSER_SUBFORM))
                   .add(5, new oNavigation("Purchase Order Versions", _PORDERSVER_SUBFORM))
                   .add(6, new oNavigation("Linkage Details", _LINKING_SUBFORM))
                   .add(7, new oNavigation("Attachments", _EXTFILES_SUBFORM))
                   .add(8, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(9, new oNavigation("Purchase Orders - Remarks", _PORDERSTEXT_SUBFORM))
                   .add(10, new oNavigation("Purchase Order - Vendor Details", _PORDERSCONT_SUBFORM))
                   .add(11, new oNavigation("Internal Remarks for PO", _PORDERSREMARKS_SUBFORM))
                   .add(12, new oNavigation("Tasks for Document", _GENCUSTNOTES_SUBFORM))
                   .add(13, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(14, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(15, new oNavigation("History of Changes", _PORD_CHANGES_LOG_SUBFORM))
                   .add(16, new oNavigation("Payment Terms for Order", _PORDPAY_SUBFORM))
                   .add(17, new oNavigation("Internal Dialogue", _INTERNALDIALOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERS"
                else
                    return "PORDERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Vendor Number"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(5),  _
         Mandatory(true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Number", value, "^.{0,16}$") then Exit Property
                _IsSetSUPNAME = True
                If loading Then
                  _SUPNAME = Value
                Else
                    if not _SUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Name"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(10),  _
         twodBarcode("CDES")>  _
        Public Property CDES() As String
            Get
                return _CDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Name", value, "^.{0,48}$") then Exit Property
                _IsSetCDES = True
                If loading Then
                  _CDES = Value
                Else
                    if not _CDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(20),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Job Title"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("POSITIONDES")>  _
        Public Property POSITIONDES() As String
            Get
                return _POSITIONDES
            End Get
            Set
                if not(value is nothing) then
                  _POSITIONDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Vendor Number"),  _
         Pos(25),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(35),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Order"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(38),  _
         twodBarcode("SUPORDNUM")>  _
        Public Property SUPORDNUM() As String
            Get
                return _SUPORDNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Order", value, "^.{0,16}$") then Exit Property
                _IsSetSUPORDNUM = True
                If loading Then
                  _SUPORDNUM = Value
                Else
                    if not _SUPORDNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPORDNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPORDNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Overall Quality Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("PRIVTYPE")>  _
        Public Property PRIVTYPE() As String
            Get
                return _PRIVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _PRIVTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Blanket Order"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(50),  _
         twodBarcode("DEALNAME")>  _
        Public Property DEALNAME() As String
            Get
                return _DEALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Blanket Order", value, "^.{0,16}$") then Exit Property
                _IsSetDEALNAME = True
                If loading Then
                  _DEALNAME = Value
                Else
                    if not _DEALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Purch Demand Doc No."),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(60),  _
         twodBarcode("PRDNO")>  _
        Public Property PRDNO() As String
            Get
                return _PRDNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Purch Demand Doc No.", value, "^.{0,16}$") then Exit Property
                _IsSetPRDNO = True
                If loading Then
                  _PRDNO = Value
                Else
                    if not _PRDNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRDNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRDNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(62),  _
         twodBarcode("PROJDOCNO")>  _
        Public Property PROJDOCNO() As String
            Get
                return _PROJDOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetPROJDOCNO = True
                If loading Then
                  _PROJDOCNO = Value
                Else
                    if not _PROJDOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROJDOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROJDOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(63),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(65),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(66),  _
         Mandatory(true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetOWNERLOGIN = True
                If loading Then
                  _OWNERLOGIN = Value
                Else
                    if not _OWNERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OWNERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OWNERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Authoriser List Code"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(67),  _
         twodBarcode("CODENAME")>  _
        Public Property CODENAME() As String
            Get
                return _CODENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Authoriser List Code", value, "^.{0,3}$") then Exit Property
                _IsSetCODENAME = True
                If loading Then
                  _CODENAME = Value
                Else
                    if not _CODENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("List Description"),  _
         nType("Edm.String"),  _
         tab("Blanket Order"),  _
         Pos(68),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Closed?"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(70),  _
         twodBarcode("CLOSEDBOOL")>  _
        Public Property CLOSEDBOOL() As String
            Get
                return _CLOSEDBOOL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Closed?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSEDBOOL = True
                If loading Then
                  _CLOSEDBOOL = Value
                Else
                    if not _CLOSEDBOOL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSEDBOOL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSEDBOOL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Partially Closed"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(71),  _
         [ReadOnly](true),  _
         twodBarcode("BOOLPCLOSED")>  _
        Public Property BOOLPCLOSED() As String
            Get
                return _BOOLPCLOSED
            End Get
            Set
                if not(value is nothing) then
                  _BOOLPCLOSED = Value
                end if
            End Set
        End Property
        
        <DisplayName("Allow Revisions"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(72),  _
         [ReadOnly](true),  _
         twodBarcode("CHANGEFLAG")>  _
        Public Property CHANGEFLAG() As String
            Get
                return _CHANGEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _CHANGEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Type"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(75),  _
         twodBarcode("TYPECODE")>  _
        Public Property TYPECODE() As String
            Get
                return _TYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order Type", value, "^.{0,3}$") then Exit Property
                _IsSetTYPECODE = True
                If loading Then
                  _TYPECODE = Value
                Else
                    if not _TYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Description of Type"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(76),  _
         [ReadOnly](true),  _
         twodBarcode("TYPEDES")>  _
        Public Property TYPEDES() As String
            Get
                return _TYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _TYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorised?"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("UFLAG")>  _
        Public Property UFLAG() As String
            Get
                return _UFLAG
            End Get
            Set
                if not(value is nothing) then
                  _UFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Next Signature"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Number"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(100),  _
         twodBarcode("PROFNUM")>  _
        Public Property PROFNUM() As String
            Get
                return _PROFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quote Number", value, "^.{0,16}$") then Exit Property
                _IsSetPROFNUM = True
                If loading Then
                  _PROFNUM = Value
                Else
                    if not _PROFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PROFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PROFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Sales Order"),  _
         nType("Edm.String"),  _
         tab("Sales Order"),  _
         Pos(110),  _
         twodBarcode("CORDNAME")>  _
        Public Property CORDNAME() As String
            Get
                return _CORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Order", value, "^.{0,16}$") then Exit Property
                _IsSetCORDNAME = True
                If loading Then
                  _CORDNAME = Value
                Else
                    if not _CORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Service Call"),  _
         nType("Edm.String"),  _
         tab("Sales Order"),  _
         Pos(115),  _
         twodBarcode("DOCQNO")>  _
        Public Property DOCQNO() As String
            Get
                return _DOCQNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Service Call", value, "^.{0,16}$") then Exit Property
                _IsSetDOCQNO = True
                If loading Then
                  _DOCQNO = Value
                Else
                    if not _DOCQNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCQNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCQNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Voucher No."),  _
         nType("Edm.String"),  _
         tab("Sales Order"),  _
         Pos(117),  _
         twodBarcode("IMPFNUM")>  _
        Public Property IMPFNUM() As String
            Get
                return _IMPFNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Voucher No.", value, "^.{0,16}$") then Exit Property
                _IsSetIMPFNUM = True
                If loading Then
                  _IMPFNUM = Value
                Else
                    if not _IMPFNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPFNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPFNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ship. Voucher Type"),  _
         nType("Edm.String"),  _
         tab("Sales Order"),  _
         Pos(118),  _
         twodBarcode("OTYPE")>  _
        Public Property OTYPE() As String
            Get
                return _OTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ship. Voucher Type", value, "^.{0,1}$") then Exit Property
                _IsSetOTYPE = True
                If loading Then
                  _OTYPE = Value
                Else
                    if not _OTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("OTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _OTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Order"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Sales Order"),  _
         Pos(130),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Overall Discount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Order"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Sales Order"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Final Price"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(170),  _
         Mandatory(true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(175),  _
         Mandatory(true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tax Code", value, "^.{0,8}$") then Exit Property
                _IsSetTAXCODE = True
                If loading Then
                  _TAXCODE = Value
                Else
                    if not _TAXCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TAXCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TAXCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Receiving Warehouse"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(180),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Receiving Warehouse", value, "^.{0,4}$") then Exit Property
                _IsSetWARHSNAME = True
                If loading Then
                  _WARHSNAME = Value
                Else
                    if not _WARHSNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WARHSNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WARHSNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(190),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bin", value, "^.{0,14}$") then Exit Property
                _IsSetLOCNAME = True
                If loading Then
                  _LOCNAME = Value
                Else
                    if not _LOCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LOCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LOCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("For User"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(195),  _
         twodBarcode("FORUSERLOGIN")>  _
        Public Property FORUSERLOGIN() As String
            Get
                return _FORUSERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("For User", value, "^.{0,20}$") then Exit Property
                _IsSetFORUSERLOGIN = True
                If loading Then
                  _FORUSERLOGIN = Value
                Else
                    if not _FORUSERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FORUSERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FORUSERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipment Code"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(200),  _
         twodBarcode("STCODE")>  _
        Public Property STCODE() As String
            Get
                return _STCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipment Code", value, "^.{0,2}$") then Exit Property
                _IsSetSTCODE = True
                If loading Then
                  _STCODE = Value
                Else
                    if not _STCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Method"),  _
         nType("Edm.String"),  _
         tab("Final Price"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("STDES")>  _
        Public Property STDES() As String
            Get
                return _STDES
            End Get
            Set
                if not(value is nothing) then
                  _STDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Payment Terms Code"),  _
         Pos(220),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Terms Code", value, "^.{0,3}$") then Exit Property
                _IsSetPAYCODE = True
                If loading Then
                  _PAYCODE = Value
                Else
                    if not _PAYCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Payment Terms Code"),  _
         Pos(230),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Affects Planning?"),  _
         nType("Edm.String"),  _
         tab("Payment Terms Code"),  _
         Pos(240),  _
         twodBarcode("PLAN")>  _
        Public Property PLAN() As String
            Get
                return _PLAN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Affects Planning?", value, "^.{0,1}$") then Exit Property
                _IsSetPLAN = True
                If loading Then
                  _PLAN = Value
                Else
                    if not _PLAN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLAN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLAN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Printed"),  _
         nType("Edm.String"),  _
         tab("Payment Terms Code"),  _
         Pos(250),  _
         [ReadOnly](true),  _
         twodBarcode("PRINTEDBOOL")>  _
        Public Property PRINTEDBOOL() As String
            Get
                return _PRINTEDBOOL
            End Get
            Set
                if not(value is nothing) then
                  _PRINTEDBOOL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Payment Terms Code"),  _
         Pos(260),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linked Currency", value, "^.{0,3}$") then Exit Property
                _IsSetLCODE = True
                If loading Then
                  _LCODE = Value
                Else
                    if not _LCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Payment Terms Code"),  _
         Pos(270),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetLEXCH = True
                If loading Then
                  _LEXCH = Value
                Else
                    if not _LEXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LEXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LEXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("% Advance Pay Deduct"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Payment Terms Code"),  _
         Pos(280),  _
         twodBarcode("ADVPERCENT")>  _
        Public Property ADVPERCENT() As nullable(of decimal)
            Get
                return _ADVPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% Advance Pay Deduct", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetADVPERCENT = True
                If loading Then
                  _ADVPERCENT = Value
                Else
                    if not _ADVPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADVPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADVPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("AdvancePaymt Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Terms Code"),  _
         Pos(290),  _
         [ReadOnly](true),  _
         twodBarcode("ADVBAL")>  _
        Public Property ADVBAL() As nullable(of decimal)
            Get
                return _ADVBAL
            End Get
            Set
                if not(value is nothing) then
                  _ADVBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(300),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(302),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(320),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Qty of Items"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Branch Code"),  _
         Pos(322),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Buyer Only"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(325),  _
         twodBarcode("BUYERFLAG")>  _
        Public Property BUYERFLAG() As String
            Get
                return _BUYERFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Buyer Only", value, "^.{0,1}$") then Exit Property
                _IsSetBUYERFLAG = True
                If loading Then
                  _BUYERFLAG = Value
                Else
                    if not _BUYERFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUYERFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUYERFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Current Version"),  _
         nType("Edm.Int64"),  _
         tab("Branch Code"),  _
         Pos(330),  _
         [ReadOnly](true),  _
         twodBarcode("CURVERSION")>  _
        Public Property CURVERSION() As nullable (of int64)
            Get
                return _CURVERSION
            End Get
            Set
                if not(value is nothing) then
                  _CURVERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachments?"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(350),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILEFLAG")>  _
        Public Property EXTFILEFLAG() As String
            Get
                return _EXTFILEFLAG
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILEFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("Omit from Cash Flow?"),  _
         nType("Edm.String"),  _
         tab("Branch Code"),  _
         Pos(360),  _
         twodBarcode("CASHFLOWFLAG")>  _
        Public Property CASHFLOWFLAG() As String
            Get
                return _CASHFLOWFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Omit from Cash Flow?", value, "^.{0,1}$") then Exit Property
                _IsSetCASHFLOWFLAG = True
                If loading Then
                  _CASHFLOWFLAG = Value
                Else
                    if not _CASHFLOWFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CASHFLOWFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CASHFLOWFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Paymt Terms/Order?"),  _
         nType("Edm.String"),  _
         tab("Paymt Terms/Order?"),  _
         Pos(370),  _
         [ReadOnly](true),  _
         twodBarcode("PAYFLAG")>  _
        Public Property PAYFLAG() As String
            Get
                return _PAYFLAG
            End Get
            Set
                if not(value is nothing) then
                  _PAYFLAG = Value
                end if
            End Set
        End Property
        
        <DisplayName("For Department"),  _
         nType("Edm.String"),  _
         tab("Paymt Terms/Order?"),  _
         Pos(380),  _
         twodBarcode("DEPTNAME")>  _
        Public Property DEPTNAME() As String
            Get
                return _DEPTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("For Department", value, "^.{0,6}$") then Exit Property
                _IsSetDEPTNAME = True
                If loading Then
                  _DEPTNAME = Value
                Else
                    if not _DEPTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEPTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEPTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Dept. Description"),  _
         nType("Edm.String"),  _
         tab("Paymt Terms/Order?"),  _
         Pos(390),  _
         [ReadOnly](true),  _
         twodBarcode("DEPTDES")>  _
        Public Property DEPTDES() As String
            Get
                return _DEPTDES
            End Get
            Set
                if not(value is nothing) then
                  _DEPTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Paymt Terms/Order?"),  _
         Pos(1),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMS_SUBFORM() As QUERY_PORDERITEMS
            Get
                return _PORDERITEMS_SUBFORM
            End Get
            Set
                _PORDERITEMS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUM_SUBFORM() As QUERY_MATRIXSUM
            Get
                return _MATRIXSUM_SUBFORM
            End Get
            Set
                _MATRIXSUM_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDORD_SUBFORM() As QUERY_PORDORD
            Get
                return _PORDORD_SUBFORM
            End Get
            Set
                _PORDORD_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SHIPTO_SUBFORM() As QUERY_SHIPTO
            Get
                return _SHIPTO_SUBFORM
            End Get
            Set
                _SHIPTO_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERUSER_SUBFORM() As QUERY_PORDERUSER
            Get
                return _PORDERUSER_SUBFORM
            End Get
            Set
                _PORDERUSER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSVER_SUBFORM() As QUERY_PORDERSVER
            Get
                return _PORDERSVER_SUBFORM
            End Get
            Set
                _PORDERSVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKING_SUBFORM() As QUERY_LINKING
            Get
                return _LINKING_SUBFORM
            End Get
            Set
                _LINKING_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILES_SUBFORM() As QUERY_EXTFILES
            Get
                return _EXTFILES_SUBFORM
            End Get
            Set
                _EXTFILES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSTEXT_SUBFORM() As QUERY_PORDERSTEXT
            Get
                return _PORDERSTEXT_SUBFORM
            End Get
            Set
                _PORDERSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSCONT_SUBFORM() As QUERY_PORDERSCONT
            Get
                return _PORDERSCONT_SUBFORM
            End Get
            Set
                _PORDERSCONT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSREMARKS_SUBFORM() As QUERY_PORDERSREMARKS
            Get
                return _PORDERSREMARKS_SUBFORM
            End Get
            Set
                _PORDERSREMARKS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property GENCUSTNOTES_SUBFORM() As QUERY_GENCUSTNOTES
            Get
                return _GENCUSTNOTES_SUBFORM
            End Get
            Set
                _GENCUSTNOTES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORD_CHANGES_LOG_SUBFORM() As QUERY_PORD_CHANGES_LOG
            Get
                return _PORD_CHANGES_LOG_SUBFORM
            End Get
            Set
                _PORD_CHANGES_LOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDPAY_SUBFORM() As QUERY_PORDPAY
            Get
                return _PORDPAY_SUBFORM
            End Get
            Set
                _PORDPAY_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property INTERNALDIALOGTEXT_SUBFORM() As QUERY_INTERNALDIALOGTEXT
            Get
                return _INTERNALDIALOGTEXT_SUBFORM
            End Get
            Set
                _INTERNALDIALOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSUPNAME then
              if f then
                  jw.WriteRaw(", ""SUPNAME"": ")
              else
                  jw.WriteRaw("""SUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPNAME)
            end if
            if _IsSetCDES then
              if f then
                  jw.WriteRaw(", ""CDES"": ")
              else
                  jw.WriteRaw("""CDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetSUPORDNUM then
              if f then
                  jw.WriteRaw(", ""SUPORDNUM"": ")
              else
                  jw.WriteRaw("""SUPORDNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPORDNUM)
            end if
            if _IsSetDEALNAME then
              if f then
                  jw.WriteRaw(", ""DEALNAME"": ")
              else
                  jw.WriteRaw("""DEALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DEALNAME)
            end if
            if _IsSetPRDNO then
              if f then
                  jw.WriteRaw(", ""PRDNO"": ")
              else
                  jw.WriteRaw("""PRDNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRDNO)
            end if
            if _IsSetPROJDOCNO then
              if f then
                  jw.WriteRaw(", ""PROJDOCNO"": ")
              else
                  jw.WriteRaw("""PROJDOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.PROJDOCNO)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetOWNERLOGIN then
              if f then
                  jw.WriteRaw(", ""OWNERLOGIN"": ")
              else
                  jw.WriteRaw("""OWNERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.OWNERLOGIN)
            end if
            if _IsSetCODENAME then
              if f then
                  jw.WriteRaw(", ""CODENAME"": ")
              else
                  jw.WriteRaw("""CODENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CODENAME)
            end if
            if _IsSetCLOSEDBOOL then
              if f then
                  jw.WriteRaw(", ""CLOSEDBOOL"": ")
              else
                  jw.WriteRaw("""CLOSEDBOOL"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSEDBOOL)
            end if
            if _IsSetTYPECODE then
              if f then
                  jw.WriteRaw(", ""TYPECODE"": ")
              else
                  jw.WriteRaw("""TYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TYPECODE)
            end if
            if _IsSetPROFNUM then
              if f then
                  jw.WriteRaw(", ""PROFNUM"": ")
              else
                  jw.WriteRaw("""PROFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PROFNUM)
            end if
            if _IsSetCORDNAME then
              if f then
                  jw.WriteRaw(", ""CORDNAME"": ")
              else
                  jw.WriteRaw("""CORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CORDNAME)
            end if
            if _IsSetDOCQNO then
              if f then
                  jw.WriteRaw(", ""DOCQNO"": ")
              else
                  jw.WriteRaw("""DOCQNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCQNO)
            end if
            if _IsSetIMPFNUM then
              if f then
                  jw.WriteRaw(", ""IMPFNUM"": ")
              else
                  jw.WriteRaw("""IMPFNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPFNUM)
            end if
            if _IsSetOTYPE then
              if f then
                  jw.WriteRaw(", ""OTYPE"": ")
              else
                  jw.WriteRaw("""OTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.OTYPE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetTAXCODE then
              if f then
                  jw.WriteRaw(", ""TAXCODE"": ")
              else
                  jw.WriteRaw("""TAXCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TAXCODE)
            end if
            if _IsSetWARHSNAME then
              if f then
                  jw.WriteRaw(", ""WARHSNAME"": ")
              else
                  jw.WriteRaw("""WARHSNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.WARHSNAME)
            end if
            if _IsSetLOCNAME then
              if f then
                  jw.WriteRaw(", ""LOCNAME"": ")
              else
                  jw.WriteRaw("""LOCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.LOCNAME)
            end if
            if _IsSetFORUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""FORUSERLOGIN"": ")
              else
                  jw.WriteRaw("""FORUSERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.FORUSERLOGIN)
            end if
            if _IsSetSTCODE then
              if f then
                  jw.WriteRaw(", ""STCODE"": ")
              else
                  jw.WriteRaw("""STCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.STCODE)
            end if
            if _IsSetPAYCODE then
              if f then
                  jw.WriteRaw(", ""PAYCODE"": ")
              else
                  jw.WriteRaw("""PAYCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYCODE)
            end if
            if _IsSetPLAN then
              if f then
                  jw.WriteRaw(", ""PLAN"": ")
              else
                  jw.WriteRaw("""PLAN"": ")
                  f = true
              end if
              jw.WriteValue(me.PLAN)
            end if
            if _IsSetLCODE then
              if f then
                  jw.WriteRaw(", ""LCODE"": ")
              else
                  jw.WriteRaw("""LCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.LCODE)
            end if
            if _IsSetLEXCH then
              if f then
                  jw.WriteRaw(", ""LEXCH"": ")
              else
                  jw.WriteRaw("""LEXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.LEXCH)
            end if
            if _IsSetADVPERCENT then
              if f then
                  jw.WriteRaw(", ""ADVPERCENT"": ")
              else
                  jw.WriteRaw("""ADVPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.ADVPERCENT)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetBUYERFLAG then
              if f then
                  jw.WriteRaw(", ""BUYERFLAG"": ")
              else
                  jw.WriteRaw("""BUYERFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.BUYERFLAG)
            end if
            if _IsSetCASHFLOWFLAG then
              if f then
                  jw.WriteRaw(", ""CASHFLOWFLAG"": ")
              else
                  jw.WriteRaw("""CASHFLOWFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.CASHFLOWFLAG)
            end if
            if _IsSetDEPTNAME then
              if f then
                  jw.WriteRaw(", ""DEPTNAME"": ")
              else
                  jw.WriteRaw("""DEPTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DEPTNAME)
            end if
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
            if _PORDERITEMS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMS in _PORDERITEMS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUM_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUM_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDORD_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDORD_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDORD in _PORDORD_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDORD_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SHIPTO_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SHIPTO_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SHIPTO in _SHIPTO_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SHIPTO_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERUSER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERUSER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERUSER in _PORDERUSER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERUSER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSVER in _PORDERSVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKING_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKING in _LINKING_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKING_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILES in _EXTFILES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSTEXT in _PORDERSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSCONT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSCONT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSCONT in _PORDERSCONT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSCONT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSREMARKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSREMARKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSREMARKS in _PORDERSREMARKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSREMARKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", GENCUSTNOTES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _GENCUSTNOTES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORD_CHANGES_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORD_CHANGES_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORD_CHANGES_LOG in _PORD_CHANGES_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORD_CHANGES_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDPAY_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDPAY_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDPAY in _PORDPAY_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDPAY_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", INTERNALDIALOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _INTERNALDIALOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetSUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPNAME")
              .WriteAttributeString("value", me.SUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CDES")
              .WriteAttributeString("value", me.CDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSUPORDNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPORDNUM")
              .WriteAttributeString("value", me.SUPORDNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDEALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEALNAME")
              .WriteAttributeString("value", me.DEALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPRDNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRDNO")
              .WriteAttributeString("value", me.PRDNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPROJDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROJDOCNO")
              .WriteAttributeString("value", me.PROJDOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetOWNERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OWNERLOGIN")
              .WriteAttributeString("value", me.OWNERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetCODENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODENAME")
              .WriteAttributeString("value", me.CODENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCLOSEDBOOL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSEDBOOL")
              .WriteAttributeString("value", me.CLOSEDBOOL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TYPECODE")
              .WriteAttributeString("value", me.TYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPROFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PROFNUM")
              .WriteAttributeString("value", me.PROFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CORDNAME")
              .WriteAttributeString("value", me.CORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDOCQNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCQNO")
              .WriteAttributeString("value", me.DOCQNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetIMPFNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPFNUM")
              .WriteAttributeString("value", me.IMPFNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetOTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "OTYPE")
              .WriteAttributeString("value", me.OTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetTAXCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TAXCODE")
              .WriteAttributeString("value", me.TAXCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetWARHSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WARHSNAME")
              .WriteAttributeString("value", me.WARHSNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetLOCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LOCNAME")
              .WriteAttributeString("value", me.LOCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "14")
              .WriteEndElement
            end if
            if _IsSetFORUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FORUSERLOGIN")
              .WriteAttributeString("value", me.FORUSERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STCODE")
              .WriteAttributeString("value", me.STCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetPAYCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYCODE")
              .WriteAttributeString("value", me.PAYCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPLAN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLAN")
              .WriteAttributeString("value", me.PLAN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetLCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LCODE")
              .WriteAttributeString("value", me.LCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetLEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LEXCH")
              .WriteAttributeString("value", me.LEXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetADVPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADVPERCENT")
              .WriteAttributeString("value", me.ADVPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetBUYERFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUYERFLAG")
              .WriteAttributeString("value", me.BUYERFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCASHFLOWFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CASHFLOWFLAG")
              .WriteAttributeString("value", me.CASHFLOWFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetDEPTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEPTNAME")
              .WriteAttributeString("value", me.DEPTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PORDERITEMS_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMS in _PORDERITEMS_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMS_SUBFORM")
              next
            end if
            if _MATRIXSUM_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUM in _MATRIXSUM_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUM_SUBFORM")
              next
            end if
            if _PORDORD_SUBFORM.value.count > 0 then
              for each itm as PORDORD in _PORDORD_SUBFORM.Value
                itm.toXML(xw,"PORDORD_SUBFORM")
              next
            end if
            if _SHIPTO_SUBFORM.value.count > 0 then
              for each itm as SHIPTO in _SHIPTO_SUBFORM.Value
                itm.toXML(xw,"SHIPTO_SUBFORM")
              next
            end if
            if _PORDERUSER_SUBFORM.value.count > 0 then
              for each itm as PORDERUSER in _PORDERUSER_SUBFORM.Value
                itm.toXML(xw,"PORDERUSER_SUBFORM")
              next
            end if
            if _PORDERSVER_SUBFORM.value.count > 0 then
              for each itm as PORDERSVER in _PORDERSVER_SUBFORM.Value
                itm.toXML(xw,"PORDERSVER_SUBFORM")
              next
            end if
            if _LINKING_SUBFORM.value.count > 0 then
              for each itm as LINKING in _LINKING_SUBFORM.Value
                itm.toXML(xw,"LINKING_SUBFORM")
              next
            end if
            if _EXTFILES_SUBFORM.value.count > 0 then
              for each itm as EXTFILES in _EXTFILES_SUBFORM.Value
                itm.toXML(xw,"EXTFILES_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _PORDERSTEXT_SUBFORM.value.count > 0 then
              for each itm as PORDERSTEXT in _PORDERSTEXT_SUBFORM.Value
                itm.toXML(xw,"PORDERSTEXT_SUBFORM")
              next
            end if
            if _PORDERSCONT_SUBFORM.value.count > 0 then
              for each itm as PORDERSCONT in _PORDERSCONT_SUBFORM.Value
                itm.toXML(xw,"PORDERSCONT_SUBFORM")
              next
            end if
            if _PORDERSREMARKS_SUBFORM.value.count > 0 then
              for each itm as PORDERSREMARKS in _PORDERSREMARKS_SUBFORM.Value
                itm.toXML(xw,"PORDERSREMARKS_SUBFORM")
              next
            end if
            if _GENCUSTNOTES_SUBFORM.value.count > 0 then
              for each itm as GENCUSTNOTES in _GENCUSTNOTES_SUBFORM.Value
                itm.toXML(xw,"GENCUSTNOTES_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _PORD_CHANGES_LOG_SUBFORM.value.count > 0 then
              for each itm as PORD_CHANGES_LOG in _PORD_CHANGES_LOG_SUBFORM.Value
                itm.toXML(xw,"PORD_CHANGES_LOG_SUBFORM")
              next
            end if
            if _PORDPAY_SUBFORM.value.count > 0 then
              for each itm as PORDPAY in _PORDPAY_SUBFORM.Value
                itm.toXML(xw,"PORDPAY_SUBFORM")
              next
            end if
            if _INTERNALDIALOGTEXT_SUBFORM.value.count > 0 then
              for each itm as INTERNALDIALOGTEXT in _INTERNALDIALOGTEXT_SUBFORM.Value
                itm.toXML(xw,"INTERNALDIALOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERS = JsonConvert.DeserializeObject(Of PORDERS)(e.StreamReader.ReadToEnd)
                With obj
                  _SUPNAME = .SUPNAME
                  _CDES = .CDES
                  _NAME = .NAME
                  _POSITIONDES = .POSITIONDES
                  _CURDATE = .CURDATE
                  _ORDNAME = .ORDNAME
                  _SUPORDNUM = .SUPORDNUM
                  _PRIVTYPE = .PRIVTYPE
                  _DEALNAME = .DEALNAME
                  _PRDNO = .PRDNO
                  _PROJDOCNO = .PROJDOCNO
                  _PROJDES = .PROJDES
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _CODENAME = .CODENAME
                  _CODEDES = .CODEDES
                  _CLOSEDBOOL = .CLOSEDBOOL
                  _BOOLPCLOSED = .BOOLPCLOSED
                  _CHANGEFLAG = .CHANGEFLAG
                  _TYPECODE = .TYPECODE
                  _TYPEDES = .TYPEDES
                  _UFLAG = .UFLAG
                  _USERLOGIN = .USERLOGIN
                  _PROFNUM = .PROFNUM
                  _CORDNAME = .CORDNAME
                  _DOCQNO = .DOCQNO
                  _IMPFNUM = .IMPFNUM
                  _OTYPE = .OTYPE
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TAXCODE = .TAXCODE
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _FORUSERLOGIN = .FORUSERLOGIN
                  _STCODE = .STCODE
                  _STDES = .STDES
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _PLAN = .PLAN
                  _PRINTEDBOOL = .PRINTEDBOOL
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _ADVPERCENT = .ADVPERCENT
                  _ADVBAL = .ADVBAL
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                  _DETAILS = .DETAILS
                  _TOTQUANT = .TOTQUANT
                  _BUYERFLAG = .BUYERFLAG
                  _CURVERSION = .CURVERSION
                  _EXTFILEFLAG = .EXTFILEFLAG
                  _CASHFLOWFLAG = .CASHFLOWFLAG
                  _PAYFLAG = .PAYFLAG
                  _DEPTNAME = .DEPTNAME
                  _DEPTDES = .DEPTDES
                  _ORD = .ORD
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PORDERS
        
        PORDERITEMS = 0
        
        MATRIXSUM = 1
        
        PORDORD = 2
        
        SHIPTO = 3
        
        PORDERUSER = 4
        
        PORDERSVER = 5
        
        LINKING = 6
        
        EXTFILES = 7
        
        PROJLINK = 8
        
        PORDERSTEXT = 9
        
        PORDERSCONT = 10
        
        PORDERSREMARKS = 11
        
        GENCUSTNOTES = 12
        
        DOCTODOLIST = 13
        
        DOCTODOLISTLOG = 14
        
        PORD_CHANGES_LOG = 15
        
        PORDPAY = 16
        
        INTERNALDIALOGTEXT = 17
    End Enum
    
    <QueryTitle("Order Items")>  _
    Public Class QUERY_PORDERITEMS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMS)
            _Parent = nothing
            _Name = "PORDERITEMS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Total")
            .add(1, "Projects/Accounts")
            .add(2, "Attributes in Set")
            .add(3, "Order Items - Remarks")
            .add(4, "Part Availability")
            .add(5, "Base Product Availability")
            .add(6, "Inventory for Part")
            .add(7, "Order Tracing")
            .add(8, "Vendor Price Quotations per Part")
            .add(9, "Invoices")
            .add(10, "Malfunction Linked to Document")
            .add(11, "Sales Orders for PR/Purch Order")
            .add(12, "Part Price Options")
            .add(13, "Latest Part Purchases from Vend")
            .add(14, "Budgeted vs. Actual")
            .add(15, "Electronic Signature")
            .add(16, "History of PO Item Statuses")
            .add(17, "Split Among Profit/Cost Centers")
            .add(18, "Purchase Order Item Changes-OLD")
            .add(19, "History of Changes")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMS)
            _Parent = Parent
            _name = "PORDERITEMS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Total")
            .add(1, "Projects/Accounts")
            .add(2, "Attributes in Set")
            .add(3, "Order Items - Remarks")
            .add(4, "Part Availability")
            .add(5, "Base Product Availability")
            .add(6, "Inventory for Part")
            .add(7, "Order Tracing")
            .add(8, "Vendor Price Quotations per Part")
            .add(9, "Invoices")
            .add(10, "Malfunction Linked to Document")
            .add(11, "Sales Orders for PR/Purch Order")
            .add(12, "Part Price Options")
            .add(13, "Latest Part Purchases from Vend")
            .add(14, "Budgeted vs. Actual")
            .add(15, "Electronic Signature")
            .add(16, "History of PO Item Statuses")
            .add(17, "Split Among Profit/Cost Centers")
            .add(18, "Purchase Order Item Changes-OLD")
            .add(19, "History of Changes")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMS As PORDERITEMS In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMS)(stream.ReadToEnd).Value
              With _PORDERITEMS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMS = JsonConvert.DeserializeObject(Of PORDERITEMS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMS)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .REQDATE = obj.REQDATE
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .VATPRICE = obj.VATPRICE
                  .PRICEBAL = obj.PRICEBAL
                  .CODE = obj.CODE
                  .SUPPARTNAME = obj.SUPPARTNAME
                  .MNFNAME = obj.MNFNAME
                  .MNFDES = obj.MNFDES
                  .CLOSEDBOOL = obj.CLOSEDBOOL
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .REVNAME = obj.REVNAME
                  .NUMPACK = obj.NUMPACK
                  .PACKCODE = obj.PACKCODE
                  .BUDCODE = obj.BUDCODE
                  .BUDGETDATE = obj.BUDGETDATE
                  .COSTCNAME = obj.COSTCNAME
                  .DUTYPERCENTTYPE = obj.DUTYPERCENTTYPE
                  .PRDI = obj.PRDI
                  .CORDNAME = obj.CORDNAME
                  .COLINE = obj.COLINE
                  .PORDISTATUSDES = obj.PORDISTATUSDES
                  .PRIVTYPE = obj.PRIVTYPE
                  .SPPRIVTYPE = obj.SPPRIVTYPE
                  .ARRDATE = obj.ARRDATE
                  .DUEDATE = obj.DUEDATE
                  .REQDATE2 = obj.REQDATE2
                  .UNSPSCCODE = obj.UNSPSCCODE
                  .UNSPSCDES = obj.UNSPSCDES
                  .ACTNAME = obj.ACTNAME
                  .SERIALNAME = obj.SERIALNAME
                  .FORSERIALNAME = obj.FORSERIALNAME
                  .FORPARTNAME = obj.FORPARTNAME
                  .VOLUME = obj.VOLUME
                  .VUNITNAME = obj.VUNITNAME
                  .QUANT = obj.QUANT
                  .ABALANCE = obj.ABALANCE
                  .UNITNAME = obj.UNITNAME
                  .EXCH = obj.EXCH
                  .ORIGTQUANT = obj.ORIGTQUANT
                  .ORIGLINE = obj.ORIGLINE
                  .SPLIT = obj.SPLIT
                  .BARCODE = obj.BARCODE
                  .DEALNAME = obj.DEALNAME
                  .DLINE = obj.DLINE
                  .REMARK = obj.REMARK
                  .ORDI = obj.ORDI
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMS as PORDERITEMS in value
              If _PORDERITEMS.Equals(trycast(obj,PORDERITEMS)) Then
                  value.remove(_PORDERITEMS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _IsSetPDES As Boolean = Boolean.FalseString
        
        Private _PDES As String
        
        Private _IsSetTQUANT As Boolean = Boolean.FalseString
        
        Private _TQUANT As Decimal
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _IsSetREQDATE As Boolean = Boolean.FalseString
        
        Private _REQDATE As System.DateTimeOffset
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetICODE As Boolean = Boolean.FalseString
        
        Private _ICODE As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _IsSetVATPRICE As Boolean = Boolean.FalseString
        
        Private _VATPRICE As Decimal
        
        Private _PRICEBAL As Decimal
        
        Private _CODE As String
        
        Private _IsSetSUPPARTNAME As Boolean = Boolean.FalseString
        
        Private _SUPPARTNAME As String
        
        Private _MNFNAME As String
        
        Private _MNFDES As String
        
        Private _IsSetCLOSEDBOOL As Boolean = Boolean.FalseString
        
        Private _CLOSEDBOOL As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetREVNAME As Boolean = Boolean.FalseString
        
        Private _REVNAME As String
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _IsSetPACKCODE As Boolean = Boolean.FalseString
        
        Private _PACKCODE As String
        
        Private _IsSetBUDCODE As Boolean = Boolean.FalseString
        
        Private _BUDCODE As String
        
        Private _IsSetBUDGETDATE As Boolean = Boolean.FalseString
        
        Private _BUDGETDATE As System.DateTimeOffset
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _IsSetDUTYPERCENTTYPE As Boolean = Boolean.FalseString
        
        Private _DUTYPERCENTTYPE As String
        
        Private _PRDI As Long
        
        Private _IsSetCORDNAME As Boolean = Boolean.FalseString
        
        Private _CORDNAME As String
        
        Private _IsSetCOLINE As Boolean = Boolean.FalseString
        
        Private _COLINE As Long
        
        Private _IsSetPORDISTATUSDES As Boolean = Boolean.FalseString
        
        Private _PORDISTATUSDES As String
        
        Private _PRIVTYPE As String
        
        Private _SPPRIVTYPE As String
        
        Private _IsSetARRDATE As Boolean = Boolean.FalseString
        
        Private _ARRDATE As System.DateTimeOffset
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetREQDATE2 As Boolean = Boolean.FalseString
        
        Private _REQDATE2 As System.DateTimeOffset
        
        Private _IsSetUNSPSCCODE As Boolean = Boolean.FalseString
        
        Private _UNSPSCCODE As String
        
        Private _UNSPSCDES As String
        
        Private _IsSetACTNAME As Boolean = Boolean.FalseString
        
        Private _ACTNAME As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetFORSERIALNAME As Boolean = Boolean.FalseString
        
        Private _FORSERIALNAME As String
        
        Private _FORPARTNAME As String
        
        Private _VOLUME As Decimal
        
        Private _VUNITNAME As String
        
        Private _IsSetQUANT As Boolean = Boolean.FalseString
        
        Private _QUANT As Decimal
        
        Private _ABALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetEXCH As Boolean = Boolean.FalseString
        
        Private _EXCH As Decimal
        
        Private _ORIGTQUANT As Decimal
        
        Private _IsSetORIGLINE As Boolean = Boolean.FalseString
        
        Private _ORIGLINE As Long
        
        Private _SPLIT As String
        
        Private _IsSetBARCODE As Boolean = Boolean.FalseString
        
        Private _BARCODE As String
        
        Private _IsSetDEALNAME As Boolean = Boolean.FalseString
        
        Private _DEALNAME As String
        
        Private _IsSetDLINE As Boolean = Boolean.FalseString
        
        Private _DLINE As Long
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetORDI As Boolean = Boolean.FalseString
        
        Private _ORDI As Long
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _PORDERSTOTAL_SUBFORM As QUERY_PORDERSTOTAL
        
        Private _PROJLINK_SUBFORM As QUERY_PROJLINK
        
        Private _PORDERITEMSUNSPECS_SUBFORM As QUERY_PORDERITEMSUNSPECS
        
        Private _PORDERITEMSTEXT_SUBFORM As QUERY_PORDERITEMSTEXT
        
        Private _LOGCOUNTERS_SUBFORM As QUERY_LOGCOUNTERS
        
        Private _LOGCOUNTERSMPART_SUBFORM As QUERY_LOGCOUNTERSMPART
        
        Private _PARTBALANCE_SUBFORM As QUERY_PARTBALANCE
        
        Private _PORDERITEMSTRANS_SUBFORM As QUERY_PORDERITEMSTRANS
        
        Private _PORDPARTPROF_SUBFORM As QUERY_PORDPARTPROF
        
        Private _PORDERITEMSIV_SUBFORM As QUERY_PORDERITEMSIV
        
        Private _LINKFAULTS_SUBFORM As QUERY_LINKFAULTS
        
        Private _PRDIORDIPRDI_SUBFORM As QUERY_PRDIORDIPRDI
        
        Private _PORDPRICEOPTIONS_SUBFORM As QUERY_PORDPRICEOPTIONS
        
        Private _LASTSUPPARTBUYS_SUBFORM As QUERY_LASTSUPPARTBUYS
        
        Private _BUDGETREP_SUBFORM As QUERY_BUDGETREP
        
        Private _PORDERITEMSSIGN_SUBFORM As QUERY_PORDERITEMSSIGN
        
        Private _PORDISTATUSLOG_SUBFORM As QUERY_PORDISTATUSLOG
        
        Private _SPLITCOSTCENTERS_SUBFORM As QUERY_SPLITCOSTCENTERS
        
        Private _PORDI_CHANGE_LOG_SUBFORM As QUERY_PORDI_CHANGE_LOG
        
        Private _CHANGESITEMS_LOG_SUBFORM As QUERY_CHANGESITEMS_LOG
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Order Total"))
            ChildQuery.add(1, new oNavigation("Projects/Accounts"))
            ChildQuery.add(2, new oNavigation("Attributes in Set"))
            ChildQuery.add(3, new oNavigation("Order Items - Remarks"))
            ChildQuery.add(4, new oNavigation("Part Availability"))
            ChildQuery.add(5, new oNavigation("Base Product Availability"))
            ChildQuery.add(6, new oNavigation("Inventory for Part"))
            ChildQuery.add(7, new oNavigation("Order Tracing"))
            ChildQuery.add(8, new oNavigation("Vendor Price Quotations per Part"))
            ChildQuery.add(9, new oNavigation("Invoices"))
            ChildQuery.add(10, new oNavigation("Malfunction Linked to Document"))
            ChildQuery.add(11, new oNavigation("Sales Orders for PR/Purch Order"))
            ChildQuery.add(12, new oNavigation("Part Price Options"))
            ChildQuery.add(13, new oNavigation("Latest Part Purchases from Vend"))
            ChildQuery.add(14, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(15, new oNavigation("Electronic Signature"))
            ChildQuery.add(16, new oNavigation("History of PO Item Statuses"))
            ChildQuery.add(17, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(18, new oNavigation("Purchase Order Item Changes-OLD"))
            ChildQuery.add(19, new oNavigation("History of Changes"))
            _PORDERSTOTAL_SUBFORM = new QUERY_PORDERSTOTAL(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PORDERITEMSUNSPECS_SUBFORM = new QUERY_PORDERITEMSUNSPECS(me)
            _PORDERITEMSTEXT_SUBFORM = new QUERY_PORDERITEMSTEXT(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _PORDERITEMSTRANS_SUBFORM = new QUERY_PORDERITEMSTRANS(me)
            _PORDPARTPROF_SUBFORM = new QUERY_PORDPARTPROF(me)
            _PORDERITEMSIV_SUBFORM = new QUERY_PORDERITEMSIV(me)
            _LINKFAULTS_SUBFORM = new QUERY_LINKFAULTS(me)
            _PRDIORDIPRDI_SUBFORM = new QUERY_PRDIORDIPRDI(me)
            _PORDPRICEOPTIONS_SUBFORM = new QUERY_PORDPRICEOPTIONS(me)
            _LASTSUPPARTBUYS_SUBFORM = new QUERY_LASTSUPPARTBUYS(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _PORDERITEMSSIGN_SUBFORM = new QUERY_PORDERITEMSSIGN(me)
            _PORDISTATUSLOG_SUBFORM = new QUERY_PORDISTATUSLOG(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _PORDI_CHANGE_LOG_SUBFORM = new QUERY_PORDI_CHANGE_LOG(me)
            _CHANGESITEMS_LOG_SUBFORM = new QUERY_CHANGESITEMS_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDERITEMSUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PORDERITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PORDERITEMSTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PORDPARTPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PORDERITEMSIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINKFAULTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PRDIORDIPRDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_PORDPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_LASTSUPPARTBUYS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_PORDERITEMSSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_PORDISTATUSLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_PORDI_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_CHANGESITEMS_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Order Total"))
            ChildQuery.add(1, new oNavigation("Projects/Accounts"))
            ChildQuery.add(2, new oNavigation("Attributes in Set"))
            ChildQuery.add(3, new oNavigation("Order Items - Remarks"))
            ChildQuery.add(4, new oNavigation("Part Availability"))
            ChildQuery.add(5, new oNavigation("Base Product Availability"))
            ChildQuery.add(6, new oNavigation("Inventory for Part"))
            ChildQuery.add(7, new oNavigation("Order Tracing"))
            ChildQuery.add(8, new oNavigation("Vendor Price Quotations per Part"))
            ChildQuery.add(9, new oNavigation("Invoices"))
            ChildQuery.add(10, new oNavigation("Malfunction Linked to Document"))
            ChildQuery.add(11, new oNavigation("Sales Orders for PR/Purch Order"))
            ChildQuery.add(12, new oNavigation("Part Price Options"))
            ChildQuery.add(13, new oNavigation("Latest Part Purchases from Vend"))
            ChildQuery.add(14, new oNavigation("Budgeted vs. Actual"))
            ChildQuery.add(15, new oNavigation("Electronic Signature"))
            ChildQuery.add(16, new oNavigation("History of PO Item Statuses"))
            ChildQuery.add(17, new oNavigation("Split Among Profit/Cost Centers"))
            ChildQuery.add(18, new oNavigation("Purchase Order Item Changes-OLD"))
            ChildQuery.add(19, new oNavigation("History of Changes"))
            _PORDERSTOTAL_SUBFORM = new QUERY_PORDERSTOTAL(me)
            _PROJLINK_SUBFORM = new QUERY_PROJLINK(me)
            _PORDERITEMSUNSPECS_SUBFORM = new QUERY_PORDERITEMSUNSPECS(me)
            _PORDERITEMSTEXT_SUBFORM = new QUERY_PORDERITEMSTEXT(me)
            _LOGCOUNTERS_SUBFORM = new QUERY_LOGCOUNTERS(me)
            _LOGCOUNTERSMPART_SUBFORM = new QUERY_LOGCOUNTERSMPART(me)
            _PARTBALANCE_SUBFORM = new QUERY_PARTBALANCE(me)
            _PORDERITEMSTRANS_SUBFORM = new QUERY_PORDERITEMSTRANS(me)
            _PORDPARTPROF_SUBFORM = new QUERY_PORDPARTPROF(me)
            _PORDERITEMSIV_SUBFORM = new QUERY_PORDERITEMSIV(me)
            _LINKFAULTS_SUBFORM = new QUERY_LINKFAULTS(me)
            _PRDIORDIPRDI_SUBFORM = new QUERY_PRDIORDIPRDI(me)
            _PORDPRICEOPTIONS_SUBFORM = new QUERY_PORDPRICEOPTIONS(me)
            _LASTSUPPARTBUYS_SUBFORM = new QUERY_LASTSUPPARTBUYS(me)
            _BUDGETREP_SUBFORM = new QUERY_BUDGETREP(me)
            _PORDERITEMSSIGN_SUBFORM = new QUERY_PORDERITEMSSIGN(me)
            _PORDISTATUSLOG_SUBFORM = new QUERY_PORDISTATUSLOG(me)
            _SPLITCOSTCENTERS_SUBFORM = new QUERY_SPLITCOSTCENTERS(me)
            _PORDI_CHANGE_LOG_SUBFORM = new QUERY_PORDI_CHANGE_LOG(me)
            _CHANGESITEMS_LOG_SUBFORM = new QUERY_CHANGESITEMS_LOG(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERSTOTAL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PROJLINK_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDERITEMSUNSPECS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_PORDERITEMSTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_LOGCOUNTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_LOGCOUNTERSMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_PARTBALANCE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_PORDERITEMSTRANS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(8)
               .setoDataQuery(_PORDPARTPROF_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(9)
               .setoDataQuery(_PORDERITEMSIV_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(10)
               .setoDataQuery(_LINKFAULTS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(11)
               .setoDataQuery(_PRDIORDIPRDI_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(12)
               .setoDataQuery(_PORDPRICEOPTIONS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(13)
               .setoDataQuery(_LASTSUPPARTBUYS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(14)
               .setoDataQuery(_BUDGETREP_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(15)
               .setoDataQuery(_PORDERITEMSSIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(16)
               .setoDataQuery(_PORDISTATUSLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(17)
               .setoDataQuery(_SPLITCOSTCENTERS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(18)
               .setoDataQuery(_PORDI_CHANGE_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
            WITH ChildQuery(19)
               .setoDataQuery(_CHANGESITEMS_LOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Total", _PORDERSTOTAL_SUBFORM))
                   .add(1, new oNavigation("Projects/Accounts", _PROJLINK_SUBFORM))
                   .add(2, new oNavigation("Attributes in Set", _PORDERITEMSUNSPECS_SUBFORM))
                   .add(3, new oNavigation("Order Items - Remarks", _PORDERITEMSTEXT_SUBFORM))
                   .add(4, new oNavigation("Part Availability", _LOGCOUNTERS_SUBFORM))
                   .add(5, new oNavigation("Base Product Availability", _LOGCOUNTERSMPART_SUBFORM))
                   .add(6, new oNavigation("Inventory for Part", _PARTBALANCE_SUBFORM))
                   .add(7, new oNavigation("Order Tracing", _PORDERITEMSTRANS_SUBFORM))
                   .add(8, new oNavigation("Vendor Price Quotations per Part", _PORDPARTPROF_SUBFORM))
                   .add(9, new oNavigation("Invoices", _PORDERITEMSIV_SUBFORM))
                   .add(10, new oNavigation("Malfunction Linked to Document", _LINKFAULTS_SUBFORM))
                   .add(11, new oNavigation("Sales Orders for PR/Purch Order", _PRDIORDIPRDI_SUBFORM))
                   .add(12, new oNavigation("Part Price Options", _PORDPRICEOPTIONS_SUBFORM))
                   .add(13, new oNavigation("Latest Part Purchases from Vend", _LASTSUPPARTBUYS_SUBFORM))
                   .add(14, new oNavigation("Budgeted vs. Actual", _BUDGETREP_SUBFORM))
                   .add(15, new oNavigation("Electronic Signature", _PORDERITEMSSIGN_SUBFORM))
                   .add(16, new oNavigation("History of PO Item Statuses", _PORDISTATUSLOG_SUBFORM))
                   .add(17, new oNavigation("Split Among Profit/Cost Centers", _SPLITCOSTCENTERS_SUBFORM))
                   .add(18, new oNavigation("Purchase Order Item Changes-OLD", _PORDI_CHANGE_LOG_SUBFORM))
                   .add(19, new oNavigation("History of Changes", _CHANGESITEMS_LOG_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMS"
                else
                    return "PORDERITEMS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Number", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(3),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Description", value, "^.{0,48}$") then Exit Property
                _IsSetPDES = True
                If loading Then
                  _PDES = Value
                Else
                    if not _PDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(4),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Quantity", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTQUANT = True
                If loading Then
                  _TQUANT = Value
                Else
                    if not _TQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(8),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(15),  _
         twodBarcode("REQDATE")>  _
        Public Property REQDATE() As nullable (of DateTimeOffset)
            Get
                return _REQDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetREQDATE = True
                If loading Then
                  _REQDATE = Value
                Else
                    if not _REQDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REQDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REQDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(20),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(22),  _
         Mandatory(true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Item Currency", value, "^.{0,3}$") then Exit Property
                _IsSetICODE = True
                If loading Then
                  _ICODE = Value
                Else
                    if not _ICODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ICODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ICODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Discount%"),  _
         Pos(30),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount%", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Discount%"),  _
         Pos(31),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Incl. VAT"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Discount%"),  _
         Pos(32),  _
         twodBarcode("VATPRICE")>  _
        Public Property VATPRICE() As nullable(of decimal)
            Get
                return _VATPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Price Incl. VAT", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetVATPRICE = True
                If loading Then
                  _VATPRICE = Value
                Else
                    if not _VATPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VATPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VATPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Discount%"),  _
         Pos(33),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL")>  _
        Public Property PRICEBAL() As nullable(of decimal)
            Get
                return _PRICEBAL
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Currency"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vend/Manuf. Part No."),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(40),  _
         twodBarcode("SUPPARTNAME")>  _
        Public Property SUPPARTNAME() As String
            Get
                return _SUPPARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vend/Manuf. Part No.", value, "^.{0,30}$") then Exit Property
                _IsSetSUPPARTNAME = True
                If loading Then
                  _SUPPARTNAME = Value
                Else
                    if not _SUPPARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPPARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPPARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Manufct Code"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("MNFNAME")>  _
        Public Property MNFNAME() As String
            Get
                return _MNFNAME
            End Get
            Set
                if not(value is nothing) then
                  _MNFNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manufacturer Name"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("MNFDES")>  _
        Public Property MNFDES() As String
            Get
                return _MNFDES
            End Get
            Set
                if not(value is nothing) then
                  _MNFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Closed?"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(50),  _
         twodBarcode("CLOSEDBOOL")>  _
        Public Property CLOSEDBOOL() As String
            Get
                return _CLOSEDBOOL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Closed?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSEDBOOL = True
                If loading Then
                  _CLOSEDBOOL = Value
                Else
                    if not _CLOSEDBOOL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSEDBOOL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSEDBOOL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision No."),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(60),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Part Revision No.", value, "^.{0,10}$") then Exit Property
                _IsSetREVNAME = True
                If loading Then
                  _REVNAME = Value
                Else
                    if not _REVNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REVNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REVNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Closed?"),  _
         Pos(63),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Packing Crates (No.)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(66),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Crate Type Code", value, "^.{0,2}$") then Exit Property
                _IsSetPACKCODE = True
                If loading Then
                  _PACKCODE = Value
                Else
                    if not _PACKCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PACKCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PACKCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(70),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Item", value, "^.{0,24}$") then Exit Property
                _IsSetBUDCODE = True
                If loading Then
                  _BUDCODE = Value
                Else
                    if not _BUDCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Budget Usage Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Closed?"),  _
         Pos(72),  _
         twodBarcode("BUDGETDATE")>  _
        Public Property BUDGETDATE() As nullable (of DateTimeOffset)
            Get
                return _BUDGETDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Budget Usage Date", value, "^.*$") then Exit Property
                _IsSetBUDGETDATE = True
                If loading Then
                  _BUDGETDATE = Value
                Else
                    if not _BUDGETDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BUDGETDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BUDGETDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Closed?"),  _
         Pos(75),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Cost Type"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(80),  _
         twodBarcode("DUTYPERCENTTYPE")>  _
        Public Property DUTYPERCENTTYPE() As String
            Get
                return _DUTYPERCENTTYPE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipping Cost Type", value, "^.{0,1}$") then Exit Property
                _IsSetDUTYPERCENTTYPE = True
                If loading Then
                  _DUTYPERCENTTYPE = Value
                Else
                    if not _DUTYPERCENTTYPE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUTYPERCENTTYPE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUTYPERCENTTYPE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("PR Number"),  _
         nType("Edm.Int64"),  _
         tab("Shipping Cost Type"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("PRDI")>  _
        Public Property PRDI() As nullable (of int64)
            Get
                return _PRDI
            End Get
            Set
                if not(value is nothing) then
                  _PRDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Order"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(87),  _
         twodBarcode("CORDNAME")>  _
        Public Property CORDNAME() As String
            Get
                return _CORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Order", value, "^.{0,16}$") then Exit Property
                _IsSetCORDNAME = True
                If loading Then
                  _CORDNAME = Value
                Else
                    if not _CORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Ln (in Sales Order)"),  _
         nType("Edm.Int64"),  _
         tab("Shipping Cost Type"),  _
         Pos(88),  _
         twodBarcode("COLINE")>  _
        Public Property COLINE() As nullable (of int64)
            Get
                return _COLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Ln (in Sales Order)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCOLINE = True
                If loading Then
                  _COLINE = Value
                Else
                    if not _COLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status for Item"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(89),  _
         twodBarcode("PORDISTATUSDES")>  _
        Public Property PORDISTATUSDES() As String
            Get
                return _PORDISTATUSDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status for Item", value, "^.{0,20}$") then Exit Property
                _IsSetPORDISTATUSDES = True
                If loading Then
                  _PORDISTATUSDES = Value
                Else
                    if not _PORDISTATUSDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PORDISTATUSDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PORDISTATUSDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Quality Code (Part)"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("PRIVTYPE")>  _
        Public Property PRIVTYPE() As String
            Get
                return _PRIVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _PRIVTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Special Quality Code"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("SPPRIVTYPE")>  _
        Public Property SPPRIVTYPE() As String
            Get
                return _SPPRIVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _SPPRIVTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expected ReceiptDate"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Shipping Cost Type"),  _
         Pos(100),  _
         twodBarcode("ARRDATE")>  _
        Public Property ARRDATE() As nullable (of DateTimeOffset)
            Get
                return _ARRDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Expected ReceiptDate", value, "^.*$") then Exit Property
                _IsSetARRDATE = True
                If loading Then
                  _ARRDATE = Value
                Else
                    if not _ARRDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ARRDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ARRDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("On-hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("On-hand Date"),  _
         Pos(105),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("On-hand Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Requested Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("On-hand Date"),  _
         Pos(106),  _
         twodBarcode("REQDATE2")>  _
        Public Property REQDATE2() As nullable (of DateTimeOffset)
            Get
                return _REQDATE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Requested Due Date", value, "^.*$") then Exit Property
                _IsSetREQDATE2 = True
                If loading Then
                  _REQDATE2 = Value
                Else
                    if not _REQDATE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REQDATE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REQDATE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Code"),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(110),  _
         twodBarcode("UNSPSCCODE")>  _
        Public Property UNSPSCCODE() As String
            Get
                return _UNSPSCCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute Set Code", value, "^.{0,8}$") then Exit Property
                _IsSetUNSPSCCODE = True
                If loading Then
                  _UNSPSCCODE = Value
                Else
                    if not _UNSPSCCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UNSPSCCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UNSPSCCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Desc."),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCDES")>  _
        Public Property UNSPSCDES() As String
            Get
                return _UNSPSCDES
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(125),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Operation", value, "^.{0,16}$") then Exit Property
                _IsSetACTNAME = True
                If loading Then
                  _ACTNAME = Value
                Else
                    if not _ACTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Work Order"),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(130),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("To Work Order", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Work Order to Charge"),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(135),  _
         twodBarcode("FORSERIALNAME")>  _
        Public Property FORSERIALNAME() As String
            Get
                return _FORSERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order to Charge", value, "^.{0,22}$") then Exit Property
                _IsSetFORSERIALNAME = True
                If loading Then
                  _FORSERIALNAME = Value
                Else
                    if not _FORSERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FORSERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FORSERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part to Charge"),  _
         nType("Edm.String"),  _
         tab("On-hand Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FORPARTNAME")>  _
        Public Property FORPARTNAME() As String
            Get
                return _FORPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _FORPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Volume"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if not(value is nothing) then
                  _VOLUME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit of Volume"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("VUNITNAME")>  _
        Public Property VUNITNAME() As String
            Get
                return _VUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _VUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Volume"),  _
         Pos(180),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Qty (Factory Units)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetQUANT = True
                If loading Then
                  _QUANT = Value
                Else
                    if not _QUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Volume"),  _
         Pos(185),  _
         [ReadOnly](true),  _
         twodBarcode("ABALANCE")>  _
        Public Property ABALANCE() As nullable(of decimal)
            Get
                return _ABALANCE
            End Get
            Set
                if not(value is nothing) then
                  _ABALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Volume"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Volume"),  _
         Pos(200),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Exchange Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXCH = True
                If loading Then
                  _EXCH = Value
                Else
                    if not _EXCH = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXCH", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXCH = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Qty"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Volume"),  _
         Pos(220),  _
         [ReadOnly](true),  _
         twodBarcode("ORIGTQUANT")>  _
        Public Property ORIGTQUANT() As nullable(of decimal)
            Get
                return _ORIGTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _ORIGTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("ORIGLINE"),  _
         nType("Edm.Int64"),  _
         tab("Volume"),  _
         Pos(0),  _
         twodBarcode("ORIGLINE")>  _
        Public Property ORIGLINE() As nullable (of int64)
            Get
                return _ORIGLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("ORIGLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetORIGLINE = True
                If loading Then
                  _ORIGLINE = Value
                Else
                    if not _ORIGLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORIGLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORIGLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Split Item"),  _
         nType("Edm.String"),  _
         tab("Split Item"),  _
         Pos(240),  _
         [ReadOnly](true),  _
         twodBarcode("SPLIT")>  _
        Public Property SPLIT() As String
            Get
                return _SPLIT
            End Get
            Set
                if not(value is nothing) then
                  _SPLIT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code"),  _
         nType("Edm.String"),  _
         tab("Split Item"),  _
         Pos(245),  _
         twodBarcode("BARCODE")>  _
        Public Property BARCODE() As String
            Get
                return _BARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code", value, "^.{0,16}$") then Exit Property
                _IsSetBARCODE = True
                If loading Then
                  _BARCODE = Value
                Else
                    if not _BARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Blanket Purch Order"),  _
         nType("Edm.String"),  _
         tab("Split Item"),  _
         Pos(250),  _
         twodBarcode("DEALNAME")>  _
        Public Property DEALNAME() As String
            Get
                return _DEALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Blanket Purch Order", value, "^.{0,16}$") then Exit Property
                _IsSetDEALNAME = True
                If loading Then
                  _DEALNAME = Value
                Else
                    if not _DEALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DEALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DEALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("DLINE"),  _
         nType("Edm.Int64"),  _
         tab("Split Item"),  _
         Pos(0),  _
         twodBarcode("DLINE")>  _
        Public Property DLINE() As nullable (of int64)
            Get
                return _DLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetDLINE = True
                If loading Then
                  _DLINE = Value
                Else
                    if not _DLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Split Item"),  _
         Pos(260),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,22}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Split Item"),  _
         Pos(2),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line Item (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORDI = True
                If loading Then
                  _ORDI = Value
                Else
                    if not _ORDI = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDI", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDI = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Split Item"),  _
         Pos(101),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSTOTAL_SUBFORM() As QUERY_PORDERSTOTAL
            Get
                return _PORDERSTOTAL_SUBFORM
            End Get
            Set
                _PORDERSTOTAL_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PROJLINK_SUBFORM() As QUERY_PROJLINK
            Get
                return _PROJLINK_SUBFORM
            End Get
            Set
                _PROJLINK_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSUNSPECS_SUBFORM() As QUERY_PORDERITEMSUNSPECS
            Get
                return _PORDERITEMSUNSPECS_SUBFORM
            End Get
            Set
                _PORDERITEMSUNSPECS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSTEXT_SUBFORM() As QUERY_PORDERITEMSTEXT
            Get
                return _PORDERITEMSTEXT_SUBFORM
            End Get
            Set
                _PORDERITEMSTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERS_SUBFORM() As QUERY_LOGCOUNTERS
            Get
                return _LOGCOUNTERS_SUBFORM
            End Get
            Set
                _LOGCOUNTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LOGCOUNTERSMPART_SUBFORM() As QUERY_LOGCOUNTERSMPART
            Get
                return _LOGCOUNTERSMPART_SUBFORM
            End Get
            Set
                _LOGCOUNTERSMPART_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTBALANCE_SUBFORM() As QUERY_PARTBALANCE
            Get
                return _PARTBALANCE_SUBFORM
            End Get
            Set
                _PARTBALANCE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSTRANS_SUBFORM() As QUERY_PORDERITEMSTRANS
            Get
                return _PORDERITEMSTRANS_SUBFORM
            End Get
            Set
                _PORDERITEMSTRANS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDPARTPROF_SUBFORM() As QUERY_PORDPARTPROF
            Get
                return _PORDPARTPROF_SUBFORM
            End Get
            Set
                _PORDPARTPROF_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSIV_SUBFORM() As QUERY_PORDERITEMSIV
            Get
                return _PORDERITEMSIV_SUBFORM
            End Get
            Set
                _PORDERITEMSIV_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LINKFAULTS_SUBFORM() As QUERY_LINKFAULTS
            Get
                return _LINKFAULTS_SUBFORM
            End Get
            Set
                _LINKFAULTS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PRDIORDIPRDI_SUBFORM() As QUERY_PRDIORDIPRDI
            Get
                return _PRDIORDIPRDI_SUBFORM
            End Get
            Set
                _PRDIORDIPRDI_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDPRICEOPTIONS_SUBFORM() As QUERY_PORDPRICEOPTIONS
            Get
                return _PORDPRICEOPTIONS_SUBFORM
            End Get
            Set
                _PORDPRICEOPTIONS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property LASTSUPPARTBUYS_SUBFORM() As QUERY_LASTSUPPARTBUYS
            Get
                return _LASTSUPPARTBUYS_SUBFORM
            End Get
            Set
                _LASTSUPPARTBUYS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property BUDGETREP_SUBFORM() As QUERY_BUDGETREP
            Get
                return _BUDGETREP_SUBFORM
            End Get
            Set
                _BUDGETREP_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSSIGN_SUBFORM() As QUERY_PORDERITEMSSIGN
            Get
                return _PORDERITEMSSIGN_SUBFORM
            End Get
            Set
                _PORDERITEMSSIGN_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDISTATUSLOG_SUBFORM() As QUERY_PORDISTATUSLOG
            Get
                return _PORDISTATUSLOG_SUBFORM
            End Get
            Set
                _PORDISTATUSLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SPLITCOSTCENTERS_SUBFORM() As QUERY_SPLITCOSTCENTERS
            Get
                return _SPLITCOSTCENTERS_SUBFORM
            End Get
            Set
                _SPLITCOSTCENTERS_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDI_CHANGE_LOG_SUBFORM() As QUERY_PORDI_CHANGE_LOG
            Get
                return _PORDI_CHANGE_LOG_SUBFORM
            End Get
            Set
                _PORDI_CHANGE_LOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CHANGESITEMS_LOG_SUBFORM() As QUERY_CHANGESITEMS_LOG
            Get
                return _CHANGESITEMS_LOG_SUBFORM
            End Get
            Set
                _CHANGESITEMS_LOG_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetPDES then
              if f then
                  jw.WriteRaw(", ""PDES"": ")
              else
                  jw.WriteRaw("""PDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PDES)
            end if
            if _IsSetTQUANT then
              if f then
                  jw.WriteRaw(", ""TQUANT"": ")
              else
                  jw.WriteRaw("""TQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.TQUANT)
            end if
            if _IsSetREQDATE then
              if f then
                  jw.WriteRaw(", ""REQDATE"": ")
              else
                  jw.WriteRaw("""REQDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.REQDATE)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetICODE then
              if f then
                  jw.WriteRaw(", ""ICODE"": ")
              else
                  jw.WriteRaw("""ICODE"": ")
                  f = true
              end if
              jw.WriteValue(me.ICODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetVATPRICE then
              if f then
                  jw.WriteRaw(", ""VATPRICE"": ")
              else
                  jw.WriteRaw("""VATPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.VATPRICE)
            end if
            if _IsSetSUPPARTNAME then
              if f then
                  jw.WriteRaw(", ""SUPPARTNAME"": ")
              else
                  jw.WriteRaw("""SUPPARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPPARTNAME)
            end if
            if _IsSetCLOSEDBOOL then
              if f then
                  jw.WriteRaw(", ""CLOSEDBOOL"": ")
              else
                  jw.WriteRaw("""CLOSEDBOOL"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSEDBOOL)
            end if
            if _IsSetREVNAME then
              if f then
                  jw.WriteRaw(", ""REVNAME"": ")
              else
                  jw.WriteRaw("""REVNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.REVNAME)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetPACKCODE then
              if f then
                  jw.WriteRaw(", ""PACKCODE"": ")
              else
                  jw.WriteRaw("""PACKCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.PACKCODE)
            end if
            if _IsSetBUDCODE then
              if f then
                  jw.WriteRaw(", ""BUDCODE"": ")
              else
                  jw.WriteRaw("""BUDCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDCODE)
            end if
            if _IsSetBUDGETDATE then
              if f then
                  jw.WriteRaw(", ""BUDGETDATE"": ")
              else
                  jw.WriteRaw("""BUDGETDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.BUDGETDATE)
            end if
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetDUTYPERCENTTYPE then
              if f then
                  jw.WriteRaw(", ""DUTYPERCENTTYPE"": ")
              else
                  jw.WriteRaw("""DUTYPERCENTTYPE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUTYPERCENTTYPE)
            end if
            if _IsSetCORDNAME then
              if f then
                  jw.WriteRaw(", ""CORDNAME"": ")
              else
                  jw.WriteRaw("""CORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CORDNAME)
            end if
            if _IsSetCOLINE then
              if f then
                  jw.WriteRaw(", ""COLINE"": ")
              else
                  jw.WriteRaw("""COLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.COLINE)
            end if
            if _IsSetPORDISTATUSDES then
              if f then
                  jw.WriteRaw(", ""PORDISTATUSDES"": ")
              else
                  jw.WriteRaw("""PORDISTATUSDES"": ")
                  f = true
              end if
              jw.WriteValue(me.PORDISTATUSDES)
            end if
            if _IsSetARRDATE then
              if f then
                  jw.WriteRaw(", ""ARRDATE"": ")
              else
                  jw.WriteRaw("""ARRDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.ARRDATE)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetREQDATE2 then
              if f then
                  jw.WriteRaw(", ""REQDATE2"": ")
              else
                  jw.WriteRaw("""REQDATE2"": ")
                  f = true
              end if
              jw.WriteValue(me.REQDATE2)
            end if
            if _IsSetUNSPSCCODE then
              if f then
                  jw.WriteRaw(", ""UNSPSCCODE"": ")
              else
                  jw.WriteRaw("""UNSPSCCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.UNSPSCCODE)
            end if
            if _IsSetACTNAME then
              if f then
                  jw.WriteRaw(", ""ACTNAME"": ")
              else
                  jw.WriteRaw("""ACTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACTNAME)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetFORSERIALNAME then
              if f then
                  jw.WriteRaw(", ""FORSERIALNAME"": ")
              else
                  jw.WriteRaw("""FORSERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.FORSERIALNAME)
            end if
            if _IsSetQUANT then
              if f then
                  jw.WriteRaw(", ""QUANT"": ")
              else
                  jw.WriteRaw("""QUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.QUANT)
            end if
            if _IsSetEXCH then
              if f then
                  jw.WriteRaw(", ""EXCH"": ")
              else
                  jw.WriteRaw("""EXCH"": ")
                  f = true
              end if
              jw.WriteValue(me.EXCH)
            end if
            if _IsSetORIGLINE then
              if f then
                  jw.WriteRaw(", ""ORIGLINE"": ")
              else
                  jw.WriteRaw("""ORIGLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.ORIGLINE)
            end if
            if _IsSetBARCODE then
              if f then
                  jw.WriteRaw(", ""BARCODE"": ")
              else
                  jw.WriteRaw("""BARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.BARCODE)
            end if
            if _IsSetDEALNAME then
              if f then
                  jw.WriteRaw(", ""DEALNAME"": ")
              else
                  jw.WriteRaw("""DEALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.DEALNAME)
            end if
            if _IsSetDLINE then
              if f then
                  jw.WriteRaw(", ""DLINE"": ")
              else
                  jw.WriteRaw("""DLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.DLINE)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetORDI then
              if f then
                  jw.WriteRaw(", ""ORDI"": ")
              else
                  jw.WriteRaw("""ORDI"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDI)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _PORDERSTOTAL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSTOTAL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSTOTAL in _PORDERSTOTAL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSTOTAL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PROJLINK_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PROJLINK in _PROJLINK_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PROJLINK_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERITEMSUNSPECS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSUNSPECS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSUNSPECS in _PORDERITEMSUNSPECS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSUNSPECS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERITEMSTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSTEXT in _PORDERITEMSTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LOGCOUNTERSMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LOGCOUNTERSMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTBALANCE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTBALANCE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERITEMSTRANS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSTRANS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSTRANS in _PORDERITEMSTRANS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSTRANS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDPARTPROF_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDPARTPROF_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDPARTPROF in _PORDPARTPROF_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDPARTPROF_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERITEMSIV_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSIV_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSIV in _PORDERITEMSIV_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSIV_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LINKFAULTS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LINKFAULTS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LINKFAULTS in _LINKFAULTS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LINKFAULTS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PRDIORDIPRDI_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PRDIORDIPRDI_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PRDIORDIPRDI in _PRDIORDIPRDI_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PRDIORDIPRDI_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDPRICEOPTIONS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDPRICEOPTIONS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDPRICEOPTIONS in _PORDPRICEOPTIONS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDPRICEOPTIONS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _LASTSUPPARTBUYS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", LASTSUPPARTBUYS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as LASTSUPPARTBUYS in _LASTSUPPARTBUYS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _LASTSUPPARTBUYS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              jw.WriteRaw(", BUDGETREP_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _BUDGETREP_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERITEMSSIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSSIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSSIGN in _PORDERITEMSSIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSSIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDISTATUSLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDISTATUSLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDISTATUSLOG in _PORDISTATUSLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDISTATUSLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SPLITCOSTCENTERS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SPLITCOSTCENTERS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDI_CHANGE_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDI_CHANGE_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDI_CHANGE_LOG in _PORDI_CHANGE_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDI_CHANGE_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CHANGESITEMS_LOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CHANGESITEMS_LOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CHANGESITEMS_LOG in _CHANGESITEMS_LOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CHANGESITEMS_LOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetPDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PDES")
              .WriteAttributeString("value", me.PDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetTQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TQUANT")
              .WriteAttributeString("value", me.TQUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetREQDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REQDATE")
              .WriteAttributeString("value", me.REQDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetICODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ICODE")
              .WriteAttributeString("value", me.ICODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "8")
              .WriteEndElement
            end if
            if _IsSetVATPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VATPRICE")
              .WriteAttributeString("value", me.VATPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetSUPPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPPARTNAME")
              .WriteAttributeString("value", me.SUPPARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "30")
              .WriteEndElement
            end if
            if _IsSetCLOSEDBOOL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSEDBOOL")
              .WriteAttributeString("value", me.CLOSEDBOOL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREVNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REVNAME")
              .WriteAttributeString("value", me.REVNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPACKCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PACKCODE")
              .WriteAttributeString("value", me.PACKCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetBUDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDCODE")
              .WriteAttributeString("value", me.BUDCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetBUDGETDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BUDGETDATE")
              .WriteAttributeString("value", me.BUDGETDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetDUTYPERCENTTYPE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUTYPERCENTTYPE")
              .WriteAttributeString("value", me.DUTYPERCENTTYPE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CORDNAME")
              .WriteAttributeString("value", me.CORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCOLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COLINE")
              .WriteAttributeString("value", me.COLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPORDISTATUSDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PORDISTATUSDES")
              .WriteAttributeString("value", me.PORDISTATUSDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetARRDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ARRDATE")
              .WriteAttributeString("value", me.ARRDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetREQDATE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REQDATE2")
              .WriteAttributeString("value", me.REQDATE2)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUNSPSCCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UNSPSCCODE")
              .WriteAttributeString("value", me.UNSPSCCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetACTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACTNAME")
              .WriteAttributeString("value", me.ACTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetFORSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FORSERIALNAME")
              .WriteAttributeString("value", me.FORSERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUANT")
              .WriteAttributeString("value", me.QUANT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetEXCH then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXCH")
              .WriteAttributeString("value", me.EXCH)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetORIGLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORIGLINE")
              .WriteAttributeString("value", me.ORIGLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BARCODE")
              .WriteAttributeString("value", me.BARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDEALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DEALNAME")
              .WriteAttributeString("value", me.DEALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DLINE")
              .WriteAttributeString("value", me.DLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetORDI then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", me.ORDI)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PORDERSTOTAL_SUBFORM.value.count > 0 then
              for each itm as PORDERSTOTAL in _PORDERSTOTAL_SUBFORM.Value
                itm.toXML(xw,"PORDERSTOTAL_SUBFORM")
              next
            end if
            if _PROJLINK_SUBFORM.value.count > 0 then
              for each itm as PROJLINK in _PROJLINK_SUBFORM.Value
                itm.toXML(xw,"PROJLINK_SUBFORM")
              next
            end if
            if _PORDERITEMSUNSPECS_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSUNSPECS in _PORDERITEMSUNSPECS_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSUNSPECS_SUBFORM")
              next
            end if
            if _PORDERITEMSTEXT_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSTEXT in _PORDERITEMSTEXT_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSTEXT_SUBFORM")
              next
            end if
            if _LOGCOUNTERS_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERS in _LOGCOUNTERS_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERS_SUBFORM")
              next
            end if
            if _LOGCOUNTERSMPART_SUBFORM.value.count > 0 then
              for each itm as LOGCOUNTERSMPART in _LOGCOUNTERSMPART_SUBFORM.Value
                itm.toXML(xw,"LOGCOUNTERSMPART_SUBFORM")
              next
            end if
            if _PARTBALANCE_SUBFORM.value.count > 0 then
              for each itm as PARTBALANCE in _PARTBALANCE_SUBFORM.Value
                itm.toXML(xw,"PARTBALANCE_SUBFORM")
              next
            end if
            if _PORDERITEMSTRANS_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSTRANS in _PORDERITEMSTRANS_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSTRANS_SUBFORM")
              next
            end if
            if _PORDPARTPROF_SUBFORM.value.count > 0 then
              for each itm as PORDPARTPROF in _PORDPARTPROF_SUBFORM.Value
                itm.toXML(xw,"PORDPARTPROF_SUBFORM")
              next
            end if
            if _PORDERITEMSIV_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSIV in _PORDERITEMSIV_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSIV_SUBFORM")
              next
            end if
            if _LINKFAULTS_SUBFORM.value.count > 0 then
              for each itm as LINKFAULTS in _LINKFAULTS_SUBFORM.Value
                itm.toXML(xw,"LINKFAULTS_SUBFORM")
              next
            end if
            if _PRDIORDIPRDI_SUBFORM.value.count > 0 then
              for each itm as PRDIORDIPRDI in _PRDIORDIPRDI_SUBFORM.Value
                itm.toXML(xw,"PRDIORDIPRDI_SUBFORM")
              next
            end if
            if _PORDPRICEOPTIONS_SUBFORM.value.count > 0 then
              for each itm as PORDPRICEOPTIONS in _PORDPRICEOPTIONS_SUBFORM.Value
                itm.toXML(xw,"PORDPRICEOPTIONS_SUBFORM")
              next
            end if
            if _LASTSUPPARTBUYS_SUBFORM.value.count > 0 then
              for each itm as LASTSUPPARTBUYS in _LASTSUPPARTBUYS_SUBFORM.Value
                itm.toXML(xw,"LASTSUPPARTBUYS_SUBFORM")
              next
            end if
            if _BUDGETREP_SUBFORM.value.count > 0 then
              for each itm as BUDGETREP in _BUDGETREP_SUBFORM.Value
                itm.toXML(xw,"BUDGETREP_SUBFORM")
              next
            end if
            if _PORDERITEMSSIGN_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSSIGN in _PORDERITEMSSIGN_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSSIGN_SUBFORM")
              next
            end if
            if _PORDISTATUSLOG_SUBFORM.value.count > 0 then
              for each itm as PORDISTATUSLOG in _PORDISTATUSLOG_SUBFORM.Value
                itm.toXML(xw,"PORDISTATUSLOG_SUBFORM")
              next
            end if
            if _SPLITCOSTCENTERS_SUBFORM.value.count > 0 then
              for each itm as SPLITCOSTCENTERS in _SPLITCOSTCENTERS_SUBFORM.Value
                itm.toXML(xw,"SPLITCOSTCENTERS_SUBFORM")
              next
            end if
            if _PORDI_CHANGE_LOG_SUBFORM.value.count > 0 then
              for each itm as PORDI_CHANGE_LOG in _PORDI_CHANGE_LOG_SUBFORM.Value
                itm.toXML(xw,"PORDI_CHANGE_LOG_SUBFORM")
              next
            end if
            if _CHANGESITEMS_LOG_SUBFORM.value.count > 0 then
              for each itm as CHANGESITEMS_LOG in _CHANGESITEMS_LOG_SUBFORM.Value
                itm.toXML(xw,"CHANGESITEMS_LOG_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMS = JsonConvert.DeserializeObject(Of PORDERITEMS)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _REQDATE = .REQDATE
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _VATPRICE = .VATPRICE
                  _PRICEBAL = .PRICEBAL
                  _CODE = .CODE
                  _SUPPARTNAME = .SUPPARTNAME
                  _MNFNAME = .MNFNAME
                  _MNFDES = .MNFDES
                  _CLOSEDBOOL = .CLOSEDBOOL
                  _PRSOURCENAME = .PRSOURCENAME
                  _REVNAME = .REVNAME
                  _NUMPACK = .NUMPACK
                  _PACKCODE = .PACKCODE
                  _BUDCODE = .BUDCODE
                  _BUDGETDATE = .BUDGETDATE
                  _COSTCNAME = .COSTCNAME
                  _DUTYPERCENTTYPE = .DUTYPERCENTTYPE
                  _PRDI = .PRDI
                  _CORDNAME = .CORDNAME
                  _COLINE = .COLINE
                  _PORDISTATUSDES = .PORDISTATUSDES
                  _PRIVTYPE = .PRIVTYPE
                  _SPPRIVTYPE = .SPPRIVTYPE
                  _ARRDATE = .ARRDATE
                  _DUEDATE = .DUEDATE
                  _REQDATE2 = .REQDATE2
                  _UNSPSCCODE = .UNSPSCCODE
                  _UNSPSCDES = .UNSPSCDES
                  _ACTNAME = .ACTNAME
                  _SERIALNAME = .SERIALNAME
                  _FORSERIALNAME = .FORSERIALNAME
                  _FORPARTNAME = .FORPARTNAME
                  _VOLUME = .VOLUME
                  _VUNITNAME = .VUNITNAME
                  _QUANT = .QUANT
                  _ABALANCE = .ABALANCE
                  _UNITNAME = .UNITNAME
                  _EXCH = .EXCH
                  _ORIGTQUANT = .ORIGTQUANT
                  _ORIGLINE = .ORIGLINE
                  _SPLIT = .SPLIT
                  _BARCODE = .BARCODE
                  _DEALNAME = .DEALNAME
                  _DLINE = .DLINE
                  _REMARK = .REMARK
                  _ORDI = .ORDI
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PORDERITEMS
        
        PORDERSTOTAL = 0
        
        PROJLINK = 1
        
        PORDERITEMSUNSPECS = 2
        
        PORDERITEMSTEXT = 3
        
        LOGCOUNTERS = 4
        
        LOGCOUNTERSMPART = 5
        
        PARTBALANCE = 6
        
        PORDERITEMSTRANS = 7
        
        PORDPARTPROF = 8
        
        PORDERITEMSIV = 9
        
        LINKFAULTS = 10
        
        PRDIORDIPRDI = 11
        
        PORDPRICEOPTIONS = 12
        
        LASTSUPPARTBUYS = 13
        
        BUDGETREP = 14
        
        PORDERITEMSSIGN = 15
        
        PORDISTATUSLOG = 16
        
        SPLITCOSTCENTERS = 17
        
        PORDI_CHANGE_LOG = 18
        
        CHANGESITEMS_LOG = 19
    End Enum
    
    <QueryTitle("Order Total")>  _
    Public Class QUERY_PORDERSTOTAL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSTOTAL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSTOTAL)
            _Parent = nothing
            _Name = "PORDERSTOTAL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSTOTAL)
            _Parent = Parent
            _name = "PORDERSTOTAL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSTOTAL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSTOTAL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSTOTAL As PORDERSTOTAL In JsonConvert.DeserializeObject(Of QUERY_PORDERSTOTAL)(stream.ReadToEnd).Value
              With _PORDERSTOTAL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSTOTAL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTOTAL = JsonConvert.DeserializeObject(Of PORDERSTOTAL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSTOTAL)
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .CHARTOTPRICE = obj.CHARTOTPRICE
                  .DETAILS = obj.DETAILS
                  .STATDES = obj.STATDES
                  .ORDNAME = obj.ORDNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSTOTAL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSTOTAL as PORDERSTOTAL in value
              If _PORDERSTOTAL.Equals(trycast(obj,PORDERSTOTAL)) Then
                  value.remove(_PORDERSTOTAL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSTOTAL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _CHARTOTPRICE As String
        
        Private _DETAILS As String
        
        Private _STATDES As String
        
        Private _ORDNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSTOTAL"
                else
                    return "PORDERSTOTAL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Price Bef. Disc."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Price Bef. Disc."),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CHARTOTPRICE")>  _
        Public Property CHARTOTPRICE() As String
            Get
                return _CHARTOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _CHARTOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Status"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Price Bef. Disc."),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSTOTAL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTOTAL = JsonConvert.DeserializeObject(Of PORDERSTOTAL)(e.StreamReader.ReadToEnd)
                With obj
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _CHARTOTPRICE = .CHARTOTPRICE
                  _DETAILS = .DETAILS
                  _STATDES = .STATDES
                  _ORDNAME = .ORDNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attributes in Set")>  _
    Public Class QUERY_PORDERITEMSUNSPECS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSUNSPECS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSUNSPECS)
            _Parent = nothing
            _Name = "PORDERITEMSUNSPECS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSUNSPECS)
            _Parent = Parent
            _name = "PORDERITEMSUNSPECS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSUNSPECS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSUNSPECS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSUNSPECS As PORDERITEMSUNSPECS In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSUNSPECS)(stream.ReadToEnd).Value
              With _PORDERITEMSUNSPECS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSUNSPECS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSUNSPECS = JsonConvert.DeserializeObject(Of PORDERITEMSUNSPECS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSUNSPECS)
                  .SPECDES = obj.SPECDES
                  .VALUE = obj.VALUE
                  .MANDATORY = obj.MANDATORY
                  .SPEC = obj.SPEC
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSUNSPECS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSUNSPECS as PORDERITEMSUNSPECS in value
              If _PORDERITEMSUNSPECS.Equals(trycast(obj,PORDERITEMSUNSPECS)) Then
                  value.remove(_PORDERITEMSUNSPECS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSUNSPECS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetSPECDES As Boolean = Boolean.FalseString
        
        Private _SPECDES As String
        
        Private _IsSetVALUE As Boolean = Boolean.FalseString
        
        Private _VALUE As String
        
        Private _IsSetMANDATORY As Boolean = Boolean.FalseString
        
        Private _MANDATORY As String
        
        Private _IsSetSPEC As Boolean = Boolean.FalseString
        
        Private _SPEC As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSUNSPECS"
                else
                    return "PORDERITEMSUNSPECS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SPEC={0}", _
                  string.format("{0}",SPEC) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Attribute"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(12),  _
         twodBarcode("SPECDES")>  _
        Public Property SPECDES() As String
            Get
                return _SPECDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Attribute", value, "^.{0,38}$") then Exit Property
                _IsSetSPECDES = True
                If loading Then
                  _SPECDES = Value
                Else
                    if not _SPECDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPECDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPECDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Value"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(50),  _
         twodBarcode("VALUE")>  _
        Public Property VALUE() As String
            Get
                return _VALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Value", value, "^.{0,36}$") then Exit Property
                _IsSetVALUE = True
                If loading Then
                  _VALUE = Value
                Else
                    if not _VALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("VALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _VALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory?"),  _
         nType("Edm.String"),  _
         tab("Attribute"),  _
         Pos(70),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Mandatory?", value, "^.{0,1}$") then Exit Property
                _IsSetMANDATORY = True
                If loading Then
                  _MANDATORY = Value
                Else
                    if not _MANDATORY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MANDATORY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MANDATORY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Spec (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Attribute"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("SPEC")>  _
        Public Property SPEC() As nullable (of int64)
            Get
                return _SPEC
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Spec (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSPEC = True
                If loading Then
                  _SPEC = Value
                Else
                    if not _SPEC = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SPEC", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SPEC = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetSPECDES then
              if f then
                  jw.WriteRaw(", ""SPECDES"": ")
              else
                  jw.WriteRaw("""SPECDES"": ")
                  f = true
              end if
              jw.WriteValue(me.SPECDES)
            end if
            if _IsSetVALUE then
              if f then
                  jw.WriteRaw(", ""VALUE"": ")
              else
                  jw.WriteRaw("""VALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.VALUE)
            end if
            if _IsSetMANDATORY then
              if f then
                  jw.WriteRaw(", ""MANDATORY"": ")
              else
                  jw.WriteRaw("""MANDATORY"": ")
                  f = true
              end if
              jw.WriteValue(me.MANDATORY)
            end if
            if _IsSetSPEC then
              if f then
                  jw.WriteRaw(", ""SPEC"": ")
              else
                  jw.WriteRaw("""SPEC"": ")
                  f = true
              end if
              jw.WriteValue(me.SPEC)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSUNSPECS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetSPECDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPECDES")
              .WriteAttributeString("value", me.SPECDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "38")
              .WriteEndElement
            end if
            if _IsSetVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "VALUE")
              .WriteAttributeString("value", me.VALUE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "36")
              .WriteEndElement
            end if
            if _IsSetMANDATORY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MANDATORY")
              .WriteAttributeString("value", me.MANDATORY)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSPEC then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SPEC")
              .WriteAttributeString("value", me.SPEC)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSUNSPECS = JsonConvert.DeserializeObject(Of PORDERITEMSUNSPECS)(e.StreamReader.ReadToEnd)
                With obj
                  _SPECDES = .SPECDES
                  _VALUE = .VALUE
                  _MANDATORY = .MANDATORY
                  _SPEC = .SPEC
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Items - Remarks")>  _
    Public Class QUERY_PORDERITEMSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSTEXT)
            _Parent = nothing
            _Name = "PORDERITEMSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSTEXT)
            _Parent = Parent
            _name = "PORDERITEMSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSTEXT As PORDERITEMSTEXT In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSTEXT)(stream.ReadToEnd).Value
              With _PORDERITEMSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSTEXT = JsonConvert.DeserializeObject(Of PORDERITEMSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSTEXT as PORDERITEMSTEXT in value
              If _PORDERITEMSTEXT.Equals(trycast(obj,PORDERITEMSTEXT)) Then
                  value.remove(_PORDERITEMSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSTEXT"
                else
                    return "PORDERITEMSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSTEXT = JsonConvert.DeserializeObject(Of PORDERITEMSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Availability")>  _
    Public Class QUERY_LOGCOUNTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = nothing
            _Name = "LOGCOUNTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERS)
            _Parent = Parent
            _name = "LOGCOUNTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Part Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERS As LOGCOUNTERS In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERS)(stream.ReadToEnd).Value
              With _LOGCOUNTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERS)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERS as LOGCOUNTERS in value
              If _LOGCOUNTERS.Equals(trycast(obj,LOGCOUNTERS)) Then
                  value.remove(_LOGCOUNTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAIL_SUBFORM As QUERY_PARTAVAIL
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Part Availability - Details"))
            _PARTAVAIL_SUBFORM = new QUERY_PARTAVAIL(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAIL_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Part Availability - Details", _PARTAVAIL_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERS"
                else
                    return "LOGCOUNTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAIL_SUBFORM() As QUERY_PARTAVAIL
            Get
                return _PARTAVAIL_SUBFORM
            End Get
            Set
                _PARTAVAIL_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAIL_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAIL_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAIL_SUBFORM.value.count > 0 then
              for each itm as PARTAVAIL in _PARTAVAIL_SUBFORM.Value
                itm.toXML(xw,"PARTAVAIL_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERS = JsonConvert.DeserializeObject(Of LOGCOUNTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERS
        
        PARTAVAIL = 0
    End Enum
    
    <QueryTitle("Part Availability - Details")>  _
    Public Class QUERY_PARTAVAIL
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAIL)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = nothing
            _Name = "PARTAVAIL"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAIL)
            _Parent = Parent
            _name = "PARTAVAIL_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAIL)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAIL)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAIL As PARTAVAIL In JsonConvert.DeserializeObject(Of QUERY_PARTAVAIL)(stream.ReadToEnd).Value
              With _PARTAVAIL
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAIL)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAIL)
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAIL(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAIL as PARTAVAIL in value
              If _PARTAVAIL.Equals(trycast(obj,PARTAVAIL)) Then
                  value.remove(_PARTAVAIL)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAIL
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAIL"
                else
                    return "PARTAVAIL_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("DueDate/On-Hand Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("DueDate/On-Hand Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Part (ID)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Part (ID)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAIL")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAIL = JsonConvert.DeserializeObject(Of PARTAVAIL)(e.StreamReader.ReadToEnd)
                With obj
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Base Product Availability")>  _
    Public Class QUERY_LOGCOUNTERSMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LOGCOUNTERSMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = nothing
            _Name = "LOGCOUNTERSMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LOGCOUNTERSMPART)
            _Parent = Parent
            _name = "LOGCOUNTERSMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Product Availability - Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LOGCOUNTERSMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LOGCOUNTERSMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LOGCOUNTERSMPART As LOGCOUNTERSMPART In JsonConvert.DeserializeObject(Of QUERY_LOGCOUNTERSMPART)(stream.ReadToEnd).Value
              With _LOGCOUNTERSMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LOGCOUNTERSMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LOGCOUNTERSMPART)
                  .BALANCE = obj.BALANCE
                  .PORDERS = obj.PORDERS
                  .ORDERS = obj.ORDERS
                  .DIFF = obj.DIFF
                  .SELLBALANCE = obj.SELLBALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .DUMMY = obj.DUMMY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LOGCOUNTERSMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LOGCOUNTERSMPART as LOGCOUNTERSMPART in value
              If _LOGCOUNTERSMPART.Equals(trycast(obj,LOGCOUNTERSMPART)) Then
                  value.remove(_LOGCOUNTERSMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LOGCOUNTERSMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _BALANCE As Decimal
        
        Private _PORDERS As Decimal
        
        Private _ORDERS As Decimal
        
        Private _DIFF As Decimal
        
        Private _SELLBALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _IsSetDUMMY As Boolean = Boolean.FalseString
        
        Private _DUMMY As Long
        
        Private _PARTAVAILMPART_SUBFORM As QUERY_PARTAVAILMPART
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Product Availability - Details"))
            _PARTAVAILMPART_SUBFORM = new QUERY_PARTAVAILMPART(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PARTAVAILMPART_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Product Availability - Details", _PARTAVAILMPART_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LOGCOUNTERSMPART"
                else
                    return "LOGCOUNTERSMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DUMMY={0}", _
                  string.format("{0}",DUMMY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Available Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Purch Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PORDERS")>  _
        Public Property PORDERS() As nullable(of decimal)
            Get
                return _PORDERS
            End Get
            Set
                if not(value is nothing) then
                  _PORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Sales Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ORDERS")>  _
        Public Property ORDERS() As nullable(of decimal)
            Get
                return _ORDERS
            End Get
            Set
                if not(value is nothing) then
                  _ORDERS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Projected Inventory"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("DIFF")>  _
        Public Property DIFF() As nullable(of decimal)
            Get
                return _DIFF
            End Get
            Set
                if not(value is nothing) then
                  _DIFF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Available for Sale"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Available Inventory"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("SELLBALANCE")>  _
        Public Property SELLBALANCE() As nullable(of decimal)
            Get
                return _SELLBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _SELLBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Available Inventory"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("DUMMY"),  _
         nType("Edm.Int64"),  _
         tab("Available Inventory"),  _
         Pos(0),  _
         twodBarcode("DUMMY")>  _
        Public Property DUMMY() As nullable (of int64)
            Get
                return _DUMMY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("DUMMY", value, "^[0-9\-]+$") then Exit Property
                _IsSetDUMMY = True
                If loading Then
                  _DUMMY = Value
                Else
                    if not _DUMMY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUMMY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUMMY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PARTAVAILMPART_SUBFORM() As QUERY_PARTAVAILMPART
            Get
                return _PARTAVAILMPART_SUBFORM
            End Get
            Set
                _PARTAVAILMPART_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDUMMY then
              if f then
                  jw.WriteRaw(", ""DUMMY"": ")
              else
                  jw.WriteRaw("""DUMMY"": ")
                  f = true
              end if
              jw.WriteValue(me.DUMMY)
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PARTAVAILMPART_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PARTAVAILMPART_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LOGCOUNTERSMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDUMMY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUMMY")
              .WriteAttributeString("value", me.DUMMY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PARTAVAILMPART_SUBFORM.value.count > 0 then
              for each itm as PARTAVAILMPART in _PARTAVAILMPART_SUBFORM.Value
                itm.toXML(xw,"PARTAVAILMPART_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LOGCOUNTERSMPART = JsonConvert.DeserializeObject(Of LOGCOUNTERSMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _BALANCE = .BALANCE
                  _PORDERS = .PORDERS
                  _ORDERS = .ORDERS
                  _DIFF = .DIFF
                  _SELLBALANCE = .SELLBALANCE
                  _UNITNAME4 = .UNITNAME4
                  _DUMMY = .DUMMY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_LOGCOUNTERSMPART
        
        PARTAVAILMPART = 0
    End Enum
    
    <QueryTitle("Product Availability - Details")>  _
    Public Class QUERY_PARTAVAILMPART
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTAVAILMPART)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = nothing
            _Name = "PARTAVAILMPART"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTAVAILMPART)
            _Parent = Parent
            _name = "PARTAVAILMPART_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTAVAILMPART)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTAVAILMPART)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTAVAILMPART As PARTAVAILMPART In JsonConvert.DeserializeObject(Of QUERY_PARTAVAILMPART)(stream.ReadToEnd).Value
              With _PARTAVAILMPART
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTAVAILMPART)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTAVAILMPART)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .DUEDATE = obj.DUEDATE
                  .TITLE = obj.TITLE
                  .ORDNAME = obj.ORDNAME
                  .CUSTDES = obj.CUSTDES
                  .TQUANT = obj.TQUANT
                  .BALANCE = obj.BALANCE
                  .UNITNAME4 = obj.UNITNAME4
                  .USER = obj.USER
                  .PART = obj.PART
                  .ORDI = obj.ORDI
                  .TYPE = obj.TYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTAVAILMPART(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTAVAILMPART as PARTAVAILMPART in value
              If _PARTAVAILMPART.Equals(trycast(obj,PARTAVAILMPART)) Then
                  value.remove(_PARTAVAILMPART)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTAVAILMPART
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _TITLE As String
        
        Private _ORDNAME As String
        
        Private _CUSTDES As String
        
        Private _TQUANT As Decimal
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME4 As String
        
        Private _USER As Long
        
        Private _PART As Long
        
        Private _ORDI As Long
        
        Private _TYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTAVAILMPART"
                else
                    return "PARTAVAILMPART_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0},PART={1},ORDI={2},TYPE={3}", _
                  string.format("{0}",USER), _
                  string.format("{0}",PART), _
                  string.format("{0}",ORDI), _
                  string.format("'{0}'",TYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cust/Vendor"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(24),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(34),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME4")>  _
        Public Property UNITNAME4() As String
            Get
                return _UNITNAME4
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PART")>  _
        Public Property PART() As nullable (of int64)
            Get
                return _PART
            End Get
            Set
                if not(value is nothing) then
                  _PART = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Unit"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <DisplayName("S/P"),  _
         nType("Edm.String"),  _
         tab("Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTAVAILMPART")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PART")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTAVAILMPART = JsonConvert.DeserializeObject(Of PARTAVAILMPART)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _DUEDATE = .DUEDATE
                  _TITLE = .TITLE
                  _ORDNAME = .ORDNAME
                  _CUSTDES = .CUSTDES
                  _TQUANT = .TQUANT
                  _BALANCE = .BALANCE
                  _UNITNAME4 = .UNITNAME4
                  _USER = .USER
                  _PART = .PART
                  _ORDI = .ORDI
                  _TYPE = .TYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Inventory for Part")>  _
    Public Class QUERY_PARTBALANCE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PARTBALANCE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = nothing
            _Name = "PARTBALANCE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PARTBALANCE)
            _Parent = Parent
            _name = "PARTBALANCE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PARTBALANCE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PARTBALANCE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PARTBALANCE As PARTBALANCE In JsonConvert.DeserializeObject(Of QUERY_PARTBALANCE)(stream.ReadToEnd).Value
              With _PARTBALANCE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PARTBALANCE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PARTBALANCE)
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .VELOCITY = obj.VELOCITY
                  .TYPE = obj.TYPE
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .SERIALNAME = obj.SERIALNAME
                  .SERIALDES = obj.SERIALDES
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .CUSTNAME = obj.CUSTNAME
                  .ACTNAME = obj.ACTNAME
                  .BALANCE = obj.BALANCE
                  .UNITNAME = obj.UNITNAME
                  .LASTDATE = obj.LASTDATE
                  .NUMPACK = obj.NUMPACK
                  .ACT = obj.ACT
                  .CUST = obj.CUST
                  .SERIAL = obj.SERIAL
                  .WARHS = obj.WARHS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PARTBALANCE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PARTBALANCE as PARTBALANCE in value
              If _PARTBALANCE.Equals(trycast(obj,PARTBALANCE)) Then
                  value.remove(_PARTBALANCE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PARTBALANCE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _VELOCITY As String
        
        Private _TYPE As String
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _SERIALNAME As String
        
        Private _SERIALDES As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _CUSTNAME As String
        
        Private _ACTNAME As String
        
        Private _BALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _LASTDATE As System.DateTimeOffset
        
        Private _NUMPACK As Long
        
        Private _ACT As Long
        
        Private _CUST As Long
        
        Private _SERIAL As Long
        
        Private _WARHS As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PARTBALANCE"
                else
                    return "PARTBALANCE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ACT={0},CUST={1},SERIAL={2},WARHS={3}", _
                  string.format("{0}",ACT), _
                  string.format("{0}",CUST), _
                  string.format("{0}",SERIAL), _
                  string.format("{0}",WARHS) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Warehouse"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(2),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(4),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Velocity"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("VELOCITY")>  _
        Public Property VELOCITY() As String
            Get
                return _VELOCITY
            End Get
            Set
                if not(value is nothing) then
                  _VELOCITY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type (D/F/W)"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(6),  _
         [ReadOnly](true),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Buy/Sell)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("Warehouse"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Buy/Sell Unit"),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot No."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order/Lot Desc."),  _
         nType("Edm.String"),  _
         tab("Warehouse"),  _
         Pos(26),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALDES")>  _
        Public Property SERIALDES() As String
            Get
                return _SERIALDES
            End Get
            Set
                if not(value is nothing) then
                  _SERIALDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Expir. Date"),  _
         Pos(28),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. No."),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor/Subcont. Name"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation/Pallet"),  _
         nType("Edm.String"),  _
         tab("Expir. Date"),  _
         Pos(46),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Expir. Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("BALANCE")>  _
        Public Property BALANCE() As nullable(of decimal)
            Get
                return _BALANCE
            End Get
            Set
                if not(value is nothing) then
                  _BALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Factory Unit"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Last Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Factory Unit"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("LASTDATE")>  _
        Public Property LASTDATE() As nullable (of DateTimeOffset)
            Get
                return _LASTDATE
            End Get
            Set
                if not(value is nothing) then
                  _LASTDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ACT")>  _
        Public Property ACT() As nullable (of int64)
            Get
                return _ACT
            End Get
            Set
                if not(value is nothing) then
                  _ACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if not(value is nothing) then
                  _CUST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("SERIAL")>  _
        Public Property SERIAL() As nullable (of int64)
            Get
                return _SERIAL
            End Get
            Set
                if not(value is nothing) then
                  _SERIAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Warehouse (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Factory Unit"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("WARHS")>  _
        Public Property WARHS() As nullable (of int64)
            Get
                return _WARHS
            End Get
            Set
                if not(value is nothing) then
                  _WARHS = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PARTBALANCE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ACT")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "SERIAL")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "WARHS")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PARTBALANCE = JsonConvert.DeserializeObject(Of PARTBALANCE)(e.StreamReader.ReadToEnd)
                With obj
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _VELOCITY = .VELOCITY
                  _TYPE = .TYPE
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _SERIALNAME = .SERIALNAME
                  _SERIALDES = .SERIALDES
                  _EXPIRYDATE = .EXPIRYDATE
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _CUSTNAME = .CUSTNAME
                  _ACTNAME = .ACTNAME
                  _BALANCE = .BALANCE
                  _UNITNAME = .UNITNAME
                  _LASTDATE = .LASTDATE
                  _NUMPACK = .NUMPACK
                  _ACT = .ACT
                  _CUST = .CUST
                  _SERIAL = .SERIAL
                  _WARHS = .WARHS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Tracing")>  _
    Public Class QUERY_PORDERITEMSTRANS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSTRANS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSTRANS)
            _Parent = nothing
            _Name = "PORDERITEMSTRANS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSTRANS)
            _Parent = Parent
            _name = "PORDERITEMSTRANS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSTRANS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSTRANS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSTRANS As PORDERITEMSTRANS In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSTRANS)(stream.ReadToEnd).Value
              With _PORDERITEMSTRANS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSTRANS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSTRANS = JsonConvert.DeserializeObject(Of PORDERITEMSTRANS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSTRANS)
                  .CURDATE = obj.CURDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .DOCDES = obj.DOCDES
                  .DOCNO = obj.DOCNO
                  .WARHSNAME = obj.WARHSNAME
                  .LOCNAME = obj.LOCNAME
                  .TOWARHSNAME = obj.TOWARHSNAME
                  .TOLOCNAME = obj.TOLOCNAME
                  .DOC = obj.DOC
                  .KLINE = obj.KLINE
                  .TRANS = obj.TRANS
                  .TTYPE = obj.TTYPE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSTRANS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSTRANS as PORDERITEMSTRANS in value
              If _PORDERITEMSTRANS.Equals(trycast(obj,PORDERITEMSTRANS)) Then
                  value.remove(_PORDERITEMSTRANS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSTRANS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _DOCDES As String
        
        Private _DOCNO As String
        
        Private _WARHSNAME As String
        
        Private _LOCNAME As String
        
        Private _TOWARHSNAME As String
        
        Private _TOLOCNAME As String
        
        Private _DOC As Long
        
        Private _KLINE As Long
        
        Private _TRANS As Long
        
        Private _TTYPE As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSTRANS"
                else
                    return "PORDERITEMSTRANS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "DOC={0},KLINE={1},TTYPE={2}", _
                  string.format("{0}",DOC), _
                  string.format("{0}",KLINE), _
                  string.format("'{0}'",TTYPE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Inv. Transaction"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if not(value is nothing) then
                  _DOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("From Warehouse"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("WARHSNAME")>  _
        Public Property WARHSNAME() As String
            Get
                return _WARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _WARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(102),  _
         [ReadOnly](true),  _
         twodBarcode("LOCNAME")>  _
        Public Property LOCNAME() As String
            Get
                return _LOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _LOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Warehouse"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("TOWARHSNAME")>  _
        Public Property TOWARHSNAME() As String
            Get
                return _TOWARHSNAME
            End Get
            Set
                if not(value is nothing) then
                  _TOWARHSNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bin"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(112),  _
         [ReadOnly](true),  _
         twodBarcode("TOLOCNAME")>  _
        Public Property TOLOCNAME() As String
            Get
                return _TOLOCNAME
            End Get
            Set
                if not(value is nothing) then
                  _TOLOCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Bin"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("DOC")>  _
        Public Property DOC() As nullable (of int64)
            Get
                return _DOC
            End Get
            Set
                if not(value is nothing) then
                  _DOC = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Bin"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transaction (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Bin"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TRANS")>  _
        Public Property TRANS() As nullable (of int64)
            Get
                return _TRANS
            End Get
            Set
                if not(value is nothing) then
                  _TRANS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Type"),  _
         nType("Edm.String"),  _
         tab("Bin"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TTYPE")>  _
        Public Property TTYPE() As String
            Get
                return _TTYPE
            End Get
            Set
                if not(value is nothing) then
                  _TTYPE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSTRANS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "DOC")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "TTYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSTRANS = JsonConvert.DeserializeObject(Of PORDERITEMSTRANS)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _DOCDES = .DOCDES
                  _DOCNO = .DOCNO
                  _WARHSNAME = .WARHSNAME
                  _LOCNAME = .LOCNAME
                  _TOWARHSNAME = .TOWARHSNAME
                  _TOLOCNAME = .TOLOCNAME
                  _DOC = .DOC
                  _KLINE = .KLINE
                  _TRANS = .TRANS
                  _TTYPE = .TTYPE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Price Quotations per Part")>  _
    Public Class QUERY_PORDPARTPROF
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDPARTPROF)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDPARTPROF)
            _Parent = nothing
            _Name = "PORDPARTPROF"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDPARTPROF)
            _Parent = Parent
            _name = "PORDPARTPROF_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDPARTPROF)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDPARTPROF)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDPARTPROF As PORDPARTPROF In JsonConvert.DeserializeObject(Of QUERY_PORDPARTPROF)(stream.ReadToEnd).Value
              With _PORDPARTPROF
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDPARTPROF)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPARTPROF = JsonConvert.DeserializeObject(Of PORDPARTPROF)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDPARTPROF)
                  .PROFNUM = obj.PROFNUM
                  .EXPIRYDATE = obj.EXPIRYDATE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .PPERCENT = obj.PPERCENT
                  .DISPRICE = obj.DISPRICE
                  .ICODE = obj.ICODE
                  .TOTALPRICE = obj.TOTALPRICE
                  .CODE = obj.CODE
                  .BASEDISPRICE = obj.BASEDISPRICE
                  .BASETOTALPRICE = obj.BASETOTALPRICE
                  .BASECODE = obj.BASECODE
                  .PDATE = obj.PDATE
                  .PDLVDATE = obj.PDLVDATE
                  .KLINE = obj.KLINE
                  .PROF = obj.PROF
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDPARTPROF(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDPARTPROF as PORDPARTPROF in value
              If _PORDPARTPROF.Equals(trycast(obj,PORDPARTPROF)) Then
                  value.remove(_PORDPARTPROF)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDPARTPROF
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PROFNUM As String
        
        Private _EXPIRYDATE As System.DateTimeOffset
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _PPERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _ICODE As String
        
        Private _TOTALPRICE As Decimal
        
        Private _CODE As String
        
        Private _BASEDISPRICE As Decimal
        
        Private _BASETOTALPRICE As Decimal
        
        Private _BASECODE As String
        
        Private _PDATE As System.DateTimeOffset
        
        Private _PDLVDATE As System.DateTimeOffset
        
        Private _KLINE As Long
        
        Private _PROF As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDPARTPROF"
                else
                    return "PORDPARTPROF_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},PROF={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",PROF) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Quote Number"),  _
         nType("Edm.String"),  _
         tab("Quote Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PROFNUM")>  _
        Public Property PROFNUM() As String
            Get
                return _PROFNUM
            End Get
            Set
                if not(value is nothing) then
                  _PROFNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expir. Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Quote Number"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("EXPIRYDATE")>  _
        Public Property EXPIRYDATE() As nullable (of DateTimeOffset)
            Get
                return _EXPIRYDATE
            End Get
            Set
                if not(value is nothing) then
                  _EXPIRYDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Minimum Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Quote Number"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Quote Number"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Quote Number"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Quote Number"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Quote Number"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PPERCENT")>  _
        Public Property PPERCENT() As nullable(of decimal)
            Get
                return _PPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Quote Number"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(135),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Item Currency"),  _
         Pos(145),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALPRICE")>  _
        Public Property TOTALPRICE() As nullable(of decimal)
            Get
                return _TOTALPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTALPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Currency"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Item Currency"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("BASEDISPRICE")>  _
        Public Property BASEDISPRICE() As nullable(of decimal)
            Get
                return _BASEDISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _BASEDISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Item Currency"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("BASETOTALPRICE")>  _
        Public Property BASETOTALPRICE() As nullable(of decimal)
            Get
                return _BASETOTALPRICE
            End Get
            Set
                if not(value is nothing) then
                  _BASETOTALPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("{L.F}"),  _
         nType("Edm.String"),  _
         tab("Item Currency"),  _
         Pos(165),  _
         [ReadOnly](true),  _
         twodBarcode("BASECODE")>  _
        Public Property BASECODE() As String
            Get
                return _BASECODE
            End Get
            Set
                if not(value is nothing) then
                  _BASECODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quote Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Item Currency"),  _
         Pos(175),  _
         [ReadOnly](true),  _
         twodBarcode("PDATE")>  _
        Public Property PDATE() As nullable (of DateTimeOffset)
            Get
                return _PDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Item Currency"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("PDLVDATE")>  _
        Public Property PDLVDATE() As nullable (of DateTimeOffset)
            Get
                return _PDLVDATE
            End Get
            Set
                if not(value is nothing) then
                  _PDLVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Quotation (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("PROF")>  _
        Public Property PROF() As nullable (of int64)
            Get
                return _PROF
            End Get
            Set
                if not(value is nothing) then
                  _PROF = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDPARTPROF")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "PROF")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPARTPROF = JsonConvert.DeserializeObject(Of PORDPARTPROF)(e.StreamReader.ReadToEnd)
                With obj
                  _PROFNUM = .PROFNUM
                  _EXPIRYDATE = .EXPIRYDATE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _PPERCENT = .PPERCENT
                  _DISPRICE = .DISPRICE
                  _ICODE = .ICODE
                  _TOTALPRICE = .TOTALPRICE
                  _CODE = .CODE
                  _BASEDISPRICE = .BASEDISPRICE
                  _BASETOTALPRICE = .BASETOTALPRICE
                  _BASECODE = .BASECODE
                  _PDATE = .PDATE
                  _PDLVDATE = .PDLVDATE
                  _KLINE = .KLINE
                  _PROF = .PROF
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Invoices")>  _
    Public Class QUERY_PORDERITEMSIV
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSIV)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSIV)
            _Parent = nothing
            _Name = "PORDERITEMSIV"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSIV)
            _Parent = Parent
            _name = "PORDERITEMSIV_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSIV)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSIV)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSIV As PORDERITEMSIV In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSIV)(stream.ReadToEnd).Value
              With _PORDERITEMSIV
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSIV)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSIV = JsonConvert.DeserializeObject(Of PORDERITEMSIV)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSIV)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .SUPIVNUM = obj.SUPIVNUM
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .TOTPERCENT = obj.TOTPERCENT
                  .DISPRICE = obj.DISPRICE
                  .CODE = obj.CODE
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .QUANT = obj.QUANT
                  .UNITNAME = obj.UNITNAME
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSIV(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSIV as PORDERITEMSIV in value
              If _PORDERITEMSIV.Equals(trycast(obj,PORDERITEMSIV)) Then
                  value.remove(_PORDERITEMSIV)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSIV
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _SUPIVNUM As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _CODE As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSIV"
                else
                    return "PORDERITEMSIV_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(8),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(11),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("SUPIVNUM")>  _
        Public Property SUPIVNUM() As String
            Get
                return _SUPIVNUM
            End Get
            Set
                if not(value is nothing) then
                  _SUPIVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(13),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Item Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Date"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("% Overall Discount"),  _
         Pos(17),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Total After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("% Overall Discount"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("% Overall Discount"),  _
         Pos(19),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("% Overall Discount"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("% Overall Discount"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("% Overall Discount"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("% Overall Discount"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("% Overall Discount"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Key Line"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSIV")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSIV = JsonConvert.DeserializeObject(Of PORDERITEMSIV)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _SUPIVNUM = .SUPIVNUM
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _TOTPERCENT = .TOTPERCENT
                  _DISPRICE = .DISPRICE
                  _CODE = .CODE
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _QUANT = .QUANT
                  _UNITNAME = .UNITNAME
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Malfunction Linked to Document")>  _
    Public Class QUERY_LINKFAULTS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKFAULTS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKFAULTS)
            _Parent = nothing
            _Name = "LINKFAULTS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKFAULTS)
            _Parent = Parent
            _name = "LINKFAULTS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKFAULTS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKFAULTS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKFAULTS As LINKFAULTS In JsonConvert.DeserializeObject(Of QUERY_LINKFAULTS)(stream.ReadToEnd).Value
              With _LINKFAULTS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKFAULTS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKFAULTS = JsonConvert.DeserializeObject(Of LINKFAULTS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKFAULTS)
                  .FAULTNO = obj.FAULTNO
                  .CURDATE = obj.CURDATE
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKFAULTS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKFAULTS as LINKFAULTS in value
              If _LINKFAULTS.Equals(trycast(obj,LINKFAULTS)) Then
                  value.remove(_LINKFAULTS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKFAULTS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetFAULTNO As Boolean = Boolean.FalseString
        
        Private _FAULTNO As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetKLINE2 As Boolean = Boolean.FalseString
        
        Private _KLINE2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKFAULTS"
                else
                    return "LINKFAULTS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Malfunction Number"),  _
         nType("Edm.String"),  _
         tab("Malfunction Number"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("FAULTNO")>  _
        Public Property FAULTNO() As String
            Get
                return _FAULTNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Malfunction Number", value, "^.{0,16}$") then Exit Property
                _IsSetFAULTNO = True
                If loading Then
                  _FAULTNO = Value
                Else
                    if not _FAULTNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAULTNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAULTNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Malfunction Number"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line2 (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Malfunction Number"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line2 (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE2 = True
                If loading Then
                  _KLINE2 = Value
                Else
                    if not _KLINE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetFAULTNO then
              if f then
                  jw.WriteRaw(", ""FAULTNO"": ")
              else
                  jw.WriteRaw("""FAULTNO"": ")
                  f = true
              end if
              jw.WriteValue(me.FAULTNO)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetKLINE2 then
              if f then
                  jw.WriteRaw(", ""KLINE2"": ")
              else
                  jw.WriteRaw("""KLINE2"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE2)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKFAULTS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetFAULTNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAULTNO")
              .WriteAttributeString("value", me.FAULTNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetKLINE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", me.KLINE2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKFAULTS = JsonConvert.DeserializeObject(Of LINKFAULTS)(e.StreamReader.ReadToEnd)
                With obj
                  _FAULTNO = .FAULTNO
                  _CURDATE = .CURDATE
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Orders for PR/Purch Order")>  _
    Public Class QUERY_PRDIORDIPRDI
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PRDIORDIPRDI)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PRDIORDIPRDI)
            _Parent = nothing
            _Name = "PRDIORDIPRDI"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PRDIORDIPRDI)
            _Parent = Parent
            _name = "PRDIORDIPRDI_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PRDIORDIPRDI)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PRDIORDIPRDI)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PRDIORDIPRDI As PRDIORDIPRDI In JsonConvert.DeserializeObject(Of QUERY_PRDIORDIPRDI)(stream.ReadToEnd).Value
              With _PRDIORDIPRDI
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PRDIORDIPRDI)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PRDIORDIPRDI = JsonConvert.DeserializeObject(Of PRDIORDIPRDI)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PRDIORDIPRDI)
                  .ORDNAME = obj.ORDNAME
                  .LINE = obj.LINE
                  .PARTNAME = obj.PARTNAME
                  .DUEDATE = obj.DUEDATE
                  .QUANT = obj.QUANT
                  .ABALANCE = obj.ABALANCE
                  .UNITNAME = obj.UNITNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PRDIORDIPRDI(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PRDIORDIPRDI as PRDIORDIPRDI in value
              If _PRDIORDIPRDI.Equals(trycast(obj,PRDIORDIPRDI)) Then
                  value.remove(_PRDIORDIPRDI)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PRDIORDIPRDI
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _ORDNAME As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _PARTNAME As String
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _QUANT As Decimal
        
        Private _ABALANCE As Decimal
        
        Private _UNITNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PRDIORDIPRDI"
                else
                    return "PRDIORDIPRDI_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _ORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Order"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Order"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("ABALANCE")>  _
        Public Property ABALANCE() As nullable(of decimal)
            Get
                return _ABALANCE
            End Get
            Set
                if not(value is nothing) then
                  _ABALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PRDIORDIPRDI")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PRDIORDIPRDI = JsonConvert.DeserializeObject(Of PRDIORDIPRDI)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _LINE = .LINE
                  _PARTNAME = .PARTNAME
                  _DUEDATE = .DUEDATE
                  _QUANT = .QUANT
                  _ABALANCE = .ABALANCE
                  _UNITNAME = .UNITNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Part Price Options")>  _
    Public Class QUERY_PORDPRICEOPTIONS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDPRICEOPTIONS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDPRICEOPTIONS)
            _Parent = nothing
            _Name = "PORDPRICEOPTIONS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDPRICEOPTIONS)
            _Parent = Parent
            _name = "PORDPRICEOPTIONS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDPRICEOPTIONS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDPRICEOPTIONS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDPRICEOPTIONS As PORDPRICEOPTIONS In JsonConvert.DeserializeObject(Of QUERY_PORDPRICEOPTIONS)(stream.ReadToEnd).Value
              With _PORDPRICEOPTIONS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDPRICEOPTIONS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPRICEOPTIONS = JsonConvert.DeserializeObject(Of PORDPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDPRICEOPTIONS)
                  .PODOCNO = obj.PODOCNO
                  .SUPNAME = obj.SUPNAME
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .TQUANT = obj.TQUANT
                  .UNITNAME = obj.UNITNAME
                  .PRICE = obj.PRICE
                  .PERCENT = obj.PERCENT
                  .DUTYPERCENT = obj.DUTYPERCENT
                  .DUTYPERCENTTYPE = obj.DUTYPERCENTTYPE
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .BPRICE = obj.BPRICE
                  .BCODE = obj.BCODE
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .MNFNAME = obj.MNFNAME
                  .MNFDES = obj.MNFDES
                  .TYPE = obj.TYPE
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDPRICEOPTIONS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDPRICEOPTIONS as PORDPRICEOPTIONS in value
              If _PORDPRICEOPTIONS.Equals(trycast(obj,PORDPRICEOPTIONS)) Then
                  value.remove(_PORDPRICEOPTIONS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDPRICEOPTIONS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PODOCNO As String
        
        Private _SUPNAME As String
        
        Private _PRSOURCENAME As String
        
        Private _TQUANT As Decimal
        
        Private _UNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DUTYPERCENT As Decimal
        
        Private _DUTYPERCENTTYPE As String
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _BPRICE As Decimal
        
        Private _BCODE As String
        
        Private _LCODE As String
        
        Private _LEXCH As Decimal
        
        Private _MNFNAME As String
        
        Private _MNFDES As String
        
        Private _TYPE As String
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDPRICEOPTIONS"
                else
                    return "PORDPRICEOPTIONS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TYPE={0},KLINE={1}", _
                  string.format("'{0}'",TYPE), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PODOCNO")>  _
        Public Property PODOCNO() As String
            Get
                return _PODOCNO
            End Get
            Set
                if not(value is nothing) then
                  _PODOCNO = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(17),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Doc. Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Document Number"),  _
         Pos(18),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Document Number"),  _
         Pos(19),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Document Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(10),  _
         tab("Document Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Cost (%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Document Number"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("DUTYPERCENT")>  _
        Public Property DUTYPERCENT() As nullable(of decimal)
            Get
                return _DUTYPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _DUTYPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Cost Type"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("DUTYPERCENTTYPE")>  _
        Public Property DUTYPERCENTTYPE() As String
            Get
                return _DUTYPERCENTTYPE
            End Get
            Set
                if not(value is nothing) then
                  _DUTYPERCENTTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Shipping Cost Type"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price ({L.F})"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Shipping Cost Type"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("BPRICE")>  _
        Public Property BPRICE() As nullable(of decimal)
            Get
                return _BPRICE
            End Get
            Set
                if not(value is nothing) then
                  _BPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("{L.F}"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(61),  _
         [ReadOnly](true),  _
         twodBarcode("BCODE")>  _
        Public Property BCODE() As String
            Get
                return _BCODE
            End Get
            Set
                if not(value is nothing) then
                  _BCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if not(value is nothing) then
                  _LCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Shipping Cost Type"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if not(value is nothing) then
                  _LEXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manufct Code"),  _
         nType("Edm.String"),  _
         tab("Shipping Cost Type"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("MNFNAME")>  _
        Public Property MNFNAME() As String
            Get
                return _MNFNAME
            End Get
            Set
                if not(value is nothing) then
                  _MNFNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manufacturer Name"),  _
         nType("Edm.String"),  _
         tab("Manufacturer Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("MNFDES")>  _
        Public Property MNFDES() As String
            Get
                return _MNFDES
            End Get
            Set
                if not(value is nothing) then
                  _MNFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Manufacturer Name"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TYPE")>  _
        Public Property TYPE() As String
            Get
                return _TYPE
            End Get
            Set
                if not(value is nothing) then
                  _TYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Manufacturer Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDPRICEOPTIONS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TYPE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPRICEOPTIONS = JsonConvert.DeserializeObject(Of PORDPRICEOPTIONS)(e.StreamReader.ReadToEnd)
                With obj
                  _PODOCNO = .PODOCNO
                  _SUPNAME = .SUPNAME
                  _PRSOURCENAME = .PRSOURCENAME
                  _TQUANT = .TQUANT
                  _UNITNAME = .UNITNAME
                  _PRICE = .PRICE
                  _PERCENT = .PERCENT
                  _DUTYPERCENT = .DUTYPERCENT
                  _DUTYPERCENTTYPE = .DUTYPERCENTTYPE
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _BPRICE = .BPRICE
                  _BCODE = .BCODE
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _MNFNAME = .MNFNAME
                  _MNFDES = .MNFDES
                  _TYPE = .TYPE
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Latest Part Purchases from Vend")>  _
    Public Class QUERY_LASTSUPPARTBUYS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LASTSUPPARTBUYS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LASTSUPPARTBUYS)
            _Parent = nothing
            _Name = "LASTSUPPARTBUYS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LASTSUPPARTBUYS)
            _Parent = Parent
            _name = "LASTSUPPARTBUYS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LASTSUPPARTBUYS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LASTSUPPARTBUYS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LASTSUPPARTBUYS As LASTSUPPARTBUYS In JsonConvert.DeserializeObject(Of QUERY_LASTSUPPARTBUYS)(stream.ReadToEnd).Value
              With _LASTSUPPARTBUYS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LASTSUPPARTBUYS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTSUPPARTBUYS = JsonConvert.DeserializeObject(Of LASTSUPPARTBUYS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LASTSUPPARTBUYS)
                  .IVDATE = obj.IVDATE
                  .IVNUM = obj.IVNUM
                  .IVDES = obj.IVDES
                  .TQUANT = obj.TQUANT
                  .TUNITNAME = obj.TUNITNAME
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .TOTPERCENT = obj.TOTPERCENT
                  .QPRICE = obj.QPRICE
                  .CODE = obj.CODE
                  .IV = obj.IV
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LASTSUPPARTBUYS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LASTSUPPARTBUYS as LASTSUPPARTBUYS in value
              If _LASTSUPPARTBUYS.Equals(trycast(obj,LASTSUPPARTBUYS)) Then
                  value.remove(_LASTSUPPARTBUYS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LASTSUPPARTBUYS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IVDATE As System.DateTimeOffset
        
        Private _IVNUM As String
        
        Private _IVDES As String
        
        Private _TQUANT As Decimal
        
        Private _TUNITNAME As String
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _TOTPERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _CODE As String
        
        Private _IV As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LASTSUPPARTBUYS"
                else
                    return "LASTSUPPARTBUYS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "IV={0},KLINE={1}", _
                  string.format("{0}",IV), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("IVDATE")>  _
        Public Property IVDATE() As nullable (of DateTimeOffset)
            Get
                return _IVDATE
            End Get
            Set
                if not(value is nothing) then
                  _IVDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("IVNUM")>  _
        Public Property IVNUM() As String
            Get
                return _IVNUM
            End Get
            Set
                if not(value is nothing) then
                  _IVNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Type"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("IVDES")>  _
        Public Property IVDES() As String
            Get
                return _IVDES
            End Get
            Set
                if not(value is nothing) then
                  _IVDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Date"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Overall Discount"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPERCENT")>  _
        Public Property TOTPERCENT() As nullable(of decimal)
            Get
                return _TOTPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _TOTPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Overall Discount"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice Currency"),  _
         nType("Edm.String"),  _
         tab("Overall Discount"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Invoice (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("IV")>  _
        Public Property IV() As nullable (of int64)
            Get
                return _IV
            End Get
            Set
                if not(value is nothing) then
                  _IV = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Overall Discount"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LASTSUPPARTBUYS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "IV")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LASTSUPPARTBUYS = JsonConvert.DeserializeObject(Of LASTSUPPARTBUYS)(e.StreamReader.ReadToEnd)
                With obj
                  _IVDATE = .IVDATE
                  _IVNUM = .IVNUM
                  _IVDES = .IVDES
                  _TQUANT = .TQUANT
                  _TUNITNAME = .TUNITNAME
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _TOTPERCENT = .TOTPERCENT
                  _QPRICE = .QPRICE
                  _CODE = .CODE
                  _IV = .IV
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Budgeted vs. Actual")>  _
    Public Class QUERY_BUDGETREP
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of BUDGETREP)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = nothing
            _Name = "BUDGETREP"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of BUDGETREP)
            _Parent = Parent
            _name = "BUDGETREP_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of BUDGETREP)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(BUDGETREP)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _BUDGETREP As BUDGETREP In JsonConvert.DeserializeObject(Of QUERY_BUDGETREP)(stream.ReadToEnd).Value
              With _BUDGETREP
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_BUDGETREP)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, BUDGETREP)
                  .AMOUNT = obj.AMOUNT
                  .TOTCOST = obj.TOTCOST
                  .BAL = obj.BAL
                  .FNCCOST = obj.FNCCOST
                  .TRANSCOST = obj.TRANSCOST
                  .ORDCOST = obj.ORDCOST
                  .PRDCOST = obj.PRDCOST
                  .CODE = obj.CODE
                  .AMOUNT_YTD = obj.AMOUNT_YTD
                  .TOTALCOST_YTD = obj.TOTALCOST_YTD
                  .BAL_YTD = obj.BAL_YTD
                  .AMOUNT_PERIOD = obj.AMOUNT_PERIOD
                  .TOTALCOST_PERIOD = obj.TOTALCOST_PERIOD
                  .BAL_PERIOD = obj.BAL_PERIOD
                  .DATESTR = obj.DATESTR
                  .BCEHCKSTR = obj.BCEHCKSTR
                  .BUDGETDATE = obj.BUDGETDATE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new BUDGETREP(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _BUDGETREP as BUDGETREP in value
              If _BUDGETREP.Equals(trycast(obj,BUDGETREP)) Then
                  value.remove(_BUDGETREP)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class BUDGETREP
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _AMOUNT As Decimal
        
        Private _TOTCOST As Decimal
        
        Private _BAL As Decimal
        
        Private _FNCCOST As Decimal
        
        Private _TRANSCOST As Decimal
        
        Private _ORDCOST As Decimal
        
        Private _PRDCOST As Decimal
        
        Private _CODE As String
        
        Private _AMOUNT_YTD As Decimal
        
        Private _TOTALCOST_YTD As Decimal
        
        Private _BAL_YTD As Decimal
        
        Private _AMOUNT_PERIOD As Decimal
        
        Private _TOTALCOST_PERIOD As Decimal
        
        Private _BAL_PERIOD As Decimal
        
        Private _DATESTR As String
        
        Private _BCEHCKSTR As String
        
        Private _BUDGETDATE As System.DateTimeOffset
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "BUDGETREP"
                else
                    return "BUDGETREP_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0}", _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Annual Appropriation"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Annual Budget Usage"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Annual Appropriation"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TOTCOST")>  _
        Public Property TOTCOST() As nullable(of decimal)
            Get
                return _TOTCOST
            End Get
            Set
                if not(value is nothing) then
                  _TOTCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance in Budget"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(15),  _
         tab("Annual Appropriation"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("BAL")>  _
        Public Property BAL() As nullable(of decimal)
            Get
                return _BAL
            End Get
            Set
                if not(value is nothing) then
                  _BAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Billed Transactions"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("FNCCOST")>  _
        Public Property FNCCOST() As nullable(of decimal)
            Get
                return _FNCCOST
            End Get
            Set
                if not(value is nothing) then
                  _FNCCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unbilled Transact."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("TRANSCOST")>  _
        Public Property TRANSCOST() As nullable(of decimal)
            Get
                return _TRANSCOST
            End Get
            Set
                if not(value is nothing) then
                  _TRANSCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open Orders"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ORDCOST")>  _
        Public Property ORDCOST() As nullable(of decimal)
            Get
                return _ORDCOST
            End Get
            Set
                if not(value is nothing) then
                  _ORDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Open PRs"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Annual Appropriation"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("PRDCOST")>  _
        Public Property PRDCOST() As nullable(of decimal)
            Get
                return _PRDCOST
            End Get
            Set
                if not(value is nothing) then
                  _PRDCOST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Annual Appropriation"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Appropriation-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_YTD")>  _
        Public Property AMOUNT_YTD() As nullable(of decimal)
            Get
                return _AMOUNT_YTD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_YTD")>  _
        Public Property TOTALCOST_YTD() As nullable(of decimal)
            Get
                return _TOTALCOST_YTD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance-YTD"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_YTD")>  _
        Public Property BAL_YTD() As nullable(of decimal)
            Get
                return _BAL_YTD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_YTD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approp.-Current Per."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT_PERIOD")>  _
        Public Property AMOUNT_PERIOD() As nullable(of decimal)
            Get
                return _AMOUNT_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Used-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(18),  _
         tab("Appropriation-YTD"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALCOST_PERIOD")>  _
        Public Property TOTALCOST_PERIOD() As nullable(of decimal)
            Get
                return _TOTALCOST_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _TOTALCOST_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Bal-Current Period"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Appropriation-YTD"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("BAL_PERIOD")>  _
        Public Property BAL_PERIOD() As nullable(of decimal)
            Get
                return _BAL_PERIOD
            End Get
            Set
                if not(value is nothing) then
                  _BAL_PERIOD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Period"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("DATESTR")>  _
        Public Property DATESTR() As String
            Get
                return _DATESTR
            End Get
            Set
                if not(value is nothing) then
                  _DATESTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Deviation Check"),  _
         nType("Edm.String"),  _
         tab("Appropriation-YTD"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("BCEHCKSTR")>  _
        Public Property BCEHCKSTR() As String
            Get
                return _BCEHCKSTR
            End Get
            Set
                if not(value is nothing) then
                  _BCEHCKSTR = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Usage Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Budget Usage Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("BUDGETDATE")>  _
        Public Property BUDGETDATE() As nullable (of DateTimeOffset)
            Get
                return _BUDGETDATE
            End Get
            Set
                if not(value is nothing) then
                  _BUDGETDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Budget Usage Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if not(value is nothing) then
                  _USER = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "BUDGETREP")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as BUDGETREP = JsonConvert.DeserializeObject(Of BUDGETREP)(e.StreamReader.ReadToEnd)
                With obj
                  _AMOUNT = .AMOUNT
                  _TOTCOST = .TOTCOST
                  _BAL = .BAL
                  _FNCCOST = .FNCCOST
                  _TRANSCOST = .TRANSCOST
                  _ORDCOST = .ORDCOST
                  _PRDCOST = .PRDCOST
                  _CODE = .CODE
                  _AMOUNT_YTD = .AMOUNT_YTD
                  _TOTALCOST_YTD = .TOTALCOST_YTD
                  _BAL_YTD = .BAL_YTD
                  _AMOUNT_PERIOD = .AMOUNT_PERIOD
                  _TOTALCOST_PERIOD = .TOTALCOST_PERIOD
                  _BAL_PERIOD = .BAL_PERIOD
                  _DATESTR = .DATESTR
                  _BCEHCKSTR = .BCEHCKSTR
                  _BUDGETDATE = .BUDGETDATE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_PORDERITEMSSIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSSIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSSIGN)
            _Parent = nothing
            _Name = "PORDERITEMSSIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSSIGN)
            _Parent = Parent
            _name = "PORDERITEMSSIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSSIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSSIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSSIGN As PORDERITEMSSIGN In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSSIGN)(stream.ReadToEnd).Value
              With _PORDERITEMSSIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSSIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSSIGN = JsonConvert.DeserializeObject(Of PORDERITEMSSIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSSIGN)
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .ORD = obj.ORD
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSSIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSSIGN as PORDERITEMSSIGN in value
              If _PORDERITEMSSIGN.Equals(trycast(obj,PORDERITEMSSIGN)) Then
                  value.remove(_PORDERITEMSSIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSSIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _ORD As Long
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSSIGN"
                else
                    return "PORDERITEMSSIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0},KLINE={1}", _
                  string.format("{0}",ORD), _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if not(value is nothing) then
                  _ORD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Signature"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSSIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSSIGN = JsonConvert.DeserializeObject(Of PORDERITEMSSIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _ORD = .ORD
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of PO Item Statuses")>  _
    Public Class QUERY_PORDISTATUSLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDISTATUSLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDISTATUSLOG)
            _Parent = nothing
            _Name = "PORDISTATUSLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDISTATUSLOG)
            _Parent = Parent
            _name = "PORDISTATUSLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDISTATUSLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDISTATUSLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDISTATUSLOG As PORDISTATUSLOG In JsonConvert.DeserializeObject(Of QUERY_PORDISTATUSLOG)(stream.ReadToEnd).Value
              With _PORDISTATUSLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDISTATUSLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDISTATUSLOG = JsonConvert.DeserializeObject(Of PORDISTATUSLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDISTATUSLOG)
                  .PORDISTATUSDES = obj.PORDISTATUSDES
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDISTATUSLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDISTATUSLOG as PORDISTATUSLOG in value
              If _PORDISTATUSLOG.Equals(trycast(obj,PORDISTATUSLOG)) Then
                  value.remove(_PORDISTATUSLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDISTATUSLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PORDISTATUSDES As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Private _KLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDISTATUSLOG"
                else
                    return "PORDISTATUSLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Status for Item"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PORDISTATUSDES")>  _
        Public Property PORDISTATUSDES() As String
            Get
                return _PORDISTATUSDES
            End Get
            Set
                if not(value is nothing) then
                  _PORDISTATUSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Status for Item"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Recorded by"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Status for Item"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if not(value is nothing) then
                  _KLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDISTATUSLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDISTATUSLOG = JsonConvert.DeserializeObject(Of PORDISTATUSLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _PORDISTATUSDES = .PORDISTATUSDES
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Split Among Profit/Cost Centers")>  _
    Public Class QUERY_SPLITCOSTCENTERS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SPLITCOSTCENTERS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = nothing
            _Name = "SPLITCOSTCENTERS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SPLITCOSTCENTERS)
            _Parent = Parent
            _name = "SPLITCOSTCENTERS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SPLITCOSTCENTERS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SPLITCOSTCENTERS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SPLITCOSTCENTERS As SPLITCOSTCENTERS In JsonConvert.DeserializeObject(Of QUERY_SPLITCOSTCENTERS)(stream.ReadToEnd).Value
              With _SPLITCOSTCENTERS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SPLITCOSTCENTERS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SPLITCOSTCENTERS)
                  .COSTCNAME = obj.COSTCNAME
                  .COSTCDES = obj.COSTCDES
                  .COSTCNAME2 = obj.COSTCNAME2
                  .COSTCDES2 = obj.COSTCDES2
                  .COSTCNAME3 = obj.COSTCNAME3
                  .COSTCDES3 = obj.COSTCDES3
                  .COSTCNAME4 = obj.COSTCNAME4
                  .COSTCDES4 = obj.COSTCDES4
                  .COSTCNAME5 = obj.COSTCNAME5
                  .COSTCDES5 = obj.COSTCDES5
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .AMOUNT = obj.AMOUNT
                  .KLINE2 = obj.KLINE2
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SPLITCOSTCENTERS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SPLITCOSTCENTERS as SPLITCOSTCENTERS in value
              If _SPLITCOSTCENTERS.Equals(trycast(obj,SPLITCOSTCENTERS)) Then
                  value.remove(_SPLITCOSTCENTERS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SPLITCOSTCENTERS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCOSTCNAME As Boolean = Boolean.FalseString
        
        Private _COSTCNAME As String
        
        Private _COSTCDES As String
        
        Private _IsSetCOSTCNAME2 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME2 As String
        
        Private _COSTCDES2 As String
        
        Private _IsSetCOSTCNAME3 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME3 As String
        
        Private _COSTCDES3 As String
        
        Private _IsSetCOSTCNAME4 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME4 As String
        
        Private _COSTCDES4 As String
        
        Private _IsSetCOSTCNAME5 As Boolean = Boolean.FalseString
        
        Private _COSTCNAME5 As String
        
        Private _COSTCDES5 As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetAMOUNT As Boolean = Boolean.FalseString
        
        Private _AMOUNT As Decimal
        
        Private _IsSetKLINE2 As Boolean = Boolean.FalseString
        
        Private _KLINE2 As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SPLITCOSTCENTERS"
                else
                    return "SPLITCOSTCENTERS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE2={0}", _
                  string.format("{0}",KLINE2) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(10),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Centre", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME = True
                If loading Then
                  _COSTCNAME = Value
                Else
                    if not _COSTCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES")>  _
        Public Property COSTCDES() As String
            Get
                return _COSTCDES
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 2"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(30),  _
         twodBarcode("COSTCNAME2")>  _
        Public Property COSTCNAME2() As String
            Get
                return _COSTCNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 2", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME2 = True
                If loading Then
                  _COSTCNAME2 = Value
                Else
                    if not _COSTCNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost2)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES2")>  _
        Public Property COSTCDES2() As String
            Get
                return _COSTCDES2
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 3"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(50),  _
         twodBarcode("COSTCNAME3")>  _
        Public Property COSTCNAME3() As String
            Get
                return _COSTCNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 3", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME3 = True
                If loading Then
                  _COSTCNAME3 = Value
                Else
                    if not _COSTCNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost3)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES3")>  _
        Public Property COSTCDES3() As String
            Get
                return _COSTCDES3
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES3 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 4"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(70),  _
         twodBarcode("COSTCNAME4")>  _
        Public Property COSTCNAME4() As String
            Get
                return _COSTCNAME4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 4", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME4 = True
                If loading Then
                  _COSTCNAME4 = Value
                Else
                    if not _COSTCNAME4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost4)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Centre"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES4")>  _
        Public Property COSTCDES4() As String
            Get
                return _COSTCDES4
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES4 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Center 5"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(90),  _
         twodBarcode("COSTCNAME5")>  _
        Public Property COSTCNAME5() As String
            Get
                return _COSTCNAME5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Profit/Cost Center 5", value, "^.{0,8}$") then Exit Property
                _IsSetCOSTCNAME5 = True
                If loading Then
                  _COSTCNAME5 = Value
                Else
                    if not _COSTCNAME5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COSTCNAME5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COSTCNAME5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Descrip (Prof/Cost5)"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCDES5")>  _
        Public Property COSTCDES5() As String
            Get
                return _COSTCDES5
            End Get
            Set
                if not(value is nothing) then
                  _COSTCDES5 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(110),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Weight"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Profit/Cost Center 5"),  _
         Pos(130),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Weight", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetAMOUNT = True
                If loading Then
                  _AMOUNT = Value
                Else
                    if not _AMOUNT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("AMOUNT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _AMOUNT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line 2"),  _
         nType("Edm.Int64"),  _
         tab("Profit/Cost Center 5"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE2")>  _
        Public Property KLINE2() As nullable (of int64)
            Get
                return _KLINE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line 2", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE2 = True
                If loading Then
                  _KLINE2 = Value
                Else
                    if not _KLINE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCOSTCNAME then
              if f then
                  jw.WriteRaw(", ""COSTCNAME"": ")
              else
                  jw.WriteRaw("""COSTCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME)
            end if
            if _IsSetCOSTCNAME2 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME2"": ")
              else
                  jw.WriteRaw("""COSTCNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME2)
            end if
            if _IsSetCOSTCNAME3 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME3"": ")
              else
                  jw.WriteRaw("""COSTCNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME3)
            end if
            if _IsSetCOSTCNAME4 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME4"": ")
              else
                  jw.WriteRaw("""COSTCNAME4"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME4)
            end if
            if _IsSetCOSTCNAME5 then
              if f then
                  jw.WriteRaw(", ""COSTCNAME5"": ")
              else
                  jw.WriteRaw("""COSTCNAME5"": ")
                  f = true
              end if
              jw.WriteValue(me.COSTCNAME5)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetAMOUNT then
              if f then
                  jw.WriteRaw(", ""AMOUNT"": ")
              else
                  jw.WriteRaw("""AMOUNT"": ")
                  f = true
              end if
              jw.WriteValue(me.AMOUNT)
            end if
            if _IsSetKLINE2 then
              if f then
                  jw.WriteRaw(", ""KLINE2"": ")
              else
                  jw.WriteRaw("""KLINE2"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE2)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SPLITCOSTCENTERS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCOSTCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME")
              .WriteAttributeString("value", me.COSTCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME2")
              .WriteAttributeString("value", me.COSTCNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME3")
              .WriteAttributeString("value", me.COSTCNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME4")
              .WriteAttributeString("value", me.COSTCNAME4)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetCOSTCNAME5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COSTCNAME5")
              .WriteAttributeString("value", me.COSTCNAME5)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetAMOUNT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "AMOUNT")
              .WriteAttributeString("value", me.AMOUNT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE2")
              .WriteAttributeString("value", me.KLINE2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SPLITCOSTCENTERS = JsonConvert.DeserializeObject(Of SPLITCOSTCENTERS)(e.StreamReader.ReadToEnd)
                With obj
                  _COSTCNAME = .COSTCNAME
                  _COSTCDES = .COSTCDES
                  _COSTCNAME2 = .COSTCNAME2
                  _COSTCDES2 = .COSTCDES2
                  _COSTCNAME3 = .COSTCNAME3
                  _COSTCDES3 = .COSTCDES3
                  _COSTCNAME4 = .COSTCNAME4
                  _COSTCDES4 = .COSTCDES4
                  _COSTCNAME5 = .COSTCNAME5
                  _COSTCDES5 = .COSTCDES5
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _AMOUNT = .AMOUNT
                  _KLINE2 = .KLINE2
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Purchase Order Item Changes-OLD")>  _
    Public Class QUERY_PORDI_CHANGE_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDI_CHANGE_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDI_CHANGE_LOG)
            _Parent = nothing
            _Name = "PORDI_CHANGE_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDI_CHANGE_LOG)
            _Parent = Parent
            _name = "PORDI_CHANGE_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDI_CHANGE_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDI_CHANGE_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDI_CHANGE_LOG As PORDI_CHANGE_LOG In JsonConvert.DeserializeObject(Of QUERY_PORDI_CHANGE_LOG)(stream.ReadToEnd).Value
              With _PORDI_CHANGE_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDI_CHANGE_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDI_CHANGE_LOG = JsonConvert.DeserializeObject(Of PORDI_CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDI_CHANGE_LOG)
                  .UDATE = obj.UDATE
                  .TEXT = obj.TEXT
                  .USERLOGIN = obj.USERLOGIN
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDI_CHANGE_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDI_CHANGE_LOG as PORDI_CHANGE_LOG in value
              If _PORDI_CHANGE_LOG.Equals(trycast(obj,PORDI_CHANGE_LOG)) Then
                  value.remove(_PORDI_CHANGE_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDI_CHANGE_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _TEXT As String
        
        Private _USERLOGIN As String
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDI_CHANGE_LOG"
                else
                    return "PORDI_CHANGE_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Desc. of Change"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Date"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("LOG (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDI_CHANGE_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDI_CHANGE_LOG = JsonConvert.DeserializeObject(Of PORDI_CHANGE_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _TEXT = .TEXT
                  _USERLOGIN = .USERLOGIN
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_CHANGESITEMS_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CHANGESITEMS_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CHANGESITEMS_LOG)
            _Parent = nothing
            _Name = "CHANGESITEMS_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CHANGESITEMS_LOG)
            _Parent = Parent
            _name = "CHANGESITEMS_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CHANGESITEMS_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CHANGESITEMS_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CHANGESITEMS_LOG As CHANGESITEMS_LOG In JsonConvert.DeserializeObject(Of QUERY_CHANGESITEMS_LOG)(stream.ReadToEnd).Value
              With _CHANGESITEMS_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CHANGESITEMS_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGESITEMS_LOG = JsonConvert.DeserializeObject(Of CHANGESITEMS_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CHANGESITEMS_LOG)
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CHANGESITEMS_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CHANGESITEMS_LOG as CHANGESITEMS_LOG in value
              If _CHANGESITEMS_LOG.Equals(trycast(obj,CHANGESITEMS_LOG)) Then
                  value.remove(_CHANGESITEMS_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CHANGESITEMS_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CHANGESITEMS_LOG"
                else
                    return "CHANGESITEMS_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Details"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Details"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Details"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CHANGESITEMS_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CHANGESITEMS_LOG = JsonConvert.DeserializeObject(Of CHANGESITEMS_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("List of Styles")>  _
    Public Class QUERY_MATRIXSUM
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUM)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = nothing
            _Name = "MATRIXSUM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUM)
            _Parent = Parent
            _name = "MATRIXSUM_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Assortment")
            .add(1, "Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUM)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUM)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUM As MATRIXSUM In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUM)(stream.ReadToEnd).Value
              With _MATRIXSUM
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUM)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUM)
                  .PARTNAME = obj.PARTNAME
                  .PARTDES = obj.PARTDES
                  .SQUANT = obj.SQUANT
                  .SBARCODE = obj.SBARCODE
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .DISTRTYPECODE = obj.DISTRTYPECODE
                  .DISTRTYPEDES = obj.DISTRTYPEDES
                  .XQUANT = obj.XQUANT
                  .NUMPACK = obj.NUMPACK
                  .TOTQUANT = obj.TOTQUANT
                  .DUEDATE = obj.DUEDATE
                  .ACTNAME = obj.ACTNAME
                  .ACTDES = obj.ACTDES
                  .SERIALNAME = obj.SERIALNAME
                  .CUSTNAME = obj.CUSTNAME
                  .TOCUSTNAME = obj.TOCUSTNAME
                  .PRICE = obj.PRICE
                  .CURCODE = obj.CURCODE
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .PERCENT = obj.PERCENT
                  .KLINE = obj.KLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUM(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUM as MATRIXSUM in value
              If _MATRIXSUM.Equals(trycast(obj,MATRIXSUM)) Then
                  value.remove(_MATRIXSUM)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUM
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPARTNAME As Boolean = Boolean.FalseString
        
        Private _PARTNAME As String
        
        Private _PARTDES As String
        
        Private _IsSetSQUANT As Boolean = Boolean.FalseString
        
        Private _SQUANT As Long
        
        Private _IsSetSBARCODE As Boolean = Boolean.FalseString
        
        Private _SBARCODE As String
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetDISTRTYPECODE As Boolean = Boolean.FalseString
        
        Private _DISTRTYPECODE As String
        
        Private _DISTRTYPEDES As String
        
        Private _XQUANT As Decimal
        
        Private _IsSetNUMPACK As Boolean = Boolean.FalseString
        
        Private _NUMPACK As Long
        
        Private _TOTQUANT As Decimal
        
        Private _IsSetDUEDATE As Boolean = Boolean.FalseString
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _IsSetACTNAME As Boolean = Boolean.FalseString
        
        Private _ACTNAME As String
        
        Private _ACTDES As String
        
        Private _IsSetSERIALNAME As Boolean = Boolean.FalseString
        
        Private _SERIALNAME As String
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _IsSetTOCUSTNAME As Boolean = Boolean.FalseString
        
        Private _TOCUSTNAME As String
        
        Private _IsSetPRICE As Boolean = Boolean.FalseString
        
        Private _PRICE As Decimal
        
        Private _IsSetCURCODE As Boolean = Boolean.FalseString
        
        Private _CURCODE As String
        
        Private _PRSOURCENAME As String
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _MATRIX_SUBFORM As QUERY_MATRIX
        
        Private _MATRIXSUMTEXT_SUBFORM As QUERY_MATRIXSUMTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Assortment"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            _MATRIX_SUBFORM = new QUERY_MATRIX(me)
            _MATRIXSUMTEXT_SUBFORM = new QUERY_MATRIXSUMTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_MATRIX_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_MATRIXSUMTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Assortment", _MATRIX_SUBFORM))
                   .add(1, new oNavigation("Remarks", _MATRIXSUMTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUM"
                else
                    return "MATRIXSUM_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0}", _
                  string.format("{0}",KLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Base Product No."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Product No.", value, "^.{0,15}$") then Exit Property
                _IsSetPARTNAME = True
                If loading Then
                  _PARTNAME = Value
                Else
                    if not _PARTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PARTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PARTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Product Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PARTDES")>  _
        Public Property PARTDES() As String
            Get
                return _PARTDES
            End Get
            Set
                if not(value is nothing) then
                  _PARTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manual Quantity"),  _
         nType("Edm.Int64"),  _
         tab("Base Product No."),  _
         Pos(13),  _
         twodBarcode("SQUANT")>  _
        Public Property SQUANT() As nullable (of int64)
            Get
                return _SQUANT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Manual Quantity", value, "^[0-9\-]+$") then Exit Property
                _IsSetSQUANT = True
                If loading Then
                  _SQUANT = Value
                Else
                    if not _SQUANT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SQUANT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SQUANT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Bar Code/Manual"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(14),  _
         twodBarcode("SBARCODE")>  _
        Public Property SBARCODE() As String
            Get
                return _SBARCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Bar Code/Manual", value, "^.{0,16}$") then Exit Property
                _IsSetSBARCODE = True
                If loading Then
                  _SBARCODE = Value
                Else
                    if not _SBARCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SBARCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SBARCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(15),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Distribution Type"),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(30),  _
         twodBarcode("DISTRTYPECODE")>  _
        Public Property DISTRTYPECODE() As String
            Get
                return _DISTRTYPECODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Distribution Type", value, "^.{0,3}$") then Exit Property
                _IsSetDISTRTYPECODE = True
                If loading Then
                  _DISTRTYPECODE = Value
                Else
                    if not _DISTRTYPECODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DISTRTYPECODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DISTRTYPECODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Distrib. Type Desc."),  _
         nType("Edm.String"),  _
         tab("Base Product No."),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("DISTRTYPEDES")>  _
        Public Property DISTRTYPEDES() As String
            Get
                return _DISTRTYPEDES
            End Get
            Set
                if not(value is nothing) then
                  _DISTRTYPEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty in Assortment"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("XQUANT")>  _
        Public Property XQUANT() As nullable(of decimal)
            Get
                return _XQUANT
            End Get
            Set
                if not(value is nothing) then
                  _XQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Assortments"),  _
         nType("Edm.Int64"),  _
         tab("Qty in Assortment"),  _
         Pos(42),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Assortments", value, "^[0-9\-]+$") then Exit Property
                _IsSetNUMPACK = True
                If loading Then
                  _NUMPACK = Value
                Else
                    if not _NUMPACK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NUMPACK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NUMPACK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Qty in Assortment"),  _
         Pos(44),  _
         [ReadOnly](true),  _
         twodBarcode("TOTQUANT")>  _
        Public Property TOTQUANT() As nullable(of decimal)
            Get
                return _TOTQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TOTQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Qty in Assortment"),  _
         Pos(46),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Due Date", value, "^.*$") then Exit Property
                _IsSetDUEDATE = True
                If loading Then
                  _DUEDATE = Value
                Else
                    if not _DUEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DUEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DUEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(50),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Operation", value, "^.{0,16}$") then Exit Property
                _IsSetACTNAME = True
                If loading Then
                  _ACTNAME = Value
                Else
                    if not _ACTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Operation Descrip."),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(52),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(60),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Work Order", value, "^.{0,22}$") then Exit Property
                _IsSetSERIALNAME = True
                If loading Then
                  _SERIALNAME = Value
                Else
                    if not _SERIALNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SERIALNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SERIALNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Qty in Assortment"),  _
         Pos(65),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(70),  _
         twodBarcode("TOCUSTNAME")>  _
        Public Property TOCUSTNAME() As String
            Get
                return _TOCUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,16}$") then Exit Property
                _IsSetTOCUSTNAME = True
                If loading Then
                  _TOCUSTNAME = Value
                Else
                    if not _TOCUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOCUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOCUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(80),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Unit Price", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPRICE = True
                If loading Then
                  _PRICE = Value
                Else
                    if not _PRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(85),  _
         twodBarcode("CURCODE")>  _
        Public Property CURCODE() As String
            Get
                return _CURCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCURCODE = True
                If loading Then
                  _CURCODE = Value
                Else
                    if not _CURCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount(%)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Status"),  _
         Pos(100),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Discount(%)", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIX_SUBFORM() As QUERY_MATRIX
            Get
                return _MATRIX_SUBFORM
            End Get
            Set
                _MATRIX_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property MATRIXSUMTEXT_SUBFORM() As QUERY_MATRIXSUMTEXT
            Get
                return _MATRIXSUMTEXT_SUBFORM
            End Get
            Set
                _MATRIXSUMTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPARTNAME then
              if f then
                  jw.WriteRaw(", ""PARTNAME"": ")
              else
                  jw.WriteRaw("""PARTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PARTNAME)
            end if
            if _IsSetSQUANT then
              if f then
                  jw.WriteRaw(", ""SQUANT"": ")
              else
                  jw.WriteRaw("""SQUANT"": ")
                  f = true
              end if
              jw.WriteValue(me.SQUANT)
            end if
            if _IsSetSBARCODE then
              if f then
                  jw.WriteRaw(", ""SBARCODE"": ")
              else
                  jw.WriteRaw("""SBARCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.SBARCODE)
            end if
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetDISTRTYPECODE then
              if f then
                  jw.WriteRaw(", ""DISTRTYPECODE"": ")
              else
                  jw.WriteRaw("""DISTRTYPECODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DISTRTYPECODE)
            end if
            if _IsSetNUMPACK then
              if f then
                  jw.WriteRaw(", ""NUMPACK"": ")
              else
                  jw.WriteRaw("""NUMPACK"": ")
                  f = true
              end if
              jw.WriteValue(me.NUMPACK)
            end if
            if _IsSetDUEDATE then
              if f then
                  jw.WriteRaw(", ""DUEDATE"": ")
              else
                  jw.WriteRaw("""DUEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.DUEDATE)
            end if
            if _IsSetACTNAME then
              if f then
                  jw.WriteRaw(", ""ACTNAME"": ")
              else
                  jw.WriteRaw("""ACTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACTNAME)
            end if
            if _IsSetSERIALNAME then
              if f then
                  jw.WriteRaw(", ""SERIALNAME"": ")
              else
                  jw.WriteRaw("""SERIALNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SERIALNAME)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetTOCUSTNAME then
              if f then
                  jw.WriteRaw(", ""TOCUSTNAME"": ")
              else
                  jw.WriteRaw("""TOCUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOCUSTNAME)
            end if
            if _IsSetPRICE then
              if f then
                  jw.WriteRaw(", ""PRICE"": ")
              else
                  jw.WriteRaw("""PRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.PRICE)
            end if
            if _IsSetCURCODE then
              if f then
                  jw.WriteRaw(", ""CURCODE"": ")
              else
                  jw.WriteRaw("""CURCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURCODE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIX_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIX in _MATRIX_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIX_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", MATRIXSUMTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _MATRIXSUMTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUM")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetPARTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PARTNAME")
              .WriteAttributeString("value", me.PARTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetSQUANT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SQUANT")
              .WriteAttributeString("value", me.SQUANT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSBARCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SBARCODE")
              .WriteAttributeString("value", me.SBARCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetDISTRTYPECODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DISTRTYPECODE")
              .WriteAttributeString("value", me.DISTRTYPECODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetNUMPACK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NUMPACK")
              .WriteAttributeString("value", me.NUMPACK)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDUEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DUEDATE")
              .WriteAttributeString("value", me.DUEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetACTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACTNAME")
              .WriteAttributeString("value", me.ACTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSERIALNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SERIALNAME")
              .WriteAttributeString("value", me.SERIALNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "22")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetTOCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOCUSTNAME")
              .WriteAttributeString("value", me.TOCUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRICE")
              .WriteAttributeString("value", me.PRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetCURCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURCODE")
              .WriteAttributeString("value", me.CURCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _MATRIX_SUBFORM.value.count > 0 then
              for each itm as MATRIX in _MATRIX_SUBFORM.Value
                itm.toXML(xw,"MATRIX_SUBFORM")
              next
            end if
            if _MATRIXSUMTEXT_SUBFORM.value.count > 0 then
              for each itm as MATRIXSUMTEXT in _MATRIXSUMTEXT_SUBFORM.Value
                itm.toXML(xw,"MATRIXSUMTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUM = JsonConvert.DeserializeObject(Of MATRIXSUM)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PARTDES = .PARTDES
                  _SQUANT = .SQUANT
                  _SBARCODE = .SBARCODE
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _DISTRTYPECODE = .DISTRTYPECODE
                  _DISTRTYPEDES = .DISTRTYPEDES
                  _XQUANT = .XQUANT
                  _NUMPACK = .NUMPACK
                  _TOTQUANT = .TOTQUANT
                  _DUEDATE = .DUEDATE
                  _ACTNAME = .ACTNAME
                  _ACTDES = .ACTDES
                  _SERIALNAME = .SERIALNAME
                  _CUSTNAME = .CUSTNAME
                  _TOCUSTNAME = .TOCUSTNAME
                  _PRICE = .PRICE
                  _CURCODE = .CURCODE
                  _PRSOURCENAME = .PRSOURCENAME
                  _PERCENT = .PERCENT
                  _KLINE = .KLINE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_MATRIXSUM
        
        MATRIX = 0
        
        MATRIXSUMTEXT = 1
    End Enum
    
    <QueryTitle("Assortment")>  _
    Public Class QUERY_MATRIX
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIX)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = nothing
            _Name = "MATRIX"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIX)
            _Parent = Parent
            _name = "MATRIX_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIX)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIX)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIX As MATRIX In JsonConvert.DeserializeObject(Of QUERY_MATRIX)(stream.ReadToEnd).Value
              With _MATRIX
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIX)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIX)
                  .XCOLORCODE = obj.XCOLORCODE
                  .XCOLORNAME = obj.XCOLORNAME
                  .MULT = obj.MULT
                  .TOTALSUM = obj.TOTALSUM
                  .SIZE1 = obj.SIZE1
                  .SIZE2 = obj.SIZE2
                  .SIZE3 = obj.SIZE3
                  .SIZE4 = obj.SIZE4
                  .SIZE5 = obj.SIZE5
                  .SIZE6 = obj.SIZE6
                  .SIZE7 = obj.SIZE7
                  .SIZE8 = obj.SIZE8
                  .SIZE9 = obj.SIZE9
                  .SIZE10 = obj.SIZE10
                  .SIZE11 = obj.SIZE11
                  .SIZE12 = obj.SIZE12
                  .SIZE13 = obj.SIZE13
                  .SIZE14 = obj.SIZE14
                  .SIZE15 = obj.SIZE15
                  .SIZE16 = obj.SIZE16
                  .SIZE17 = obj.SIZE17
                  .SIZE18 = obj.SIZE18
                  .SIZE19 = obj.SIZE19
                  .SIZE20 = obj.SIZE20
                  .SIZE21 = obj.SIZE21
                  .SIZE22 = obj.SIZE22
                  .SIZE23 = obj.SIZE23
                  .SIZE24 = obj.SIZE24
                  .SIZE25 = obj.SIZE25
                  .SIZE26 = obj.SIZE26
                  .SIZE27 = obj.SIZE27
                  .SIZE28 = obj.SIZE28
                  .SIZE29 = obj.SIZE29
                  .SIZE30 = obj.SIZE30
                  .SIZE31 = obj.SIZE31
                  .SIZE32 = obj.SIZE32
                  .SIZE33 = obj.SIZE33
                  .SIZE34 = obj.SIZE34
                  .SIZE35 = obj.SIZE35
                  .SIZE36 = obj.SIZE36
                  .SIZE37 = obj.SIZE37
                  .SIZE38 = obj.SIZE38
                  .SIZE39 = obj.SIZE39
                  .SIZE40 = obj.SIZE40
                  .XCOLOR = obj.XCOLOR
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIX(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIX as MATRIX in value
              If _MATRIX.Equals(trycast(obj,MATRIX)) Then
                  value.remove(_MATRIX)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIX
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetXCOLORCODE As Boolean = Boolean.FalseString
        
        Private _XCOLORCODE As String
        
        Private _XCOLORNAME As String
        
        Private _IsSetMULT As Boolean = Boolean.FalseString
        
        Private _MULT As Long
        
        Private _TOTALSUM As Decimal
        
        Private _IsSetSIZE1 As Boolean = Boolean.FalseString
        
        Private _SIZE1 As Decimal
        
        Private _IsSetSIZE2 As Boolean = Boolean.FalseString
        
        Private _SIZE2 As Decimal
        
        Private _IsSetSIZE3 As Boolean = Boolean.FalseString
        
        Private _SIZE3 As Decimal
        
        Private _IsSetSIZE4 As Boolean = Boolean.FalseString
        
        Private _SIZE4 As Decimal
        
        Private _IsSetSIZE5 As Boolean = Boolean.FalseString
        
        Private _SIZE5 As Decimal
        
        Private _IsSetSIZE6 As Boolean = Boolean.FalseString
        
        Private _SIZE6 As Decimal
        
        Private _IsSetSIZE7 As Boolean = Boolean.FalseString
        
        Private _SIZE7 As Decimal
        
        Private _IsSetSIZE8 As Boolean = Boolean.FalseString
        
        Private _SIZE8 As Decimal
        
        Private _IsSetSIZE9 As Boolean = Boolean.FalseString
        
        Private _SIZE9 As Decimal
        
        Private _IsSetSIZE10 As Boolean = Boolean.FalseString
        
        Private _SIZE10 As Decimal
        
        Private _IsSetSIZE11 As Boolean = Boolean.FalseString
        
        Private _SIZE11 As Decimal
        
        Private _IsSetSIZE12 As Boolean = Boolean.FalseString
        
        Private _SIZE12 As Decimal
        
        Private _IsSetSIZE13 As Boolean = Boolean.FalseString
        
        Private _SIZE13 As Decimal
        
        Private _IsSetSIZE14 As Boolean = Boolean.FalseString
        
        Private _SIZE14 As Decimal
        
        Private _IsSetSIZE15 As Boolean = Boolean.FalseString
        
        Private _SIZE15 As Decimal
        
        Private _IsSetSIZE16 As Boolean = Boolean.FalseString
        
        Private _SIZE16 As Decimal
        
        Private _IsSetSIZE17 As Boolean = Boolean.FalseString
        
        Private _SIZE17 As Decimal
        
        Private _IsSetSIZE18 As Boolean = Boolean.FalseString
        
        Private _SIZE18 As Decimal
        
        Private _IsSetSIZE19 As Boolean = Boolean.FalseString
        
        Private _SIZE19 As Decimal
        
        Private _IsSetSIZE20 As Boolean = Boolean.FalseString
        
        Private _SIZE20 As Decimal
        
        Private _IsSetSIZE21 As Boolean = Boolean.FalseString
        
        Private _SIZE21 As Decimal
        
        Private _IsSetSIZE22 As Boolean = Boolean.FalseString
        
        Private _SIZE22 As Decimal
        
        Private _IsSetSIZE23 As Boolean = Boolean.FalseString
        
        Private _SIZE23 As Decimal
        
        Private _IsSetSIZE24 As Boolean = Boolean.FalseString
        
        Private _SIZE24 As Decimal
        
        Private _IsSetSIZE25 As Boolean = Boolean.FalseString
        
        Private _SIZE25 As Decimal
        
        Private _IsSetSIZE26 As Boolean = Boolean.FalseString
        
        Private _SIZE26 As Decimal
        
        Private _IsSetSIZE27 As Boolean = Boolean.FalseString
        
        Private _SIZE27 As Decimal
        
        Private _IsSetSIZE28 As Boolean = Boolean.FalseString
        
        Private _SIZE28 As Decimal
        
        Private _IsSetSIZE29 As Boolean = Boolean.FalseString
        
        Private _SIZE29 As Decimal
        
        Private _IsSetSIZE30 As Boolean = Boolean.FalseString
        
        Private _SIZE30 As Decimal
        
        Private _IsSetSIZE31 As Boolean = Boolean.FalseString
        
        Private _SIZE31 As Decimal
        
        Private _IsSetSIZE32 As Boolean = Boolean.FalseString
        
        Private _SIZE32 As Decimal
        
        Private _IsSetSIZE33 As Boolean = Boolean.FalseString
        
        Private _SIZE33 As Decimal
        
        Private _IsSetSIZE34 As Boolean = Boolean.FalseString
        
        Private _SIZE34 As Decimal
        
        Private _IsSetSIZE35 As Boolean = Boolean.FalseString
        
        Private _SIZE35 As Decimal
        
        Private _IsSetSIZE36 As Boolean = Boolean.FalseString
        
        Private _SIZE36 As Decimal
        
        Private _IsSetSIZE37 As Boolean = Boolean.FalseString
        
        Private _SIZE37 As Decimal
        
        Private _IsSetSIZE38 As Boolean = Boolean.FalseString
        
        Private _SIZE38 As Decimal
        
        Private _IsSetSIZE39 As Boolean = Boolean.FalseString
        
        Private _SIZE39 As Decimal
        
        Private _IsSetSIZE40 As Boolean = Boolean.FalseString
        
        Private _SIZE40 As Decimal
        
        Private _IsSetXCOLOR As Boolean = Boolean.FalseString
        
        Private _XCOLOR As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIX"
                else
                    return "MATRIX_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "XCOLOR={0}", _
                  string.format("{0}",XCOLOR) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Color Code"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(10),  _
         twodBarcode("XCOLORCODE")>  _
        Public Property XCOLORCODE() As String
            Get
                return _XCOLORCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color Code", value, "^.{0,2}$") then Exit Property
                _IsSetXCOLORCODE = True
                If loading Then
                  _XCOLORCODE = Value
                Else
                    if not _XCOLORCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLORCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLORCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color Name"),  _
         nType("Edm.String"),  _
         tab("Color Code"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("XCOLORNAME")>  _
        Public Property XCOLORNAME() As String
            Get
                return _XCOLORNAME
            End Get
            Set
                if not(value is nothing) then
                  _XCOLORNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Number of Sets"),  _
         nType("Edm.Int64"),  _
         tab("Color Code"),  _
         Pos(20),  _
         twodBarcode("MULT")>  _
        Public Property MULT() As nullable (of int64)
            Get
                return _MULT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Number of Sets", value, "^[0-9\-]+$") then Exit Property
                _IsSetMULT = True
                If loading Then
                  _MULT = Value
                Else
                    if not _MULT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("MULT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _MULT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Total Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("Color Code"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("TOTALSUM")>  _
        Public Property TOTALSUM() As nullable(of decimal)
            Get
                return _TOTALSUM
            End Get
            Set
                if not(value is nothing) then
                  _TOTALSUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("1"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(60),  _
         twodBarcode("SIZE1")>  _
        Public Property SIZE1() As nullable(of decimal)
            Get
                return _SIZE1
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("1", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE1 = True
                If loading Then
                  _SIZE1 = Value
                Else
                    if not _SIZE1 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE1", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE1 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("2"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(70),  _
         twodBarcode("SIZE2")>  _
        Public Property SIZE2() As nullable(of decimal)
            Get
                return _SIZE2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("2", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE2 = True
                If loading Then
                  _SIZE2 = Value
                Else
                    if not _SIZE2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("3"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(80),  _
         twodBarcode("SIZE3")>  _
        Public Property SIZE3() As nullable(of decimal)
            Get
                return _SIZE3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("3", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE3 = True
                If loading Then
                  _SIZE3 = Value
                Else
                    if not _SIZE3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("4"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Color Code"),  _
         Pos(90),  _
         twodBarcode("SIZE4")>  _
        Public Property SIZE4() As nullable(of decimal)
            Get
                return _SIZE4
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("4", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE4 = True
                If loading Then
                  _SIZE4 = Value
                Else
                    if not _SIZE4 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE4", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE4 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("5"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(100),  _
         twodBarcode("SIZE5")>  _
        Public Property SIZE5() As nullable(of decimal)
            Get
                return _SIZE5
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("5", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE5 = True
                If loading Then
                  _SIZE5 = Value
                Else
                    if not _SIZE5 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE5", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE5 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("6"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(110),  _
         twodBarcode("SIZE6")>  _
        Public Property SIZE6() As nullable(of decimal)
            Get
                return _SIZE6
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("6", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE6 = True
                If loading Then
                  _SIZE6 = Value
                Else
                    if not _SIZE6 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE6", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE6 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("7"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(120),  _
         twodBarcode("SIZE7")>  _
        Public Property SIZE7() As nullable(of decimal)
            Get
                return _SIZE7
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("7", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE7 = True
                If loading Then
                  _SIZE7 = Value
                Else
                    if not _SIZE7 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE7", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE7 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("8"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(130),  _
         twodBarcode("SIZE8")>  _
        Public Property SIZE8() As nullable(of decimal)
            Get
                return _SIZE8
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("8", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE8 = True
                If loading Then
                  _SIZE8 = Value
                Else
                    if not _SIZE8 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE8", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE8 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("9"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(140),  _
         twodBarcode("SIZE9")>  _
        Public Property SIZE9() As nullable(of decimal)
            Get
                return _SIZE9
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("9", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE9 = True
                If loading Then
                  _SIZE9 = Value
                Else
                    if not _SIZE9 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE9", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE9 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("10"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(150),  _
         twodBarcode("SIZE10")>  _
        Public Property SIZE10() As nullable(of decimal)
            Get
                return _SIZE10
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("10", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE10 = True
                If loading Then
                  _SIZE10 = Value
                Else
                    if not _SIZE10 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE10", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE10 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("11"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(160),  _
         twodBarcode("SIZE11")>  _
        Public Property SIZE11() As nullable(of decimal)
            Get
                return _SIZE11
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("11", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE11 = True
                If loading Then
                  _SIZE11 = Value
                Else
                    if not _SIZE11 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE11", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE11 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("12"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("5"),  _
         Pos(170),  _
         twodBarcode("SIZE12")>  _
        Public Property SIZE12() As nullable(of decimal)
            Get
                return _SIZE12
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("12", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE12 = True
                If loading Then
                  _SIZE12 = Value
                Else
                    if not _SIZE12 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE12", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE12 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("13"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(180),  _
         twodBarcode("SIZE13")>  _
        Public Property SIZE13() As nullable(of decimal)
            Get
                return _SIZE13
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("13", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE13 = True
                If loading Then
                  _SIZE13 = Value
                Else
                    if not _SIZE13 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE13", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE13 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("14"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(190),  _
         twodBarcode("SIZE14")>  _
        Public Property SIZE14() As nullable(of decimal)
            Get
                return _SIZE14
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("14", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE14 = True
                If loading Then
                  _SIZE14 = Value
                Else
                    if not _SIZE14 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE14", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE14 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("15"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(200),  _
         twodBarcode("SIZE15")>  _
        Public Property SIZE15() As nullable(of decimal)
            Get
                return _SIZE15
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("15", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE15 = True
                If loading Then
                  _SIZE15 = Value
                Else
                    if not _SIZE15 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE15", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE15 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("16"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(210),  _
         twodBarcode("SIZE16")>  _
        Public Property SIZE16() As nullable(of decimal)
            Get
                return _SIZE16
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("16", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE16 = True
                If loading Then
                  _SIZE16 = Value
                Else
                    if not _SIZE16 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE16", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE16 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("17"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(220),  _
         twodBarcode("SIZE17")>  _
        Public Property SIZE17() As nullable(of decimal)
            Get
                return _SIZE17
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("17", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE17 = True
                If loading Then
                  _SIZE17 = Value
                Else
                    if not _SIZE17 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE17", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE17 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("18"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(230),  _
         twodBarcode("SIZE18")>  _
        Public Property SIZE18() As nullable(of decimal)
            Get
                return _SIZE18
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("18", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE18 = True
                If loading Then
                  _SIZE18 = Value
                Else
                    if not _SIZE18 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE18", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE18 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("19"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(240),  _
         twodBarcode("SIZE19")>  _
        Public Property SIZE19() As nullable(of decimal)
            Get
                return _SIZE19
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("19", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE19 = True
                If loading Then
                  _SIZE19 = Value
                Else
                    if not _SIZE19 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE19", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE19 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("20"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("13"),  _
         Pos(250),  _
         twodBarcode("SIZE20")>  _
        Public Property SIZE20() As nullable(of decimal)
            Get
                return _SIZE20
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("20", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE20 = True
                If loading Then
                  _SIZE20 = Value
                Else
                    if not _SIZE20 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE20", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE20 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("21"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(260),  _
         twodBarcode("SIZE21")>  _
        Public Property SIZE21() As nullable(of decimal)
            Get
                return _SIZE21
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("21", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE21 = True
                If loading Then
                  _SIZE21 = Value
                Else
                    if not _SIZE21 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE21", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE21 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("22"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(270),  _
         twodBarcode("SIZE22")>  _
        Public Property SIZE22() As nullable(of decimal)
            Get
                return _SIZE22
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("22", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE22 = True
                If loading Then
                  _SIZE22 = Value
                Else
                    if not _SIZE22 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE22", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE22 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("23"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(280),  _
         twodBarcode("SIZE23")>  _
        Public Property SIZE23() As nullable(of decimal)
            Get
                return _SIZE23
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("23", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE23 = True
                If loading Then
                  _SIZE23 = Value
                Else
                    if not _SIZE23 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE23", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE23 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("24"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(290),  _
         twodBarcode("SIZE24")>  _
        Public Property SIZE24() As nullable(of decimal)
            Get
                return _SIZE24
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("24", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE24 = True
                If loading Then
                  _SIZE24 = Value
                Else
                    if not _SIZE24 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE24", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE24 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("25"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(300),  _
         twodBarcode("SIZE25")>  _
        Public Property SIZE25() As nullable(of decimal)
            Get
                return _SIZE25
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("25", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE25 = True
                If loading Then
                  _SIZE25 = Value
                Else
                    if not _SIZE25 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE25", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE25 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("26"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(310),  _
         twodBarcode("SIZE26")>  _
        Public Property SIZE26() As nullable(of decimal)
            Get
                return _SIZE26
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("26", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE26 = True
                If loading Then
                  _SIZE26 = Value
                Else
                    if not _SIZE26 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE26", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE26 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("27"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(320),  _
         twodBarcode("SIZE27")>  _
        Public Property SIZE27() As nullable(of decimal)
            Get
                return _SIZE27
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("27", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE27 = True
                If loading Then
                  _SIZE27 = Value
                Else
                    if not _SIZE27 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE27", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE27 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("28"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("21"),  _
         Pos(330),  _
         twodBarcode("SIZE28")>  _
        Public Property SIZE28() As nullable(of decimal)
            Get
                return _SIZE28
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("28", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE28 = True
                If loading Then
                  _SIZE28 = Value
                Else
                    if not _SIZE28 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE28", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE28 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("29"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(340),  _
         twodBarcode("SIZE29")>  _
        Public Property SIZE29() As nullable(of decimal)
            Get
                return _SIZE29
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("29", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE29 = True
                If loading Then
                  _SIZE29 = Value
                Else
                    if not _SIZE29 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE29", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE29 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("30"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("29"),  _
         Pos(350),  _
         twodBarcode("SIZE30")>  _
        Public Property SIZE30() As nullable(of decimal)
            Get
                return _SIZE30
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("30", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE30 = True
                If loading Then
                  _SIZE30 = Value
                Else
                    if not _SIZE30 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE30", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE30 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S31"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(355),  _
         twodBarcode("SIZE31")>  _
        Public Property SIZE31() As nullable(of decimal)
            Get
                return _SIZE31
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S31", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE31 = True
                If loading Then
                  _SIZE31 = Value
                Else
                    if not _SIZE31 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE31", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE31 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S32"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(360),  _
         twodBarcode("SIZE32")>  _
        Public Property SIZE32() As nullable(of decimal)
            Get
                return _SIZE32
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S32", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE32 = True
                If loading Then
                  _SIZE32 = Value
                Else
                    if not _SIZE32 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE32", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE32 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S33"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(365),  _
         twodBarcode("SIZE33")>  _
        Public Property SIZE33() As nullable(of decimal)
            Get
                return _SIZE33
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S33", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE33 = True
                If loading Then
                  _SIZE33 = Value
                Else
                    if not _SIZE33 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE33", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE33 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S34"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(370),  _
         twodBarcode("SIZE34")>  _
        Public Property SIZE34() As nullable(of decimal)
            Get
                return _SIZE34
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S34", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE34 = True
                If loading Then
                  _SIZE34 = Value
                Else
                    if not _SIZE34 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE34", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE34 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S35"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(375),  _
         twodBarcode("SIZE35")>  _
        Public Property SIZE35() As nullable(of decimal)
            Get
                return _SIZE35
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S35", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE35 = True
                If loading Then
                  _SIZE35 = Value
                Else
                    if not _SIZE35 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE35", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE35 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S36"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("29"),  _
         Pos(380),  _
         twodBarcode("SIZE36")>  _
        Public Property SIZE36() As nullable(of decimal)
            Get
                return _SIZE36
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S36", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE36 = True
                If loading Then
                  _SIZE36 = Value
                Else
                    if not _SIZE36 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE36", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE36 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S37"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(385),  _
         twodBarcode("SIZE37")>  _
        Public Property SIZE37() As nullable(of decimal)
            Get
                return _SIZE37
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S37", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE37 = True
                If loading Then
                  _SIZE37 = Value
                Else
                    if not _SIZE37 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE37", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE37 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S38"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(390),  _
         twodBarcode("SIZE38")>  _
        Public Property SIZE38() As nullable(of decimal)
            Get
                return _SIZE38
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S38", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE38 = True
                If loading Then
                  _SIZE38 = Value
                Else
                    if not _SIZE38 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE38", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE38 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S39"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(395),  _
         twodBarcode("SIZE39")>  _
        Public Property SIZE39() As nullable(of decimal)
            Get
                return _SIZE39
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S39", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE39 = True
                If loading Then
                  _SIZE39 = Value
                Else
                    if not _SIZE39 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE39", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE39 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("S40"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(13),  _
         tab("S37"),  _
         Pos(400),  _
         twodBarcode("SIZE40")>  _
        Public Property SIZE40() As nullable(of decimal)
            Get
                return _SIZE40
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("S40", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSIZE40 = True
                If loading Then
                  _SIZE40 = Value
                Else
                    if not _SIZE40 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SIZE40", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SIZE40 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Color (ID)"),  _
         nType("Edm.Int64"),  _
         tab("S37"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("XCOLOR")>  _
        Public Property XCOLOR() As nullable (of int64)
            Get
                return _XCOLOR
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Color (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetXCOLOR = True
                If loading Then
                  _XCOLOR = Value
                Else
                    if not _XCOLOR = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("XCOLOR", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _XCOLOR = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetXCOLORCODE then
              if f then
                  jw.WriteRaw(", ""XCOLORCODE"": ")
              else
                  jw.WriteRaw("""XCOLORCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLORCODE)
            end if
            if _IsSetMULT then
              if f then
                  jw.WriteRaw(", ""MULT"": ")
              else
                  jw.WriteRaw("""MULT"": ")
                  f = true
              end if
              jw.WriteValue(me.MULT)
            end if
            if _IsSetSIZE1 then
              if f then
                  jw.WriteRaw(", ""SIZE1"": ")
              else
                  jw.WriteRaw("""SIZE1"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE1)
            end if
            if _IsSetSIZE2 then
              if f then
                  jw.WriteRaw(", ""SIZE2"": ")
              else
                  jw.WriteRaw("""SIZE2"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE2)
            end if
            if _IsSetSIZE3 then
              if f then
                  jw.WriteRaw(", ""SIZE3"": ")
              else
                  jw.WriteRaw("""SIZE3"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE3)
            end if
            if _IsSetSIZE4 then
              if f then
                  jw.WriteRaw(", ""SIZE4"": ")
              else
                  jw.WriteRaw("""SIZE4"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE4)
            end if
            if _IsSetSIZE5 then
              if f then
                  jw.WriteRaw(", ""SIZE5"": ")
              else
                  jw.WriteRaw("""SIZE5"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE5)
            end if
            if _IsSetSIZE6 then
              if f then
                  jw.WriteRaw(", ""SIZE6"": ")
              else
                  jw.WriteRaw("""SIZE6"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE6)
            end if
            if _IsSetSIZE7 then
              if f then
                  jw.WriteRaw(", ""SIZE7"": ")
              else
                  jw.WriteRaw("""SIZE7"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE7)
            end if
            if _IsSetSIZE8 then
              if f then
                  jw.WriteRaw(", ""SIZE8"": ")
              else
                  jw.WriteRaw("""SIZE8"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE8)
            end if
            if _IsSetSIZE9 then
              if f then
                  jw.WriteRaw(", ""SIZE9"": ")
              else
                  jw.WriteRaw("""SIZE9"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE9)
            end if
            if _IsSetSIZE10 then
              if f then
                  jw.WriteRaw(", ""SIZE10"": ")
              else
                  jw.WriteRaw("""SIZE10"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE10)
            end if
            if _IsSetSIZE11 then
              if f then
                  jw.WriteRaw(", ""SIZE11"": ")
              else
                  jw.WriteRaw("""SIZE11"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE11)
            end if
            if _IsSetSIZE12 then
              if f then
                  jw.WriteRaw(", ""SIZE12"": ")
              else
                  jw.WriteRaw("""SIZE12"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE12)
            end if
            if _IsSetSIZE13 then
              if f then
                  jw.WriteRaw(", ""SIZE13"": ")
              else
                  jw.WriteRaw("""SIZE13"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE13)
            end if
            if _IsSetSIZE14 then
              if f then
                  jw.WriteRaw(", ""SIZE14"": ")
              else
                  jw.WriteRaw("""SIZE14"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE14)
            end if
            if _IsSetSIZE15 then
              if f then
                  jw.WriteRaw(", ""SIZE15"": ")
              else
                  jw.WriteRaw("""SIZE15"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE15)
            end if
            if _IsSetSIZE16 then
              if f then
                  jw.WriteRaw(", ""SIZE16"": ")
              else
                  jw.WriteRaw("""SIZE16"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE16)
            end if
            if _IsSetSIZE17 then
              if f then
                  jw.WriteRaw(", ""SIZE17"": ")
              else
                  jw.WriteRaw("""SIZE17"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE17)
            end if
            if _IsSetSIZE18 then
              if f then
                  jw.WriteRaw(", ""SIZE18"": ")
              else
                  jw.WriteRaw("""SIZE18"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE18)
            end if
            if _IsSetSIZE19 then
              if f then
                  jw.WriteRaw(", ""SIZE19"": ")
              else
                  jw.WriteRaw("""SIZE19"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE19)
            end if
            if _IsSetSIZE20 then
              if f then
                  jw.WriteRaw(", ""SIZE20"": ")
              else
                  jw.WriteRaw("""SIZE20"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE20)
            end if
            if _IsSetSIZE21 then
              if f then
                  jw.WriteRaw(", ""SIZE21"": ")
              else
                  jw.WriteRaw("""SIZE21"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE21)
            end if
            if _IsSetSIZE22 then
              if f then
                  jw.WriteRaw(", ""SIZE22"": ")
              else
                  jw.WriteRaw("""SIZE22"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE22)
            end if
            if _IsSetSIZE23 then
              if f then
                  jw.WriteRaw(", ""SIZE23"": ")
              else
                  jw.WriteRaw("""SIZE23"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE23)
            end if
            if _IsSetSIZE24 then
              if f then
                  jw.WriteRaw(", ""SIZE24"": ")
              else
                  jw.WriteRaw("""SIZE24"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE24)
            end if
            if _IsSetSIZE25 then
              if f then
                  jw.WriteRaw(", ""SIZE25"": ")
              else
                  jw.WriteRaw("""SIZE25"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE25)
            end if
            if _IsSetSIZE26 then
              if f then
                  jw.WriteRaw(", ""SIZE26"": ")
              else
                  jw.WriteRaw("""SIZE26"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE26)
            end if
            if _IsSetSIZE27 then
              if f then
                  jw.WriteRaw(", ""SIZE27"": ")
              else
                  jw.WriteRaw("""SIZE27"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE27)
            end if
            if _IsSetSIZE28 then
              if f then
                  jw.WriteRaw(", ""SIZE28"": ")
              else
                  jw.WriteRaw("""SIZE28"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE28)
            end if
            if _IsSetSIZE29 then
              if f then
                  jw.WriteRaw(", ""SIZE29"": ")
              else
                  jw.WriteRaw("""SIZE29"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE29)
            end if
            if _IsSetSIZE30 then
              if f then
                  jw.WriteRaw(", ""SIZE30"": ")
              else
                  jw.WriteRaw("""SIZE30"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE30)
            end if
            if _IsSetSIZE31 then
              if f then
                  jw.WriteRaw(", ""SIZE31"": ")
              else
                  jw.WriteRaw("""SIZE31"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE31)
            end if
            if _IsSetSIZE32 then
              if f then
                  jw.WriteRaw(", ""SIZE32"": ")
              else
                  jw.WriteRaw("""SIZE32"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE32)
            end if
            if _IsSetSIZE33 then
              if f then
                  jw.WriteRaw(", ""SIZE33"": ")
              else
                  jw.WriteRaw("""SIZE33"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE33)
            end if
            if _IsSetSIZE34 then
              if f then
                  jw.WriteRaw(", ""SIZE34"": ")
              else
                  jw.WriteRaw("""SIZE34"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE34)
            end if
            if _IsSetSIZE35 then
              if f then
                  jw.WriteRaw(", ""SIZE35"": ")
              else
                  jw.WriteRaw("""SIZE35"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE35)
            end if
            if _IsSetSIZE36 then
              if f then
                  jw.WriteRaw(", ""SIZE36"": ")
              else
                  jw.WriteRaw("""SIZE36"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE36)
            end if
            if _IsSetSIZE37 then
              if f then
                  jw.WriteRaw(", ""SIZE37"": ")
              else
                  jw.WriteRaw("""SIZE37"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE37)
            end if
            if _IsSetSIZE38 then
              if f then
                  jw.WriteRaw(", ""SIZE38"": ")
              else
                  jw.WriteRaw("""SIZE38"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE38)
            end if
            if _IsSetSIZE39 then
              if f then
                  jw.WriteRaw(", ""SIZE39"": ")
              else
                  jw.WriteRaw("""SIZE39"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE39)
            end if
            if _IsSetSIZE40 then
              if f then
                  jw.WriteRaw(", ""SIZE40"": ")
              else
                  jw.WriteRaw("""SIZE40"": ")
                  f = true
              end if
              jw.WriteValue(me.SIZE40)
            end if
            if _IsSetXCOLOR then
              if f then
                  jw.WriteRaw(", ""XCOLOR"": ")
              else
                  jw.WriteRaw("""XCOLOR"": ")
                  f = true
              end if
              jw.WriteValue(me.XCOLOR)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIX")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetXCOLORCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLORCODE")
              .WriteAttributeString("value", me.XCOLORCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "2")
              .WriteEndElement
            end if
            if _IsSetMULT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "MULT")
              .WriteAttributeString("value", me.MULT)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetSIZE1 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE1")
              .WriteAttributeString("value", me.SIZE1)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE2")
              .WriteAttributeString("value", me.SIZE2)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE3")
              .WriteAttributeString("value", me.SIZE3)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE4 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE4")
              .WriteAttributeString("value", me.SIZE4)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE5 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE5")
              .WriteAttributeString("value", me.SIZE5)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE6 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE6")
              .WriteAttributeString("value", me.SIZE6)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE7 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE7")
              .WriteAttributeString("value", me.SIZE7)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE8 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE8")
              .WriteAttributeString("value", me.SIZE8)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE9 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE9")
              .WriteAttributeString("value", me.SIZE9)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE10 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE10")
              .WriteAttributeString("value", me.SIZE10)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE11 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE11")
              .WriteAttributeString("value", me.SIZE11)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE12 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE12")
              .WriteAttributeString("value", me.SIZE12)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE13 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE13")
              .WriteAttributeString("value", me.SIZE13)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE14 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE14")
              .WriteAttributeString("value", me.SIZE14)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE15 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE15")
              .WriteAttributeString("value", me.SIZE15)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE16 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE16")
              .WriteAttributeString("value", me.SIZE16)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE17 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE17")
              .WriteAttributeString("value", me.SIZE17)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE18 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE18")
              .WriteAttributeString("value", me.SIZE18)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE19 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE19")
              .WriteAttributeString("value", me.SIZE19)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE20 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE20")
              .WriteAttributeString("value", me.SIZE20)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE21 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE21")
              .WriteAttributeString("value", me.SIZE21)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE22 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE22")
              .WriteAttributeString("value", me.SIZE22)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE23 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE23")
              .WriteAttributeString("value", me.SIZE23)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE24 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE24")
              .WriteAttributeString("value", me.SIZE24)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE25 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE25")
              .WriteAttributeString("value", me.SIZE25)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE26 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE26")
              .WriteAttributeString("value", me.SIZE26)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE27 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE27")
              .WriteAttributeString("value", me.SIZE27)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE28 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE28")
              .WriteAttributeString("value", me.SIZE28)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE29 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE29")
              .WriteAttributeString("value", me.SIZE29)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE30 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE30")
              .WriteAttributeString("value", me.SIZE30)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "17")
              .WriteEndElement
            end if
            if _IsSetSIZE31 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE31")
              .WriteAttributeString("value", me.SIZE31)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE32 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE32")
              .WriteAttributeString("value", me.SIZE32)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE33 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE33")
              .WriteAttributeString("value", me.SIZE33)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE34 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE34")
              .WriteAttributeString("value", me.SIZE34)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE35 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE35")
              .WriteAttributeString("value", me.SIZE35)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE36 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE36")
              .WriteAttributeString("value", me.SIZE36)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE37 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE37")
              .WriteAttributeString("value", me.SIZE37)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE38 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE38")
              .WriteAttributeString("value", me.SIZE38)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE39 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE39")
              .WriteAttributeString("value", me.SIZE39)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetSIZE40 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SIZE40")
              .WriteAttributeString("value", me.SIZE40)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "3")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetXCOLOR then
              .WriteStartElement("field")
              .WriteAttributeString("name", "XCOLOR")
              .WriteAttributeString("value", me.XCOLOR)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIX = JsonConvert.DeserializeObject(Of MATRIX)(e.StreamReader.ReadToEnd)
                With obj
                  _XCOLORCODE = .XCOLORCODE
                  _XCOLORNAME = .XCOLORNAME
                  _MULT = .MULT
                  _TOTALSUM = .TOTALSUM
                  _SIZE1 = .SIZE1
                  _SIZE2 = .SIZE2
                  _SIZE3 = .SIZE3
                  _SIZE4 = .SIZE4
                  _SIZE5 = .SIZE5
                  _SIZE6 = .SIZE6
                  _SIZE7 = .SIZE7
                  _SIZE8 = .SIZE8
                  _SIZE9 = .SIZE9
                  _SIZE10 = .SIZE10
                  _SIZE11 = .SIZE11
                  _SIZE12 = .SIZE12
                  _SIZE13 = .SIZE13
                  _SIZE14 = .SIZE14
                  _SIZE15 = .SIZE15
                  _SIZE16 = .SIZE16
                  _SIZE17 = .SIZE17
                  _SIZE18 = .SIZE18
                  _SIZE19 = .SIZE19
                  _SIZE20 = .SIZE20
                  _SIZE21 = .SIZE21
                  _SIZE22 = .SIZE22
                  _SIZE23 = .SIZE23
                  _SIZE24 = .SIZE24
                  _SIZE25 = .SIZE25
                  _SIZE26 = .SIZE26
                  _SIZE27 = .SIZE27
                  _SIZE28 = .SIZE28
                  _SIZE29 = .SIZE29
                  _SIZE30 = .SIZE30
                  _SIZE31 = .SIZE31
                  _SIZE32 = .SIZE32
                  _SIZE33 = .SIZE33
                  _SIZE34 = .SIZE34
                  _SIZE35 = .SIZE35
                  _SIZE36 = .SIZE36
                  _SIZE37 = .SIZE37
                  _SIZE38 = .SIZE38
                  _SIZE39 = .SIZE39
                  _SIZE40 = .SIZE40
                  _XCOLOR = .XCOLOR
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_MATRIXSUMTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of MATRIXSUMTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = nothing
            _Name = "MATRIXSUMTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of MATRIXSUMTEXT)
            _Parent = Parent
            _name = "MATRIXSUMTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of MATRIXSUMTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(MATRIXSUMTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _MATRIXSUMTEXT As MATRIXSUMTEXT In JsonConvert.DeserializeObject(Of QUERY_MATRIXSUMTEXT)(stream.ReadToEnd).Value
              With _MATRIXSUMTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_MATRIXSUMTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, MATRIXSUMTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new MATRIXSUMTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _MATRIXSUMTEXT as MATRIXSUMTEXT in value
              If _MATRIXSUMTEXT.Equals(trycast(obj,MATRIXSUMTEXT)) Then
                  value.remove(_MATRIXSUMTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class MATRIXSUMTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "MATRIXSUMTEXT"
                else
                    return "MATRIXSUMTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(4),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(5),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "MATRIXSUMTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as MATRIXSUMTEXT = JsonConvert.DeserializeObject(Of MATRIXSUMTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Sales Orders for Order")>  _
    Public Class QUERY_PORDORD
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDORD)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDORD)
            _Parent = nothing
            _Name = "PORDORD"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDORD)
            _Parent = Parent
            _name = "PORDORD_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDORD)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDORD)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDORD As PORDORD In JsonConvert.DeserializeObject(Of QUERY_PORDORD)(stream.ReadToEnd).Value
              With _PORDORD
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDORD)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDORD = JsonConvert.DeserializeObject(Of PORDORD)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDORD)
                  .ORDNAME = obj.ORDNAME
                  .REFERENCE = obj.REFERENCE
                  .CURDATE = obj.CURDATE
                  .CUSTNAME = obj.CUSTNAME
                  .ORD = obj.ORD
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDORD(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDORD as PORDORD in value
              If _PORDORD.Equals(trycast(obj,PORDORD)) Then
                  value.remove(_PORDORD)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDORD
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Private _IsSetREFERENCE As Boolean = Boolean.FalseString
        
        Private _REFERENCE As String
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _CUSTNAME As String
        
        Private _IsSetORD As Boolean = Boolean.FalseString
        
        Private _ORD As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDORD"
                else
                    return "PORDORD_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORD={0}", _
                  string.format("{0}",ORD) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer's Purch Ord"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(10),  _
         twodBarcode("REFERENCE")>  _
        Public Property REFERENCE() As String
            Get
                return _REFERENCE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer's Purch Ord", value, "^.{0,15}$") then Exit Property
                _IsSetREFERENCE = True
                If loading Then
                  _REFERENCE = Value
                Else
                    if not _REFERENCE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REFERENCE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REFERENCE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Order"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if not(value is nothing) then
                  _CURDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Order"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Order"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ORD")>  _
        Public Property ORD() As nullable (of int64)
            Get
                return _ORD
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Sales Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetORD = True
                If loading Then
                  _ORD = Value
                Else
                    if not _ORD = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORD", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORD = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
            if _IsSetREFERENCE then
              if f then
                  jw.WriteRaw(", ""REFERENCE"": ")
              else
                  jw.WriteRaw("""REFERENCE"": ")
                  f = true
              end if
              jw.WriteValue(me.REFERENCE)
            end if
            if _IsSetORD then
              if f then
                  jw.WriteRaw(", ""ORD"": ")
              else
                  jw.WriteRaw("""ORD"": ")
                  f = true
              end if
              jw.WriteValue(me.ORD)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDORD")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREFERENCE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REFERENCE")
              .WriteAttributeString("value", me.REFERENCE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "15")
              .WriteEndElement
            end if
            if _IsSetORD then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORD")
              .WriteAttributeString("value", me.ORD)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDORD = JsonConvert.DeserializeObject(Of PORDORD)(e.StreamReader.ReadToEnd)
                With obj
                  _ORDNAME = .ORDNAME
                  _REFERENCE = .REFERENCE
                  _CURDATE = .CURDATE
                  _CUSTNAME = .CUSTNAME
                  _ORD = .ORD
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Shipping Address")>  _
    Public Class QUERY_SHIPTO
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SHIPTO)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SHIPTO)
            _Parent = nothing
            _Name = "SHIPTO"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SHIPTO)
            _Parent = Parent
            _name = "SHIPTO_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SHIPTO)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SHIPTO)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SHIPTO As SHIPTO In JsonConvert.DeserializeObject(Of QUERY_SHIPTO)(stream.ReadToEnd).Value
              With _SHIPTO
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SHIPTO)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO = JsonConvert.DeserializeObject(Of SHIPTO)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SHIPTO)
                  .CUSTDES = obj.CUSTDES
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .FAX = obj.FAX
                  .ADDRESS = obj.ADDRESS
                  .ADDRESS2 = obj.ADDRESS2
                  .ADDRESS3 = obj.ADDRESS3
                  .STATE = obj.STATE
                  .STATENAME = obj.STATENAME
                  .ZIP = obj.ZIP
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .CUSTDESA = obj.CUSTDESA
                  .NAMEA = obj.NAMEA
                  .ADDRESSA = obj.ADDRESSA
                  .STATEA = obj.STATEA
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SHIPTO(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SHIPTO as SHIPTO in value
              If _SHIPTO.Equals(trycast(obj,SHIPTO)) Then
                  value.remove(_SHIPTO)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SHIPTO
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCUSTDES As Boolean = Boolean.FalseString
        
        Private _CUSTDES As String
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _IsSetPHONENUM As Boolean = Boolean.FalseString
        
        Private _PHONENUM As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetADDRESS As Boolean = Boolean.FalseString
        
        Private _ADDRESS As String
        
        Private _IsSetADDRESS2 As Boolean = Boolean.FalseString
        
        Private _ADDRESS2 As String
        
        Private _IsSetADDRESS3 As Boolean = Boolean.FalseString
        
        Private _ADDRESS3 As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetCUSTDESA As Boolean = Boolean.FalseString
        
        Private _CUSTDESA As String
        
        Private _IsSetNAMEA As Boolean = Boolean.FalseString
        
        Private _NAMEA As String
        
        Private _IsSetADDRESSA As Boolean = Boolean.FalseString
        
        Private _ADDRESSA As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SHIPTO"
                else
                    return "SHIPTO_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Name"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(30),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDES = True
                If loading Then
                  _CUSTDES = Value
                Else
                    if not _CUSTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(40),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,24}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(44),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONENUM = True
                If loading Then
                  _PHONENUM = Value
                Else
                    if not _PHONENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(46),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(50),  _
         twodBarcode("ADDRESS")>  _
        Public Property ADDRESS() As String
            Get
                return _ADDRESS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS = True
                If loading Then
                  _ADDRESS = Value
                Else
                    if not _ADDRESS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(51),  _
         twodBarcode("ADDRESS2")>  _
        Public Property ADDRESS2() As String
            Get
                return _ADDRESS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS2 = True
                If loading Then
                  _ADDRESS2 = Value
                Else
                    if not _ADDRESS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(52),  _
         twodBarcode("ADDRESS3")>  _
        Public Property ADDRESS3() As String
            Get
                return _ADDRESS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESS3 = True
                If loading Then
                  _ADDRESS3 = Value
                Else
                    if not _ADDRESS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Name"),  _
         Pos(60),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(70),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(80),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(90),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(120),  _
         twodBarcode("CUSTDESA")>  _
        Public Property CUSTDESA() As String
            Get
                return _CUSTDESA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name (Lang 2)", value, "^.{0,48}$") then Exit Property
                _IsSetCUSTDESA = True
                If loading Then
                  _CUSTDESA = Value
                Else
                    if not _CUSTDESA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTDESA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTDESA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(130),  _
         twodBarcode("NAMEA")>  _
        Public Property NAMEA() As String
            Get
                return _NAMEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact (Lang 2)", value, "^.{0,24}$") then Exit Property
                _IsSetNAMEA = True
                If loading Then
                  _NAMEA = Value
                Else
                    if not _NAMEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAMEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAMEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(140),  _
         twodBarcode("ADDRESSA")>  _
        Public Property ADDRESSA() As String
            Get
                return _ADDRESSA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Lang 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADDRESSA = True
                If loading Then
                  _ADDRESSA = Value
                Else
                    if not _ADDRESSA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADDRESSA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADDRESSA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City (Lang 2)"),  _
         nType("Edm.String"),  _
         tab("State"),  _
         Pos(150),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City (Lang 2)", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCUSTDES then
              if f then
                  jw.WriteRaw(", ""CUSTDES"": ")
              else
                  jw.WriteRaw("""CUSTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDES)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetPHONENUM then
              if f then
                  jw.WriteRaw(", ""PHONENUM"": ")
              else
                  jw.WriteRaw("""PHONENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONENUM)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetADDRESS then
              if f then
                  jw.WriteRaw(", ""ADDRESS"": ")
              else
                  jw.WriteRaw("""ADDRESS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS)
            end if
            if _IsSetADDRESS2 then
              if f then
                  jw.WriteRaw(", ""ADDRESS2"": ")
              else
                  jw.WriteRaw("""ADDRESS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS2)
            end if
            if _IsSetADDRESS3 then
              if f then
                  jw.WriteRaw(", ""ADDRESS3"": ")
              else
                  jw.WriteRaw("""ADDRESS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESS3)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetCUSTDESA then
              if f then
                  jw.WriteRaw(", ""CUSTDESA"": ")
              else
                  jw.WriteRaw("""CUSTDESA"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTDESA)
            end if
            if _IsSetNAMEA then
              if f then
                  jw.WriteRaw(", ""NAMEA"": ")
              else
                  jw.WriteRaw("""NAMEA"": ")
                  f = true
              end if
              jw.WriteValue(me.NAMEA)
            end if
            if _IsSetADDRESSA then
              if f then
                  jw.WriteRaw(", ""ADDRESSA"": ")
              else
                  jw.WriteRaw("""ADDRESSA"": ")
                  f = true
              end if
              jw.WriteValue(me.ADDRESSA)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SHIPTO")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetCUSTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDES")
              .WriteAttributeString("value", me.CUSTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetPHONENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONENUM")
              .WriteAttributeString("value", me.PHONENUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetADDRESS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS")
              .WriteAttributeString("value", me.ADDRESS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS2")
              .WriteAttributeString("value", me.ADDRESS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADDRESS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESS3")
              .WriteAttributeString("value", me.ADDRESS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetCUSTDESA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTDESA")
              .WriteAttributeString("value", me.CUSTDESA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetNAMEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAMEA")
              .WriteAttributeString("value", me.NAMEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetADDRESSA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADDRESSA")
              .WriteAttributeString("value", me.ADDRESSA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SHIPTO = JsonConvert.DeserializeObject(Of SHIPTO)(e.StreamReader.ReadToEnd)
                With obj
                  _CUSTDES = .CUSTDES
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _FAX = .FAX
                  _ADDRESS = .ADDRESS
                  _ADDRESS2 = .ADDRESS2
                  _ADDRESS3 = .ADDRESS3
                  _STATE = .STATE
                  _STATENAME = .STATENAME
                  _ZIP = .ZIP
                  _COUNTRYNAME = .COUNTRYNAME
                  _CUSTDESA = .CUSTDESA
                  _NAMEA = .NAMEA
                  _ADDRESSA = .ADDRESSA
                  _STATEA = .STATEA
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Order Authorisation")>  _
    Public Class QUERY_PORDERUSER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERUSER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERUSER)
            _Parent = nothing
            _Name = "PORDERUSER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERUSER)
            _Parent = Parent
            _name = "PORDERUSER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERUSER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERUSER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERUSER As PORDERUSER In JsonConvert.DeserializeObject(Of QUERY_PORDERUSER)(stream.ReadToEnd).Value
              With _PORDERUSER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERUSER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERUSER = JsonConvert.DeserializeObject(Of PORDERUSER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERUSER)
                  .AMOUNT = obj.AMOUNT
                  .CODE = obj.CODE
                  .USERLOGIN = obj.USERLOGIN
                  .ALTUSERLOGIN = obj.ALTUSERLOGIN
                  .UFLAG = obj.UFLAG
                  .CUSERLOGIN = obj.CUSERLOGIN
                  .UDATE = obj.UDATE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERUSER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERUSER as PORDERUSER in value
              If _PORDERUSER.Equals(trycast(obj,PORDERUSER)) Then
                  value.remove(_PORDERUSER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERUSER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _AMOUNT As Decimal
        
        Private _CODE As String
        
        Private _USERLOGIN As String
        
        Private _ALTUSERLOGIN As String
        
        Private _IsSetUFLAG As Boolean = Boolean.FalseString
        
        Private _UFLAG As String
        
        Private _CUSERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERUSER"
                else
                    return "PORDERUSER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "USER={0}", _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Starting From (Amt)"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Starting From (Amt)"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("AMOUNT")>  _
        Public Property AMOUNT() As nullable(of decimal)
            Get
                return _AMOUNT
            End Get
            Set
                if not(value is nothing) then
                  _AMOUNT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Starting From (Amt)"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authoriser"),  _
         nType("Edm.String"),  _
         tab("Starting From (Amt)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Alternate"),  _
         nType("Edm.String"),  _
         tab("Starting From (Amt)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("ALTUSERLOGIN")>  _
        Public Property ALTUSERLOGIN() As String
            Get
                return _ALTUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _ALTUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Approve"),  _
         nType("Edm.String"),  _
         tab("Starting From (Amt)"),  _
         Pos(30),  _
         twodBarcode("UFLAG")>  _
        Public Property UFLAG() As String
            Get
                return _UFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Approve", value, "^.{0,1}$") then Exit Property
                _IsSetUFLAG = True
                If loading Then
                  _UFLAG = Value
                Else
                    if not _UFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("UFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _UFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Authorised by"),  _
         nType("Edm.String"),  _
         tab("Starting From (Amt)"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("CUSERLOGIN")>  _
        Public Property CUSERLOGIN() As String
            Get
                return _CUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _CUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Authorisation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Starting From (Amt)"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Starting From (Amt)"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetUFLAG then
              if f then
                  jw.WriteRaw(", ""UFLAG"": ")
              else
                  jw.WriteRaw("""UFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.UFLAG)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERUSER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetUFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "UFLAG")
              .WriteAttributeString("value", me.UFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERUSER = JsonConvert.DeserializeObject(Of PORDERUSER)(e.StreamReader.ReadToEnd)
                With obj
                  _AMOUNT = .AMOUNT
                  _CODE = .CODE
                  _USERLOGIN = .USERLOGIN
                  _ALTUSERLOGIN = .ALTUSERLOGIN
                  _UFLAG = .UFLAG
                  _CUSERLOGIN = .CUSERLOGIN
                  _UDATE = .UDATE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Purchase Order Versions")>  _
    Public Class QUERY_PORDERSVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSVER)
            _Parent = nothing
            _Name = "PORDERSVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "Remarks")
            .add(2, "Linkage Details")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSVER)
            _Parent = Parent
            _name = "PORDERSVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Order Items")
            .add(1, "Remarks")
            .add(2, "Linkage Details")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSVER As PORDERSVER In JsonConvert.DeserializeObject(Of QUERY_PORDERSVER)(stream.ReadToEnd).Value
              With _PORDERSVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSVER = JsonConvert.DeserializeObject(Of PORDERSVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSVER)
                  .VERSION = obj.VERSION
                  .DETAILS2 = obj.DETAILS2
                  .QPRICE = obj.QPRICE
                  .PERCENT = obj.PERCENT
                  .DISPRICE = obj.DISPRICE
                  .VAT = obj.VAT
                  .TOTPRICE = obj.TOTPRICE
                  .CODE = obj.CODE
                  .TAXCODE = obj.TAXCODE
                  .LCODE = obj.LCODE
                  .LEXCH = obj.LEXCH
                  .PAYCODE = obj.PAYCODE
                  .PAYDES = obj.PAYDES
                  .ADVPERCENT = obj.ADVPERCENT
                  .ADVBAL = obj.ADVBAL
                  .DETAILS = obj.DETAILS
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSVER as PORDERSVER in value
              If _PORDERSVER.Equals(trycast(obj,PORDERSVER)) Then
                  value.remove(_PORDERSVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _VERSION As Long
        
        Private _IsSetDETAILS2 As Boolean = Boolean.FalseString
        
        Private _DETAILS2 As String
        
        Private _QPRICE As Decimal
        
        Private _PERCENT As Decimal
        
        Private _DISPRICE As Decimal
        
        Private _VAT As Decimal
        
        Private _TOTPRICE As Decimal
        
        Private _CODE As String
        
        Private _TAXCODE As String
        
        Private _LCODE As String
        
        Private _LEXCH As Decimal
        
        Private _PAYCODE As String
        
        Private _PAYDES As String
        
        Private _ADVPERCENT As Decimal
        
        Private _ADVBAL As Decimal
        
        Private _DETAILS As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _PORDERITEMSVER_SUBFORM As QUERY_PORDERITEMSVER
        
        Private _PORDERSTEXTVER_SUBFORM As QUERY_PORDERSTEXTVER
        
        Private _PORDERSLINKINGVER_SUBFORM As QUERY_PORDERSLINKINGVER
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            ChildQuery.add(2, new oNavigation("Linkage Details"))
            _PORDERITEMSVER_SUBFORM = new QUERY_PORDERITEMSVER(me)
            _PORDERSTEXTVER_SUBFORM = new QUERY_PORDERSTEXTVER(me)
            _PORDERSLINKINGVER_SUBFORM = new QUERY_PORDERSLINKINGVER(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERITEMSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PORDERSTEXTVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDERSLINKINGVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Order Items"))
            ChildQuery.add(1, new oNavigation("Remarks"))
            ChildQuery.add(2, new oNavigation("Linkage Details"))
            _PORDERITEMSVER_SUBFORM = new QUERY_PORDERITEMSVER(me)
            _PORDERSTEXTVER_SUBFORM = new QUERY_PORDERSTEXTVER(me)
            _PORDERSLINKINGVER_SUBFORM = new QUERY_PORDERSLINKINGVER(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDERITEMSVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_PORDERSTEXTVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_PORDERSLINKINGVER_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Order Items", _PORDERITEMSVER_SUBFORM))
                   .add(1, new oNavigation("Remarks", _PORDERSTEXTVER_SUBFORM))
                   .add(2, new oNavigation("Linkage Details", _PORDERSLINKINGVER_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSVER"
                else
                    return "PORDERSVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "VERSION={0}", _
                  string.format("{0}",VERSION) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Version"),  _
         nType("Edm.Int64"),  _
         tab("Version"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("VERSION")>  _
        Public Property VERSION() As nullable (of int64)
            Get
                return _VERSION
            End Get
            Set
                if not(value is nothing) then
                  _VERSION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details (Version)"),  _
         nType("Edm.String"),  _
         tab("Version"),  _
         Pos(15),  _
         twodBarcode("DETAILS2")>  _
        Public Property DETAILS2() As String
            Get
                return _DETAILS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details (Version)", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS2 = True
                If loading Then
                  _DETAILS2 = Value
                Else
                    if not _DETAILS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Price Bef. Disc."),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Overall Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Version"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price After Discount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("DISPRICE")>  _
        Public Property DISPRICE() As nullable(of decimal)
            Get
                return _DISPRICE
            End Get
            Set
                if not(value is nothing) then
                  _DISPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Tax"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("VAT")>  _
        Public Property VAT() As nullable(of decimal)
            Get
                return _VAT
            End Get
            Set
                if not(value is nothing) then
                  _VAT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Final Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Version"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if not(value is nothing) then
                  _TOTPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Version"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tax Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("TAXCODE")>  _
        Public Property TAXCODE() As String
            Get
                return _TAXCODE
            End Get
            Set
                if not(value is nothing) then
                  _TAXCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Linked Currency"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("LCODE")>  _
        Public Property LCODE() As String
            Get
                return _LCODE
            End Get
            Set
                if not(value is nothing) then
                  _LCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Tax Code"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("LEXCH")>  _
        Public Property LEXCH() As nullable(of decimal)
            Get
                return _LEXCH
            End Get
            Set
                if not(value is nothing) then
                  _LEXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms Code"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("PAYCODE")>  _
        Public Property PAYCODE() As String
            Get
                return _PAYCODE
            End Get
            Set
                if not(value is nothing) then
                  _PAYCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Payment Terms"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("PAYDES")>  _
        Public Property PAYDES() As String
            Get
                return _PAYDES
            End Get
            Set
                if not(value is nothing) then
                  _PAYDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("% Advance Pay Deduct"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Tax Code"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("ADVPERCENT")>  _
        Public Property ADVPERCENT() As nullable(of decimal)
            Get
                return _ADVPERCENT
            End Get
            Set
                if not(value is nothing) then
                  _ADVPERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Advance Payment"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Tax Code"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("ADVBAL")>  _
        Public Property ADVBAL() As nullable(of decimal)
            Get
                return _ADVBAL
            End Get
            Set
                if not(value is nothing) then
                  _ADVBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Tax Code"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Signature"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Signature"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERITEMSVER_SUBFORM() As QUERY_PORDERITEMSVER
            Get
                return _PORDERITEMSVER_SUBFORM
            End Get
            Set
                _PORDERITEMSVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSTEXTVER_SUBFORM() As QUERY_PORDERSTEXTVER
            Get
                return _PORDERSTEXTVER_SUBFORM
            End Get
            Set
                _PORDERSTEXTVER_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDERSLINKINGVER_SUBFORM() As QUERY_PORDERSLINKINGVER
            Get
                return _PORDERSLINKINGVER_SUBFORM
            End Get
            Set
                _PORDERSLINKINGVER_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS2 then
              if f then
                  jw.WriteRaw(", ""DETAILS2"": ")
              else
                  jw.WriteRaw("""DETAILS2"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS2)
            end if
            if _PORDERITEMSVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERITEMSVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERITEMSVER in _PORDERITEMSVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERITEMSVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSTEXTVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSTEXTVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSTEXTVER in _PORDERSTEXTVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSTEXTVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _PORDERSLINKINGVER_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDERSLINKINGVER_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDERSLINKINGVER in _PORDERSLINKINGVER_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDERSLINKINGVER_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "VERSION")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS2")
              .WriteAttributeString("value", me.DETAILS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _PORDERITEMSVER_SUBFORM.value.count > 0 then
              for each itm as PORDERITEMSVER in _PORDERITEMSVER_SUBFORM.Value
                itm.toXML(xw,"PORDERITEMSVER_SUBFORM")
              next
            end if
            if _PORDERSTEXTVER_SUBFORM.value.count > 0 then
              for each itm as PORDERSTEXTVER in _PORDERSTEXTVER_SUBFORM.Value
                itm.toXML(xw,"PORDERSTEXTVER_SUBFORM")
              next
            end if
            if _PORDERSLINKINGVER_SUBFORM.value.count > 0 then
              for each itm as PORDERSLINKINGVER in _PORDERSLINKINGVER_SUBFORM.Value
                itm.toXML(xw,"PORDERSLINKINGVER_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSVER = JsonConvert.DeserializeObject(Of PORDERSVER)(e.StreamReader.ReadToEnd)
                With obj
                  _VERSION = .VERSION
                  _DETAILS2 = .DETAILS2
                  _QPRICE = .QPRICE
                  _PERCENT = .PERCENT
                  _DISPRICE = .DISPRICE
                  _VAT = .VAT
                  _TOTPRICE = .TOTPRICE
                  _CODE = .CODE
                  _TAXCODE = .TAXCODE
                  _LCODE = .LCODE
                  _LEXCH = .LEXCH
                  _PAYCODE = .PAYCODE
                  _PAYDES = .PAYDES
                  _ADVPERCENT = .ADVPERCENT
                  _ADVBAL = .ADVBAL
                  _DETAILS = .DETAILS
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PORDERSVER
        
        PORDERITEMSVER = 0
        
        PORDERSTEXTVER = 1
        
        PORDERSLINKINGVER = 2
    End Enum
    
    <QueryTitle("Order Items")>  _
    Public Class QUERY_PORDERITEMSVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERITEMSVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERITEMSVER)
            _Parent = nothing
            _Name = "PORDERITEMSVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Purch Order Item Version-Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERITEMSVER)
            _Parent = Parent
            _name = "PORDERITEMSVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Purch Order Item Version-Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERITEMSVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERITEMSVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERITEMSVER As PORDERITEMSVER In JsonConvert.DeserializeObject(Of QUERY_PORDERITEMSVER)(stream.ReadToEnd).Value
              With _PORDERITEMSVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERITEMSVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSVER = JsonConvert.DeserializeObject(Of PORDERITEMSVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERITEMSVER)
                  .PARTNAME = obj.PARTNAME
                  .PDES = obj.PDES
                  .TQUANT = obj.TQUANT
                  .TBALANCE = obj.TBALANCE
                  .TUNITNAME = obj.TUNITNAME
                  .REQDATE = obj.REQDATE
                  .PRICE = obj.PRICE
                  .ICODE = obj.ICODE
                  .PERCENT = obj.PERCENT
                  .QPRICE = obj.QPRICE
                  .PRICEBAL = obj.PRICEBAL
                  .CODE = obj.CODE
                  .SUPPARTNAME = obj.SUPPARTNAME
                  .MNFNAME = obj.MNFNAME
                  .MNFDES = obj.MNFDES
                  .PRSOURCENAME = obj.PRSOURCENAME
                  .REVNAME = obj.REVNAME
                  .NUMPACK = obj.NUMPACK
                  .PACKCODE = obj.PACKCODE
                  .BUDCODE = obj.BUDCODE
                  .COSTCNAME = obj.COSTCNAME
                  .DUTYPERCENTTYPE = obj.DUTYPERCENTTYPE
                  .CORDNAME = obj.CORDNAME
                  .COLINE = obj.COLINE
                  .PORDISTATUSDES = obj.PORDISTATUSDES
                  .PRIVTYPE = obj.PRIVTYPE
                  .SPPRIVTYPE = obj.SPPRIVTYPE
                  .ARRDATE = obj.ARRDATE
                  .DUEDATE = obj.DUEDATE
                  .UNSPSCCODE = obj.UNSPSCCODE
                  .UNSPSCDES = obj.UNSPSCDES
                  .ACTNAME = obj.ACTNAME
                  .SERIALNAME = obj.SERIALNAME
                  .FORSERIALNAME = obj.FORSERIALNAME
                  .FORPARTNAME = obj.FORPARTNAME
                  .VOLUME = obj.VOLUME
                  .VUNITNAME = obj.VUNITNAME
                  .QUANT = obj.QUANT
                  .ABALANCE = obj.ABALANCE
                  .UNITNAME = obj.UNITNAME
                  .EXCH = obj.EXCH
                  .ORDI = obj.ORDI
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERITEMSVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERITEMSVER as PORDERITEMSVER in value
              If _PORDERITEMSVER.Equals(trycast(obj,PORDERITEMSVER)) Then
                  value.remove(_PORDERITEMSVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERITEMSVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _PARTNAME As String
        
        Private _PDES As String
        
        Private _TQUANT As Decimal
        
        Private _TBALANCE As Decimal
        
        Private _TUNITNAME As String
        
        Private _REQDATE As System.DateTimeOffset
        
        Private _PRICE As Decimal
        
        Private _ICODE As String
        
        Private _PERCENT As Decimal
        
        Private _QPRICE As Decimal
        
        Private _PRICEBAL As Decimal
        
        Private _CODE As String
        
        Private _SUPPARTNAME As String
        
        Private _MNFNAME As String
        
        Private _MNFDES As String
        
        Private _PRSOURCENAME As String
        
        Private _REVNAME As String
        
        Private _NUMPACK As Long
        
        Private _PACKCODE As String
        
        Private _BUDCODE As String
        
        Private _COSTCNAME As String
        
        Private _DUTYPERCENTTYPE As String
        
        Private _CORDNAME As String
        
        Private _IsSetCOLINE As Boolean = Boolean.FalseString
        
        Private _COLINE As Long
        
        Private _PORDISTATUSDES As String
        
        Private _PRIVTYPE As String
        
        Private _SPPRIVTYPE As String
        
        Private _ARRDATE As System.DateTimeOffset
        
        Private _DUEDATE As System.DateTimeOffset
        
        Private _UNSPSCCODE As String
        
        Private _UNSPSCDES As String
        
        Private _ACTNAME As String
        
        Private _SERIALNAME As String
        
        Private _FORSERIALNAME As String
        
        Private _FORPARTNAME As String
        
        Private _VOLUME As Decimal
        
        Private _VUNITNAME As String
        
        Private _QUANT As Decimal
        
        Private _ABALANCE As Decimal
        
        Private _UNITNAME As String
        
        Private _EXCH As Decimal
        
        Private _ORDI As Long
        
        Private _PORDITEMSVERTEXT_SUBFORM As QUERY_PORDITEMSVERTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Purch Order Item Version-Remarks"))
            _PORDITEMSVERTEXT_SUBFORM = new QUERY_PORDITEMSVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDITEMSVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Purch Order Item Version-Remarks", _PORDITEMSVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Purch Order Item Version-Remarks"))
            _PORDITEMSVERTEXT_SUBFORM = new QUERY_PORDITEMSVERTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_PORDITEMSVERTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Purch Order Item Version-Remarks", _PORDITEMSVERTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERITEMSVER"
                else
                    return "PORDERITEMSVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDI={0}", _
                  string.format("{0}",ORDI) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Part Number"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("PARTNAME")>  _
        Public Property PARTNAME() As String
            Get
                return _PARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _PARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Description"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("PDES")>  _
        Public Property PDES() As String
            Get
                return _PDES
            End Get
            Set
                if not(value is nothing) then
                  _PDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quantity"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(15),  _
         [ReadOnly](true),  _
         twodBarcode("TQUANT")>  _
        Public Property TQUANT() As nullable(of decimal)
            Get
                return _TQUANT
            End Get
            Set
                if not(value is nothing) then
                  _TQUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("Part Number"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TBALANCE")>  _
        Public Property TBALANCE() As nullable(of decimal)
            Get
                return _TBALANCE
            End Get
            Set
                if not(value is nothing) then
                  _TBALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("TUNITNAME")>  _
        Public Property TUNITNAME() As String
            Get
                return _TUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _TUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Due Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Part Number"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("REQDATE")>  _
        Public Property REQDATE() As nullable (of DateTimeOffset)
            Get
                return _REQDATE
            End Get
            Set
                if not(value is nothing) then
                  _REQDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(13),  _
         tab("Part Number"),  _
         Pos(35),  _
         [ReadOnly](true),  _
         twodBarcode("PRICE")>  _
        Public Property PRICE() As nullable(of decimal)
            Get
                return _PRICE
            End Get
            Set
                if not(value is nothing) then
                  _PRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Currency"),  _
         nType("Edm.String"),  _
         tab("Part Number"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("ICODE")>  _
        Public Property ICODE() As String
            Get
                return _ICODE
            End Get
            Set
                if not(value is nothing) then
                  _ICODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Discount%"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(8),  _
         tab("Discount%"),  _
         Pos(45),  _
         [ReadOnly](true),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if not(value is nothing) then
                  _PERCENT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Extended Price"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Discount%"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("QPRICE")>  _
        Public Property QPRICE() As nullable(of decimal)
            Get
                return _QPRICE
            End Get
            Set
                if not(value is nothing) then
                  _QPRICE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Value of Balance"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Discount%"),  _
         Pos(55),  _
         [ReadOnly](true),  _
         twodBarcode("PRICEBAL")>  _
        Public Property PRICEBAL() As nullable(of decimal)
            Get
                return _PRICEBAL
            End Get
            Set
                if not(value is nothing) then
                  _PRICEBAL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order Currency"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vend/Manuf. Part No."),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(65),  _
         [ReadOnly](true),  _
         twodBarcode("SUPPARTNAME")>  _
        Public Property SUPPARTNAME() As String
            Get
                return _SUPPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _SUPPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manufct Code"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(70),  _
         [ReadOnly](true),  _
         twodBarcode("MNFNAME")>  _
        Public Property MNFNAME() As String
            Get
                return _MNFNAME
            End Get
            Set
                if not(value is nothing) then
                  _MNFNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Manufacturer Name"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("MNFDES")>  _
        Public Property MNFDES() As String
            Get
                return _MNFDES
            End Get
            Set
                if not(value is nothing) then
                  _MNFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Price Source"),  _
         nType("Edm.String"),  _
         tab("Discount%"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("PRSOURCENAME")>  _
        Public Property PRSOURCENAME() As String
            Get
                return _PRSOURCENAME
            End Get
            Set
                if not(value is nothing) then
                  _PRSOURCENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part Revision"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(85),  _
         [ReadOnly](true),  _
         twodBarcode("REVNAME")>  _
        Public Property REVNAME() As String
            Get
                return _REVNAME
            End Get
            Set
                if not(value is nothing) then
                  _REVNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Packing Crates (No.)"),  _
         nType("Edm.Int64"),  _
         tab("Part Revision"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("NUMPACK")>  _
        Public Property NUMPACK() As nullable (of int64)
            Get
                return _NUMPACK
            End Get
            Set
                if not(value is nothing) then
                  _NUMPACK = Value
                end if
            End Set
        End Property
        
        <DisplayName("Crate Type Code"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PACKCODE")>  _
        Public Property PACKCODE() As String
            Get
                return _PACKCODE
            End Get
            Set
                if not(value is nothing) then
                  _PACKCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Budget Item"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("BUDCODE")>  _
        Public Property BUDCODE() As String
            Get
                return _BUDCODE
            End Get
            Set
                if not(value is nothing) then
                  _BUDCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Profit/Cost Centre"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("COSTCNAME")>  _
        Public Property COSTCNAME() As String
            Get
                return _COSTCNAME
            End Get
            Set
                if not(value is nothing) then
                  _COSTCNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Shipping Cost Type"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(115),  _
         [ReadOnly](true),  _
         twodBarcode("DUTYPERCENTTYPE")>  _
        Public Property DUTYPERCENTTYPE() As String
            Get
                return _DUTYPERCENTTYPE
            End Get
            Set
                if not(value is nothing) then
                  _DUTYPERCENTTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Sales Order"),  _
         nType("Edm.String"),  _
         tab("Part Revision"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("CORDNAME")>  _
        Public Property CORDNAME() As String
            Get
                return _CORDNAME
            End Get
            Set
                if not(value is nothing) then
                  _CORDNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("COLINE"),  _
         nType("Edm.Int64"),  _
         tab("Part Revision"),  _
         Pos(0),  _
         twodBarcode("COLINE")>  _
        Public Property COLINE() As nullable (of int64)
            Get
                return _COLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("COLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetCOLINE = True
                If loading Then
                  _COLINE = Value
                Else
                    if not _COLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status for Item"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("PORDISTATUSDES")>  _
        Public Property PORDISTATUSDES() As String
            Get
                return _PORDISTATUSDES
            End Get
            Set
                if not(value is nothing) then
                  _PORDISTATUSDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Quality Code (Part)"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(135),  _
         [ReadOnly](true),  _
         twodBarcode("PRIVTYPE")>  _
        Public Property PRIVTYPE() As String
            Get
                return _PRIVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _PRIVTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Special Quality Code"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("SPPRIVTYPE")>  _
        Public Property SPPRIVTYPE() As String
            Get
                return _SPPRIVTYPE
            End Get
            Set
                if not(value is nothing) then
                  _SPPRIVTYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Receipt Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Status for Item"),  _
         Pos(145),  _
         [ReadOnly](true),  _
         twodBarcode("ARRDATE")>  _
        Public Property ARRDATE() As nullable (of DateTimeOffset)
            Get
                return _ARRDATE
            End Get
            Set
                if not(value is nothing) then
                  _ARRDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Expected ReceiptDate"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Status for Item"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("DUEDATE")>  _
        Public Property DUEDATE() As nullable (of DateTimeOffset)
            Get
                return _DUEDATE
            End Get
            Set
                if not(value is nothing) then
                  _DUEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Code"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(155),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCCODE")>  _
        Public Property UNSPSCCODE() As String
            Get
                return _UNSPSCCODE
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCCODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attribute Set Desc."),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("UNSPSCDES")>  _
        Public Property UNSPSCDES() As String
            Get
                return _UNSPSCDES
            End Get
            Set
                if not(value is nothing) then
                  _UNSPSCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Operation"),  _
         nType("Edm.String"),  _
         tab("Status for Item"),  _
         Pos(165),  _
         [ReadOnly](true),  _
         twodBarcode("ACTNAME")>  _
        Public Property ACTNAME() As String
            Get
                return _ACTNAME
            End Get
            Set
                if not(value is nothing) then
                  _ACTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("To Work Order"),  _
         nType("Edm.String"),  _
         tab("To Work Order"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("SERIALNAME")>  _
        Public Property SERIALNAME() As String
            Get
                return _SERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _SERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Work Order to Charge"),  _
         nType("Edm.String"),  _
         tab("To Work Order"),  _
         Pos(175),  _
         [ReadOnly](true),  _
         twodBarcode("FORSERIALNAME")>  _
        Public Property FORSERIALNAME() As String
            Get
                return _FORSERIALNAME
            End Get
            Set
                if not(value is nothing) then
                  _FORSERIALNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Part to Charge"),  _
         nType("Edm.String"),  _
         tab("To Work Order"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("FORPARTNAME")>  _
        Public Property FORPARTNAME() As String
            Get
                return _FORPARTNAME
            End Get
            Set
                if not(value is nothing) then
                  _FORPARTNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(16),  _
         tab("To Work Order"),  _
         Pos(185),  _
         [ReadOnly](true),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if not(value is nothing) then
                  _VOLUME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit of Volume"),  _
         nType("Edm.String"),  _
         tab("To Work Order"),  _
         Pos(190),  _
         [ReadOnly](true),  _
         twodBarcode("VUNITNAME")>  _
        Public Property VUNITNAME() As String
            Get
                return _VUNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _VUNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Qty (Factory Units)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("To Work Order"),  _
         Pos(195),  _
         [ReadOnly](true),  _
         twodBarcode("QUANT")>  _
        Public Property QUANT() As nullable(of decimal)
            Get
                return _QUANT
            End Get
            Set
                if not(value is nothing) then
                  _QUANT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Balance (Fact. Unit)"),  _
         nType("Edm.Decimal"),  _
         Scale(3),  _
         Precision(17),  _
         tab("To Work Order"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("ABALANCE")>  _
        Public Property ABALANCE() As nullable(of decimal)
            Get
                return _ABALANCE
            End Get
            Set
                if not(value is nothing) then
                  _ABALANCE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Factory Unit"),  _
         nType("Edm.String"),  _
         tab("To Work Order"),  _
         Pos(205),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Exchange Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Exchange Rate"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("EXCH")>  _
        Public Property EXCH() As nullable(of decimal)
            Get
                return _EXCH
            End Get
            Set
                if not(value is nothing) then
                  _EXCH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Line Item (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Exchange Rate"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("ORDI")>  _
        Public Property ORDI() As nullable (of int64)
            Get
                return _ORDI
            End Get
            Set
                if not(value is nothing) then
                  _ORDI = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property PORDITEMSVERTEXT_SUBFORM() As QUERY_PORDITEMSVERTEXT
            Get
                return _PORDITEMSVERTEXT_SUBFORM
            End Get
            Set
                _PORDITEMSVERTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCOLINE then
              if f then
                  jw.WriteRaw(", ""COLINE"": ")
              else
                  jw.WriteRaw("""COLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.COLINE)
            end if
            if _PORDITEMSVERTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", PORDITEMSVERTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as PORDITEMSVERTEXT in _PORDITEMSVERTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _PORDITEMSVERTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERITEMSVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDI")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCOLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COLINE")
              .WriteAttributeString("value", me.COLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _PORDITEMSVERTEXT_SUBFORM.value.count > 0 then
              for each itm as PORDITEMSVERTEXT in _PORDITEMSVERTEXT_SUBFORM.Value
                itm.toXML(xw,"PORDITEMSVERTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERITEMSVER = JsonConvert.DeserializeObject(Of PORDERITEMSVER)(e.StreamReader.ReadToEnd)
                With obj
                  _PARTNAME = .PARTNAME
                  _PDES = .PDES
                  _TQUANT = .TQUANT
                  _TBALANCE = .TBALANCE
                  _TUNITNAME = .TUNITNAME
                  _REQDATE = .REQDATE
                  _PRICE = .PRICE
                  _ICODE = .ICODE
                  _PERCENT = .PERCENT
                  _QPRICE = .QPRICE
                  _PRICEBAL = .PRICEBAL
                  _CODE = .CODE
                  _SUPPARTNAME = .SUPPARTNAME
                  _MNFNAME = .MNFNAME
                  _MNFDES = .MNFDES
                  _PRSOURCENAME = .PRSOURCENAME
                  _REVNAME = .REVNAME
                  _NUMPACK = .NUMPACK
                  _PACKCODE = .PACKCODE
                  _BUDCODE = .BUDCODE
                  _COSTCNAME = .COSTCNAME
                  _DUTYPERCENTTYPE = .DUTYPERCENTTYPE
                  _CORDNAME = .CORDNAME
                  _COLINE = .COLINE
                  _PORDISTATUSDES = .PORDISTATUSDES
                  _PRIVTYPE = .PRIVTYPE
                  _SPPRIVTYPE = .SPPRIVTYPE
                  _ARRDATE = .ARRDATE
                  _DUEDATE = .DUEDATE
                  _UNSPSCCODE = .UNSPSCCODE
                  _UNSPSCDES = .UNSPSCDES
                  _ACTNAME = .ACTNAME
                  _SERIALNAME = .SERIALNAME
                  _FORSERIALNAME = .FORSERIALNAME
                  _FORPARTNAME = .FORPARTNAME
                  _VOLUME = .VOLUME
                  _VUNITNAME = .VUNITNAME
                  _QUANT = .QUANT
                  _ABALANCE = .ABALANCE
                  _UNITNAME = .UNITNAME
                  _EXCH = .EXCH
                  _ORDI = .ORDI
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_PORDERITEMSVER
        
        PORDITEMSVERTEXT = 0
    End Enum
    
    <QueryTitle("Purch Order Item Version-Remarks")>  _
    Public Class QUERY_PORDITEMSVERTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDITEMSVERTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDITEMSVERTEXT)
            _Parent = nothing
            _Name = "PORDITEMSVERTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDITEMSVERTEXT)
            _Parent = Parent
            _name = "PORDITEMSVERTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDITEMSVERTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDITEMSVERTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDITEMSVERTEXT As PORDITEMSVERTEXT In JsonConvert.DeserializeObject(Of QUERY_PORDITEMSVERTEXT)(stream.ReadToEnd).Value
              With _PORDITEMSVERTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDITEMSVERTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDITEMSVERTEXT = JsonConvert.DeserializeObject(Of PORDITEMSVERTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDITEMSVERTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDITEMSVERTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDITEMSVERTEXT as PORDITEMSVERTEXT in value
              If _PORDITEMSVERTEXT.Equals(trycast(obj,PORDITEMSVERTEXT)) Then
                  value.remove(_PORDITEMSVERTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDITEMSVERTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TEXT As String
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDITEMSVERTEXT"
                else
                    return "PORDITEMSVERTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if not(value is nothing) then
                  _TEXTLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDITEMSVERTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDITEMSVERTEXT = JsonConvert.DeserializeObject(Of PORDITEMSVERTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Remarks")>  _
    Public Class QUERY_PORDERSTEXTVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSTEXTVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSTEXTVER)
            _Parent = nothing
            _Name = "PORDERSTEXTVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSTEXTVER)
            _Parent = Parent
            _name = "PORDERSTEXTVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSTEXTVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSTEXTVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSTEXTVER As PORDERSTEXTVER In JsonConvert.DeserializeObject(Of QUERY_PORDERSTEXTVER)(stream.ReadToEnd).Value
              With _PORDERSTEXTVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSTEXTVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTEXTVER = JsonConvert.DeserializeObject(Of PORDERSTEXTVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSTEXTVER)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSTEXTVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSTEXTVER as PORDERSTEXTVER in value
              If _PORDERSTEXTVER.Equals(trycast(obj,PORDERSTEXTVER)) Then
                  value.remove(_PORDERSTEXTVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSTEXTVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TEXT As String
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSTEXTVER"
                else
                    return "PORDERSTEXTVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if not(value is nothing) then
                  _TEXT = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if not(value is nothing) then
                  _TEXTLINE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSTEXTVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTEXTVER = JsonConvert.DeserializeObject(Of PORDERSTEXTVER)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Linkage Details")>  _
    Public Class QUERY_PORDERSLINKINGVER
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSLINKINGVER)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSLINKINGVER)
            _Parent = nothing
            _Name = "PORDERSLINKINGVER"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSLINKINGVER)
            _Parent = Parent
            _name = "PORDERSLINKINGVER_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSLINKINGVER)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSLINKINGVER)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSLINKINGVER As PORDERSLINKINGVER In JsonConvert.DeserializeObject(Of QUERY_PORDERSLINKINGVER)(stream.ReadToEnd).Value
              With _PORDERSLINKINGVER
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSLINKINGVER)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSLINKINGVER = JsonConvert.DeserializeObject(Of PORDERSLINKINGVER)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSLINKINGVER)
                  .CODE = obj.CODE
                  .SHARE = obj.SHARE
                  .BVALUE = obj.BVALUE
                  .BASEDATE = obj.BASEDATE
                  .CURRENCY = obj.CURRENCY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSLINKINGVER(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSLINKINGVER as PORDERSLINKINGVER in value
              If _PORDERSLINKINGVER.Equals(trycast(obj,PORDERSLINKINGVER)) Then
                  value.remove(_PORDERSLINKINGVER)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSLINKINGVER
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _CODE As String
        
        Private _SHARE As Decimal
        
        Private _BVALUE As Decimal
        
        Private _BASEDATE As System.DateTimeOffset
        
        Private _CURRENCY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSLINKINGVER"
                else
                    return "PORDERSLINKINGVER_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURRENCY={0}", _
                  string.format("{0}",CURRENCY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent of Composite"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("SHARE")>  _
        Public Property SHARE() As nullable(of decimal)
            Get
                return _SHARE
            End Get
            Set
                if not(value is nothing) then
                  _SHARE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("BVALUE")>  _
        Public Property BVALUE() As nullable(of decimal)
            Get
                return _BVALUE
            End Get
            Set
                if not(value is nothing) then
                  _BVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Base Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("BASEDATE")>  _
        Public Property BASEDATE() As nullable (of DateTimeOffset)
            Get
                return _BASEDATE
            End Get
            Set
                if not(value is nothing) then
                  _BASEDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Currency (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("CURRENCY")>  _
        Public Property CURRENCY() As nullable (of int64)
            Get
                return _CURRENCY
            End Get
            Set
                if not(value is nothing) then
                  _CURRENCY = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSLINKINGVER")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSLINKINGVER = JsonConvert.DeserializeObject(Of PORDERSLINKINGVER)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _SHARE = .SHARE
                  _BVALUE = .BVALUE
                  _BASEDATE = .BASEDATE
                  _CURRENCY = .CURRENCY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Linkage Details")>  _
    Public Class QUERY_LINKING
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of LINKING)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = nothing
            _Name = "LINKING"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of LINKING)
            _Parent = Parent
            _name = "LINKING_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of LINKING)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(LINKING)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _LINKING As LINKING In JsonConvert.DeserializeObject(Of QUERY_LINKING)(stream.ReadToEnd).Value
              With _LINKING
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_LINKING)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, LINKING)
                  .CODE = obj.CODE
                  .SHARE = obj.SHARE
                  .BVALUE = obj.BVALUE
                  .BASEDATE = obj.BASEDATE
                  .SUPPLYAPPOINTTERM2 = obj.SUPPLYAPPOINTTERM2
                  .TERMFLAG = obj.TERMFLAG
                  .CURRENCY = obj.CURRENCY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new LINKING(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _LINKING as LINKING in value
              If _LINKING.Equals(trycast(obj,LINKING)) Then
                  value.remove(_LINKING)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class LINKING
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetSHARE As Boolean = Boolean.FalseString
        
        Private _SHARE As Decimal
        
        Private _IsSetBVALUE As Boolean = Boolean.FalseString
        
        Private _BVALUE As Decimal
        
        Private _IsSetBASEDATE As Boolean = Boolean.FalseString
        
        Private _BASEDATE As System.DateTimeOffset
        
        Private _IsSetSUPPLYAPPOINTTERM2 As Boolean = Boolean.FalseString
        
        Private _SUPPLYAPPOINTTERM2 As Long
        
        Private _IsSetTERMFLAG As Boolean = Boolean.FalseString
        
        Private _TERMFLAG As String
        
        Private _IsSetCURRENCY As Boolean = Boolean.FalseString
        
        Private _CURRENCY As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "LINKING"
                else
                    return "LINKING_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CURRENCY={0}", _
                  string.format("{0}",CURRENCY) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(20),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Curr", value, "^.{0,3}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Percent of Composite"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Curr"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("SHARE")>  _
        Public Property SHARE() As nullable(of decimal)
            Get
                return _SHARE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent of Composite", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetSHARE = True
                If loading Then
                  _SHARE = Value
                Else
                    if not _SHARE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHARE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHARE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Rate"),  _
         nType("Edm.Decimal"),  _
         Scale(6),  _
         Precision(13),  _
         tab("Curr"),  _
         Pos(40),  _
         Mandatory(true),  _
         twodBarcode("BVALUE")>  _
        Public Property BVALUE() As nullable(of decimal)
            Get
                return _BVALUE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Rate", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetBVALUE = True
                If loading Then
                  _BVALUE = Value
                Else
                    if not _BVALUE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BVALUE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BVALUE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Base Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Curr"),  _
         Pos(50),  _
         twodBarcode("BASEDATE")>  _
        Public Property BASEDATE() As nullable (of DateTimeOffset)
            Get
                return _BASEDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Base Date", value, "^.*$") then Exit Property
                _IsSetBASEDATE = True
                If loading Then
                  _BASEDATE = Value
                Else
                    if not _BASEDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BASEDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BASEDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Latest Linkage-mnths"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(60),  _
         twodBarcode("SUPPLYAPPOINTTERM2")>  _
        Public Property SUPPLYAPPOINTTERM2() As nullable (of int64)
            Get
                return _SUPPLYAPPOINTTERM2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Latest Linkage-mnths", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUPPLYAPPOINTTERM2 = True
                If loading Then
                  _SUPPLYAPPOINTTERM2 = Value
                Else
                    if not _SUPPLYAPPOINTTERM2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPPLYAPPOINTTERM2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPPLYAPPOINTTERM2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Linkage from Header"),  _
         nType("Edm.String"),  _
         tab("Curr"),  _
         Pos(70),  _
         twodBarcode("TERMFLAG")>  _
        Public Property TERMFLAG() As String
            Get
                return _TERMFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Linkage from Header", value, "^.{0,1}$") then Exit Property
                _IsSetTERMFLAG = True
                If loading Then
                  _TERMFLAG = Value
                Else
                    if not _TERMFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TERMFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TERMFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Currency (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Curr"),  _
         Pos(70),  _
         Browsable(false),  _
         twodBarcode("CURRENCY")>  _
        Public Property CURRENCY() As nullable (of int64)
            Get
                return _CURRENCY
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Currency (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCURRENCY = True
                If loading Then
                  _CURRENCY = Value
                Else
                    if not _CURRENCY = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURRENCY", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURRENCY = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetSHARE then
              if f then
                  jw.WriteRaw(", ""SHARE"": ")
              else
                  jw.WriteRaw("""SHARE"": ")
                  f = true
              end if
              jw.WriteValue(me.SHARE)
            end if
            if _IsSetBVALUE then
              if f then
                  jw.WriteRaw(", ""BVALUE"": ")
              else
                  jw.WriteRaw("""BVALUE"": ")
                  f = true
              end if
              jw.WriteValue(me.BVALUE)
            end if
            if _IsSetBASEDATE then
              if f then
                  jw.WriteRaw(", ""BASEDATE"": ")
              else
                  jw.WriteRaw("""BASEDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.BASEDATE)
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              if f then
                  jw.WriteRaw(", ""SUPPLYAPPOINTTERM2"": ")
              else
                  jw.WriteRaw("""SUPPLYAPPOINTTERM2"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPPLYAPPOINTTERM2)
            end if
            if _IsSetTERMFLAG then
              if f then
                  jw.WriteRaw(", ""TERMFLAG"": ")
              else
                  jw.WriteRaw("""TERMFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.TERMFLAG)
            end if
            if _IsSetCURRENCY then
              if f then
                  jw.WriteRaw(", ""CURRENCY"": ")
              else
                  jw.WriteRaw("""CURRENCY"": ")
                  f = true
              end if
              jw.WriteValue(me.CURRENCY)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "LINKING")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetSHARE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHARE")
              .WriteAttributeString("value", me.SHARE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetBVALUE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BVALUE")
              .WriteAttributeString("value", me.BVALUE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "6")
              .WriteAttributeString("Precision", "13")
              .WriteEndElement
            end if
            if _IsSetBASEDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BASEDATE")
              .WriteAttributeString("value", me.BASEDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetSUPPLYAPPOINTTERM2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPPLYAPPOINTTERM2")
              .WriteAttributeString("value", me.SUPPLYAPPOINTTERM2)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetTERMFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TERMFLAG")
              .WriteAttributeString("value", me.TERMFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCURRENCY then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURRENCY")
              .WriteAttributeString("value", me.CURRENCY)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as LINKING = JsonConvert.DeserializeObject(Of LINKING)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _SHARE = .SHARE
                  _BVALUE = .BVALUE
                  _BASEDATE = .BASEDATE
                  _SUPPLYAPPOINTTERM2 = .SUPPLYAPPOINTTERM2
                  _TERMFLAG = .TERMFLAG
                  _CURRENCY = .CURRENCY
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Attachments")>  _
    Public Class QUERY_EXTFILES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = nothing
            _Name = "EXTFILES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILES)
            _Parent = Parent
            _name = "EXTFILES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILES As EXTFILES In JsonConvert.DeserializeObject(Of QUERY_EXTFILES)(stream.ReadToEnd).Value
              With _EXTFILES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILES)
                  .EXTFILEDES = obj.EXTFILEDES
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXTFILENAME = obj.EXTFILENAME
                  .SUFFIX = obj.SUFFIX
                  .CURDATE = obj.CURDATE
                  .NOSEND = obj.NOSEND
                  .STATUS = obj.STATUS
                  .FILESIZE = obj.FILESIZE
                  .EI_COND = obj.EI_COND
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILES as EXTFILES in value
              If _EXTFILES.Equals(trycast(obj,EXTFILES)) Then
                  value.remove(_EXTFILES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _EXTFILENUM As Long
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _SUFFIX As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _FILESIZE As Long
        
        Private _IsSetEI_COND As Boolean = Boolean.FalseString
        
        Private _EI_COND As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILES"
                else
                    return "EXTFILES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "EXTFILENUM={0}", _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(10),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,32}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("File Creation Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Creation Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(50),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(55),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Send by DataExchange"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(99),  _
         twodBarcode("EI_COND")>  _
        Public Property EI_COND() As String
            Get
                return _EI_COND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Send by DataExchange", value, "^.{0,1}$") then Exit Property
                _IsSetEI_COND = True
                If loading Then
                  _EI_COND = Value
                Else
                    if not _EI_COND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EI_COND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EI_COND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Send by DataExchange"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Send by DataExchange"),  _
         Pos(130),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetEI_COND then
              if f then
                  jw.WriteRaw(", ""EI_COND"": ")
              else
                  jw.WriteRaw("""EI_COND"": ")
                  f = true
              end if
              jw.WriteValue(me.EI_COND)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetEI_COND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EI_COND")
              .WriteAttributeString("value", me.EI_COND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILES = JsonConvert.DeserializeObject(Of EXTFILES)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _EXTFILENUM = .EXTFILENUM
                  _EXTFILENAME = .EXTFILENAME
                  _SUFFIX = .SUFFIX
                  _CURDATE = .CURDATE
                  _NOSEND = .NOSEND
                  _STATUS = .STATUS
                  _FILESIZE = .FILESIZE
                  _EI_COND = .EI_COND
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_EXTFILES
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Projects/Accounts")>  _
    Public Class QUERY_PROJLINK
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PROJLINK)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = nothing
            _Name = "PROJLINK"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PROJLINK)
            _Parent = Parent
            _name = "PROJLINK_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PROJLINK)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PROJLINK)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PROJLINK As PROJLINK In JsonConvert.DeserializeObject(Of QUERY_PROJLINK)(stream.ReadToEnd).Value
              With _PROJLINK
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PROJLINK)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PROJLINK)
                  .DOCNO = obj.DOCNO
                  .PROJDES = obj.PROJDES
                  .ACCNAME = obj.ACCNAME
                  .ACCDES = obj.ACCDES
                  .WBS = obj.WBS
                  .PROJACT = obj.PROJACT
                  .ACTDES = obj.ACTDES
                  .RPROJACT = obj.RPROJACT
                  .EXECPERCENT = obj.EXECPERCENT
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PROJLINK(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PROJLINK as PROJLINK in value
              If _PROJLINK.Equals(trycast(obj,PROJLINK)) Then
                  value.remove(_PROJLINK)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PROJLINK
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetDOCNO As Boolean = Boolean.FalseString
        
        Private _DOCNO As String
        
        Private _PROJDES As String
        
        Private _IsSetACCNAME As Boolean = Boolean.FalseString
        
        Private _ACCNAME As String
        
        Private _ACCDES As String
        
        Private _IsSetWBS As Boolean = Boolean.FalseString
        
        Private _WBS As String
        
        Private _PROJACT As Long
        
        Private _ACTDES As String
        
        Private _RPROJACT As Long
        
        Private _IsSetEXECPERCENT As Boolean = Boolean.FalseString
        
        Private _EXECPERCENT As Decimal
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PROJLINK"
                else
                    return "PROJLINK_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Project Number"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(10),  _
         twodBarcode("DOCNO")>  _
        Public Property DOCNO() As String
            Get
                return _DOCNO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Project Number", value, "^.{0,16}$") then Exit Property
                _IsSetDOCNO = True
                If loading Then
                  _DOCNO = Value
                Else
                    if not _DOCNO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DOCNO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DOCNO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Project Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(12),  _
         [ReadOnly](true),  _
         twodBarcode("PROJDES")>  _
        Public Property PROJDES() As String
            Get
                return _PROJDES
            End Get
            Set
                if not(value is nothing) then
                  _PROJDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Account No."),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(14),  _
         twodBarcode("ACCNAME")>  _
        Public Property ACCNAME() As String
            Get
                return _ACCNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Account No.", value, "^.{0,16}$") then Exit Property
                _IsSetACCNAME = True
                If loading Then
                  _ACCNAME = Value
                Else
                    if not _ACCNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ACCNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ACCNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Account Description"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(16),  _
         [ReadOnly](true),  _
         twodBarcode("ACCDES")>  _
        Public Property ACCDES() As String
            Get
                return _ACCDES
            End Get
            Set
                if not(value is nothing) then
                  _ACCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("WBS Code"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(20),  _
         twodBarcode("WBS")>  _
        Public Property WBS() As String
            Get
                return _WBS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("WBS Code", value, "^.{0,24}$") then Exit Property
                _IsSetWBS = True
                If loading Then
                  _WBS = Value
                Else
                    if not _WBS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("WBS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _WBS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Activity ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(21),  _
         [ReadOnly](true),  _
         twodBarcode("PROJACT")>  _
        Public Property PROJACT() As nullable (of int64)
            Get
                return _PROJACT
            End Get
            Set
                if not(value is nothing) then
                  _PROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Name of Activity"),  _
         nType("Edm.String"),  _
         tab("Project Number"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("ACTDES")>  _
        Public Property ACTDES() As String
            Get
                return _ACTDES
            End Get
            Set
                if not(value is nothing) then
                  _ACTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("SOW ID"),  _
         nType("Edm.Int64"),  _
         tab("Project Number"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("RPROJACT")>  _
        Public Property RPROJACT() As nullable (of int64)
            Get
                return _RPROJACT
            End Get
            Set
                if not(value is nothing) then
                  _RPROJACT = Value
                end if
            End Set
        End Property
        
        <DisplayName("Percent Completed"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Percent Completed"),  _
         Pos(32),  _
         twodBarcode("EXECPERCENT")>  _
        Public Property EXECPERCENT() As nullable(of decimal)
            Get
                return _EXECPERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Percent Completed", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetEXECPERCENT = True
                If loading Then
                  _EXECPERCENT = Value
                Else
                    if not _EXECPERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXECPERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXECPERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Percent Completed"),  _
         Pos(80),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Percent Completed"),  _
         Pos(82),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDOCNO then
              if f then
                  jw.WriteRaw(", ""DOCNO"": ")
              else
                  jw.WriteRaw("""DOCNO"": ")
                  f = true
              end if
              jw.WriteValue(me.DOCNO)
            end if
            if _IsSetACCNAME then
              if f then
                  jw.WriteRaw(", ""ACCNAME"": ")
              else
                  jw.WriteRaw("""ACCNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ACCNAME)
            end if
            if _IsSetWBS then
              if f then
                  jw.WriteRaw(", ""WBS"": ")
              else
                  jw.WriteRaw("""WBS"": ")
                  f = true
              end if
              jw.WriteValue(me.WBS)
            end if
            if _IsSetEXECPERCENT then
              if f then
                  jw.WriteRaw(", ""EXECPERCENT"": ")
              else
                  jw.WriteRaw("""EXECPERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.EXECPERCENT)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PROJLINK")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
            if _IsSetDOCNO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DOCNO")
              .WriteAttributeString("value", me.DOCNO)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetACCNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ACCNAME")
              .WriteAttributeString("value", me.ACCNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetWBS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "WBS")
              .WriteAttributeString("value", me.WBS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
            if _IsSetEXECPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXECPERCENT")
              .WriteAttributeString("value", me.EXECPERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PROJLINK = JsonConvert.DeserializeObject(Of PROJLINK)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCNO = .DOCNO
                  _PROJDES = .PROJDES
                  _ACCNAME = .ACCNAME
                  _ACCDES = .ACCDES
                  _WBS = .WBS
                  _PROJACT = .PROJACT
                  _ACTDES = .ACTDES
                  _RPROJACT = .RPROJACT
                  _EXECPERCENT = .EXECPERCENT
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Purchase Orders - Remarks")>  _
    Public Class QUERY_PORDERSTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSTEXT)
            _Parent = nothing
            _Name = "PORDERSTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSTEXT)
            _Parent = Parent
            _name = "PORDERSTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSTEXT As PORDERSTEXT In JsonConvert.DeserializeObject(Of QUERY_PORDERSTEXT)(stream.ReadToEnd).Value
              With _PORDERSTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTEXT = JsonConvert.DeserializeObject(Of PORDERSTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSTEXT as PORDERSTEXT in value
              If _PORDERSTEXT.Equals(trycast(obj,PORDERSTEXT)) Then
                  value.remove(_PORDERSTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSTEXT"
                else
                    return "PORDERSTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSTEXT = JsonConvert.DeserializeObject(Of PORDERSTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Purchase Order - Vendor Details")>  _
    Public Class QUERY_PORDERSCONT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSCONT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSCONT)
            _Parent = nothing
            _Name = "PORDERSCONT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSCONT)
            _Parent = Parent
            _name = "PORDERSCONT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSCONT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSCONT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSCONT As PORDERSCONT In JsonConvert.DeserializeObject(Of QUERY_PORDERSCONT)(stream.ReadToEnd).Value
              With _PORDERSCONT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSCONT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSCONT = JsonConvert.DeserializeObject(Of PORDERSCONT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSCONT)
                  .CODE = obj.CODE
                  .ADRS = obj.ADRS
                  .ADRS2 = obj.ADRS2
                  .ADRS3 = obj.ADRS3
                  .STATEA = obj.STATEA
                  .STATENAME = obj.STATENAME
                  .STATE = obj.STATE
                  .COUNTRYNAME = obj.COUNTRYNAME
                  .ZIP = obj.ZIP
                  .PHONE = obj.PHONE
                  .FAX = obj.FAX
                  .EMAIL = obj.EMAIL
                  .IMPTERMNAME = obj.IMPTERMNAME
                  .PORTNAME = obj.PORTNAME
                  .PORTDES = obj.PORTDES
                  .ORIGCOUNTRYNAME = obj.ORIGCOUNTRYNAME
                  .SENDCOUNTRYNAME = obj.SENDCOUNTRYNAME
                  .TOPORTNAME = obj.TOPORTNAME
                  .TOPORTDES = obj.TOPORTDES
                  .SHIPPERNAME = obj.SHIPPERNAME
                  .SHIPPERDES = obj.SHIPPERDES
                  .LORRYNUM = obj.LORRYNUM
                  .VOLUME = obj.VOLUME
                  .UNITNAME = obj.UNITNAME
                  .SUPNAME = obj.SUPNAME
                  .SUPDES = obj.SUPDES
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .NSCUST = obj.NSCUST
                  .ORDNAME = obj.ORDNAME
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSCONT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSCONT as PORDERSCONT in value
              If _PORDERSCONT.Equals(trycast(obj,PORDERSCONT)) Then
                  value.remove(_PORDERSCONT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSCONT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCODE As Boolean = Boolean.FalseString
        
        Private _CODE As String
        
        Private _IsSetADRS As Boolean = Boolean.FalseString
        
        Private _ADRS As String
        
        Private _IsSetADRS2 As Boolean = Boolean.FalseString
        
        Private _ADRS2 As String
        
        Private _IsSetADRS3 As Boolean = Boolean.FalseString
        
        Private _ADRS3 As String
        
        Private _IsSetSTATEA As Boolean = Boolean.FalseString
        
        Private _STATEA As String
        
        Private _IsSetSTATENAME As Boolean = Boolean.FalseString
        
        Private _STATENAME As String
        
        Private _IsSetSTATE As Boolean = Boolean.FalseString
        
        Private _STATE As String
        
        Private _IsSetCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _COUNTRYNAME As String
        
        Private _IsSetZIP As Boolean = Boolean.FalseString
        
        Private _ZIP As String
        
        Private _IsSetPHONE As Boolean = Boolean.FalseString
        
        Private _PHONE As String
        
        Private _IsSetFAX As Boolean = Boolean.FalseString
        
        Private _FAX As String
        
        Private _IsSetEMAIL As Boolean = Boolean.FalseString
        
        Private _EMAIL As String
        
        Private _IsSetIMPTERMNAME As Boolean = Boolean.FalseString
        
        Private _IMPTERMNAME As String
        
        Private _IsSetPORTNAME As Boolean = Boolean.FalseString
        
        Private _PORTNAME As String
        
        Private _PORTDES As String
        
        Private _IsSetORIGCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _ORIGCOUNTRYNAME As String
        
        Private _IsSetSENDCOUNTRYNAME As Boolean = Boolean.FalseString
        
        Private _SENDCOUNTRYNAME As String
        
        Private _IsSetTOPORTNAME As Boolean = Boolean.FalseString
        
        Private _TOPORTNAME As String
        
        Private _IsSetTOPORTDES As Boolean = Boolean.FalseString
        
        Private _TOPORTDES As String
        
        Private _IsSetSHIPPERNAME As Boolean = Boolean.FalseString
        
        Private _SHIPPERNAME As String
        
        Private _SHIPPERDES As String
        
        Private _IsSetLORRYNUM As Boolean = Boolean.FalseString
        
        Private _LORRYNUM As String
        
        Private _VOLUME As Decimal
        
        Private _UNITNAME As String
        
        Private _IsSetSUPNAME As Boolean = Boolean.FalseString
        
        Private _SUPNAME As String
        
        Private _SUPDES As String
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _IsSetNSCUST As Boolean = Boolean.FalseString
        
        Private _NSCUST As Long
        
        Private _IsSetORDNAME As Boolean = Boolean.FalseString
        
        Private _ORDNAME As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSCONT"
                else
                    return "PORDERSCONT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "ORDNAME={0}", _
                  string.format("'{0}'",ORDNAME) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Site"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(5),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Site", value, "^.{0,4}$") then Exit Property
                _IsSetCODE = True
                If loading Then
                  _CODE = Value
                Else
                    if not _CODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Street Address"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(10),  _
         twodBarcode("ADRS")>  _
        Public Property ADRS() As String
            Get
                return _ADRS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Street Address", value, "^.{0,80}$") then Exit Property
                _IsSetADRS = True
                If loading Then
                  _ADRS = Value
                Else
                    if not _ADRS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 2)"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(11),  _
         twodBarcode("ADRS2")>  _
        Public Property ADRS2() As String
            Get
                return _ADRS2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 2)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS2 = True
                If loading Then
                  _ADRS2 = Value
                Else
                    if not _ADRS2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Address (Line 3)"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(12),  _
         twodBarcode("ADRS3")>  _
        Public Property ADRS3() As String
            Get
                return _ADRS3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Address (Line 3)", value, "^.{0,80}$") then Exit Property
                _IsSetADRS3 = True
                If loading Then
                  _ADRS3 = Value
                Else
                    if not _ADRS3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ADRS3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ADRS3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(16),  _
         twodBarcode("STATEA")>  _
        Public Property STATEA() As String
            Get
                return _STATEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City", value, "^.{0,40}$") then Exit Property
                _IsSetSTATEA = True
                If loading Then
                  _STATEA = Value
                Else
                    if not _STATEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("State"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(18),  _
         twodBarcode("STATENAME")>  _
        Public Property STATENAME() As String
            Get
                return _STATENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATENAME = True
                If loading Then
                  _STATENAME = Value
                Else
                    if not _STATENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("City/State"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(20),  _
         twodBarcode("STATE")>  _
        Public Property STATE() As String
            Get
                return _STATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("City/State", value, "^.{0,40}$") then Exit Property
                _IsSetSTATE = True
                If loading Then
                  _STATE = Value
                Else
                    if not _STATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country"),  _
         nType("Edm.String"),  _
         tab("Site"),  _
         Pos(25),  _
         twodBarcode("COUNTRYNAME")>  _
        Public Property COUNTRYNAME() As String
            Get
                return _COUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country", value, "^.{0,18}$") then Exit Property
                _IsSetCOUNTRYNAME = True
                If loading Then
                  _COUNTRYNAME = Value
                Else
                    if not _COUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("COUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _COUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Zip Code"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(30),  _
         twodBarcode("ZIP")>  _
        Public Property ZIP() As String
            Get
                return _ZIP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Zip Code", value, "^.{0,10}$") then Exit Property
                _IsSetZIP = True
                If loading Then
                  _ZIP = Value
                Else
                    if not _ZIP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ZIP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ZIP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(40),  _
         twodBarcode("PHONE")>  _
        Public Property PHONE() As String
            Get
                return _PHONE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Phone Number", value, "^.{0,20}$") then Exit Property
                _IsSetPHONE = True
                If loading Then
                  _PHONE = Value
                Else
                    if not _PHONE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PHONE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PHONE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Fax Number"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(50),  _
         twodBarcode("FAX")>  _
        Public Property FAX() As String
            Get
                return _FAX
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Fax Number", value, "^.{0,20}$") then Exit Property
                _IsSetFAX = True
                If loading Then
                  _FAX = Value
                Else
                    if not _FAX = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FAX", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FAX = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(60),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("E-mail Address", value, "^.{0,48}$") then Exit Property
                _IsSetEMAIL = True
                If loading Then
                  _EMAIL = Value
                Else
                    if not _EMAIL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EMAIL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EMAIL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Terms of Delivery"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(65),  _
         twodBarcode("IMPTERMNAME")>  _
        Public Property IMPTERMNAME() As String
            Get
                return _IMPTERMNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Terms of Delivery", value, "^.{0,4}$") then Exit Property
                _IsSetIMPTERMNAME = True
                If loading Then
                  _IMPTERMNAME = Value
                Else
                    if not _IMPTERMNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("IMPTERMNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _IMPTERMNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Port of Origin-Code"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(70),  _
         twodBarcode("PORTNAME")>  _
        Public Property PORTNAME() As String
            Get
                return _PORTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Port of Origin-Code", value, "^.{0,3}$") then Exit Property
                _IsSetPORTNAME = True
                If loading Then
                  _PORTNAME = Value
                Else
                    if not _PORTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PORTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PORTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name of Port"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(75),  _
         [ReadOnly](true),  _
         twodBarcode("PORTDES")>  _
        Public Property PORTDES() As String
            Get
                return _PORTDES
            End Get
            Set
                if not(value is nothing) then
                  _PORTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Country of Origin"),  _
         nType("Edm.String"),  _
         tab("Zip Code"),  _
         Pos(77),  _
         twodBarcode("ORIGCOUNTRYNAME")>  _
        Public Property ORIGCOUNTRYNAME() As String
            Get
                return _ORIGCOUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country of Origin", value, "^.{0,18}$") then Exit Property
                _IsSetORIGCOUNTRYNAME = True
                If loading Then
                  _ORIGCOUNTRYNAME = Value
                Else
                    if not _ORIGCOUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORIGCOUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORIGCOUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Country of Consignmt"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(78),  _
         twodBarcode("SENDCOUNTRYNAME")>  _
        Public Property SENDCOUNTRYNAME() As String
            Get
                return _SENDCOUNTRYNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Country of Consignmt", value, "^.{0,18}$") then Exit Property
                _IsSetSENDCOUNTRYNAME = True
                If loading Then
                  _SENDCOUNTRYNAME = Value
                Else
                    if not _SENDCOUNTRYNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SENDCOUNTRYNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SENDCOUNTRYNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Port of Destin.-Code"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(80),  _
         twodBarcode("TOPORTNAME")>  _
        Public Property TOPORTNAME() As String
            Get
                return _TOPORTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Port of Destin.-Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPORTNAME = True
                If loading Then
                  _TOPORTNAME = Value
                Else
                    if not _TOPORTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPORTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPORTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Name of Port (Dest.)"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(85),  _
         twodBarcode("TOPORTDES")>  _
        Public Property TOPORTDES() As String
            Get
                return _TOPORTDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Name of Port (Dest.)", value, "^.{0,16}$") then Exit Property
                _IsSetTOPORTDES = True
                If loading Then
                  _TOPORTDES = Value
                Else
                    if not _TOPORTDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPORTDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPORTDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipper/Driver No."),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(90),  _
         twodBarcode("SHIPPERNAME")>  _
        Public Property SHIPPERNAME() As String
            Get
                return _SHIPPERNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Shipper/Driver No.", value, "^.{0,8}$") then Exit Property
                _IsSetSHIPPERNAME = True
                If loading Then
                  _SHIPPERNAME = Value
                Else
                    if not _SHIPPERNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SHIPPERNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SHIPPERNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Shipper/Driver Name"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("SHIPPERDES")>  _
        Public Property SHIPPERDES() As String
            Get
                return _SHIPPERDES
            End Get
            Set
                if not(value is nothing) then
                  _SHIPPERDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Transport ID"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(101),  _
         twodBarcode("LORRYNUM")>  _
        Public Property LORRYNUM() As String
            Get
                return _LORRYNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Transport ID", value, "^.{0,12}$") then Exit Property
                _IsSetLORRYNUM = True
                If loading Then
                  _LORRYNUM = Value
                Else
                    if not _LORRYNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LORRYNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LORRYNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Volume"),  _
         nType("Edm.Decimal"),  _
         Scale(4),  _
         Precision(16),  _
         tab("Country of Consignmt"),  _
         Pos(103),  _
         [ReadOnly](true),  _
         twodBarcode("VOLUME")>  _
        Public Property VOLUME() As nullable(of decimal)
            Get
                return _VOLUME
            End Get
            Set
                if not(value is nothing) then
                  _VOLUME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Unit of Volume"),  _
         nType("Edm.String"),  _
         tab("Country of Consignmt"),  _
         Pos(105),  _
         [ReadOnly](true),  _
         twodBarcode("UNITNAME")>  _
        Public Property UNITNAME() As String
            Get
                return _UNITNAME
            End Get
            Set
                if not(value is nothing) then
                  _UNITNAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Subcontr to Charge"),  _
         nType("Edm.String"),  _
         tab("Subcontr to Charge"),  _
         Pos(110),  _
         twodBarcode("SUPNAME")>  _
        Public Property SUPNAME() As String
            Get
                return _SUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subcontr to Charge", value, "^.{0,16}$") then Exit Property
                _IsSetSUPNAME = True
                If loading Then
                  _SUPNAME = Value
                Else
                    if not _SUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Name"),  _
         nType("Edm.String"),  _
         tab("Subcontr to Charge"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("SUPDES")>  _
        Public Property SUPDES() As String
            Get
                return _SUPDES
            End Get
            Set
                if not(value is nothing) then
                  _SUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Subcontr to Charge"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Subcontr to Charge"),  _
         Pos(210),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Order (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Subcontr to Charge"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("NSCUST")>  _
        Public Property NSCUST() As nullable (of int64)
            Get
                return _NSCUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetNSCUST = True
                If loading Then
                  _NSCUST = Value
                Else
                    if not _NSCUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NSCUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NSCUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Order"),  _
         nType("Edm.String"),  _
         tab("Subcontr to Charge"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("ORDNAME")>  _
        Public Property ORDNAME() As String
            Get
                return _ORDNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Order", value, "^.{0,16}$") then Exit Property
                _IsSetORDNAME = True
                If loading Then
                  _ORDNAME = Value
                Else
                    if not _ORDNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ORDNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ORDNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCODE then
              if f then
                  jw.WriteRaw(", ""CODE"": ")
              else
                  jw.WriteRaw("""CODE"": ")
                  f = true
              end if
              jw.WriteValue(me.CODE)
            end if
            if _IsSetADRS then
              if f then
                  jw.WriteRaw(", ""ADRS"": ")
              else
                  jw.WriteRaw("""ADRS"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS)
            end if
            if _IsSetADRS2 then
              if f then
                  jw.WriteRaw(", ""ADRS2"": ")
              else
                  jw.WriteRaw("""ADRS2"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS2)
            end if
            if _IsSetADRS3 then
              if f then
                  jw.WriteRaw(", ""ADRS3"": ")
              else
                  jw.WriteRaw("""ADRS3"": ")
                  f = true
              end if
              jw.WriteValue(me.ADRS3)
            end if
            if _IsSetSTATEA then
              if f then
                  jw.WriteRaw(", ""STATEA"": ")
              else
                  jw.WriteRaw("""STATEA"": ")
                  f = true
              end if
              jw.WriteValue(me.STATEA)
            end if
            if _IsSetSTATENAME then
              if f then
                  jw.WriteRaw(", ""STATENAME"": ")
              else
                  jw.WriteRaw("""STATENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.STATENAME)
            end if
            if _IsSetSTATE then
              if f then
                  jw.WriteRaw(", ""STATE"": ")
              else
                  jw.WriteRaw("""STATE"": ")
                  f = true
              end if
              jw.WriteValue(me.STATE)
            end if
            if _IsSetCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""COUNTRYNAME"": ")
              else
                  jw.WriteRaw("""COUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.COUNTRYNAME)
            end if
            if _IsSetZIP then
              if f then
                  jw.WriteRaw(", ""ZIP"": ")
              else
                  jw.WriteRaw("""ZIP"": ")
                  f = true
              end if
              jw.WriteValue(me.ZIP)
            end if
            if _IsSetPHONE then
              if f then
                  jw.WriteRaw(", ""PHONE"": ")
              else
                  jw.WriteRaw("""PHONE"": ")
                  f = true
              end if
              jw.WriteValue(me.PHONE)
            end if
            if _IsSetFAX then
              if f then
                  jw.WriteRaw(", ""FAX"": ")
              else
                  jw.WriteRaw("""FAX"": ")
                  f = true
              end if
              jw.WriteValue(me.FAX)
            end if
            if _IsSetEMAIL then
              if f then
                  jw.WriteRaw(", ""EMAIL"": ")
              else
                  jw.WriteRaw("""EMAIL"": ")
                  f = true
              end if
              jw.WriteValue(me.EMAIL)
            end if
            if _IsSetIMPTERMNAME then
              if f then
                  jw.WriteRaw(", ""IMPTERMNAME"": ")
              else
                  jw.WriteRaw("""IMPTERMNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.IMPTERMNAME)
            end if
            if _IsSetPORTNAME then
              if f then
                  jw.WriteRaw(", ""PORTNAME"": ")
              else
                  jw.WriteRaw("""PORTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.PORTNAME)
            end if
            if _IsSetORIGCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""ORIGCOUNTRYNAME"": ")
              else
                  jw.WriteRaw("""ORIGCOUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORIGCOUNTRYNAME)
            end if
            if _IsSetSENDCOUNTRYNAME then
              if f then
                  jw.WriteRaw(", ""SENDCOUNTRYNAME"": ")
              else
                  jw.WriteRaw("""SENDCOUNTRYNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SENDCOUNTRYNAME)
            end if
            if _IsSetTOPORTNAME then
              if f then
                  jw.WriteRaw(", ""TOPORTNAME"": ")
              else
                  jw.WriteRaw("""TOPORTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPORTNAME)
            end if
            if _IsSetTOPORTDES then
              if f then
                  jw.WriteRaw(", ""TOPORTDES"": ")
              else
                  jw.WriteRaw("""TOPORTDES"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPORTDES)
            end if
            if _IsSetSHIPPERNAME then
              if f then
                  jw.WriteRaw(", ""SHIPPERNAME"": ")
              else
                  jw.WriteRaw("""SHIPPERNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SHIPPERNAME)
            end if
            if _IsSetLORRYNUM then
              if f then
                  jw.WriteRaw(", ""LORRYNUM"": ")
              else
                  jw.WriteRaw("""LORRYNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.LORRYNUM)
            end if
            if _IsSetSUPNAME then
              if f then
                  jw.WriteRaw(", ""SUPNAME"": ")
              else
                  jw.WriteRaw("""SUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SUPNAME)
            end if
            if _IsSetNSCUST then
              if f then
                  jw.WriteRaw(", ""NSCUST"": ")
              else
                  jw.WriteRaw("""NSCUST"": ")
                  f = true
              end if
              jw.WriteValue(me.NSCUST)
            end if
            if _IsSetORDNAME then
              if f then
                  jw.WriteRaw(", ""ORDNAME"": ")
              else
                  jw.WriteRaw("""ORDNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.ORDNAME)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSCONT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            if _IsSetCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CODE")
              .WriteAttributeString("value", me.CODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetADRS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS")
              .WriteAttributeString("value", me.ADRS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS2")
              .WriteAttributeString("value", me.ADRS2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetADRS3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ADRS3")
              .WriteAttributeString("value", me.ADRS3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATEA")
              .WriteAttributeString("value", me.STATEA)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATENAME")
              .WriteAttributeString("value", me.STATENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetSTATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATE")
              .WriteAttributeString("value", me.STATE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "40")
              .WriteEndElement
            end if
            if _IsSetCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "COUNTRYNAME")
              .WriteAttributeString("value", me.COUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetZIP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ZIP")
              .WriteAttributeString("value", me.ZIP)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetPHONE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PHONE")
              .WriteAttributeString("value", me.PHONE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetFAX then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FAX")
              .WriteAttributeString("value", me.FAX)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetEMAIL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EMAIL")
              .WriteAttributeString("value", me.EMAIL)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _IsSetIMPTERMNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "IMPTERMNAME")
              .WriteAttributeString("value", me.IMPTERMNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPORTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PORTNAME")
              .WriteAttributeString("value", me.PORTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetORIGCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORIGCOUNTRYNAME")
              .WriteAttributeString("value", me.ORIGCOUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetSENDCOUNTRYNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SENDCOUNTRYNAME")
              .WriteAttributeString("value", me.SENDCOUNTRYNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "18")
              .WriteEndElement
            end if
            if _IsSetTOPORTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPORTNAME")
              .WriteAttributeString("value", me.TOPORTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetTOPORTDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPORTDES")
              .WriteAttributeString("value", me.TOPORTDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetSHIPPERNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SHIPPERNAME")
              .WriteAttributeString("value", me.SHIPPERNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetLORRYNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LORRYNUM")
              .WriteAttributeString("value", me.LORRYNUM)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetSUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUPNAME")
              .WriteAttributeString("value", me.SUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetNSCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NSCUST")
              .WriteAttributeString("value", me.NSCUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetORDNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ORDNAME")
              .WriteAttributeString("value", me.ORDNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSCONT = JsonConvert.DeserializeObject(Of PORDERSCONT)(e.StreamReader.ReadToEnd)
                With obj
                  _CODE = .CODE
                  _ADRS = .ADRS
                  _ADRS2 = .ADRS2
                  _ADRS3 = .ADRS3
                  _STATEA = .STATEA
                  _STATENAME = .STATENAME
                  _STATE = .STATE
                  _COUNTRYNAME = .COUNTRYNAME
                  _ZIP = .ZIP
                  _PHONE = .PHONE
                  _FAX = .FAX
                  _EMAIL = .EMAIL
                  _IMPTERMNAME = .IMPTERMNAME
                  _PORTNAME = .PORTNAME
                  _PORTDES = .PORTDES
                  _ORIGCOUNTRYNAME = .ORIGCOUNTRYNAME
                  _SENDCOUNTRYNAME = .SENDCOUNTRYNAME
                  _TOPORTNAME = .TOPORTNAME
                  _TOPORTDES = .TOPORTDES
                  _SHIPPERNAME = .SHIPPERNAME
                  _SHIPPERDES = .SHIPPERDES
                  _LORRYNUM = .LORRYNUM
                  _VOLUME = .VOLUME
                  _UNITNAME = .UNITNAME
                  _SUPNAME = .SUPNAME
                  _SUPDES = .SUPDES
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _NSCUST = .NSCUST
                  _ORDNAME = .ORDNAME
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Remarks for PO")>  _
    Public Class QUERY_PORDERSREMARKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDERSREMARKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDERSREMARKS)
            _Parent = nothing
            _Name = "PORDERSREMARKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDERSREMARKS)
            _Parent = Parent
            _name = "PORDERSREMARKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDERSREMARKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDERSREMARKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDERSREMARKS As PORDERSREMARKS In JsonConvert.DeserializeObject(Of QUERY_PORDERSREMARKS)(stream.ReadToEnd).Value
              With _PORDERSREMARKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDERSREMARKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSREMARKS = JsonConvert.DeserializeObject(Of PORDERSREMARKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDERSREMARKS)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDERSREMARKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDERSREMARKS as PORDERSREMARKS in value
              If _PORDERSREMARKS.Equals(trycast(obj,PORDERSREMARKS)) Then
                  value.remove(_PORDERSREMARKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDERSREMARKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDERSREMARKS"
                else
                    return "PORDERSREMARKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDERSREMARKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDERSREMARKS = JsonConvert.DeserializeObject(Of PORDERSREMARKS)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Tasks for Document")>  _
    Public Class QUERY_GENCUSTNOTES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of GENCUSTNOTES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = nothing
            _Name = "GENCUSTNOTES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of GENCUSTNOTES)
            _Parent = Parent
            _name = "GENCUSTNOTES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Notes")
            .add(1, "Responses to Questions")
            .add(2, "Respondent's Remarks")
            .add(3, "Customer Documents for Task")
            .add(4, "Vendor Documents for Task")
            .add(5, "To Do Item")
            .add(6, "History of Statuses")
            .add(7, "Electronic Signature")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of GENCUSTNOTES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(GENCUSTNOTES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _GENCUSTNOTES As GENCUSTNOTES In JsonConvert.DeserializeObject(Of QUERY_GENCUSTNOTES)(stream.ReadToEnd).Value
              With _GENCUSTNOTES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_GENCUSTNOTES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, GENCUSTNOTES)
                  .CURDATE = obj.CURDATE
                  .USERLOGIN = obj.USERLOGIN
                  .DAY = obj.DAY
                  .STIME = obj.STIME
                  .TILLDATE = obj.TILLDATE
                  .TILLDAY = obj.TILLDAY
                  .ETIME = obj.ETIME
                  .PLANNEDTIME = obj.PLANNEDTIME
                  .STATDES = obj.STATDES
                  .CLOSED = obj.CLOSED
                  .SUBJECT = obj.SUBJECT
                  .CUSTNOTE = obj.CUSTNOTE
                  .CUSTNAME = obj.CUSTNAME
                  .CUSTDES = obj.CUSTDES
                  .DCODE = obj.DCODE
                  .CODEDES = obj.CODEDES
                  .PRIO = obj.PRIO
                  .NAME = obj.NAME
                  .PHONENUM = obj.PHONENUM
                  .CELLPHONE = obj.CELLPHONE
                  .EMAIL = obj.EMAIL
                  .SNAME = obj.SNAME
                  .SPHONENUM = obj.SPHONENUM
                  .SCELLPHONE = obj.SCELLPHONE
                  .EMAIL2 = obj.EMAIL2
                  .TOPICCODE = obj.TOPICCODE
                  .TOPICDES = obj.TOPICDES
                  .CUSTNOTETYPEDES = obj.CUSTNOTETYPEDES
                  .REMINDFLAG = obj.REMINDFLAG
                  .REMINDTIME = obj.REMINDTIME
                  .USERLOGIN2 = obj.USERLOGIN2
                  .USERLOGIN3 = obj.USERLOGIN3
                  .GROUPNAME = obj.GROUPNAME
                  .GROUPNAME2 = obj.GROUPNAME2
                  .GROUPNAME3 = obj.GROUPNAME3
                  .RESOURCENAME = obj.RESOURCENAME
                  .RESOURCENAME2 = obj.RESOURCENAME2
                  .RESOURCENAME3 = obj.RESOURCENAME3
                  .REMARK = obj.REMARK
                  .PREVCUSTNOTEA = obj.PREVCUSTNOTEA
                  .QUESTFCODE = obj.QUESTFCODE
                  .QUESTFDES = obj.QUESTFDES
                  .BRANCHNAME = obj.BRANCHNAME
                  .BRANCHDES = obj.BRANCHDES
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new GENCUSTNOTES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _GENCUSTNOTES as GENCUSTNOTES in value
              If _GENCUSTNOTES.Equals(trycast(obj,GENCUSTNOTES)) Then
                  value.remove(_GENCUSTNOTES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class GENCUSTNOTES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetUSERLOGIN As Boolean = Boolean.FalseString
        
        Private _USERLOGIN As String
        
        Private _DAY As String
        
        Private _IsSetSTIME As Boolean = Boolean.FalseString
        
        Private _STIME As String
        
        Private _IsSetTILLDATE As Boolean = Boolean.FalseString
        
        Private _TILLDATE As System.DateTimeOffset
        
        Private _TILLDAY As String
        
        Private _IsSetETIME As Boolean = Boolean.FalseString
        
        Private _ETIME As String
        
        Private _IsSetPLANNEDTIME As Boolean = Boolean.FalseString
        
        Private _PLANNEDTIME As String
        
        Private _IsSetSTATDES As Boolean = Boolean.FalseString
        
        Private _STATDES As String
        
        Private _IsSetCLOSED As Boolean = Boolean.FalseString
        
        Private _CLOSED As String
        
        Private _IsSetSUBJECT As Boolean = Boolean.FalseString
        
        Private _SUBJECT As String
        
        Private _CUSTNOTE As Long
        
        Private _IsSetCUSTNAME As Boolean = Boolean.FalseString
        
        Private _CUSTNAME As String
        
        Private _CUSTDES As String
        
        Private _IsSetDCODE As Boolean = Boolean.FalseString
        
        Private _DCODE As String
        
        Private _CODEDES As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetNAME As Boolean = Boolean.FalseString
        
        Private _NAME As String
        
        Private _PHONENUM As String
        
        Private _CELLPHONE As String
        
        Private _EMAIL As String
        
        Private _IsSetSNAME As Boolean = Boolean.FalseString
        
        Private _SNAME As String
        
        Private _SPHONENUM As String
        
        Private _SCELLPHONE As String
        
        Private _EMAIL2 As String
        
        Private _IsSetTOPICCODE As Boolean = Boolean.FalseString
        
        Private _TOPICCODE As String
        
        Private _TOPICDES As String
        
        Private _IsSetCUSTNOTETYPEDES As Boolean = Boolean.FalseString
        
        Private _CUSTNOTETYPEDES As String
        
        Private _IsSetREMINDFLAG As Boolean = Boolean.FalseString
        
        Private _REMINDFLAG As String
        
        Private _IsSetREMINDTIME As Boolean = Boolean.FalseString
        
        Private _REMINDTIME As String
        
        Private _IsSetUSERLOGIN2 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN2 As String
        
        Private _IsSetUSERLOGIN3 As Boolean = Boolean.FalseString
        
        Private _USERLOGIN3 As String
        
        Private _IsSetGROUPNAME As Boolean = Boolean.FalseString
        
        Private _GROUPNAME As String
        
        Private _IsSetGROUPNAME2 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME2 As String
        
        Private _IsSetGROUPNAME3 As Boolean = Boolean.FalseString
        
        Private _GROUPNAME3 As String
        
        Private _IsSetRESOURCENAME As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME As String
        
        Private _IsSetRESOURCENAME2 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME2 As String
        
        Private _IsSetRESOURCENAME3 As Boolean = Boolean.FalseString
        
        Private _RESOURCENAME3 As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _IsSetPREVCUSTNOTEA As Boolean = Boolean.FalseString
        
        Private _PREVCUSTNOTEA As Long
        
        Private _IsSetQUESTFCODE As Boolean = Boolean.FalseString
        
        Private _QUESTFCODE As String
        
        Private _QUESTFDES As String
        
        Private _IsSetBRANCHNAME As Boolean = Boolean.FalseString
        
        Private _BRANCHNAME As String
        
        Private _BRANCHDES As String
        
        Private _CUSTNOTESTEXT_SUBFORM As QUERY_CUSTNOTESTEXT
        
        Private _CUSTNQUESTLINES_SUBFORM As QUERY_CUSTNQUESTLINES
        
        Private _CUSTNQUESTTEXT_SUBFORM As QUERY_CUSTNQUESTTEXT
        
        Private _CUSTNOTEEXTFILE_SUBFORM As QUERY_CUSTNOTEEXTFILE
        
        Private _SUPNOTEEXTFILE_SUBFORM As QUERY_SUPNOTEEXTFILE
        
        Private _DOCTODOLIST_SUBFORM As QUERY_DOCTODOLIST
        
        Private _DOCTODOLISTLOG_SUBFORM As QUERY_DOCTODOLISTLOG
        
        Private _CUSTNOTESIGN_SUBFORM As QUERY_CUSTNOTESIGN
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Notes"))
            ChildQuery.add(1, new oNavigation("Responses to Questions"))
            ChildQuery.add(2, new oNavigation("Respondent's Remarks"))
            ChildQuery.add(3, new oNavigation("Customer Documents for Task"))
            ChildQuery.add(4, new oNavigation("Vendor Documents for Task"))
            ChildQuery.add(5, new oNavigation("To Do Item"))
            ChildQuery.add(6, new oNavigation("History of Statuses"))
            ChildQuery.add(7, new oNavigation("Electronic Signature"))
            _CUSTNOTESTEXT_SUBFORM = new QUERY_CUSTNOTESTEXT(me)
            _CUSTNQUESTLINES_SUBFORM = new QUERY_CUSTNQUESTLINES(me)
            _CUSTNQUESTTEXT_SUBFORM = new QUERY_CUSTNQUESTTEXT(me)
            _CUSTNOTEEXTFILE_SUBFORM = new QUERY_CUSTNOTEEXTFILE(me)
            _SUPNOTEEXTFILE_SUBFORM = new QUERY_SUPNOTEEXTFILE(me)
            _DOCTODOLIST_SUBFORM = new QUERY_DOCTODOLIST(me)
            _DOCTODOLISTLOG_SUBFORM = new QUERY_DOCTODOLISTLOG(me)
            _CUSTNOTESIGN_SUBFORM = new QUERY_CUSTNOTESIGN(me)
            WITH ChildQuery(0)
               .setoDataQuery(_CUSTNOTESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(1)
               .setoDataQuery(_CUSTNQUESTLINES_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(2)
               .setoDataQuery(_CUSTNQUESTTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(3)
               .setoDataQuery(_CUSTNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(4)
               .setoDataQuery(_SUPNOTEEXTFILE_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(5)
               .setoDataQuery(_DOCTODOLIST_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(6)
               .setoDataQuery(_DOCTODOLISTLOG_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
            WITH ChildQuery(7)
               .setoDataQuery(_CUSTNOTESIGN_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Notes", _CUSTNOTESTEXT_SUBFORM))
                   .add(1, new oNavigation("Responses to Questions", _CUSTNQUESTLINES_SUBFORM))
                   .add(2, new oNavigation("Respondent's Remarks", _CUSTNQUESTTEXT_SUBFORM))
                   .add(3, new oNavigation("Customer Documents for Task", _CUSTNOTEEXTFILE_SUBFORM))
                   .add(4, new oNavigation("Vendor Documents for Task", _SUPNOTEEXTFILE_SUBFORM))
                   .add(5, new oNavigation("To Do Item", _DOCTODOLIST_SUBFORM))
                   .add(6, new oNavigation("History of Statuses", _DOCTODOLISTLOG_SUBFORM))
                   .add(7, new oNavigation("Electronic Signature", _CUSTNOTESIGN_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "GENCUSTNOTES"
                else
                    return "GENCUSTNOTES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUSTNOTE={0}", _
                  string.format("{0}",CUSTNOTE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(2),  _
         Mandatory(true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Assigned to", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN = True
                If loading Then
                  _USERLOGIN = Value
                Else
                    if not _USERLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("DAY")>  _
        Public Property DAY() As String
            Get
                return _DAY
            End Get
            Set
                if not(value is nothing) then
                  _DAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("Start Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(10),  _
         twodBarcode("STIME")>  _
        Public Property STIME() As String
            Get
                return _STIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Time", value, "^.{0,5}$") then Exit Property
                _IsSetSTIME = True
                If loading Then
                  _STIME = Value
                Else
                    if not _STIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("End Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(12),  _
         twodBarcode("TILLDATE")>  _
        Public Property TILLDATE() As nullable (of DateTimeOffset)
            Get
                return _TILLDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Date", value, "^.*$") then Exit Property
                _IsSetTILLDATE = True
                If loading Then
                  _TILLDATE = Value
                Else
                    if not _TILLDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TILLDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TILLDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("To Day"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(14),  _
         [ReadOnly](true),  _
         twodBarcode("TILLDAY")>  _
        Public Property TILLDAY() As String
            Get
                return _TILLDAY
            End Get
            Set
                if not(value is nothing) then
                  _TILLDAY = Value
                end if
            End Set
        End Property
        
        <DisplayName("End Time"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(16),  _
         twodBarcode("ETIME")>  _
        Public Property ETIME() As String
            Get
                return _ETIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("End Time", value, "^.{0,5}$") then Exit Property
                _IsSetETIME = True
                If loading Then
                  _ETIME = Value
                Else
                    if not _ETIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ETIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ETIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Appointment Duration"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(17),  _
         twodBarcode("PLANNEDTIME")>  _
        Public Property PLANNEDTIME() As String
            Get
                return _PLANNEDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Appointment Duration", value, "^.{0,6}$") then Exit Property
                _IsSetPLANNEDTIME = True
                If loading Then
                  _PLANNEDTIME = Value
                Else
                    if not _PLANNEDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(18),  _
         Mandatory(true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Status", value, "^.{0,12}$") then Exit Property
                _IsSetSTATDES = True
                If loading Then
                  _STATDES = Value
                Else
                    if not _STATDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Done?"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("CLOSED")>  _
        Public Property CLOSED() As String
            Get
                return _CLOSED
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Done?", value, "^.{0,1}$") then Exit Property
                _IsSetCLOSED = True
                If loading Then
                  _CLOSED = Value
                Else
                    if not _CLOSED = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CLOSED", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CLOSED = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Subject"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(20),  _
         twodBarcode("SUBJECT")>  _
        Public Property SUBJECT() As String
            Get
                return _SUBJECT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Subject", value, "^.{0,52}$") then Exit Property
                _IsSetSUBJECT = True
                If loading Then
                  _SUBJECT = Value
                Else
                    if not _SUBJECT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUBJECT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUBJECT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Number"),  _
         nType("Edm.Int64"),  _
         tab("Status"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTNOTE")>  _
        Public Property CUSTNOTE() As nullable (of int64)
            Get
                return _CUSTNOTE
            End Get
            Set
                if not(value is nothing) then
                  _CUSTNOTE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Number"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(25),  _
         twodBarcode("CUSTNAME")>  _
        Public Property CUSTNAME() As String
            Get
                return _CUSTNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Number", value, "^.{0,16}$") then Exit Property
                _IsSetCUSTNAME = True
                If loading Then
                  _CUSTNAME = Value
                Else
                    if not _CUSTNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Customer Name"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("CUSTDES")>  _
        Public Property CUSTDES() As String
            Get
                return _CUSTDES
            End Get
            Set
                if not(value is nothing) then
                  _CUSTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer Site"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(31),  _
         twodBarcode("DCODE")>  _
        Public Property DCODE() As String
            Get
                return _DCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer Site", value, "^.{0,4}$") then Exit Property
                _IsSetDCODE = True
                If loading Then
                  _DCODE = Value
                Else
                    if not _DCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Site Description"),  _
         nType("Edm.String"),  _
         tab("Status"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("CODEDES")>  _
        Public Property CODEDES() As String
            Get
                return _CODEDES
            End Get
            Set
                if not(value is nothing) then
                  _CODEDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Priority"),  _
         Pos(33),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(34),  _
         twodBarcode("NAME")>  _
        Public Property NAME() As String
            Get
                return _NAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Contact", value, "^.{0,37}$") then Exit Property
                _IsSetNAME = True
                If loading Then
                  _NAME = Value
                Else
                    if not _NAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Phone Number"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(36),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENUM")>  _
        Public Property PHONENUM() As String
            Get
                return _PHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _PHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Cell Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(37),  _
         [ReadOnly](true),  _
         twodBarcode("CELLPHONE")>  _
        Public Property CELLPHONE() As String
            Get
                return _CELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _CELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("E-mail Address"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL")>  _
        Public Property EMAIL() As String
            Get
                return _EMAIL
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(38),  _
         twodBarcode("SNAME")>  _
        Public Property SNAME() As String
            Get
                return _SNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor Contact", value, "^.{0,37}$") then Exit Property
                _IsSetSNAME = True
                If loading Then
                  _SNAME = Value
                Else
                    if not _SNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Phone"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(39),  _
         [ReadOnly](true),  _
         twodBarcode("SPHONENUM")>  _
        Public Property SPHONENUM() As String
            Get
                return _SPHONENUM
            End Get
            Set
                if not(value is nothing) then
                  _SPHONENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Cell"),  _
         nType("Edm.String"),  _
         tab("Priority"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SCELLPHONE")>  _
        Public Property SCELLPHONE() As String
            Get
                return _SCELLPHONE
            End Get
            Set
                if not(value is nothing) then
                  _SCELLPHONE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor Contact Email"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         [ReadOnly](true),  _
         twodBarcode("EMAIL2")>  _
        Public Property EMAIL2() As String
            Get
                return _EMAIL2
            End Get
            Set
                if not(value is nothing) then
                  _EMAIL2 = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Code"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(41),  _
         twodBarcode("TOPICCODE")>  _
        Public Property TOPICCODE() As String
            Get
                return _TOPICCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Code", value, "^.{0,3}$") then Exit Property
                _IsSetTOPICCODE = True
                If loading Then
                  _TOPICCODE = Value
                Else
                    if not _TOPICCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOPICCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOPICCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Task Description"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(42),  _
         [ReadOnly](true),  _
         twodBarcode("TOPICDES")>  _
        Public Property TOPICDES() As String
            Get
                return _TOPICDES
            End Get
            Set
                if not(value is nothing) then
                  _TOPICDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Task Type"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(45),  _
         twodBarcode("CUSTNOTETYPEDES")>  _
        Public Property CUSTNOTETYPEDES() As String
            Get
                return _CUSTNOTETYPEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Task Type", value, "^.{0,8}$") then Exit Property
                _IsSetCUSTNOTETYPEDES = True
                If loading Then
                  _CUSTNOTETYPEDES = Value
                Else
                    if not _CUSTNOTETYPEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUSTNOTETYPEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUSTNOTETYPEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remind?"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(48),  _
         twodBarcode("REMINDFLAG")>  _
        Public Property REMINDFLAG() As String
            Get
                return _REMINDFLAG
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remind?", value, "^.{0,1}$") then Exit Property
                _IsSetREMINDFLAG = True
                If loading Then
                  _REMINDFLAG = Value
                Else
                    if not _REMINDFLAG = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDFLAG", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDFLAG = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Hrs/Mins in Advance"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(49),  _
         twodBarcode("REMINDTIME")>  _
        Public Property REMINDTIME() As String
            Get
                return _REMINDTIME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Hrs/Mins in Advance", value, "^.{0,6}$") then Exit Property
                _IsSetREMINDTIME = True
                If loading Then
                  _REMINDTIME = Value
                Else
                    if not _REMINDTIME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMINDTIME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMINDTIME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 2"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(50),  _
         twodBarcode("USERLOGIN2")>  _
        Public Property USERLOGIN2() As String
            Get
                return _USERLOGIN2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 2", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN2 = True
                If loading Then
                  _USERLOGIN2 = Value
                Else
                    if not _USERLOGIN2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Participant 3"),  _
         nType("Edm.String"),  _
         tab("Vendor Contact Email"),  _
         Pos(51),  _
         twodBarcode("USERLOGIN3")>  _
        Public Property USERLOGIN3() As String
            Get
                return _USERLOGIN3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Participant 3", value, "^.{0,20}$") then Exit Property
                _IsSetUSERLOGIN3 = True
                If loading Then
                  _USERLOGIN3 = Value
                Else
                    if not _USERLOGIN3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USERLOGIN3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USERLOGIN3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group Code"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(210),  _
         twodBarcode("GROUPNAME")>  _
        Public Property GROUPNAME() As String
            Get
                return _GROUPNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group Code", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME = True
                If loading Then
                  _GROUPNAME = Value
                Else
                    if not _GROUPNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 2"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(212),  _
         twodBarcode("GROUPNAME2")>  _
        Public Property GROUPNAME2() As String
            Get
                return _GROUPNAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 2", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME2 = True
                If loading Then
                  _GROUPNAME2 = Value
                Else
                    if not _GROUPNAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Group 3"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(214),  _
         twodBarcode("GROUPNAME3")>  _
        Public Property GROUPNAME3() As String
            Get
                return _GROUPNAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Group 3", value, "^.{0,10}$") then Exit Property
                _IsSetGROUPNAME3 = True
                If loading Then
                  _GROUPNAME3 = Value
                Else
                    if not _GROUPNAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("GROUPNAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _GROUPNAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(220),  _
         twodBarcode("RESOURCENAME")>  _
        Public Property RESOURCENAME() As String
            Get
                return _RESOURCENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME = True
                If loading Then
                  _RESOURCENAME = Value
                Else
                    if not _RESOURCENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Second Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(221),  _
         twodBarcode("RESOURCENAME2")>  _
        Public Property RESOURCENAME2() As String
            Get
                return _RESOURCENAME2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Second Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME2 = True
                If loading Then
                  _RESOURCENAME2 = Value
                Else
                    if not _RESOURCENAME2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Third Resource"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(222),  _
         twodBarcode("RESOURCENAME3")>  _
        Public Property RESOURCENAME3() As String
            Get
                return _RESOURCENAME3
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Third Resource", value, "^.{0,16}$") then Exit Property
                _IsSetRESOURCENAME3 = True
                If loading Then
                  _RESOURCENAME3 = Value
                Else
                    if not _RESOURCENAME3 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("RESOURCENAME3", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _RESOURCENAME3 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("Group Code"),  _
         Pos(225),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,32}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Original Task"),  _
         nType("Edm.Int64"),  _
         tab("Group Code"),  _
         Pos(230),  _
         twodBarcode("PREVCUSTNOTEA")>  _
        Public Property PREVCUSTNOTEA() As nullable (of int64)
            Get
                return _PREVCUSTNOTEA
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Original Task", value, "^[0-9\-]+$") then Exit Property
                _IsSetPREVCUSTNOTEA = True
                If loading Then
                  _PREVCUSTNOTEA = Value
                Else
                    if not _PREVCUSTNOTEA = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PREVCUSTNOTEA", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PREVCUSTNOTEA = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Format Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(250),  _
         twodBarcode("QUESTFCODE")>  _
        Public Property QUESTFCODE() As String
            Get
                return _QUESTFCODE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Format Code", value, "^.{0,3}$") then Exit Property
                _IsSetQUESTFCODE = True
                If loading Then
                  _QUESTFCODE = Value
                Else
                    if not _QUESTFCODE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("QUESTFCODE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _QUESTFCODE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Questionnaire Title"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(260),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFDES")>  _
        Public Property QUESTFDES() As String
            Get
                return _QUESTFDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Branch Code"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(265),  _
         twodBarcode("BRANCHNAME")>  _
        Public Property BRANCHNAME() As String
            Get
                return _BRANCHNAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Branch Code", value, "^.{0,6}$") then Exit Property
                _IsSetBRANCHNAME = True
                If loading Then
                  _BRANCHNAME = Value
                Else
                    if not _BRANCHNAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("BRANCHNAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _BRANCHNAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Branch Name"),  _
         nType("Edm.String"),  _
         tab("Format Code"),  _
         Pos(270),  _
         [ReadOnly](true),  _
         twodBarcode("BRANCHDES")>  _
        Public Property BRANCHDES() As String
            Get
                return _BRANCHDES
            End Get
            Set
                if not(value is nothing) then
                  _BRANCHDES = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESTEXT_SUBFORM() As QUERY_CUSTNOTESTEXT
            Get
                return _CUSTNOTESTEXT_SUBFORM
            End Get
            Set
                _CUSTNOTESTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTLINES_SUBFORM() As QUERY_CUSTNQUESTLINES
            Get
                return _CUSTNQUESTLINES_SUBFORM
            End Get
            Set
                _CUSTNQUESTLINES_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNQUESTTEXT_SUBFORM() As QUERY_CUSTNQUESTTEXT
            Get
                return _CUSTNQUESTTEXT_SUBFORM
            End Get
            Set
                _CUSTNQUESTTEXT_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTEEXTFILE_SUBFORM() As QUERY_CUSTNOTEEXTFILE
            Get
                return _CUSTNOTEEXTFILE_SUBFORM
            End Get
            Set
                _CUSTNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property SUPNOTEEXTFILE_SUBFORM() As QUERY_SUPNOTEEXTFILE
            Get
                return _SUPNOTEEXTFILE_SUBFORM
            End Get
            Set
                _SUPNOTEEXTFILE_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLIST_SUBFORM() As QUERY_DOCTODOLIST
            Get
                return _DOCTODOLIST_SUBFORM
            End Get
            Set
                _DOCTODOLIST_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOG_SUBFORM() As QUERY_DOCTODOLISTLOG
            Get
                return _DOCTODOLISTLOG_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOG_SUBFORM = value
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property CUSTNOTESIGN_SUBFORM() As QUERY_CUSTNOTESIGN
            Get
                return _CUSTNOTESIGN_SUBFORM
            End Get
            Set
                _CUSTNOTESIGN_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetUSERLOGIN then
              if f then
                  jw.WriteRaw(", ""USERLOGIN"": ")
              else
                  jw.WriteRaw("""USERLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN)
            end if
            if _IsSetSTIME then
              if f then
                  jw.WriteRaw(", ""STIME"": ")
              else
                  jw.WriteRaw("""STIME"": ")
                  f = true
              end if
              jw.WriteValue(me.STIME)
            end if
            if _IsSetTILLDATE then
              if f then
                  jw.WriteRaw(", ""TILLDATE"": ")
              else
                  jw.WriteRaw("""TILLDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TILLDATE)
            end if
            if _IsSetETIME then
              if f then
                  jw.WriteRaw(", ""ETIME"": ")
              else
                  jw.WriteRaw("""ETIME"": ")
                  f = true
              end if
              jw.WriteValue(me.ETIME)
            end if
            if _IsSetPLANNEDTIME then
              if f then
                  jw.WriteRaw(", ""PLANNEDTIME"": ")
              else
                  jw.WriteRaw("""PLANNEDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDTIME)
            end if
            if _IsSetSTATDES then
              if f then
                  jw.WriteRaw(", ""STATDES"": ")
              else
                  jw.WriteRaw("""STATDES"": ")
                  f = true
              end if
              jw.WriteValue(me.STATDES)
            end if
            if _IsSetCLOSED then
              if f then
                  jw.WriteRaw(", ""CLOSED"": ")
              else
                  jw.WriteRaw("""CLOSED"": ")
                  f = true
              end if
              jw.WriteValue(me.CLOSED)
            end if
            if _IsSetSUBJECT then
              if f then
                  jw.WriteRaw(", ""SUBJECT"": ")
              else
                  jw.WriteRaw("""SUBJECT"": ")
                  f = true
              end if
              jw.WriteValue(me.SUBJECT)
            end if
            if _IsSetCUSTNAME then
              if f then
                  jw.WriteRaw(", ""CUSTNAME"": ")
              else
                  jw.WriteRaw("""CUSTNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNAME)
            end if
            if _IsSetDCODE then
              if f then
                  jw.WriteRaw(", ""DCODE"": ")
              else
                  jw.WriteRaw("""DCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.DCODE)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetNAME then
              if f then
                  jw.WriteRaw(", ""NAME"": ")
              else
                  jw.WriteRaw("""NAME"": ")
                  f = true
              end if
              jw.WriteValue(me.NAME)
            end if
            if _IsSetSNAME then
              if f then
                  jw.WriteRaw(", ""SNAME"": ")
              else
                  jw.WriteRaw("""SNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.SNAME)
            end if
            if _IsSetTOPICCODE then
              if f then
                  jw.WriteRaw(", ""TOPICCODE"": ")
              else
                  jw.WriteRaw("""TOPICCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOPICCODE)
            end if
            if _IsSetCUSTNOTETYPEDES then
              if f then
                  jw.WriteRaw(", ""CUSTNOTETYPEDES"": ")
              else
                  jw.WriteRaw("""CUSTNOTETYPEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.CUSTNOTETYPEDES)
            end if
            if _IsSetREMINDFLAG then
              if f then
                  jw.WriteRaw(", ""REMINDFLAG"": ")
              else
                  jw.WriteRaw("""REMINDFLAG"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDFLAG)
            end if
            if _IsSetREMINDTIME then
              if f then
                  jw.WriteRaw(", ""REMINDTIME"": ")
              else
                  jw.WriteRaw("""REMINDTIME"": ")
                  f = true
              end if
              jw.WriteValue(me.REMINDTIME)
            end if
            if _IsSetUSERLOGIN2 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN2"": ")
              else
                  jw.WriteRaw("""USERLOGIN2"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN2)
            end if
            if _IsSetUSERLOGIN3 then
              if f then
                  jw.WriteRaw(", ""USERLOGIN3"": ")
              else
                  jw.WriteRaw("""USERLOGIN3"": ")
                  f = true
              end if
              jw.WriteValue(me.USERLOGIN3)
            end if
            if _IsSetGROUPNAME then
              if f then
                  jw.WriteRaw(", ""GROUPNAME"": ")
              else
                  jw.WriteRaw("""GROUPNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME)
            end if
            if _IsSetGROUPNAME2 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME2"": ")
              else
                  jw.WriteRaw("""GROUPNAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME2)
            end if
            if _IsSetGROUPNAME3 then
              if f then
                  jw.WriteRaw(", ""GROUPNAME3"": ")
              else
                  jw.WriteRaw("""GROUPNAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.GROUPNAME3)
            end if
            if _IsSetRESOURCENAME then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME"": ")
              else
                  jw.WriteRaw("""RESOURCENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME)
            end if
            if _IsSetRESOURCENAME2 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME2"": ")
              else
                  jw.WriteRaw("""RESOURCENAME2"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME2)
            end if
            if _IsSetRESOURCENAME3 then
              if f then
                  jw.WriteRaw(", ""RESOURCENAME3"": ")
              else
                  jw.WriteRaw("""RESOURCENAME3"": ")
                  f = true
              end if
              jw.WriteValue(me.RESOURCENAME3)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _IsSetPREVCUSTNOTEA then
              if f then
                  jw.WriteRaw(", ""PREVCUSTNOTEA"": ")
              else
                  jw.WriteRaw("""PREVCUSTNOTEA"": ")
                  f = true
              end if
              jw.WriteValue(me.PREVCUSTNOTEA)
            end if
            if _IsSetQUESTFCODE then
              if f then
                  jw.WriteRaw(", ""QUESTFCODE"": ")
              else
                  jw.WriteRaw("""QUESTFCODE"": ")
                  f = true
              end if
              jw.WriteValue(me.QUESTFCODE)
            end if
            if _IsSetBRANCHNAME then
              if f then
                  jw.WriteRaw(", ""BRANCHNAME"": ")
              else
                  jw.WriteRaw("""BRANCHNAME"": ")
                  f = true
              end if
              jw.WriteValue(me.BRANCHNAME)
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTLINES_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTLINES_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNQUESTTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNQUESTTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              jw.WriteRaw(", SUPNOTEEXTFILE_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _SUPNOTEEXTFILE_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLIST_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLIST_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOG_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOG_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              jw.WriteRaw(", CUSTNOTESIGN_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _CUSTNOTESIGN_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "GENCUSTNOTES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUSTNOTE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN")
              .WriteAttributeString("value", me.USERLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetSTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STIME")
              .WriteAttributeString("value", me.STIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetTILLDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TILLDATE")
              .WriteAttributeString("value", me.TILLDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetETIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ETIME")
              .WriteAttributeString("value", me.ETIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "5")
              .WriteEndElement
            end if
            if _IsSetPLANNEDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDTIME")
              .WriteAttributeString("value", me.PLANNEDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetSTATDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATDES")
              .WriteAttributeString("value", me.STATDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "12")
              .WriteEndElement
            end if
            if _IsSetCLOSED then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CLOSED")
              .WriteAttributeString("value", me.CLOSED)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUBJECT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUBJECT")
              .WriteAttributeString("value", me.SUBJECT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "52")
              .WriteEndElement
            end if
            if _IsSetCUSTNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNAME")
              .WriteAttributeString("value", me.CUSTNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetDCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DCODE")
              .WriteAttributeString("value", me.DCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "4")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NAME")
              .WriteAttributeString("value", me.NAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetSNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SNAME")
              .WriteAttributeString("value", me.SNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "37")
              .WriteEndElement
            end if
            if _IsSetTOPICCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOPICCODE")
              .WriteAttributeString("value", me.TOPICCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetCUSTNOTETYPEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUSTNOTETYPEDES")
              .WriteAttributeString("value", me.CUSTNOTETYPEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "8")
              .WriteEndElement
            end if
            if _IsSetREMINDFLAG then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDFLAG")
              .WriteAttributeString("value", me.REMINDFLAG)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetREMINDTIME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMINDTIME")
              .WriteAttributeString("value", me.REMINDTIME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN2")
              .WriteAttributeString("value", me.USERLOGIN2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetUSERLOGIN3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USERLOGIN3")
              .WriteAttributeString("value", me.USERLOGIN3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME")
              .WriteAttributeString("value", me.GROUPNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME2")
              .WriteAttributeString("value", me.GROUPNAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetGROUPNAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "GROUPNAME3")
              .WriteAttributeString("value", me.GROUPNAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "10")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME")
              .WriteAttributeString("value", me.RESOURCENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME2")
              .WriteAttributeString("value", me.RESOURCENAME2)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetRESOURCENAME3 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "RESOURCENAME3")
              .WriteAttributeString("value", me.RESOURCENAME3)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "16")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "32")
              .WriteEndElement
            end if
            if _IsSetPREVCUSTNOTEA then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PREVCUSTNOTEA")
              .WriteAttributeString("value", me.PREVCUSTNOTEA)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetQUESTFCODE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "QUESTFCODE")
              .WriteAttributeString("value", me.QUESTFCODE)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "3")
              .WriteEndElement
            end if
            if _IsSetBRANCHNAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "BRANCHNAME")
              .WriteAttributeString("value", me.BRANCHNAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "6")
              .WriteEndElement
            end if
            if _CUSTNOTESTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESTEXT in _CUSTNOTESTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESTEXT_SUBFORM")
              next
            end if
            if _CUSTNQUESTLINES_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTLINES in _CUSTNQUESTLINES_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTLINES_SUBFORM")
              next
            end if
            if _CUSTNQUESTTEXT_SUBFORM.value.count > 0 then
              for each itm as CUSTNQUESTTEXT in _CUSTNQUESTTEXT_SUBFORM.Value
                itm.toXML(xw,"CUSTNQUESTTEXT_SUBFORM")
              next
            end if
            if _CUSTNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTEEXTFILE in _CUSTNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTEEXTFILE_SUBFORM")
              next
            end if
            if _SUPNOTEEXTFILE_SUBFORM.value.count > 0 then
              for each itm as SUPNOTEEXTFILE in _SUPNOTEEXTFILE_SUBFORM.Value
                itm.toXML(xw,"SUPNOTEEXTFILE_SUBFORM")
              next
            end if
            if _DOCTODOLIST_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLIST in _DOCTODOLIST_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLIST_SUBFORM")
              next
            end if
            if _DOCTODOLISTLOG_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOG in _DOCTODOLISTLOG_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOG_SUBFORM")
              next
            end if
            if _CUSTNOTESIGN_SUBFORM.value.count > 0 then
              for each itm as CUSTNOTESIGN in _CUSTNOTESIGN_SUBFORM.Value
                itm.toXML(xw,"CUSTNOTESIGN_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as GENCUSTNOTES = JsonConvert.DeserializeObject(Of GENCUSTNOTES)(e.StreamReader.ReadToEnd)
                With obj
                  _CURDATE = .CURDATE
                  _USERLOGIN = .USERLOGIN
                  _DAY = .DAY
                  _STIME = .STIME
                  _TILLDATE = .TILLDATE
                  _TILLDAY = .TILLDAY
                  _ETIME = .ETIME
                  _PLANNEDTIME = .PLANNEDTIME
                  _STATDES = .STATDES
                  _CLOSED = .CLOSED
                  _SUBJECT = .SUBJECT
                  _CUSTNOTE = .CUSTNOTE
                  _CUSTNAME = .CUSTNAME
                  _CUSTDES = .CUSTDES
                  _DCODE = .DCODE
                  _CODEDES = .CODEDES
                  _PRIO = .PRIO
                  _NAME = .NAME
                  _PHONENUM = .PHONENUM
                  _CELLPHONE = .CELLPHONE
                  _EMAIL = .EMAIL
                  _SNAME = .SNAME
                  _SPHONENUM = .SPHONENUM
                  _SCELLPHONE = .SCELLPHONE
                  _EMAIL2 = .EMAIL2
                  _TOPICCODE = .TOPICCODE
                  _TOPICDES = .TOPICDES
                  _CUSTNOTETYPEDES = .CUSTNOTETYPEDES
                  _REMINDFLAG = .REMINDFLAG
                  _REMINDTIME = .REMINDTIME
                  _USERLOGIN2 = .USERLOGIN2
                  _USERLOGIN3 = .USERLOGIN3
                  _GROUPNAME = .GROUPNAME
                  _GROUPNAME2 = .GROUPNAME2
                  _GROUPNAME3 = .GROUPNAME3
                  _RESOURCENAME = .RESOURCENAME
                  _RESOURCENAME2 = .RESOURCENAME2
                  _RESOURCENAME3 = .RESOURCENAME3
                  _REMARK = .REMARK
                  _PREVCUSTNOTEA = .PREVCUSTNOTEA
                  _QUESTFCODE = .QUESTFCODE
                  _QUESTFDES = .QUESTFDES
                  _BRANCHNAME = .BRANCHNAME
                  _BRANCHDES = .BRANCHDES
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_GENCUSTNOTES
        
        CUSTNOTESTEXT = 0
        
        CUSTNQUESTLINES = 1
        
        CUSTNQUESTTEXT = 2
        
        CUSTNOTEEXTFILE = 3
        
        SUPNOTEEXTFILE = 4
        
        DOCTODOLIST = 5
        
        DOCTODOLISTLOG = 6
        
        CUSTNOTESIGN = 7
    End Enum
    
    <QueryTitle("Notes")>  _
    Public Class QUERY_CUSTNOTESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = nothing
            _Name = "CUSTNOTESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESTEXT)
            _Parent = Parent
            _name = "CUSTNOTESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESTEXT As CUSTNOTESTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESTEXT)(stream.ReadToEnd).Value
              With _CUSTNOTESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESTEXT as CUSTNOTESTEXT in value
              If _CUSTNOTESTEXT.Equals(trycast(obj,CUSTNOTESTEXT)) Then
                  value.remove(_CUSTNOTESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESTEXT"
                else
                    return "CUSTNOTESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Text"),  _
         nType("Edm.String"),  _
         tab("Text"),  _
         Pos(20),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Line"),  _
         nType("Edm.Int64"),  _
         tab("Text"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESTEXT = JsonConvert.DeserializeObject(Of CUSTNOTESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Responses to Questions")>  _
    Public Class QUERY_CUSTNQUESTLINES
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTLINES)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = nothing
            _Name = "CUSTNQUESTLINES"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTLINES)
            _Parent = Parent
            _name = "CUSTNQUESTLINES_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Response (cont.)")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTLINES)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTLINES)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTLINES As CUSTNQUESTLINES In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTLINES)(stream.ReadToEnd).Value
              With _CUSTNQUESTLINES
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTLINES)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTLINES)
                  .QUESTNUM = obj.QUESTNUM
                  .QUESTDES = obj.QUESTDES
                  .QGROUPDES = obj.QGROUPDES
                  .ANSNUM = obj.ANSNUM
                  .QUESTFADES = obj.QUESTFADES
                  .REMARK = obj.REMARK
                  .ATYPE = obj.ATYPE
                  .MANDATORY = obj.MANDATORY
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTLINES(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTLINES as CUSTNQUESTLINES in value
              If _CUSTNQUESTLINES.Equals(trycast(obj,CUSTNQUESTLINES)) Then
                  value.remove(_CUSTNQUESTLINES)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTLINES
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _QUESTNUM As Long
        
        Private _QUESTDES As String
        
        Private _QGROUPDES As String
        
        Private _IsSetANSNUM As Boolean = Boolean.FalseString
        
        Private _ANSNUM As Long
        
        Private _QUESTFADES As String
        
        Private _IsSetREMARK As Boolean = Boolean.FalseString
        
        Private _REMARK As String
        
        Private _ATYPE As String
        
        Private _MANDATORY As String
        
        Private _QUESTLINESTEXT_SUBFORM As QUERY_QUESTLINESTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Response (cont.)"))
            _QUESTLINESTEXT_SUBFORM = new QUERY_QUESTLINESTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_QUESTLINESTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Response (cont.)", _QUESTLINESTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTLINES"
                else
                    return "CUSTNQUESTLINES_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "QUESTNUM={0}", _
                  string.format("{0}",QUESTNUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("No. (Question)"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTNUM")>  _
        Public Property QUESTNUM() As nullable (of int64)
            Get
                return _QUESTNUM
            End Get
            Set
                if not(value is nothing) then
                  _QUESTNUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Question"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(22),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTDES")>  _
        Public Property QUESTDES() As String
            Get
                return _QUESTDES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Category"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("QGROUPDES")>  _
        Public Property QGROUPDES() As String
            Get
                return _QGROUPDES
            End Get
            Set
                if not(value is nothing) then
                  _QGROUPDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("No. Response"),  _
         nType("Edm.Int64"),  _
         tab("No. (Question)"),  _
         Pos(30),  _
         twodBarcode("ANSNUM")>  _
        Public Property ANSNUM() As nullable (of int64)
            Get
                return _ANSNUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("No. Response", value, "^[0-9\-]+$") then Exit Property
                _IsSetANSNUM = True
                If loading Then
                  _ANSNUM = Value
                Else
                    if not _ANSNUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("ANSNUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _ANSNUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(32),  _
         [ReadOnly](true),  _
         twodBarcode("QUESTFADES")>  _
        Public Property QUESTFADES() As String
            Get
                return _QUESTFADES
            End Get
            Set
                if not(value is nothing) then
                  _QUESTFADES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Remark"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(45),  _
         twodBarcode("REMARK")>  _
        Public Property REMARK() As String
            Get
                return _REMARK
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remark", value, "^.{0,48}$") then Exit Property
                _IsSetREMARK = True
                If loading Then
                  _REMARK = Value
                Else
                    if not _REMARK = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("REMARK", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _REMARK = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Response Type"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("ATYPE")>  _
        Public Property ATYPE() As String
            Get
                return _ATYPE
            End Get
            Set
                if not(value is nothing) then
                  _ATYPE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Mandatory Question?"),  _
         nType("Edm.String"),  _
         tab("No. (Question)"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("MANDATORY")>  _
        Public Property MANDATORY() As String
            Get
                return _MANDATORY
            End Get
            Set
                if not(value is nothing) then
                  _MANDATORY = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property QUESTLINESTEXT_SUBFORM() As QUERY_QUESTLINESTEXT
            Get
                return _QUESTLINESTEXT_SUBFORM
            End Get
            Set
                _QUESTLINESTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetANSNUM then
              if f then
                  jw.WriteRaw(", ""ANSNUM"": ")
              else
                  jw.WriteRaw("""ANSNUM"": ")
                  f = true
              end if
              jw.WriteValue(me.ANSNUM)
            end if
            if _IsSetREMARK then
              if f then
                  jw.WriteRaw(", ""REMARK"": ")
              else
                  jw.WriteRaw("""REMARK"": ")
                  f = true
              end if
              jw.WriteValue(me.REMARK)
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", QUESTLINESTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _QUESTLINESTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTLINES")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "QUESTNUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetANSNUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "ANSNUM")
              .WriteAttributeString("value", me.ANSNUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetREMARK then
              .WriteStartElement("field")
              .WriteAttributeString("name", "REMARK")
              .WriteAttributeString("value", me.REMARK)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "48")
              .WriteEndElement
            end if
            if _QUESTLINESTEXT_SUBFORM.value.count > 0 then
              for each itm as QUESTLINESTEXT in _QUESTLINESTEXT_SUBFORM.Value
                itm.toXML(xw,"QUESTLINESTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTLINES = JsonConvert.DeserializeObject(Of CUSTNQUESTLINES)(e.StreamReader.ReadToEnd)
                With obj
                  _QUESTNUM = .QUESTNUM
                  _QUESTDES = .QUESTDES
                  _QGROUPDES = .QGROUPDES
                  _ANSNUM = .ANSNUM
                  _QUESTFADES = .QUESTFADES
                  _REMARK = .REMARK
                  _ATYPE = .ATYPE
                  _MANDATORY = .MANDATORY
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNQUESTLINES
        
        QUESTLINESTEXT = 0
    End Enum
    
    <QueryTitle("Response (cont.)")>  _
    Public Class QUERY_QUESTLINESTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of QUESTLINESTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = nothing
            _Name = "QUESTLINESTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of QUESTLINESTEXT)
            _Parent = Parent
            _name = "QUESTLINESTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of QUESTLINESTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(QUESTLINESTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _QUESTLINESTEXT As QUESTLINESTEXT In JsonConvert.DeserializeObject(Of QUERY_QUESTLINESTEXT)(stream.ReadToEnd).Value
              With _QUESTLINESTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_QUESTLINESTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, QUESTLINESTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new QUESTLINESTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _QUESTLINESTEXT as QUESTLINESTEXT in value
              If _QUESTLINESTEXT.Equals(trycast(obj,QUESTLINESTEXT)) Then
                  value.remove(_QUESTLINESTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class QUESTLINESTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "QUESTLINESTEXT"
                else
                    return "QUESTLINESTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Rest of Response"),  _
         nType("Edm.String"),  _
         tab("Rest of Response"),  _
         Pos(3),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Rest of Response", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Rest of Response"),  _
         Pos(4),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "QUESTLINESTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as QUESTLINESTEXT = JsonConvert.DeserializeObject(Of QUESTLINESTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Respondent's Remarks")>  _
    Public Class QUERY_CUSTNQUESTTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNQUESTTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = nothing
            _Name = "CUSTNQUESTTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNQUESTTEXT)
            _Parent = Parent
            _name = "CUSTNQUESTTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNQUESTTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNQUESTTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNQUESTTEXT As CUSTNQUESTTEXT In JsonConvert.DeserializeObject(Of QUERY_CUSTNQUESTTEXT)(stream.ReadToEnd).Value
              With _CUSTNQUESTTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNQUESTTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNQUESTTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNQUESTTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNQUESTTEXT as CUSTNQUESTTEXT in value
              If _CUSTNQUESTTEXT.Equals(trycast(obj,CUSTNQUESTTEXT)) Then
                  value.remove(_CUSTNQUESTTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNQUESTTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNQUESTTEXT"
                else
                    return "CUSTNQUESTTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Text Line"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Text Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNQUESTTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNQUESTTEXT = JsonConvert.DeserializeObject(Of CUSTNQUESTTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Customer Documents for Task")>  _
    Public Class QUERY_CUSTNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = nothing
            _Name = "CUSTNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTEEXTFILE)
            _Parent = Parent
            _name = "CUSTNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTEEXTFILE As CUSTNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTEEXTFILE)(stream.ReadToEnd).Value
              With _CUSTNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .NOSEND = obj.NOSEND
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .CUST = obj.CUST
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTEEXTFILE as CUSTNOTEEXTFILE in value
              If _CUSTNOTEEXTFILE.Equals(trycast(obj,CUSTNOTEEXTFILE)) Then
                  value.remove(_CUSTNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _IsSetNOSEND As Boolean = Boolean.FalseString
        
        Private _NOSEND As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetCUST As Boolean = Boolean.FalseString
        
        Private _CUST As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTEEXTFILE"
                else
                    return "CUSTNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "CUST={0},EXTFILENUM={1}", _
                  string.format("{0}",CUST), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(32),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Don't Send"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(45),  _
         twodBarcode("NOSEND")>  _
        Public Property NOSEND() As String
            Get
                return _NOSEND
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Don't Send", value, "^.{0,1}$") then Exit Property
                _IsSetNOSEND = True
                If loading Then
                  _NOSEND = Value
                Else
                    if not _NOSEND = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("NOSEND", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _NOSEND = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date Modified"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Date Modified"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Customer (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("CUST")>  _
        Public Property CUST() As nullable (of int64)
            Get
                return _CUST
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Customer (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetCUST = True
                If loading Then
                  _CUST = Value
                Else
                    if not _CUST = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CUST", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CUST = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Date Modified"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetNOSEND then
              if f then
                  jw.WriteRaw(", ""NOSEND"": ")
              else
                  jw.WriteRaw("""NOSEND"": ")
                  f = true
              end if
              jw.WriteValue(me.NOSEND)
            end if
            if _IsSetCUST then
              if f then
                  jw.WriteRaw(", ""CUST"": ")
              else
                  jw.WriteRaw("""CUST"": ")
                  f = true
              end if
              jw.WriteValue(me.CUST)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetNOSEND then
              .WriteStartElement("field")
              .WriteAttributeString("name", "NOSEND")
              .WriteAttributeString("value", me.NOSEND)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetCUST then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CUST")
              .WriteAttributeString("value", me.CUST)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTEEXTFILE = JsonConvert.DeserializeObject(Of CUSTNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _NOSEND = .NOSEND
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _CUST = .CUST
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_CUSTNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Vendor Documents for Task")>  _
    Public Class QUERY_SUPNOTEEXTFILE
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of SUPNOTEEXTFILE)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = nothing
            _Name = "SUPNOTEEXTFILE"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of SUPNOTEEXTFILE)
            _Parent = Parent
            _name = "SUPNOTEEXTFILE_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "Links to File")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of SUPNOTEEXTFILE)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(SUPNOTEEXTFILE)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _SUPNOTEEXTFILE As SUPNOTEEXTFILE In JsonConvert.DeserializeObject(Of QUERY_SUPNOTEEXTFILE)(stream.ReadToEnd).Value
              With _SUPNOTEEXTFILE
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_SUPNOTEEXTFILE)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, SUPNOTEEXTFILE)
                  .EXTFILEDES = obj.EXTFILEDES
                  .CURDATE = obj.CURDATE
                  .EXTFILENAME = obj.EXTFILENAME
                  .STATUS = obj.STATUS
                  .SUFFIX = obj.SUFFIX
                  .FILESIZE = obj.FILESIZE
                  .USERLOGIN = obj.USERLOGIN
                  .UDATE = obj.UDATE
                  .LUSERLOGIN = obj.LUSERLOGIN
                  .SUP = obj.SUP
                  .EXTFILENUM = obj.EXTFILENUM
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new SUPNOTEEXTFILE(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _SUPNOTEEXTFILE as SUPNOTEEXTFILE in value
              If _SUPNOTEEXTFILE.Equals(trycast(obj,SUPNOTEEXTFILE)) Then
                  value.remove(_SUPNOTEEXTFILE)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class SUPNOTEEXTFILE
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetEXTFILEDES As Boolean = Boolean.FalseString
        
        Private _EXTFILEDES As String
        
        Private _IsSetCURDATE As Boolean = Boolean.FalseString
        
        Private _CURDATE As System.DateTimeOffset
        
        Private _IsSetEXTFILENAME As Boolean = Boolean.FalseString
        
        Private _EXTFILENAME As String
        
        Private _IsSetSTATUS As Boolean = Boolean.FalseString
        
        Private _STATUS As String
        
        Private _SUFFIX As String
        
        Private _FILESIZE As Long
        
        Private _USERLOGIN As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LUSERLOGIN As String
        
        Private _IsSetSUP As Boolean = Boolean.FalseString
        
        Private _SUP As Long
        
        Private _IsSetEXTFILENUM As Boolean = Boolean.FalseString
        
        Private _EXTFILENUM As Long
        
        Private _EXTFILELINKS_SUBFORM As QUERY_EXTFILELINKS
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("Links to File"))
            _EXTFILELINKS_SUBFORM = new QUERY_EXTFILELINKS(me)
            WITH ChildQuery(0)
               .setoDataQuery(_EXTFILELINKS_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("Links to File", _EXTFILELINKS_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "SUPNOTEEXTFILE"
                else
                    return "SUPNOTEEXTFILE_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "SUP={0},EXTFILENUM={1}", _
                  string.format("{0}",SUP), _
                  string.format("{0}",EXTFILENUM) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("File Name"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(1),  _
         Mandatory(true),  _
         twodBarcode("EXTFILEDES")>  _
        Public Property EXTFILEDES() As String
            Get
                return _EXTFILEDES
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Name", value, "^.{0,68}$") then Exit Property
                _IsSetEXTFILEDES = True
                If loading Then
                  _EXTFILEDES = Value
                Else
                    if not _EXTFILEDES = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILEDES", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILEDES = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Date Created"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(2),  _
         twodBarcode("CURDATE")>  _
        Public Property CURDATE() As nullable (of DateTimeOffset)
            Get
                return _CURDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Date Created", value, "^.*$") then Exit Property
                _IsSetCURDATE = True
                If loading Then
                  _CURDATE = Value
                Else
                    if not _CURDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("CURDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _CURDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Path"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("EXTFILENAME")>  _
        Public Property EXTFILENAME() As String
            Get
                return _EXTFILENAME
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Path", value, "^.{0,80}$") then Exit Property
                _IsSetEXTFILENAME = True
                If loading Then
                  _EXTFILENAME = Value
                Else
                    if not _EXTFILENAME = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENAME", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENAME = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Status"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(35),  _
         twodBarcode("STATUS")>  _
        Public Property STATUS() As String
            Get
                return _STATUS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("File Status", value, "^.{0,1}$") then Exit Property
                _IsSetSTATUS = True
                If loading Then
                  _STATUS = Value
                Else
                    if not _STATUS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("STATUS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _STATUS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("File Name Extension"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("SUFFIX")>  _
        Public Property SUFFIX() As String
            Get
                return _SUFFIX
            End Get
            Set
                if not(value is nothing) then
                  _SUFFIX = Value
                end if
            End Set
        End Property
        
        <DisplayName("Size (Bytes)"),  _
         nType("Edm.Int64"),  _
         tab("File Name"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("FILESIZE")>  _
        Public Property FILESIZE() As nullable (of int64)
            Get
                return _FILESIZE
            End Get
            Set
                if not(value is nothing) then
                  _FILESIZE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Modified by"),  _
         nType("Edm.String"),  _
         tab("File Name"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date Modified"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("File Name"),  _
         Pos(110),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Locked by"),  _
         nType("Edm.String"),  _
         tab("Locked by"),  _
         Pos(120),  _
         [ReadOnly](true),  _
         twodBarcode("LUSERLOGIN")>  _
        Public Property LUSERLOGIN() As String
            Get
                return _LUSERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _LUSERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Vendor (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(10),  _
         Browsable(false),  _
         twodBarcode("SUP")>  _
        Public Property SUP() As nullable (of int64)
            Get
                return _SUP
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Vendor (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetSUP = True
                If loading Then
                  _SUP = Value
                Else
                    if not _SUP = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("SUP", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _SUP = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.Int64"),  _
         tab("Locked by"),  _
         Pos(20),  _
         Browsable(false),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Document Number", value, "^[0-9\-]+$") then Exit Property
                _IsSetEXTFILENUM = True
                If loading Then
                  _EXTFILENUM = Value
                Else
                    if not _EXTFILENUM = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("EXTFILENUM", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _EXTFILENUM = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property EXTFILELINKS_SUBFORM() As QUERY_EXTFILELINKS
            Get
                return _EXTFILELINKS_SUBFORM
            End Get
            Set
                _EXTFILELINKS_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetEXTFILEDES then
              if f then
                  jw.WriteRaw(", ""EXTFILEDES"": ")
              else
                  jw.WriteRaw("""EXTFILEDES"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILEDES)
            end if
            if _IsSetCURDATE then
              if f then
                  jw.WriteRaw(", ""CURDATE"": ")
              else
                  jw.WriteRaw("""CURDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.CURDATE)
            end if
            if _IsSetEXTFILENAME then
              if f then
                  jw.WriteRaw(", ""EXTFILENAME"": ")
              else
                  jw.WriteRaw("""EXTFILENAME"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENAME)
            end if
            if _IsSetSTATUS then
              if f then
                  jw.WriteRaw(", ""STATUS"": ")
              else
                  jw.WriteRaw("""STATUS"": ")
                  f = true
              end if
              jw.WriteValue(me.STATUS)
            end if
            if _IsSetSUP then
              if f then
                  jw.WriteRaw(", ""SUP"": ")
              else
                  jw.WriteRaw("""SUP"": ")
                  f = true
              end if
              jw.WriteValue(me.SUP)
            end if
            if _IsSetEXTFILENUM then
              if f then
                  jw.WriteRaw(", ""EXTFILENUM"": ")
              else
                  jw.WriteRaw("""EXTFILENUM"": ")
                  f = true
              end if
              jw.WriteValue(me.EXTFILENUM)
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              jw.WriteRaw(", EXTFILELINKS_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _EXTFILELINKS_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "SUPNOTEEXTFILE")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetEXTFILEDES then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILEDES")
              .WriteAttributeString("value", me.EXTFILEDES)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetCURDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "CURDATE")
              .WriteAttributeString("value", me.CURDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetEXTFILENAME then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENAME")
              .WriteAttributeString("value", me.EXTFILENAME)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "80")
              .WriteEndElement
            end if
            if _IsSetSTATUS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "STATUS")
              .WriteAttributeString("value", me.STATUS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "1")
              .WriteEndElement
            end if
            if _IsSetSUP then
              .WriteStartElement("field")
              .WriteAttributeString("name", "SUP")
              .WriteAttributeString("value", me.SUP)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetEXTFILENUM then
              .WriteStartElement("field")
              .WriteAttributeString("name", "EXTFILENUM")
              .WriteAttributeString("value", me.EXTFILENUM)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _EXTFILELINKS_SUBFORM.value.count > 0 then
              for each itm as EXTFILELINKS in _EXTFILELINKS_SUBFORM.Value
                itm.toXML(xw,"EXTFILELINKS_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as SUPNOTEEXTFILE = JsonConvert.DeserializeObject(Of SUPNOTEEXTFILE)(e.StreamReader.ReadToEnd)
                With obj
                  _EXTFILEDES = .EXTFILEDES
                  _CURDATE = .CURDATE
                  _EXTFILENAME = .EXTFILENAME
                  _STATUS = .STATUS
                  _SUFFIX = .SUFFIX
                  _FILESIZE = .FILESIZE
                  _USERLOGIN = .USERLOGIN
                  _UDATE = .UDATE
                  _LUSERLOGIN = .LUSERLOGIN
                  _SUP = .SUP
                  _EXTFILENUM = .EXTFILENUM
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_SUPNOTEEXTFILE
        
        EXTFILELINKS = 0
    End Enum
    
    <QueryTitle("Links to File")>  _
    Public Class QUERY_EXTFILELINKS
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of EXTFILELINKS)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = nothing
            _Name = "EXTFILELINKS"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of EXTFILELINKS)
            _Parent = Parent
            _name = "EXTFILELINKS_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of EXTFILELINKS)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(EXTFILELINKS)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _EXTFILELINKS As EXTFILELINKS In JsonConvert.DeserializeObject(Of QUERY_EXTFILELINKS)(stream.ReadToEnd).Value
              With _EXTFILELINKS
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_EXTFILELINKS)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, EXTFILELINKS)
                  .DOCDES = obj.DOCDES
                  .TODOREF = obj.TODOREF
                  .EXTFILENUM = obj.EXTFILENUM
                  .EXPLORERPATH = obj.EXPLORERPATH
                  .KLINE = obj.KLINE
                  .USER = obj.USER
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new EXTFILELINKS(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _EXTFILELINKS as EXTFILELINKS in value
              If _EXTFILELINKS.Equals(trycast(obj,EXTFILELINKS)) Then
                  value.remove(_EXTFILELINKS)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class EXTFILELINKS
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _DOCDES As String
        
        Private _TODOREF As String
        
        Private _EXTFILENUM As Long
        
        Private _EXPLORERPATH As String
        
        Private _IsSetKLINE As Boolean = Boolean.FalseString
        
        Private _KLINE As Long
        
        Private _IsSetUSER As Boolean = Boolean.FalseString
        
        Private _USER As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "EXTFILELINKS"
                else
                    return "EXTFILELINKS_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "KLINE={0},USER={1}", _
                  string.format("{0}",KLINE), _
                  string.format("{0}",USER) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Document Type"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("DOCDES")>  _
        Public Property DOCDES() As String
            Get
                return _DOCDES
            End Get
            Set
                if not(value is nothing) then
                  _DOCDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Document Number"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("TODOREF")>  _
        Public Property TODOREF() As String
            Get
                return _TODOREF
            End Get
            Set
                if not(value is nothing) then
                  _TODOREF = Value
                end if
            End Set
        End Property
        
        <DisplayName("Attachment Number"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(30),  _
         [ReadOnly](true),  _
         twodBarcode("EXTFILENUM")>  _
        Public Property EXTFILENUM() As nullable (of int64)
            Get
                return _EXTFILENUM
            End Get
            Set
                if not(value is nothing) then
                  _EXTFILENUM = Value
                end if
            End Set
        End Property
        
        <DisplayName("Loc in File Explorer"),  _
         nType("Edm.String"),  _
         tab("Document Type"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("EXPLORERPATH")>  _
        Public Property EXPLORERPATH() As String
            Get
                return _EXPLORERPATH
            End Get
            Set
                if not(value is nothing) then
                  _EXPLORERPATH = Value
                end if
            End Set
        End Property
        
        <DisplayName("Key Line"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("KLINE")>  _
        Public Property KLINE() As nullable (of int64)
            Get
                return _KLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Key Line", value, "^[0-9\-]+$") then Exit Property
                _IsSetKLINE = True
                If loading Then
                  _KLINE = Value
                Else
                    if not _KLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("KLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _KLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("User (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Document Type"),  _
         Pos(99),  _
         Browsable(false),  _
         twodBarcode("USER")>  _
        Public Property USER() As nullable (of int64)
            Get
                return _USER
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("User (ID)", value, "^[0-9\-]+$") then Exit Property
                _IsSetUSER = True
                If loading Then
                  _USER = Value
                Else
                    if not _USER = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("USER", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _USER = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetKLINE then
              if f then
                  jw.WriteRaw(", ""KLINE"": ")
              else
                  jw.WriteRaw("""KLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.KLINE)
            end if
            if _IsSetUSER then
              if f then
                  jw.WriteRaw(", ""USER"": ")
              else
                  jw.WriteRaw("""USER"": ")
                  f = true
              end if
              jw.WriteValue(me.USER)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "EXTFILELINKS")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
              .WriteStartElement("key")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetKLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "KLINE")
              .WriteAttributeString("value", me.KLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetUSER then
              .WriteStartElement("field")
              .WriteAttributeString("name", "USER")
              .WriteAttributeString("value", me.USER)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as EXTFILELINKS = JsonConvert.DeserializeObject(Of EXTFILELINKS)(e.StreamReader.ReadToEnd)
                With obj
                  _DOCDES = .DOCDES
                  _TODOREF = .TODOREF
                  _EXTFILENUM = .EXTFILENUM
                  _EXPLORERPATH = .EXPLORERPATH
                  _KLINE = .KLINE
                  _USER = .USER
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Electronic Signature")>  _
    Public Class QUERY_CUSTNOTESIGN
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of CUSTNOTESIGN)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = nothing
            _Name = "CUSTNOTESIGN"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of CUSTNOTESIGN)
            _Parent = Parent
            _name = "CUSTNOTESIGN_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of CUSTNOTESIGN)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(CUSTNOTESIGN)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _CUSTNOTESIGN As CUSTNOTESIGN In JsonConvert.DeserializeObject(Of QUERY_CUSTNOTESIGN)(stream.ReadToEnd).Value
              With _CUSTNOTESIGN
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_CUSTNOTESIGN)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, CUSTNOTESIGN)
                  .UDATE = obj.UDATE
                  .USERLOGIN = obj.USERLOGIN
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new CUSTNOTESIGN(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _CUSTNOTESIGN as CUSTNOTESIGN in value
              If _CUSTNOTESIGN.Equals(trycast(obj,CUSTNOTESIGN)) Then
                  value.remove(_CUSTNOTESIGN)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class CUSTNOTESIGN
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _USERLOGIN As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "CUSTNOTESIGN"
                else
                    return "CUSTNOTESIGN_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "" _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(0),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "CUSTNOTESIGN")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as CUSTNOTESIGN = JsonConvert.DeserializeObject(Of CUSTNOTESIGN)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _USERLOGIN = .USERLOGIN
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("To Do Item")>  _
    Public Class QUERY_DOCTODOLIST
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLIST)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = nothing
            _Name = "DOCTODOLIST"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLIST)
            _Parent = Parent
            _name = "DOCTODOLIST_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLIST)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLIST)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLIST As DOCTODOLIST In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLIST)(stream.ReadToEnd).Value
              With _DOCTODOLIST
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLIST)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLIST)
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .PRIO = obj.PRIO
                  .DETAILS = obj.DETAILS
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .TODOLIST = obj.TODOLIST
                  .FOLLOWUPDETAILS = obj.FOLLOWUPDETAILS
                  .FOLLOWUPPRIO = obj.FOLLOWUPPRIO
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLIST(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLIST as DOCTODOLIST in value
              If _DOCTODOLIST.Equals(trycast(obj,DOCTODOLIST)) Then
                  value.remove(_DOCTODOLIST)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLIST
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _OWNERLOGIN As String
        
        Private _IsSetINITIATORLOGIN As Boolean = Boolean.FalseString
        
        Private _INITIATORLOGIN As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _IsSetFROMDATE As Boolean = Boolean.FalseString
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _IsSetTODATE As Boolean = Boolean.FalseString
        
        Private _TODATE As System.DateTimeOffset
        
        Private _TODOLIST As Long
        
        Private _IsSetFOLLOWUPDETAILS As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPDETAILS As String
        
        Private _IsSetFOLLOWUPPRIO As Boolean = Boolean.FalseString
        
        Private _FOLLOWUPPRIO As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLIST"
                else
                    return "DOCTODOLIST_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(20),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Opened by", value, "^.{0,20}$") then Exit Property
                _IsSetINITIATORLOGIN = True
                If loading Then
                  _INITIATORLOGIN = Value
                Else
                    if not _INITIATORLOGIN = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("INITIATORLOGIN", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _INITIATORLOGIN = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(90),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Assigned to"),  _
         Pos(130),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(140),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Start Date", value, "^.*$") then Exit Property
                _IsSetFROMDATE = True
                If loading Then
                  _FROMDATE = Value
                Else
                    if not _FROMDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FROMDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FROMDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Assigned to"),  _
         Pos(150),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Complete by", value, "^.*$") then Exit Property
                _IsSetTODATE = True
                If loading Then
                  _TODATE = Value
                Else
                    if not _TODATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TODATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TODATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Assigned to"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Details"),  _
         nType("Edm.String"),  _
         tab("Tracking Details"),  _
         Pos(170),  _
         twodBarcode("FOLLOWUPDETAILS")>  _
        Public Property FOLLOWUPDETAILS() As String
            Get
                return _FOLLOWUPDETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Details", value, "^.{0,56}$") then Exit Property
                _IsSetFOLLOWUPDETAILS = True
                If loading Then
                  _FOLLOWUPDETAILS = Value
                Else
                    if not _FOLLOWUPDETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPDETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPDETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Tracking Priority"),  _
         nType("Edm.Int64"),  _
         tab("Tracking Details"),  _
         Pos(180),  _
         twodBarcode("FOLLOWUPPRIO")>  _
        Public Property FOLLOWUPPRIO() As nullable (of int64)
            Get
                return _FOLLOWUPPRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Tracking Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetFOLLOWUPPRIO = True
                If loading Then
                  _FOLLOWUPPRIO = Value
                Else
                    if not _FOLLOWUPPRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("FOLLOWUPPRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _FOLLOWUPPRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetINITIATORLOGIN then
              if f then
                  jw.WriteRaw(", ""INITIATORLOGIN"": ")
              else
                  jw.WriteRaw("""INITIATORLOGIN"": ")
                  f = true
              end if
              jw.WriteValue(me.INITIATORLOGIN)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _IsSetFROMDATE then
              if f then
                  jw.WriteRaw(", ""FROMDATE"": ")
              else
                  jw.WriteRaw("""FROMDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.FROMDATE)
            end if
            if _IsSetTODATE then
              if f then
                  jw.WriteRaw(", ""TODATE"": ")
              else
                  jw.WriteRaw("""TODATE"": ")
                  f = true
              end if
              jw.WriteValue(me.TODATE)
            end if
            if _IsSetFOLLOWUPDETAILS then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPDETAILS"": ")
              else
                  jw.WriteRaw("""FOLLOWUPDETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPDETAILS)
            end if
            if _IsSetFOLLOWUPPRIO then
              if f then
                  jw.WriteRaw(", ""FOLLOWUPPRIO"": ")
              else
                  jw.WriteRaw("""FOLLOWUPPRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.FOLLOWUPPRIO)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLIST")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetINITIATORLOGIN then
              .WriteStartElement("field")
              .WriteAttributeString("name", "INITIATORLOGIN")
              .WriteAttributeString("value", me.INITIATORLOGIN)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "20")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetFROMDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FROMDATE")
              .WriteAttributeString("value", me.FROMDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetTODATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TODATE")
              .WriteAttributeString("value", me.TODATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPDETAILS")
              .WriteAttributeString("value", me.FOLLOWUPDETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetFOLLOWUPPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "FOLLOWUPPRIO")
              .WriteAttributeString("value", me.FOLLOWUPPRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLIST = JsonConvert.DeserializeObject(Of DOCTODOLIST)(e.StreamReader.ReadToEnd)
                With obj
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _PRIO = .PRIO
                  _DETAILS = .DETAILS
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _TODOLIST = .TODOLIST
                  _FOLLOWUPDETAILS = .FOLLOWUPDETAILS
                  _FOLLOWUPPRIO = .FOLLOWUPPRIO
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Statuses")>  _
    Public Class QUERY_DOCTODOLISTLOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = nothing
            _Name = "DOCTODOLISTLOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOG)
            _Parent = Parent
            _name = "DOCTODOLISTLOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            .add(0, "To Do List - Remarks")
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOG As DOCTODOLISTLOG In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOG)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOG)
                  .UDATE = obj.UDATE
                  .STATDES = obj.STATDES
                  .OWNERLOGIN = obj.OWNERLOGIN
                  .INITIATORLOGIN = obj.INITIATORLOGIN
                  .USERLOGIN = obj.USERLOGIN
                  .DETAILS = obj.DETAILS
                  .PRIO = obj.PRIO
                  .PLANNEDHOURS = obj.PLANNEDHOURS
                  .FROMDATE = obj.FROMDATE
                  .TODATE = obj.TODATE
                  .ACTIVE = obj.ACTIVE
                  .TODOLIST = obj.TODOLIST
                  .DURATION = obj.DURATION
                  .DURATIONDAYS = obj.DURATIONDAYS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOG as DOCTODOLISTLOG in value
              If _DOCTODOLISTLOG.Equals(trycast(obj,DOCTODOLISTLOG)) Then
                  value.remove(_DOCTODOLISTLOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _UDATE As System.DateTimeOffset
        
        Private _STATDES As String
        
        Private _OWNERLOGIN As String
        
        Private _INITIATORLOGIN As String
        
        Private _USERLOGIN As String
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Private _IsSetPRIO As Boolean = Boolean.FalseString
        
        Private _PRIO As Long
        
        Private _IsSetPLANNEDHOURS As Boolean = Boolean.FalseString
        
        Private _PLANNEDHOURS As Long
        
        Private _FROMDATE As System.DateTimeOffset
        
        Private _TODATE As System.DateTimeOffset
        
        Private _ACTIVE As String
        
        Private _TODOLIST As Long
        
        Private _DURATION As String
        
        Private _DURATIONDAYS As Decimal
        
        Private _DOCTODOLISTLOGTEXT_SUBFORM As QUERY_DOCTODOLISTLOGTEXT
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Public Sub New()
            MyBase.New
            ChildQuery.add(0, new oNavigation("To Do List - Remarks"))
            _DOCTODOLISTLOGTEXT_SUBFORM = new QUERY_DOCTODOLISTLOGTEXT(me)
            WITH ChildQuery(0)
               .setoDataQuery(_DOCTODOLISTLOGTEXT_SUBFORM)
               WITH .oDataQuery.SibligQuery
                   .add(0, new oNavigation("To Do List - Remarks", _DOCTODOLISTLOGTEXT_SUBFORM))
               end with
            end with
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOG"
                else
                    return "DOCTODOLISTLOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TODOLIST={0}", _
                  string.format("{0}",TODOLIST) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Time Stamp"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Time Stamp"),  _
         Pos(5),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("STATDES")>  _
        Public Property STATDES() As String
            Get
                return _STATDES
            End Get
            Set
                if not(value is nothing) then
                  _STATDES = Value
                end if
            End Set
        End Property
        
        <DisplayName("Assigned to"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("OWNERLOGIN")>  _
        Public Property OWNERLOGIN() As String
            Get
                return _OWNERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _OWNERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Opened by"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(20),  _
         [ReadOnly](true),  _
         twodBarcode("INITIATORLOGIN")>  _
        Public Property INITIATORLOGIN() As String
            Get
                return _INITIATORLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _INITIATORLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(25),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Time Stamp"),  _
         Pos(90),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,56}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Priority"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(130),  _
         twodBarcode("PRIO")>  _
        Public Property PRIO() As nullable (of int64)
            Get
                return _PRIO
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Priority", value, "^[0-9\-]+$") then Exit Property
                _IsSetPRIO = True
                If loading Then
                  _PRIO = Value
                Else
                    if not _PRIO = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PRIO", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PRIO = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Planned Hours"),  _
         nType("Edm.Int64"),  _
         tab("Time Stamp"),  _
         Pos(135),  _
         twodBarcode("PLANNEDHOURS")>  _
        Public Property PLANNEDHOURS() As nullable (of int64)
            Get
                return _PLANNEDHOURS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Planned Hours", value, "^[0-9\-]+$") then Exit Property
                _IsSetPLANNEDHOURS = True
                If loading Then
                  _PLANNEDHOURS = Value
                Else
                    if not _PLANNEDHOURS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PLANNEDHOURS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PLANNEDHOURS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Start Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(140),  _
         [ReadOnly](true),  _
         twodBarcode("FROMDATE")>  _
        Public Property FROMDATE() As nullable (of DateTimeOffset)
            Get
                return _FROMDATE
            End Get
            Set
                if not(value is nothing) then
                  _FROMDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Complete by"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Start Date"),  _
         Pos(150),  _
         [ReadOnly](true),  _
         twodBarcode("TODATE")>  _
        Public Property TODATE() As nullable (of DateTimeOffset)
            Get
                return _TODATE
            End Get
            Set
                if not(value is nothing) then
                  _TODATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("In Use"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(160),  _
         [ReadOnly](true),  _
         twodBarcode("ACTIVE")>  _
        Public Property ACTIVE() As String
            Get
                return _ACTIVE
            End Get
            Set
                if not(value is nothing) then
                  _ACTIVE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Item Number"),  _
         nType("Edm.Int64"),  _
         tab("Start Date"),  _
         Pos(170),  _
         [ReadOnly](true),  _
         twodBarcode("TODOLIST")>  _
        Public Property TODOLIST() As nullable (of int64)
            Get
                return _TODOLIST
            End Get
            Set
                if not(value is nothing) then
                  _TODOLIST = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Hrs"),  _
         nType("Edm.String"),  _
         tab("Start Date"),  _
         Pos(180),  _
         [ReadOnly](true),  _
         twodBarcode("DURATION")>  _
        Public Property DURATION() As String
            Get
                return _DURATION
            End Get
            Set
                if not(value is nothing) then
                  _DURATION = Value
                end if
            End Set
        End Property
        
        <DisplayName("Status Duration-Days"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Start Date"),  _
         Pos(200),  _
         [ReadOnly](true),  _
         twodBarcode("DURATIONDAYS")>  _
        Public Property DURATIONDAYS() As nullable(of decimal)
            Get
                return _DURATIONDAYS
            End Get
            Set
                if not(value is nothing) then
                  _DURATIONDAYS = Value
                end if
            End Set
        End Property
        
        <JsonIgnore(),  _
         Browsable(false)>  _
        Public Property DOCTODOLISTLOGTEXT_SUBFORM() As QUERY_DOCTODOLISTLOGTEXT
            Get
                return _DOCTODOLISTLOGTEXT_SUBFORM
            End Get
            Set
                _DOCTODOLISTLOGTEXT_SUBFORM = value
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
            if _IsSetPRIO then
              if f then
                  jw.WriteRaw(", ""PRIO"": ")
              else
                  jw.WriteRaw("""PRIO"": ")
                  f = true
              end if
              jw.WriteValue(me.PRIO)
            end if
            if _IsSetPLANNEDHOURS then
              if f then
                  jw.WriteRaw(", ""PLANNEDHOURS"": ")
              else
                  jw.WriteRaw("""PLANNEDHOURS"": ")
                  f = true
              end if
              jw.WriteValue(me.PLANNEDHOURS)
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              jw.WriteRaw(", DOCTODOLISTLOGTEXT_SUBFORM: ")
              jw.WriteRaw("[ ")
              dim i as integer = 0
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.value
                jw.WriteRaw("{ ")
                itm.tojson(jw)
                jw.WriteRaw(" }")
                if i < _DOCTODOLISTLOGTEXT_SUBFORM.value.count - 1 then jw.WriteRaw(", ")
                i += 1
                next
              jw.WriteRaw(" ]")
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TODOLIST")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "56")
              .WriteEndElement
            end if
            if _IsSetPRIO then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PRIO")
              .WriteAttributeString("value", me.PRIO)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _IsSetPLANNEDHOURS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PLANNEDHOURS")
              .WriteAttributeString("value", me.PLANNEDHOURS)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
            if _DOCTODOLISTLOGTEXT_SUBFORM.value.count > 0 then
              for each itm as DOCTODOLISTLOGTEXT in _DOCTODOLISTLOGTEXT_SUBFORM.Value
                itm.toXML(xw,"DOCTODOLISTLOGTEXT_SUBFORM")
              next
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOG = JsonConvert.DeserializeObject(Of DOCTODOLISTLOG)(e.StreamReader.ReadToEnd)
                With obj
                  _UDATE = .UDATE
                  _STATDES = .STATDES
                  _OWNERLOGIN = .OWNERLOGIN
                  _INITIATORLOGIN = .INITIATORLOGIN
                  _USERLOGIN = .USERLOGIN
                  _DETAILS = .DETAILS
                  _PRIO = .PRIO
                  _PLANNEDHOURS = .PLANNEDHOURS
                  _FROMDATE = .FROMDATE
                  _TODATE = .TODATE
                  _ACTIVE = .ACTIVE
                  _TODOLIST = .TODOLIST
                  _DURATION = .DURATION
                  _DURATIONDAYS = .DURATIONDAYS
                end with
            End If
        End Sub
    End Class
    
    Public Enum Subform_DOCTODOLISTLOG
        
        DOCTODOLISTLOGTEXT = 0
    End Enum
    
    <QueryTitle("To Do List - Remarks")>  _
    Public Class QUERY_DOCTODOLISTLOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of DOCTODOLISTLOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = nothing
            _Name = "DOCTODOLISTLOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of DOCTODOLISTLOGTEXT)
            _Parent = Parent
            _name = "DOCTODOLISTLOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of DOCTODOLISTLOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(DOCTODOLISTLOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _DOCTODOLISTLOGTEXT As DOCTODOLISTLOGTEXT In JsonConvert.DeserializeObject(Of QUERY_DOCTODOLISTLOGTEXT)(stream.ReadToEnd).Value
              With _DOCTODOLISTLOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_DOCTODOLISTLOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, DOCTODOLISTLOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new DOCTODOLISTLOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _DOCTODOLISTLOGTEXT as DOCTODOLISTLOGTEXT in value
              If _DOCTODOLISTLOGTEXT.Equals(trycast(obj,DOCTODOLISTLOGTEXT)) Then
                  value.remove(_DOCTODOLISTLOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class DOCTODOLISTLOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "DOCTODOLISTLOGTEXT"
                else
                    return "DOCTODOLISTLOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Remarks"),  _
         nType("Edm.String"),  _
         tab("Remarks"),  _
         Pos(2),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Remarks", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Remarks"),  _
         Pos(3),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "DOCTODOLISTLOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as DOCTODOLISTLOGTEXT = JsonConvert.DeserializeObject(Of DOCTODOLISTLOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("History of Changes")>  _
    Public Class QUERY_PORD_CHANGES_LOG
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORD_CHANGES_LOG)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORD_CHANGES_LOG)
            _Parent = nothing
            _Name = "PORD_CHANGES_LOG"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORD_CHANGES_LOG)
            _Parent = Parent
            _name = "PORD_CHANGES_LOG_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORD_CHANGES_LOG)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORD_CHANGES_LOG)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORD_CHANGES_LOG As PORD_CHANGES_LOG In JsonConvert.DeserializeObject(Of QUERY_PORD_CHANGES_LOG)(stream.ReadToEnd).Value
              With _PORD_CHANGES_LOG
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORD_CHANGES_LOG)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORD_CHANGES_LOG = JsonConvert.DeserializeObject(Of PORD_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORD_CHANGES_LOG)
                  .TITLE = obj.TITLE
                  .LINE = obj.LINE
                  .DETAILS = obj.DETAILS
                  .FIELD = obj.FIELD
                  .OLDVALUE = obj.OLDVALUE
                  .NEWVALUE = obj.NEWVALUE
                  .USERLOGIN = obj.USERLOGIN
                  .PHONENAME = obj.PHONENAME
                  .UDATE = obj.UDATE
                  .LOG = obj.LOG
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORD_CHANGES_LOG(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORD_CHANGES_LOG as PORD_CHANGES_LOG in value
              If _PORD_CHANGES_LOG.Equals(trycast(obj,PORD_CHANGES_LOG)) Then
                  value.remove(_PORD_CHANGES_LOG)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORD_CHANGES_LOG
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _TITLE As String
        
        Private _IsSetLINE As Boolean = Boolean.FalseString
        
        Private _LINE As Long
        
        Private _DETAILS As String
        
        Private _FIELD As String
        
        Private _OLDVALUE As String
        
        Private _NEWVALUE As String
        
        Private _USERLOGIN As String
        
        Private _PHONENAME As String
        
        Private _UDATE As System.DateTimeOffset
        
        Private _LOG As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORD_CHANGES_LOG"
                else
                    return "PORD_CHANGES_LOG_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "LOG={0}", _
                  string.format("{0}",LOG) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Form"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(3),  _
         [ReadOnly](true),  _
         twodBarcode("TITLE")>  _
        Public Property TITLE() As String
            Get
                return _TITLE
            End Get
            Set
                if not(value is nothing) then
                  _TITLE = Value
                end if
            End Set
        End Property
        
        <DisplayName("LINE"),  _
         nType("Edm.Int64"),  _
         tab("Form"),  _
         Pos(0),  _
         twodBarcode("LINE")>  _
        Public Property LINE() As nullable (of int64)
            Get
                return _LINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("LINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetLINE = True
                If loading Then
                  _LINE = Value
                Else
                    if not _LINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("LINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _LINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(7),  _
         [ReadOnly](true),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if not(value is nothing) then
                  _DETAILS = Value
                end if
            End Set
        End Property
        
        <DisplayName("Column"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(10),  _
         [ReadOnly](true),  _
         twodBarcode("FIELD")>  _
        Public Property FIELD() As String
            Get
                return _FIELD
            End Get
            Set
                if not(value is nothing) then
                  _FIELD = Value
                end if
            End Set
        End Property
        
        <DisplayName("Previous Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(50),  _
         [ReadOnly](true),  _
         twodBarcode("OLDVALUE")>  _
        Public Property OLDVALUE() As String
            Get
                return _OLDVALUE
            End Get
            Set
                if not(value is nothing) then
                  _OLDVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Current Value"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(60),  _
         [ReadOnly](true),  _
         twodBarcode("NEWVALUE")>  _
        Public Property NEWVALUE() As String
            Get
                return _NEWVALUE
            End Get
            Set
                if not(value is nothing) then
                  _NEWVALUE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Signature"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(90),  _
         [ReadOnly](true),  _
         twodBarcode("USERLOGIN")>  _
        Public Property USERLOGIN() As String
            Get
                return _USERLOGIN
            End Get
            Set
                if not(value is nothing) then
                  _USERLOGIN = Value
                end if
            End Set
        End Property
        
        <DisplayName("Contact"),  _
         nType("Edm.String"),  _
         tab("Form"),  _
         Pos(95),  _
         [ReadOnly](true),  _
         twodBarcode("PHONENAME")>  _
        Public Property PHONENAME() As String
            Get
                return _PHONENAME
            End Get
            Set
                if not(value is nothing) then
                  _PHONENAME = Value
                end if
            End Set
        End Property
        
        <DisplayName("Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Date"),  _
         Pos(100),  _
         [ReadOnly](true),  _
         twodBarcode("UDATE")>  _
        Public Property UDATE() As nullable (of DateTimeOffset)
            Get
                return _UDATE
            End Get
            Set
                if not(value is nothing) then
                  _UDATE = Value
                end if
            End Set
        End Property
        
        <DisplayName("Log (ID)"),  _
         nType("Edm.Int64"),  _
         tab("Date"),  _
         Pos(99),  _
         [ReadOnly](true),  _
         Browsable(false),  _
         twodBarcode("LOG")>  _
        Public Property LOG() As nullable (of int64)
            Get
                return _LOG
            End Get
            Set
                if not(value is nothing) then
                  _LOG = Value
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetLINE then
              if f then
                  jw.WriteRaw(", ""LINE"": ")
              else
                  jw.WriteRaw("""LINE"": ")
                  f = true
              end if
              jw.WriteValue(me.LINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORD_CHANGES_LOG")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "LOG")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "LINE")
              .WriteAttributeString("value", me.LINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORD_CHANGES_LOG = JsonConvert.DeserializeObject(Of PORD_CHANGES_LOG)(e.StreamReader.ReadToEnd)
                With obj
                  _TITLE = .TITLE
                  _LINE = .LINE
                  _DETAILS = .DETAILS
                  _FIELD = .FIELD
                  _OLDVALUE = .OLDVALUE
                  _NEWVALUE = .NEWVALUE
                  _USERLOGIN = .USERLOGIN
                  _PHONENAME = .PHONENAME
                  _UDATE = .UDATE
                  _LOG = .LOG
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Payment Terms for Order")>  _
    Public Class QUERY_PORDPAY
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of PORDPAY)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of PORDPAY)
            _Parent = nothing
            _Name = "PORDPAY"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of PORDPAY)
            _Parent = Parent
            _name = "PORDPAY_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of PORDPAY)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(PORDPAY)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _PORDPAY As PORDPAY In JsonConvert.DeserializeObject(Of QUERY_PORDPAY)(stream.ReadToEnd).Value
              With _PORDPAY
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_PORDPAY)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPAY = JsonConvert.DeserializeObject(Of PORDPAY)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, PORDPAY)
                  .PAYDATE = obj.PAYDATE
                  .PERCENT = obj.PERCENT
                  .TOTPRICE = obj.TOTPRICE
                  .TOTAL = obj.TOTAL
                  .CODE = obj.CODE
                  .PERCENT2 = obj.PERCENT2
                  .DETAILS = obj.DETAILS
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new PORDPAY(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _PORDPAY as PORDPAY in value
              If _PORDPAY.Equals(trycast(obj,PORDPAY)) Then
                  value.remove(_PORDPAY)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class PORDPAY
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetPAYDATE As Boolean = Boolean.FalseString
        
        Private _PAYDATE As System.DateTimeOffset
        
        Private _IsSetPERCENT As Boolean = Boolean.FalseString
        
        Private _PERCENT As Decimal
        
        Private _IsSetTOTPRICE As Boolean = Boolean.FalseString
        
        Private _TOTPRICE As Decimal
        
        Private _IsSetTOTAL As Boolean = Boolean.FalseString
        
        Private _TOTAL As Decimal
        
        Private _CODE As String
        
        Private _IsSetPERCENT2 As Boolean = Boolean.FalseString
        
        Private _PERCENT2 As Decimal
        
        Private _IsSetDETAILS As Boolean = Boolean.FalseString
        
        Private _DETAILS As String
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "PORDPAY"
                else
                    return "PORDPAY_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "PAYDATE={0}", _
                  string.format("{0}",PAYDATE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Payment Date"),  _
         nType("Edm.DateTimeOffset"),  _
         tab("Payment Date"),  _
         Pos(20),  _
         Mandatory(true),  _
         twodBarcode("PAYDATE")>  _
        Public Property PAYDATE() As nullable (of DateTimeOffset)
            Get
                return _PAYDATE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Date", value, "^.*$") then Exit Property
                _IsSetPAYDATE = True
                If loading Then
                  _PAYDATE = Value
                Else
                    if not _PAYDATE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PAYDATE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PAYDATE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("% of Pre-tax Total"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Payment Date"),  _
         Pos(25),  _
         twodBarcode("PERCENT")>  _
        Public Property PERCENT() As nullable(of decimal)
            Get
                return _PERCENT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% of Pre-tax Total", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT = True
                If loading Then
                  _PERCENT = Value
                Else
                    if not _PERCENT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Payment Amount"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(30),  _
         Mandatory(true),  _
         twodBarcode("TOTPRICE")>  _
        Public Property TOTPRICE() As nullable(of decimal)
            Get
                return _TOTPRICE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Payment Amount", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTPRICE = True
                If loading Then
                  _TOTPRICE = Value
                Else
                    if not _TOTPRICE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTPRICE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTPRICE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Cumulative Sum"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(16),  _
         tab("Payment Date"),  _
         Pos(35),  _
         twodBarcode("TOTAL")>  _
        Public Property TOTAL() As nullable(of decimal)
            Get
                return _TOTAL
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Cumulative Sum", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetTOTAL = True
                If loading Then
                  _TOTAL = Value
                Else
                    if not _TOTAL = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TOTAL", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TOTAL = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Curr"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(40),  _
         [ReadOnly](true),  _
         twodBarcode("CODE")>  _
        Public Property CODE() As String
            Get
                return _CODE
            End Get
            Set
                if not(value is nothing) then
                  _CODE = Value
                end if
            End Set
        End Property
        
        <DisplayName("% of Total"),  _
         nType("Edm.Decimal"),  _
         Scale(2),  _
         Precision(6),  _
         tab("Payment Date"),  _
         Pos(50),  _
         twodBarcode("PERCENT2")>  _
        Public Property PERCENT2() As nullable(of decimal)
            Get
                return _PERCENT2
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("% of Total", value, "^[0-9\.\-]+$") then Exit Property
                _IsSetPERCENT2 = True
                If loading Then
                  _PERCENT2 = Value
                Else
                    if not _PERCENT2 = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("PERCENT2", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _PERCENT2 = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("Details"),  _
         nType("Edm.String"),  _
         tab("Payment Date"),  _
         Pos(60),  _
         twodBarcode("DETAILS")>  _
        Public Property DETAILS() As String
            Get
                return _DETAILS
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Details", value, "^.{0,24}$") then Exit Property
                _IsSetDETAILS = True
                If loading Then
                  _DETAILS = Value
                Else
                    if not _DETAILS = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("DETAILS", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _DETAILS = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetPAYDATE then
              if f then
                  jw.WriteRaw(", ""PAYDATE"": ")
              else
                  jw.WriteRaw("""PAYDATE"": ")
                  f = true
              end if
              jw.WriteValue(me.PAYDATE)
            end if
            if _IsSetPERCENT then
              if f then
                  jw.WriteRaw(", ""PERCENT"": ")
              else
                  jw.WriteRaw("""PERCENT"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT)
            end if
            if _IsSetTOTPRICE then
              if f then
                  jw.WriteRaw(", ""TOTPRICE"": ")
              else
                  jw.WriteRaw("""TOTPRICE"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTPRICE)
            end if
            if _IsSetTOTAL then
              if f then
                  jw.WriteRaw(", ""TOTAL"": ")
              else
                  jw.WriteRaw("""TOTAL"": ")
                  f = true
              end if
              jw.WriteValue(me.TOTAL)
            end if
            if _IsSetPERCENT2 then
              if f then
                  jw.WriteRaw(", ""PERCENT2"": ")
              else
                  jw.WriteRaw("""PERCENT2"": ")
                  f = true
              end if
              jw.WriteValue(me.PERCENT2)
            end if
            if _IsSetDETAILS then
              if f then
                  jw.WriteRaw(", ""DETAILS"": ")
              else
                  jw.WriteRaw("""DETAILS"": ")
                  f = true
              end if
              jw.WriteValue(me.DETAILS)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "PORDPAY")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "PAYDATE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            if _IsSetPAYDATE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PAYDATE")
              .WriteAttributeString("value", me.PAYDATE)
              .WriteAttributeString("type", "Edm.DateTimeOffset")
              .WriteEndElement
            end if
            if _IsSetPERCENT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT")
              .WriteAttributeString("value", me.PERCENT)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetTOTPRICE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTPRICE")
              .WriteAttributeString("value", me.TOTPRICE)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetTOTAL then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TOTAL")
              .WriteAttributeString("value", me.TOTAL)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "16")
              .WriteEndElement
            end if
            if _IsSetPERCENT2 then
              .WriteStartElement("field")
              .WriteAttributeString("name", "PERCENT2")
              .WriteAttributeString("value", me.PERCENT2)
              .WriteAttributeString("type", "Edm.Decimal")
              .WriteAttributeString("Scale", "2")
              .WriteAttributeString("Precision", "6")
              .WriteEndElement
            end if
            if _IsSetDETAILS then
              .WriteStartElement("field")
              .WriteAttributeString("name", "DETAILS")
              .WriteAttributeString("value", me.DETAILS)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "24")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as PORDPAY = JsonConvert.DeserializeObject(Of PORDPAY)(e.StreamReader.ReadToEnd)
                With obj
                  _PAYDATE = .PAYDATE
                  _PERCENT = .PERCENT
                  _TOTPRICE = .TOTPRICE
                  _TOTAL = .TOTAL
                  _CODE = .CODE
                  _PERCENT2 = .PERCENT2
                  _DETAILS = .DETAILS
                end with
            End If
        End Sub
    End Class
    
    <QueryTitle("Internal Dialogue")>  _
    Public Class QUERY_INTERNALDIALOGTEXT
        Inherits oDataQuery
        
        Private _Name As String
        
        Private _Value As list(of INTERNALDIALOGTEXT)
        
        Private _Parent As oDataObject
        
        Private _BindingSource As System.Windows.Forms.BindingSource
        
        Public Sub New()
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = nothing
            _Name = "INTERNALDIALOGTEXT"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        Public Sub New(ByRef Parent As oDataObject)
            MyBase.New
            _Value = new list (of INTERNALDIALOGTEXT)
            _Parent = Parent
            _name = "INTERNALDIALOGTEXT_SUBFORM"
            _BindingSource = new BindingSource
            AddHandler _BindingSource.AddingNew, AddressOf HandlesBeginAdd
            with ChildQuery
            end with
        End Sub
        
        <JsonProperty("@odata.context")>  _
        Protected Friend Property Name() As String
            Get
                return _Name
            End Get
            Set
                _Name = value
            End Set
        End Property
        
        Public Property Value() As list(of INTERNALDIALOGTEXT)
            Get
                return _Value
            End Get
            Set
                _Value = value
            End Set
        End Property
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                return _Name
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        Public Overrides ReadOnly Property ObjectType() As System.Type
            Get
                return GetType(INTERNALDIALOGTEXT)
            End Get
        End Property
        
        Public Overrides ReadOnly Property BindingSource() As System.Windows.Forms.BindingSource
            Get
                Return _BindingSource
            End Get
        End Property
        
        Protected Friend Overrides Sub Deserialise(ByRef Stream As StreamReader)
            _value.clear
            For Each _INTERNALDIALOGTEXT As INTERNALDIALOGTEXT In JsonConvert.DeserializeObject(Of QUERY_INTERNALDIALOGTEXT)(stream.ReadToEnd).Value
              With _INTERNALDIALOGTEXT
                  .Parent = Parent
                  .loading = false
              end with
              _value.add(_INTERNALDIALOGTEXT)
            next
            _BindingSource.DataSource = _Value
        End Sub
        
        Protected Friend Overrides Sub HandlesAdd(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With TryCast(BindingSource.Current, INTERNALDIALOGTEXT)
                  .TEXT = obj.TEXT
                  .TEXTLINE = obj.TEXTLINE
                  .loading = false
                end with
            End If
        End Sub
        
        Private Sub HandlesBeginAdd(ByVal sender As Object, ByVal e As ComponentModel.AddingNewEventArgs)
            e.NewObject = new INTERNALDIALOGTEXT(me.Parent)
        End Sub
        
        Protected Friend Overrides Sub Remove(ByRef obj As oDataObject)
            for each _INTERNALDIALOGTEXT as INTERNALDIALOGTEXT in value
              If _INTERNALDIALOGTEXT.Equals(trycast(obj,INTERNALDIALOGTEXT)) Then
                  value.remove(_INTERNALDIALOGTEXT)
                  exit for
              end if
            next
        End Sub
    End Class
    
    Public Class INTERNALDIALOGTEXT
        Inherits oDataObject
        
        Private _Parent As oDataObject
        
        Private _IsSetTEXT As Boolean = Boolean.FalseString
        
        Private _TEXT As String
        
        Private _IsSetTEXTLINE As Boolean = Boolean.FalseString
        
        Private _TEXTLINE As Long
        
        Public Sub New(ByVal Parent As oDataObject)
            MyBase.New
            _parent = Parent
        End Sub
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Protected Friend Overrides ReadOnly Property EntityName() As String
            Get
                if _parent is nothing then
                    return "INTERNALDIALOGTEXT"
                else
                    return "INTERNALDIALOGTEXT_SUBFORM"
                end if
            End Get
        End Property
        
        Public Overrides ReadOnly Property KeyString() As String
            Get
                return string.format( _
                 "TEXTLINE={0}", _
                  string.format("{0}",TEXTLINE) _ 
               )
            End Get
        End Property
        
        Public Overrides Property Parent() As oDataObject
            Get
                return _Parent
            End Get
            Set
                _Parent = value
            End Set
        End Property
        
        <DisplayName("Comment"),  _
         nType("Edm.String"),  _
         tab("Comment"),  _
         Pos(30),  _
         twodBarcode("TEXT")>  _
        Public Property TEXT() As String
            Get
                return _TEXT
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("Comment", value, "^.{0,68}$") then Exit Property
                _IsSetTEXT = True
                If loading Then
                  _TEXT = Value
                Else
                    if not _TEXT = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXT", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXT = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        <DisplayName("TEXTLINE"),  _
         nType("Edm.Int64"),  _
         tab("Comment"),  _
         Pos(40),  _
         Browsable(false),  _
         twodBarcode("TEXTLINE")>  _
        Public Property TEXTLINE() As nullable (of int64)
            Get
                return _TEXTLINE
            End Get
            Set
                if value is nothing then Exit Property
                if not mybase.validate("TEXTLINE", value, "^[0-9\-]+$") then Exit Property
                _IsSetTEXTLINE = True
                If loading Then
                  _TEXTLINE = Value
                Else
                    if not _TEXTLINE = value then
                        Connection.RaiseStartData()
                        loading = true
                        Dim cn As New oDataPUT(Me, PropertyStream("TEXTLINE", Value), AddressOf HandlesEdit)
                        loading = false
                        If Connection.LastError is nothing Then
                            _TEXTLINE = Value
                        End If
                    end if
                end if
            End Set
        End Property
        
        Protected Friend Overrides Sub toJson(ByRef jw As Newtonsoft.Json.JsonTextWriter)
            Dim f as boolean = false
            if _IsSetTEXT then
              if f then
                  jw.WriteRaw(", ""TEXT"": ")
              else
                  jw.WriteRaw("""TEXT"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXT)
            end if
            if _IsSetTEXTLINE then
              if f then
                  jw.WriteRaw(", ""TEXTLINE"": ")
              else
                  jw.WriteRaw("""TEXTLINE"": ")
                  f = true
              end if
              jw.WriteValue(me.TEXTLINE)
            end if
        End Sub
        
        Protected Friend Overrides Sub toXML(ByRef xw As System.Xml.XmlWriter, ByVal name As String)
            with xw
              .WriteStartElement("form")
              if name is nothing then
                .WriteAttributeString("name", "INTERNALDIALOGTEXT")
              else
                .WriteAttributeString("name", name)
              end if
              .WriteAttributeString("result", 0)
              .WriteStartElement("key")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", "")
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            if _IsSetTEXT then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXT")
              .WriteAttributeString("value", me.TEXT)
              .WriteAttributeString("type", "Edm.String")
              .WriteAttributeString("MaxLength", "68")
              .WriteEndElement
            end if
            if _IsSetTEXTLINE then
              .WriteStartElement("field")
              .WriteAttributeString("name", "TEXTLINE")
              .WriteAttributeString("value", me.TEXTLINE)
              .WriteAttributeString("type", "Edm.Int64")
              .WriteEndElement
            end if
              .WriteEndElement
            end with
        End Sub
        
        Protected Friend Overrides Sub HandlesEdit(ByVal sender As Object, ByVal e As ResponseEventArgs)
            If Not e.WebException is nothing Then
                Connection.LastError = e.InterfaceException
            Else
                dim obj as INTERNALDIALOGTEXT = JsonConvert.DeserializeObject(Of INTERNALDIALOGTEXT)(e.StreamReader.ReadToEnd)
                With obj
                  _TEXT = .TEXT
                  _TEXTLINE = .TEXTLINE
                end with
            End If
        End Sub
    End Class
End Namespace
